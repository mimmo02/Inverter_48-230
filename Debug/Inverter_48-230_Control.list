
Inverter_48-230_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800a298  0800a298  0000b298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a0  0800a8a0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8a0  0800a8a0  0000b8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8a8  0800a8a8  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a8  0800a8a8  0000b8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8ac  0800a8ac  0000b8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a8b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014768  200001d8  0800aa84  0000c1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014940  0800aa84  0000c940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e23  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004722  00000000  00000000  00032027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001287b  00000000  00000000  00036749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  00048fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001eba  00000000  00000000  0004a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029baf  00000000  00000000  0004c3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028af8  00000000  00000000  00075f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdfde  00000000  00000000  0009ea59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019ca37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f44  00000000  00000000  0019ca7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  001a19c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a280 	.word	0x0800a280

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a280 	.word	0x0800a280

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <compute_duty_cycle>:

/*************************************************************************/
//  PRIVATE FUNCTIONS
/*************************************************************************/
// duty cycle computation based on control strategy
void compute_duty_cycle(myInverterCtrlStruct *INV, int idx, float sineAmplitude, float udc){
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 8000ff6:	4e70      	ldr	r6, [pc, #448]	@ (80011b8 <compute_duty_cycle+0x1c4>)
void compute_duty_cycle(myInverterCtrlStruct *INV, int idx, float sineAmplitude, float udc){
 8000ff8:	4604      	mov	r4, r0
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 8000ffa:	ee10 0a10 	vmov	r0, s0
void compute_duty_cycle(myInverterCtrlStruct *INV, int idx, float sineAmplitude, float udc){
 8000ffe:	ee10 5a90 	vmov	r5, s1
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 8001002:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
void compute_duty_cycle(myInverterCtrlStruct *INV, int idx, float sineAmplitude, float udc){
 8001006:	ed2d 8b02 	vpush	{d8}
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 800100a:	f7ff fabd 	bl	8000588 <__aeabi_f2d>
 800100e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001012:	f7ff fb11 	bl	8000638 <__aeabi_dmul>
 8001016:	4606      	mov	r6, r0
 8001018:	460f      	mov	r7, r1
 800101a:	4628      	mov	r0, r5
 800101c:	f7ff fab4 	bl	8000588 <__aeabi_f2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4630      	mov	r0, r6
 8001026:	4639      	mov	r1, r7
 8001028:	f7ff fc30 	bl	800088c <__aeabi_ddiv>
 800102c:	f7ff fdfc 	bl	8000c28 <__aeabi_d2f>
	if(INV->system_ctrl_strategy == SYM){								// symmetrical control strategy
 8001030:	7862      	ldrb	r2, [r4, #1]
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 8001032:	78e3      	ldrb	r3, [r4, #3]
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 8001034:	ee08 0a10 	vmov	s16, r0
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 8001038:	7921      	ldrb	r1, [r4, #4]
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 800103a:	60a0      	str	r0, [r4, #8]
	if(INV->system_ctrl_strategy == SYM){								// symmetrical control strategy
 800103c:	b9ea      	cbnz	r2, 800107a <compute_duty_cycle+0x86>
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 800103e:	2b00      	cmp	r3, #0
 8001040:	d152      	bne.n	80010e8 <compute_duty_cycle+0xf4>
			INV->d_a = 0.5 + 0.5*INV->delta_d;
			INV->d_b = 0.5 - 05*INV->delta_d;
			INV->d_c = 0.0;
		}
		else if(INV->Leg_B == false && INV->Leg_C == true){				// leg A and leg C switching
 8001042:	2900      	cmp	r1, #0
 8001044:	d041      	beq.n	80010ca <compute_duty_cycle+0xd6>
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 8001046:	f7ff fa9f 	bl	8000588 <__aeabi_f2d>
 800104a:	2200      	movs	r2, #0
 800104c:	4b5b      	ldr	r3, [pc, #364]	@ (80011bc <compute_duty_cycle+0x1c8>)
 800104e:	f7ff faf3 	bl	8000638 <__aeabi_dmul>
 8001052:	4b5a      	ldr	r3, [pc, #360]	@ (80011bc <compute_duty_cycle+0x1c8>)
 8001054:	2200      	movs	r2, #0
 8001056:	f7ff f939 	bl	80002cc <__adddf3>
 800105a:	f7ff fde5 	bl	8000c28 <__aeabi_d2f>
			INV->d_c = 0.5 - 05*INV->delta_d;
 800105e:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001062:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
			INV->d_b = 0.0;
 8001066:	2300      	movs	r3, #0
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 8001068:	ee07 0a90 	vmov	s15, r0
 800106c:	60e0      	str	r0, [r4, #12]
			INV->d_b = 0.0;
 800106e:	6123      	str	r3, [r4, #16]
			INV->d_c = 0.5 - 05*INV->delta_d;
 8001070:	eea8 7a66 	vfms.f32	s14, s16, s13
 8001074:	ed84 7a05 	vstr	s14, [r4, #20]
			INV->d_b = 0.0;
 8001078:	e029      	b.n	80010ce <compute_duty_cycle+0xda>
		}
	}
	else{																// totem pole control strategy
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 800107a:	bb23      	cbnz	r3, 80010c6 <compute_duty_cycle+0xd2>
				INV->d_a = 1 + INV->delta_d;
				INV->d_b = 1.0;
				INV->d_c = 0.0;
			}
		}
		else if(INV->Leg_B == false && INV->Leg_C == true){				// leg A and leg C switching
 800107c:	b329      	cbz	r1, 80010ca <compute_duty_cycle+0xd6>
			if(INV->delta_d > 0){										// positive half-wave
 800107e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001082:	2300      	movs	r3, #0
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	f340 808c 	ble.w	80011a4 <compute_duty_cycle+0x1b0>
				INV->d_a = INV->delta_d;
 800108c:	60e0      	str	r0, [r4, #12]
				INV->d_c = 0.0;
 800108e:	6163      	str	r3, [r4, #20]
				INV->d_b = 0.0;
 8001090:	6123      	str	r3, [r4, #16]
			}
		}
	}

	// duty cycle value saturation
	if(INV->d_a > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_b > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_c > DUTY_CYCLE_MAX_VALUE || INV->d_c < DUTY_CYCLE_MIN_VALUE){
 8001092:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001096:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	dc1d      	bgt.n	80010dc <compute_duty_cycle+0xe8>
 80010a0:	ed94 7a04 	vldr	s14, [r4, #16]
 80010a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010a8:	edd4 7a05 	vldr	s15, [r4, #20]
 80010ac:	eef4 7ae6 	vcmpe.f32	s15, s13
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	dd69      	ble.n	800118a <compute_duty_cycle+0x196>
			INV->d_a = DUTY_CYCLE_MAX_VALUE;
		else if(INV->d_a < DUTY_CYCLE_MIN_VALUE)
			INV->d_a = DUTY_CYCLE_MIN_VALUE;
		else if(INV->d_b > DUTY_CYCLE_MAX_VALUE)
			INV->d_b = DUTY_CYCLE_MAX_VALUE;
		else if(INV->d_b < DUTY_CYCLE_MIN_VALUE)
 80010b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	d461      	bmi.n	8001184 <compute_duty_cycle+0x190>
			INV->d_b = DUTY_CYCLE_MIN_VALUE;
		else if(INV->d_c > DUTY_CYCLE_MAX_VALUE)
			INV->d_c = DUTY_CYCLE_MAX_VALUE;
 80010c0:	edc4 6a05 	vstr	s13, [r4, #20]
 80010c4:	e00d      	b.n	80010e2 <compute_duty_cycle+0xee>
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 80010c6:	2900      	cmp	r1, #0
 80010c8:	d048      	beq.n	800115c <compute_duty_cycle+0x168>
	if(INV->d_a > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_b > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_c > DUTY_CYCLE_MAX_VALUE || INV->d_c < DUTY_CYCLE_MIN_VALUE){
 80010ca:	edd4 7a03 	vldr	s15, [r4, #12]
 80010ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	dd27      	ble.n	800112c <compute_duty_cycle+0x138>
			INV->d_a = DUTY_CYCLE_MAX_VALUE;
 80010dc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010e0:	60e3      	str	r3, [r4, #12]
		else if(INV->d_c < DUTY_CYCLE_MIN_VALUE)
			INV->d_c = DUTY_CYCLE_MIN_VALUE;
	}
}
 80010e2:	ecbd 8b02 	vpop	{d8}
 80010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 80010e8:	2900      	cmp	r1, #0
 80010ea:	d1ee      	bne.n	80010ca <compute_duty_cycle+0xd6>
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 80010ec:	f7ff fa4c 	bl	8000588 <__aeabi_f2d>
 80010f0:	2200      	movs	r2, #0
 80010f2:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <compute_duty_cycle+0x1c8>)
 80010f4:	f7ff faa0 	bl	8000638 <__aeabi_dmul>
 80010f8:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <compute_duty_cycle+0x1c8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f7ff f8e6 	bl	80002cc <__adddf3>
 8001100:	f7ff fd92 	bl	8000c28 <__aeabi_d2f>
			INV->d_b = 0.5 - 05*INV->delta_d;
 8001104:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001108:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 800110c:	ee07 0a90 	vmov	s15, r0
			INV->d_c = 0.0;
 8001110:	2300      	movs	r3, #0
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 8001112:	60e0      	str	r0, [r4, #12]
			INV->d_b = 0.5 - 05*INV->delta_d;
 8001114:	eea8 7a66 	vfms.f32	s14, s16, s13
			INV->d_c = 0.0;
 8001118:	6163      	str	r3, [r4, #20]
			INV->d_b = 0.5 - 05*INV->delta_d;
 800111a:	ed84 7a04 	vstr	s14, [r4, #16]
	if(INV->d_a > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_b > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_c > DUTY_CYCLE_MAX_VALUE || INV->d_c < DUTY_CYCLE_MIN_VALUE){
 800111e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	dcd7      	bgt.n	80010dc <compute_duty_cycle+0xe8>
 800112c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001130:	2300      	movs	r3, #0
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d40d      	bmi.n	8001154 <compute_duty_cycle+0x160>
 8001138:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800113c:	ed94 7a04 	vldr	s14, [r4, #16]
 8001140:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	ddac      	ble.n	80010a4 <compute_duty_cycle+0xb0>
			INV->d_b = DUTY_CYCLE_MAX_VALUE;
 800114a:	edc4 7a04 	vstr	s15, [r4, #16]
}
 800114e:	ecbd 8b02 	vpop	{d8}
 8001152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001154:	ecbd 8b02 	vpop	{d8}
			INV->d_a = DUTY_CYCLE_MIN_VALUE;
 8001158:	60e3      	str	r3, [r4, #12]
}
 800115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(INV->delta_d > 0){										// positive half-wave
 800115c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001160:	2300      	movs	r3, #0
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	dd03      	ble.n	8001170 <compute_duty_cycle+0x17c>
				INV->d_a = INV->delta_d;
 8001168:	60e0      	str	r0, [r4, #12]
				INV->d_b = 0.0;
 800116a:	6123      	str	r3, [r4, #16]
				INV->d_c = 0.0;
 800116c:	6163      	str	r3, [r4, #20]
 800116e:	e790      	b.n	8001092 <compute_duty_cycle+0x9e>
				INV->d_a = 1 + INV->delta_d;
 8001170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
				INV->d_c = 0.0;
 8001174:	6163      	str	r3, [r4, #20]
				INV->d_a = 1 + INV->delta_d;
 8001176:	ee78 7a07 	vadd.f32	s15, s16, s14
				INV->d_b = 1.0;
 800117a:	ed84 7a04 	vstr	s14, [r4, #16]
				INV->d_a = 1 + INV->delta_d;
 800117e:	edc4 7a03 	vstr	s15, [r4, #12]
				INV->d_c = 0.0;
 8001182:	e7d3      	b.n	800112c <compute_duty_cycle+0x138>
			INV->d_b = DUTY_CYCLE_MIN_VALUE;
 8001184:	2300      	movs	r3, #0
 8001186:	6123      	str	r3, [r4, #16]
 8001188:	e7ab      	b.n	80010e2 <compute_duty_cycle+0xee>
	if(INV->d_a > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_b > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_c > DUTY_CYCLE_MAX_VALUE || INV->d_c < DUTY_CYCLE_MIN_VALUE){
 800118a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800118e:	2300      	movs	r3, #0
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d5a5      	bpl.n	80010e2 <compute_duty_cycle+0xee>
		else if(INV->d_b < DUTY_CYCLE_MIN_VALUE)
 8001196:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	d4f1      	bmi.n	8001184 <compute_duty_cycle+0x190>
			INV->d_c = DUTY_CYCLE_MIN_VALUE;
 80011a0:	6163      	str	r3, [r4, #20]
}
 80011a2:	e79e      	b.n	80010e2 <compute_duty_cycle+0xee>
				INV->d_a = 1 + INV->delta_d;
 80011a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
				INV->d_b = 0.0;
 80011a8:	6123      	str	r3, [r4, #16]
				INV->d_a = 1 + INV->delta_d;
 80011aa:	ee78 7a07 	vadd.f32	s15, s16, s14
				INV->d_c = 1.0;
 80011ae:	ed84 7a05 	vstr	s14, [r4, #20]
				INV->d_a = 1 + INV->delta_d;
 80011b2:	edc4 7a03 	vstr	s15, [r4, #12]
				INV->d_b = 0.0;
 80011b6:	e7b9      	b.n	800112c <compute_duty_cycle+0x138>
 80011b8:	20000220 	.word	0x20000220
 80011bc:	3fe00000 	.word	0x3fe00000

080011c0 <AnalogMeasRoutine>:
	float eq_udc = u_diff * GAIN_MEAS_UDC;
	return eq_udc;
}

void AnalogMeasRoutine(){
	float u_meas_uac = ad_volt_float[0];	// ADC voltage level ADC1 CH5	rank 1
 80011c0:	4b45      	ldr	r3, [pc, #276]	@ (80012d8 <AnalogMeasRoutine+0x118>)
void AnalogMeasRoutine(){
 80011c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float u_meas_udc = ad_volt_float[1];	// ADC voltage level ADC2 CH14	rank 1
 80011c6:	685d      	ldr	r5, [r3, #4]
	float u_meas_uac = ad_volt_float[0];	// ADC voltage level ADC1 CH5	rank 1
 80011c8:	681e      	ldr	r6, [r3, #0]
	float u_diff = ad_volt - ADC_OFFSET;
 80011ca:	4628      	mov	r0, r5
	float u_meas_iac = ad_volt_float[2];	// ADC voltage level ADC3 CH4	rank 1
 80011cc:	689f      	ldr	r7, [r3, #8]
	udc = DCVoltageMeasProcessing(u_meas_udc);
	uac = ACVoltageMeasProcessing(u_meas_uac);
	iac = ACCurrentMeasProcessing(u_meas_iac);

	// store measurements in memory to export them
	if( db_cnt_meas<LOG_MEAS_NB) {
 80011ce:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 80012f0 <AnalogMeasRoutine+0x130>
void AnalogMeasRoutine(){
 80011d2:	ed2d 8b02 	vpush	{d8}
	float u_diff = ad_volt - ADC_OFFSET;
 80011d6:	f7ff f9d7 	bl	8000588 <__aeabi_f2d>
 80011da:	a339      	add	r3, pc, #228	@ (adr r3, 80012c0 <AnalogMeasRoutine+0x100>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff f872 	bl	80002c8 <__aeabi_dsub>
 80011e4:	f7ff fd20 	bl	8000c28 <__aeabi_d2f>
	float eq_udc = u_diff * GAIN_MEAS_UDC;
 80011e8:	f7ff f9ce 	bl	8000588 <__aeabi_f2d>
 80011ec:	a336      	add	r3, pc, #216	@ (adr r3, 80012c8 <AnalogMeasRoutine+0x108>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff fa21 	bl	8000638 <__aeabi_dmul>
 80011f6:	f7ff fd17 	bl	8000c28 <__aeabi_d2f>
	udc = DCVoltageMeasProcessing(u_meas_udc);
 80011fa:	4b38      	ldr	r3, [pc, #224]	@ (80012dc <AnalogMeasRoutine+0x11c>)
	float eq_udc = u_diff * GAIN_MEAS_UDC;
 80011fc:	4604      	mov	r4, r0
	udc = DCVoltageMeasProcessing(u_meas_udc);
 80011fe:	6018      	str	r0, [r3, #0]
	float u_diff = ad_volt - ADC_OFFSET;
 8001200:	4630      	mov	r0, r6
 8001202:	f7ff f9c1 	bl	8000588 <__aeabi_f2d>
 8001206:	a32e      	add	r3, pc, #184	@ (adr r3, 80012c0 <AnalogMeasRoutine+0x100>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff f85c 	bl	80002c8 <__aeabi_dsub>
 8001210:	f7ff fd0a 	bl	8000c28 <__aeabi_d2f>
	float eq_uac = u_diff * GAIN_MEAS_UAC;
 8001214:	eddf 7a32 	vldr	s15, [pc, #200]	@ 80012e0 <AnalogMeasRoutine+0x120>
	float u_diff = ad_volt - ADC_OFFSET;
 8001218:	ee08 0a10 	vmov	s16, r0
	uac = ACVoltageMeasProcessing(u_meas_uac);
 800121c:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <AnalogMeasRoutine+0x124>)
	float u_diff = ad_volt - ADC_OFFSET;
 800121e:	4638      	mov	r0, r7
	float eq_uac = u_diff * GAIN_MEAS_UAC;
 8001220:	ee28 8a27 	vmul.f32	s16, s16, s15
	uac = ACVoltageMeasProcessing(u_meas_uac);
 8001224:	ed83 8a00 	vstr	s16, [r3]
	float u_diff = ad_volt - ADC_OFFSET;
 8001228:	f7ff f9ae 	bl	8000588 <__aeabi_f2d>
 800122c:	a324      	add	r3, pc, #144	@ (adr r3, 80012c0 <AnalogMeasRoutine+0x100>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff f849 	bl	80002c8 <__aeabi_dsub>
 8001236:	f7ff fcf7 	bl	8000c28 <__aeabi_d2f>
	float eq_i = u_diff * GAIN_MEAS_IAC;
 800123a:	f7ff f9a5 	bl	8000588 <__aeabi_f2d>
 800123e:	a324      	add	r3, pc, #144	@ (adr r3, 80012d0 <AnalogMeasRoutine+0x110>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9f8 	bl	8000638 <__aeabi_dmul>
 8001248:	f7ff fcee 	bl	8000c28 <__aeabi_d2f>
	iac = ACCurrentMeasProcessing(u_meas_iac);
 800124c:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <AnalogMeasRoutine+0x128>)
	if( db_cnt_meas<LOG_MEAS_NB) {
 800124e:	f644 611f 	movw	r1, #19999	@ 0x4e1f
	iac = ACCurrentMeasProcessing(u_meas_iac);
 8001252:	6018      	str	r0, [r3, #0]
	if( db_cnt_meas<LOG_MEAS_NB) {
 8001254:	f8b9 3000 	ldrh.w	r3, [r9]
 8001258:	428b      	cmp	r3, r1
 800125a:	d82c      	bhi.n	80012b6 <AnalogMeasRoutine+0xf6>
		db_meas[db_cnt_meas++] = u_meas_uac;
 800125c:	4602      	mov	r2, r0
 800125e:	f103 0a01 	add.w	sl, r3, #1
		db_meas[db_cnt_meas++] = u_meas_udc;
 8001262:	f103 0802 	add.w	r8, r3, #2
		db_meas[db_cnt_meas++] = u_meas_iac;
 8001266:	f103 0e03 	add.w	lr, r3, #3
		db_meas[db_cnt_meas++] = udc;
 800126a:	f103 0c04 	add.w	ip, r3, #4
		db_meas[db_cnt_meas++] = uac;
 800126e:	1d58      	adds	r0, r3, #5
		db_meas[db_cnt_meas++] = u_meas_uac;
 8001270:	491e      	ldr	r1, [pc, #120]	@ (80012ec <AnalogMeasRoutine+0x12c>)
		db_meas[db_cnt_meas++] = u_meas_udc;
 8001272:	fa1f fa8a 	uxth.w	sl, sl
		db_meas[db_cnt_meas++] = u_meas_iac;
 8001276:	fa1f f888 	uxth.w	r8, r8
		db_meas[db_cnt_meas++] = udc;
 800127a:	fa1f fe8e 	uxth.w	lr, lr
		db_meas[db_cnt_meas++] = uac;
 800127e:	fa1f fc8c 	uxth.w	ip, ip
		db_meas[db_cnt_meas++] = iac;
 8001282:	b280      	uxth	r0, r0
		db_meas[db_cnt_meas++] = u_meas_udc;
 8001284:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
		db_meas[db_cnt_meas++] = u_meas_iac;
 8001288:	eb01 0888 	add.w	r8, r1, r8, lsl #2
		db_meas[db_cnt_meas++] = udc;
 800128c:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
		db_meas[db_cnt_meas++] = uac;
 8001290:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
		db_meas[db_cnt_meas++] = iac;
 8001294:	eb01 0080 	add.w	r0, r1, r0, lsl #2
		db_meas[db_cnt_meas++] = u_meas_uac;
 8001298:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		db_meas[db_cnt_meas++] = iac;
 800129c:	3306      	adds	r3, #6
		db_meas[db_cnt_meas++] = u_meas_uac;
 800129e:	600e      	str	r6, [r1, #0]
		db_meas[db_cnt_meas++] = iac;
 80012a0:	f8a9 3000 	strh.w	r3, [r9]
		db_meas[db_cnt_meas++] = u_meas_udc;
 80012a4:	f8ca 5000 	str.w	r5, [sl]
		db_meas[db_cnt_meas++] = u_meas_iac;
 80012a8:	f8c8 7000 	str.w	r7, [r8]
		db_meas[db_cnt_meas++] = udc;
 80012ac:	f8ce 4000 	str.w	r4, [lr]
		db_meas[db_cnt_meas++] = uac;
 80012b0:	ed8c 8a00 	vstr	s16, [ip]
		db_meas[db_cnt_meas++] = iac;
 80012b4:	6002      	str	r2, [r0, #0]
	}
}
 80012b6:	ecbd 8b02 	vpop	{d8}
 80012ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012be:	bf00      	nop
 80012c0:	66666666 	.word	0x66666666
 80012c4:	3ffa6666 	.word	0x3ffa6666
 80012c8:	cccccccd 	.word	0xcccccccd
 80012cc:	407e84cc 	.word	0x407e84cc
 80012d0:	7ae147ae 	.word	0x7ae147ae
 80012d4:	404e4e14 	.word	0x404e4e14
 80012d8:	20014754 	.word	0x20014754
 80012dc:	2000021c 	.word	0x2000021c
 80012e0:	43c84000 	.word	0x43c84000
 80012e4:	20000218 	.word	0x20000218
 80012e8:	20000214 	.word	0x20000214
 80012ec:	20000900 	.word	0x20000900
 80012f0:	200008fc 	.word	0x200008fc

080012f4 <initInverterManagementStructure>:
	myInverter.system_fault = NO_ERROR;
	myInverter.delta_d = 0.0;
	myInverter.d_a = 0.0;
	myInverter.d_b = 0.0;
	myInverter.d_c = 0.0;
	if(config == CONFIG_A){
 80012f4:	b190      	cbz	r0, 800131c <initInverterManagementStructure+0x28>
 80012f6:	2001      	movs	r0, #1
 80012f8:	f04f 0c00 	mov.w	ip, #0
 80012fc:	4601      	mov	r1, r0
	myInverter.system_fault = NO_ERROR;
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <initInverterManagementStructure+0x30>)
 8001300:	2200      	movs	r2, #0
		myInverter.system_ctrl_strategy = SYM;
 8001302:	7058      	strb	r0, [r3, #1]
		myInverter.Leg_A = true;
 8001304:	2001      	movs	r0, #1
	myInverter.system_fault = NO_ERROR;
 8001306:	701a      	strb	r2, [r3, #0]
	myInverter.delta_d = 0.0;
 8001308:	2200      	movs	r2, #0
		myInverter.Leg_A = true;
 800130a:	7098      	strb	r0, [r3, #2]
		myInverter.Leg_B = true;
 800130c:	f883 c003 	strb.w	ip, [r3, #3]
	myInverter.delta_d = 0.0;
 8001310:	609a      	str	r2, [r3, #8]
	myInverter.d_a = 0.0;
 8001312:	60da      	str	r2, [r3, #12]
	myInverter.d_b = 0.0;
 8001314:	611a      	str	r2, [r3, #16]
	myInverter.d_c = 0.0;
 8001316:	615a      	str	r2, [r3, #20]
		myInverter.Leg_C = false;
 8001318:	7119      	strb	r1, [r3, #4]
		myInverter.system_ctrl_strategy = ASYM;
		myInverter.Leg_A = true;
		myInverter.Leg_B = false;
		myInverter.Leg_C = true;
	}
}
 800131a:	4770      	bx	lr
 800131c:	f04f 0c01 	mov.w	ip, #1
 8001320:	4601      	mov	r1, r0
 8001322:	e7ec      	b.n	80012fe <initInverterManagementStructure+0xa>
 8001324:	200001fc 	.word	0x200001fc

08001328 <initSineLookupTable>:

// Lookup table init function
void initSineLookupTable(){
 8001328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int i = 0; i < N; i++) {
		sine_wave[i] = sin(2.0 * M_PI * (double)i / ((double)N));
 800132c:	2200      	movs	r2, #0
 800132e:	2300      	movs	r3, #0
 8001330:	4d11      	ldr	r5, [pc, #68]	@ (8001378 <initSineLookupTable+0x50>)
	for (int i = 0; i < N; i++) {
 8001332:	2401      	movs	r4, #1
		sine_wave[i] = sin(2.0 * M_PI * (double)i / ((double)N));
 8001334:	2600      	movs	r6, #0
 8001336:	4f11      	ldr	r7, [pc, #68]	@ (800137c <initSineLookupTable+0x54>)
 8001338:	f20f 0934 	addw	r9, pc, #52	@ 0x34
 800133c:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001340:	e8e5 2302 	strd	r2, r3, [r5], #8
 8001344:	4620      	mov	r0, r4
	for (int i = 0; i < N; i++) {
 8001346:	3401      	adds	r4, #1
		sine_wave[i] = sin(2.0 * M_PI * (double)i / ((double)N));
 8001348:	f7ff f90c 	bl	8000564 <__aeabi_i2d>
 800134c:	4642      	mov	r2, r8
 800134e:	464b      	mov	r3, r9
 8001350:	f7ff f972 	bl	8000638 <__aeabi_dmul>
 8001354:	4632      	mov	r2, r6
 8001356:	463b      	mov	r3, r7
 8001358:	f7ff fa98 	bl	800088c <__aeabi_ddiv>
 800135c:	ec41 0b10 	vmov	d0, r0, r1
 8001360:	f007 ff6a 	bl	8009238 <sin>
	for (int i = 0; i < N; i++) {
 8001364:	2cc8      	cmp	r4, #200	@ 0xc8
		sine_wave[i] = sin(2.0 * M_PI * (double)i / ((double)N));
 8001366:	eca5 0b02 	vstmia	r5!, {d0}
	for (int i = 0; i < N; i++) {
 800136a:	d1eb      	bne.n	8001344 <initSineLookupTable+0x1c>
	}
}
 800136c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001370:	54442d18 	.word	0x54442d18
 8001374:	401921fb 	.word	0x401921fb
 8001378:	20000220 	.word	0x20000220
 800137c:	40690000 	.word	0x40690000

08001380 <functionalTestRoutine>:

// functional test execution function
void functionalTestRoutine(TmyconvVSI *converter){
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_6)){				// gate driver fault
 8001382:	2140      	movs	r1, #64	@ 0x40
void functionalTestRoutine(TmyconvVSI *converter){
 8001384:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_6)){				// gate driver fault
 8001386:	481c      	ldr	r0, [pc, #112]	@ (80013f8 <functionalTestRoutine+0x78>)
		INV->system_fault = GD_FAULT;
 8001388:	4d1c      	ldr	r5, [pc, #112]	@ (80013fc <functionalTestRoutine+0x7c>)
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_6)){				// gate driver fault
 800138a:	f002 fdef 	bl	8003f6c <HAL_GPIO_ReadPin>
 800138e:	b108      	cbz	r0, 8001394 <functionalTestRoutine+0x14>
		INV->system_fault = GD_FAULT;
 8001390:	2302      	movs	r3, #2
 8001392:	702b      	strb	r3, [r5, #0]
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)){				// over current meas fault
 8001394:	2180      	movs	r1, #128	@ 0x80
 8001396:	4818      	ldr	r0, [pc, #96]	@ (80013f8 <functionalTestRoutine+0x78>)
 8001398:	f002 fde8 	bl	8003f6c <HAL_GPIO_ReadPin>
 800139c:	b108      	cbz	r0, 80013a2 <functionalTestRoutine+0x22>
		INV->system_fault = CURRENT_MEAS_OCF;
 800139e:	2301      	movs	r3, #1
 80013a0:	702b      	strb	r3, [r5, #0]
	 */

	float udc = U_DC;		// fixed DC voltage value
	//float udc = u_dc_ref;	// measured DC voltage value

	compute_duty_cycle(&myInverter, i, (float)SINE_AMPL, udc);
 80013a2:	4f17      	ldr	r7, [pc, #92]	@ (8001400 <functionalTestRoutine+0x80>)
	AnalogMeasRoutine();
 80013a4:	f7ff ff0c 	bl	80011c0 <AnalogMeasRoutine>
	compute_duty_cycle(&myInverter, i, (float)SINE_AMPL, udc);
 80013a8:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80013ac:	4813      	ldr	r0, [pc, #76]	@ (80013fc <functionalTestRoutine+0x7c>)
 80013ae:	683e      	ldr	r6, [r7, #0]
 80013b0:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80013b4:	4631      	mov	r1, r6
 80013b6:	f7ff fe1d 	bl	8000ff4 <compute_duty_cycle>

	// Fixed duty cycle test
	myInverter.d_a = 0.90;
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <functionalTestRoutine+0x84>)

	// converter.da used for higher semiconductors
	// converter.db used for lower semiconductors	- complementary (it is sufficient to control da)

	converter->da[0] = 1.0 - myInverter.d_a;  // Update leg A
	converter->da[1] = 1.0 - myInverter.d_b;  // Update leg B
 80013bc:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
	converter->db[2] = 1.0 - myInverter.d_c;  // Update leg C


	// index and periods counter management
	i++;
	if(i==N){
 80013c0:	2ec7      	cmp	r6, #199	@ 0xc7
	myInverter.d_a = 0.90;
 80013c2:	60eb      	str	r3, [r5, #12]
	myInverter.d_b = 0.75;
 80013c4:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
	converter->da[1] = 1.0 - myInverter.d_b;  // Update leg B
 80013c8:	64e2      	str	r2, [r4, #76]	@ 0x4c
	myInverter.d_b = 0.75;
 80013ca:	612b      	str	r3, [r5, #16]
	myInverter.d_c = 0.60;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <functionalTestRoutine+0x88>)
	converter->db[1] = 1.0 - myInverter.d_b;  // Update leg B
 80013ce:	65e2      	str	r2, [r4, #92]	@ 0x5c
	i++;
 80013d0:	f106 0201 	add.w	r2, r6, #1
	myInverter.d_c = 0.60;
 80013d4:	616b      	str	r3, [r5, #20]
	converter->da[0] = 1.0 - myInverter.d_a;  // Update leg A
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <functionalTestRoutine+0x8c>)
 80013d8:	64a3      	str	r3, [r4, #72]	@ 0x48
	converter->db[0] = 1.0 - myInverter.d_a;  // Update leg A
 80013da:	65a3      	str	r3, [r4, #88]	@ 0x58
	converter->da[2] = 1.0 - myInverter.d_c;  // Update leg C
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <functionalTestRoutine+0x90>)
 80013de:	6523      	str	r3, [r4, #80]	@ 0x50
	converter->db[2] = 1.0 - myInverter.d_c;  // Update leg C
 80013e0:	6623      	str	r3, [r4, #96]	@ 0x60
	if(i==N){
 80013e2:	d001      	beq.n	80013e8 <functionalTestRoutine+0x68>
	i++;
 80013e4:	603a      	str	r2, [r7, #0]
		i=0;
		period_counter++;
	}
}
 80013e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		period_counter++;
 80013e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <functionalTestRoutine+0x94>)
		i=0;
 80013ea:	2100      	movs	r1, #0
		period_counter++;
 80013ec:	6813      	ldr	r3, [r2, #0]
		i=0;
 80013ee:	6039      	str	r1, [r7, #0]
		period_counter++;
 80013f0:	3301      	adds	r3, #1
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020c00 	.word	0x40020c00
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	200001f8 	.word	0x200001f8
 8001404:	3f666666 	.word	0x3f666666
 8001408:	3f19999a 	.word	0x3f19999a
 800140c:	3dccccd0 	.word	0x3dccccd0
 8001410:	3ecccccc 	.word	0x3ecccccc
 8001414:	200001f4 	.word	0x200001f4

08001418 <huart3TxCpltCallback>:
static TCBStatus huart3Txstatus, huart3Rxstatus;


void huart3TxCpltCallback(struct __UART_HandleTypeDef *huart)
{
	huart3Txstatus.cnt++;
 8001418:	4a02      	ldr	r2, [pc, #8]	@ (8001424 <huart3TxCpltCallback+0xc>)
 800141a:	6813      	ldr	r3, [r2, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000880 	.word	0x20000880

08001428 <huart3RxCpltCallback>:
{
	huart3Rxstatus.cnt++;

	// process the character coming from uart

	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 8001428:	4881      	ldr	r0, [pc, #516]	@ (8001630 <huart3RxCpltCallback+0x208>)
 800142a:	4a82      	ldr	r2, [pc, #520]	@ (8001634 <huart3RxCpltCallback+0x20c>)
 800142c:	8803      	ldrh	r3, [r0, #0]
{
 800142e:	b570      	push	{r4, r5, r6, lr}
	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 8001430:	4d81      	ldr	r5, [pc, #516]	@ (8001638 <huart3RxCpltCallback+0x210>)
 8001432:	7812      	ldrb	r2, [r2, #0]
	huart3Rxstatus.cnt++;
 8001434:	4c81      	ldr	r4, [pc, #516]	@ (800163c <huart3RxCpltCallback+0x214>)
	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 8001436:	54ea      	strb	r2, [r5, r3]
 8001438:	3301      	adds	r3, #1
	huart3Rxstatus.cnt++;
 800143a:	6821      	ldr	r1, [r4, #0]
	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 800143c:	b29b      	uxth	r3, r3
	huart3Rxstatus.cnt++;
 800143e:	3101      	adds	r1, #1
	if( db_cnt_buffer_uart3 >= LENGTH_DB_BUFFER_UART3)
 8001440:	2b13      	cmp	r3, #19
	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 8001442:	8003      	strh	r3, [r0, #0]
	huart3Rxstatus.cnt++;
 8001444:	6021      	str	r1, [r4, #0]
	if( db_cnt_buffer_uart3 >= LENGTH_DB_BUFFER_UART3)
 8001446:	d901      	bls.n	800144c <huart3RxCpltCallback+0x24>
		db_cnt_buffer_uart3 = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	8003      	strh	r3, [r0, #0]

	switch( uart3rxbuffer[0]) {
 800144c:	f1a2 032b 	sub.w	r3, r2, #43	@ 0x2b
 8001450:	2b48      	cmp	r3, #72	@ 0x48
 8001452:	d82a      	bhi.n	80014aa <huart3RxCpltCallback+0x82>
 8001454:	e8df f003 	tbb	[pc, r3]
 8001458:	29302945 	.word	0x29302945
 800145c:	30452929 	.word	0x30452929
 8001460:	835d2929 	.word	0x835d2929
 8001464:	29292929 	.word	0x29292929
 8001468:	29292929 	.word	0x29292929
 800146c:	29292929 	.word	0x29292929
 8001470:	29292929 	.word	0x29292929
 8001474:	29292929 	.word	0x29292929
 8001478:	29292929 	.word	0x29292929
 800147c:	29292929 	.word	0x29292929
 8001480:	29292929 	.word	0x29292929
 8001484:	29292929 	.word	0x29292929
 8001488:	29292929 	.word	0x29292929
 800148c:	29292929 	.word	0x29292929
 8001490:	8c292929 	.word	0x8c292929
 8001494:	292929a6 	.word	0x292929a6
 8001498:	29c12929 	.word	0x29c12929
 800149c:	25296b29 	.word	0x25296b29
 80014a0:	66          	.byte	0x66
 80014a1:	00          	.byte	0x00
	case 'r':
		myconvvsi.signal_run = true;
 80014a2:	4b67      	ldr	r3, [pc, #412]	@ (8001640 <huart3RxCpltCallback+0x218>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
			myconvvsi.mode--;
		break;
	default:
		;
	}
	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 80014aa:	2201      	movs	r2, #1
 80014ac:	4961      	ldr	r1, [pc, #388]	@ (8001634 <huart3RxCpltCallback+0x20c>)
 80014ae:	4865      	ldr	r0, [pc, #404]	@ (8001644 <huart3RxCpltCallback+0x21c>)
}
 80014b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 80014b4:	f005 b856 	b.w	8006564 <HAL_UART_Receive_IT>
		if( myconvvsi.ref>0.0)
 80014b8:	4c61      	ldr	r4, [pc, #388]	@ (8001640 <huart3RxCpltCallback+0x218>)
 80014ba:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
 80014be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	ddf0      	ble.n	80014aa <huart3RxCpltCallback+0x82>
			myconvvsi.ref -= 0.01;
 80014c8:	ee17 0a90 	vmov	r0, s15
 80014cc:	f7ff f85c 	bl	8000588 <__aeabi_f2d>
 80014d0:	a34d      	add	r3, pc, #308	@ (adr r3, 8001608 <huart3RxCpltCallback+0x1e0>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7fe fef7 	bl	80002c8 <__aeabi_dsub>
 80014da:	f7ff fba5 	bl	8000c28 <__aeabi_d2f>
 80014de:	67a0      	str	r0, [r4, #120]	@ 0x78
 80014e0:	e7e3      	b.n	80014aa <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref<0.95)
 80014e2:	4e57      	ldr	r6, [pc, #348]	@ (8001640 <huart3RxCpltCallback+0x218>)
 80014e4:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 80014e6:	f7ff f84f 	bl	8000588 <__aeabi_f2d>
 80014ea:	4604      	mov	r4, r0
 80014ec:	460d      	mov	r5, r1
 80014ee:	a348      	add	r3, pc, #288	@ (adr r3, 8001610 <huart3RxCpltCallback+0x1e8>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7ff fb12 	bl	8000b1c <__aeabi_dcmplt>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	d0d6      	beq.n	80014aa <huart3RxCpltCallback+0x82>
			myconvvsi.ref += 0.01;
 80014fc:	4620      	mov	r0, r4
 80014fe:	4629      	mov	r1, r5
 8001500:	a341      	add	r3, pc, #260	@ (adr r3, 8001608 <huart3RxCpltCallback+0x1e0>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fee1 	bl	80002cc <__adddf3>
 800150a:	f7ff fb8d 	bl	8000c28 <__aeabi_d2f>
 800150e:	67b0      	str	r0, [r6, #120]	@ 0x78
 8001510:	e7cb      	b.n	80014aa <huart3RxCpltCallback+0x82>
		if( myconvvsi.mode<2)
 8001512:	4a4b      	ldr	r2, [pc, #300]	@ (8001640 <huart3RxCpltCallback+0x218>)
 8001514:	f8b2 308c 	ldrh.w	r3, [r2, #140]	@ 0x8c
 8001518:	2b01      	cmp	r3, #1
 800151a:	d8c6      	bhi.n	80014aa <huart3RxCpltCallback+0x82>
			myconvvsi.mode++;
 800151c:	3301      	adds	r3, #1
 800151e:	f8a2 308c 	strh.w	r3, [r2, #140]	@ 0x8c
 8001522:	e7c2      	b.n	80014aa <huart3RxCpltCallback+0x82>
		myconvvsi.signal_stop = true;
 8001524:	4b46      	ldr	r3, [pc, #280]	@ (8001640 <huart3RxCpltCallback+0x218>)
 8001526:	2201      	movs	r2, #1
 8001528:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
		break;
 800152c:	e7bd      	b.n	80014aa <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref0<0.45)
 800152e:	4e44      	ldr	r6, [pc, #272]	@ (8001640 <huart3RxCpltCallback+0x218>)
 8001530:	6ff0      	ldr	r0, [r6, #124]	@ 0x7c
 8001532:	f7ff f829 	bl	8000588 <__aeabi_f2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	a337      	add	r3, pc, #220	@ (adr r3, 8001618 <huart3RxCpltCallback+0x1f0>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff faec 	bl	8000b1c <__aeabi_dcmplt>
 8001544:	2800      	cmp	r0, #0
 8001546:	d0b0      	beq.n	80014aa <huart3RxCpltCallback+0x82>
			myconvvsi.ref0 += 0.01;
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001608 <huart3RxCpltCallback+0x1e0>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe febb 	bl	80002cc <__adddf3>
 8001556:	f7ff fb67 	bl	8000c28 <__aeabi_d2f>
 800155a:	67f0      	str	r0, [r6, #124]	@ 0x7c
 800155c:	e7a5      	b.n	80014aa <huart3RxCpltCallback+0x82>
		if( myconvvsi.mode>0)
 800155e:	4a38      	ldr	r2, [pc, #224]	@ (8001640 <huart3RxCpltCallback+0x218>)
 8001560:	f8b2 308c 	ldrh.w	r3, [r2, #140]	@ 0x8c
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0a0      	beq.n	80014aa <huart3RxCpltCallback+0x82>
			myconvvsi.mode--;
 8001568:	3b01      	subs	r3, #1
 800156a:	f8a2 308c 	strh.w	r3, [r2, #140]	@ 0x8c
 800156e:	e79c      	b.n	80014aa <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref1<0.1)
 8001570:	4e33      	ldr	r6, [pc, #204]	@ (8001640 <huart3RxCpltCallback+0x218>)
 8001572:	f8d6 0080 	ldr.w	r0, [r6, #128]	@ 0x80
 8001576:	f7ff f807 	bl	8000588 <__aeabi_f2d>
 800157a:	4604      	mov	r4, r0
 800157c:	460d      	mov	r5, r1
 800157e:	a328      	add	r3, pc, #160	@ (adr r3, 8001620 <huart3RxCpltCallback+0x1f8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff faca 	bl	8000b1c <__aeabi_dcmplt>
 8001588:	2800      	cmp	r0, #0
 800158a:	d08e      	beq.n	80014aa <huart3RxCpltCallback+0x82>
			myconvvsi.ref1 += 0.01;
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	a31d      	add	r3, pc, #116	@ (adr r3, 8001608 <huart3RxCpltCallback+0x1e0>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe fe99 	bl	80002cc <__adddf3>
 800159a:	f7ff fb45 	bl	8000c28 <__aeabi_d2f>
 800159e:	f8c6 0080 	str.w	r0, [r6, #128]	@ 0x80
 80015a2:	e782      	b.n	80014aa <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref1>-0.1)
 80015a4:	4e26      	ldr	r6, [pc, #152]	@ (8001640 <huart3RxCpltCallback+0x218>)
 80015a6:	f8d6 0080 	ldr.w	r0, [r6, #128]	@ 0x80
 80015aa:	f7fe ffed 	bl	8000588 <__aeabi_f2d>
 80015ae:	4604      	mov	r4, r0
 80015b0:	460d      	mov	r5, r1
 80015b2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001628 <huart3RxCpltCallback+0x200>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff face 	bl	8000b58 <__aeabi_dcmpgt>
 80015bc:	2800      	cmp	r0, #0
 80015be:	f43f af74 	beq.w	80014aa <huart3RxCpltCallback+0x82>
			myconvvsi.ref1 -= 0.01;
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	a310      	add	r3, pc, #64	@ (adr r3, 8001608 <huart3RxCpltCallback+0x1e0>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7fe fe7c 	bl	80002c8 <__aeabi_dsub>
 80015d0:	f7ff fb2a 	bl	8000c28 <__aeabi_d2f>
 80015d4:	f8c6 0080 	str.w	r0, [r6, #128]	@ 0x80
 80015d8:	e767      	b.n	80014aa <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref0>0.0)
 80015da:	4c19      	ldr	r4, [pc, #100]	@ (8001640 <huart3RxCpltCallback+0x218>)
 80015dc:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80015e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e8:	f77f af5f 	ble.w	80014aa <huart3RxCpltCallback+0x82>
			myconvvsi.ref0 -= 0.01;
 80015ec:	ee17 0a90 	vmov	r0, s15
 80015f0:	f7fe ffca 	bl	8000588 <__aeabi_f2d>
 80015f4:	a304      	add	r3, pc, #16	@ (adr r3, 8001608 <huart3RxCpltCallback+0x1e0>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fe65 	bl	80002c8 <__aeabi_dsub>
 80015fe:	f7ff fb13 	bl	8000c28 <__aeabi_d2f>
 8001602:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8001604:	e751      	b.n	80014aa <huart3RxCpltCallback+0x82>
 8001606:	bf00      	nop
 8001608:	47ae147b 	.word	0x47ae147b
 800160c:	3f847ae1 	.word	0x3f847ae1
 8001610:	66666666 	.word	0x66666666
 8001614:	3fee6666 	.word	0x3fee6666
 8001618:	cccccccd 	.word	0xcccccccd
 800161c:	3fdccccc 	.word	0x3fdccccc
 8001620:	9999999a 	.word	0x9999999a
 8001624:	3fb99999 	.word	0x3fb99999
 8001628:	9999999a 	.word	0x9999999a
 800162c:	bfb99999 	.word	0xbfb99999
 8001630:	20000860 	.word	0x20000860
 8001634:	200008e8 	.word	0x200008e8
 8001638:	20000864 	.word	0x20000864
 800163c:	2000087c 	.word	0x2000087c
 8001640:	200146c4 	.word	0x200146c4
 8001644:	200142a8 	.word	0x200142a8

08001648 <DisplayMessageMeas>:
{
 8001648:	b570      	push	{r4, r5, r6, lr}
	if( myconvvsi.sm == SMRun) {
 800164a:	4c2d      	ldr	r4, [pc, #180]	@ (8001700 <DisplayMessageMeas+0xb8>)
{
 800164c:	b092      	sub	sp, #72	@ 0x48
	if( myconvvsi.sm == SMRun) {
 800164e:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 8001652:	2b03      	cmp	r3, #3
 8001654:	d001      	beq.n	800165a <DisplayMessageMeas+0x12>
}
 8001656:	b012      	add	sp, #72	@ 0x48
 8001658:	bd70      	pop	{r4, r5, r6, pc}
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 800165a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800165c:	f7fe ff94 	bl	8000588 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8001666:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
 800166a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800166e:	f7fe ff8b 	bl	8000588 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001678:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800167c:	f7fe ff84 	bl	8000588 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001686:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800168a:	f7fe ff7d 	bl	8000588 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001694:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001698:	f7fe ff76 	bl	8000588 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80016a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80016a6:	f7fe ff6f 	bl	8000588 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	6960      	ldr	r0, [r4, #20]
 80016b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80016b4:	f7fe ff68 	bl	8000588 <__aeabi_f2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	6920      	ldr	r0, [r4, #16]
 80016be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016c2:	f7fe ff61 	bl	8000588 <__aeabi_f2d>
 80016c6:	460b      	mov	r3, r1
 80016c8:	4602      	mov	r2, r0
 80016ca:	68e0      	ldr	r0, [r4, #12]
 80016cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016d0:	f7fe ff5a 	bl	8000588 <__aeabi_f2d>
 80016d4:	4604      	mov	r4, r0
 80016d6:	460d      	mov	r5, r1
 80016d8:	4632      	mov	r2, r6
 80016da:	490a      	ldr	r1, [pc, #40]	@ (8001704 <DisplayMessageMeas+0xbc>)
 80016dc:	480a      	ldr	r0, [pc, #40]	@ (8001708 <DisplayMessageMeas+0xc0>)
 80016de:	e9cd 4500 	strd	r4, r5, [sp]
 80016e2:	f005 fc75 	bl	8006fd0 <siprintf>
		HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)strlen( (char *)uart3txbuffer));
 80016e6:	4808      	ldr	r0, [pc, #32]	@ (8001708 <DisplayMessageMeas+0xc0>)
 80016e8:	f7fe fde2 	bl	80002b0 <strlen>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4906      	ldr	r1, [pc, #24]	@ (8001708 <DisplayMessageMeas+0xc0>)
 80016f0:	4806      	ldr	r0, [pc, #24]	@ (800170c <DisplayMessageMeas+0xc4>)
 80016f2:	b292      	uxth	r2, r2
}
 80016f4:	b012      	add	sp, #72	@ 0x48
 80016f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)strlen( (char *)uart3txbuffer));
 80016fa:	f004 ba79 	b.w	8005bf0 <HAL_UART_Transmit_DMA>
 80016fe:	bf00      	nop
 8001700:	200146c4 	.word	0x200146c4
 8001704:	0800a298 	.word	0x0800a298
 8001708:	20000884 	.word	0x20000884
 800170c:	200142a8 	.word	0x200142a8

08001710 <DisplayMessageInit>:
{
 8001710:	b430      	push	{r4, r5}
	sprintf( (char *)uart3txbuffer, start_str);
 8001712:	4d09      	ldr	r5, [pc, #36]	@ (8001738 <DisplayMessageInit+0x28>)
 8001714:	4c09      	ldr	r4, [pc, #36]	@ (800173c <DisplayMessageInit+0x2c>)
 8001716:	46ac      	mov	ip, r5
 8001718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800171e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001722:	e8ac 0003 	stmia.w	ip!, {r0, r1}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_str)-1);
 8001726:	4629      	mov	r1, r5
	sprintf( (char *)uart3txbuffer, start_str);
 8001728:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_str)-1);
 800172c:	4804      	ldr	r0, [pc, #16]	@ (8001740 <DisplayMessageInit+0x30>)
 800172e:	2218      	movs	r2, #24
}
 8001730:	bc30      	pop	{r4, r5}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_str)-1);
 8001732:	f004 ba5d 	b.w	8005bf0 <HAL_UART_Transmit_DMA>
 8001736:	bf00      	nop
 8001738:	20000884 	.word	0x20000884
 800173c:	0800a2d4 	.word	0x0800a2d4
 8001740:	200142a8 	.word	0x200142a8

08001744 <DisplayMessageRun>:
	sprintf( (char *)uart3txbuffer, start_pwm_str);
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <DisplayMessageRun+0x28>)
{
 8001746:	b510      	push	{r4, lr}
	sprintf( (char *)uart3txbuffer, start_pwm_str);
 8001748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174a:	4c09      	ldr	r4, [pc, #36]	@ (8001770 <DisplayMessageRun+0x2c>)
 800174c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001750:	46a4      	mov	ip, r4
 8001752:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_pwm_str)-1);
 8001756:	4621      	mov	r1, r4
	sprintf( (char *)uart3txbuffer, start_pwm_str);
 8001758:	f82c 3b02 	strh.w	r3, [ip], #2
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_pwm_str)-1);
 800175c:	220e      	movs	r2, #14
	sprintf( (char *)uart3txbuffer, start_pwm_str);
 800175e:	f88c e000 	strb.w	lr, [ip]
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_pwm_str)-1);
 8001762:	4804      	ldr	r0, [pc, #16]	@ (8001774 <DisplayMessageRun+0x30>)
}
 8001764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_pwm_str)-1);
 8001768:	f004 ba42 	b.w	8005bf0 <HAL_UART_Transmit_DMA>
 800176c:	0800a2f0 	.word	0x0800a2f0
 8001770:	20000884 	.word	0x20000884
 8001774:	200142a8 	.word	0x200142a8

08001778 <DisplayMessageFault>:
{
 8001778:	b430      	push	{r4, r5}
	sprintf( (char *)uart3txbuffer, fault_str);
 800177a:	4d09      	ldr	r5, [pc, #36]	@ (80017a0 <DisplayMessageFault+0x28>)
 800177c:	4c09      	ldr	r4, [pc, #36]	@ (80017a4 <DisplayMessageFault+0x2c>)
 800177e:	46ac      	mov	ip, r5
 8001780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001782:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001786:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(fault_str)-1);
 8001788:	4629      	mov	r1, r5
 800178a:	2212      	movs	r2, #18
 800178c:	4806      	ldr	r0, [pc, #24]	@ (80017a8 <DisplayMessageFault+0x30>)
	sprintf( (char *)uart3txbuffer, fault_str);
 800178e:	0c1c      	lsrs	r4, r3, #16
 8001790:	f82c 3b02 	strh.w	r3, [ip], #2
 8001794:	f88c 4000 	strb.w	r4, [ip]
}
 8001798:	bc30      	pop	{r4, r5}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(fault_str)-1);
 800179a:	f004 ba29 	b.w	8005bf0 <HAL_UART_Transmit_DMA>
 800179e:	bf00      	nop
 80017a0:	20000884 	.word	0x20000884
 80017a4:	0800a300 	.word	0x0800a300
 80017a8:	200142a8 	.word	0x200142a8

080017ac <DisplayMessageStop>:
{
 80017ac:	b430      	push	{r4, r5}
	sprintf( (char *)uart3txbuffer, stop_str);
 80017ae:	4d09      	ldr	r5, [pc, #36]	@ (80017d4 <DisplayMessageStop+0x28>)
 80017b0:	4c09      	ldr	r4, [pc, #36]	@ (80017d8 <DisplayMessageStop+0x2c>)
 80017b2:	46ac      	mov	ip, r5
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017be:	e8ac 0003 	stmia.w	ip!, {r0, r1}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(stop_str)-1);
 80017c2:	4629      	mov	r1, r5
	sprintf( (char *)uart3txbuffer, stop_str);
 80017c4:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(stop_str)-1);
 80017c8:	4804      	ldr	r0, [pc, #16]	@ (80017dc <DisplayMessageStop+0x30>)
 80017ca:	2218      	movs	r2, #24
}
 80017cc:	bc30      	pop	{r4, r5}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(stop_str)-1);
 80017ce:	f004 ba0f 	b.w	8005bf0 <HAL_UART_Transmit_DMA>
 80017d2:	bf00      	nop
 80017d4:	20000884 	.word	0x20000884
 80017d8:	0800a314 	.word	0x0800a314
 80017dc:	200142a8 	.word	0x200142a8

080017e0 <InitDisplayUartConsole>:


void InitDisplayUartConsole()
{
 80017e0:	b410      	push	{r4}
	huart3.TxCpltCallback = huart3TxCpltCallback;
 80017e2:	4806      	ldr	r0, [pc, #24]	@ (80017fc <InitDisplayUartConsole+0x1c>)
	huart3.RxCpltCallback = huart3RxCpltCallback;

	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 80017e4:	2201      	movs	r2, #1
	huart3.TxCpltCallback = huart3TxCpltCallback;
 80017e6:	4c06      	ldr	r4, [pc, #24]	@ (8001800 <InitDisplayUartConsole+0x20>)
	huart3.RxCpltCallback = huart3RxCpltCallback;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <InitDisplayUartConsole+0x24>)
	huart3.TxCpltCallback = huart3TxCpltCallback;
 80017ea:	f8c0 408c 	str.w	r4, [r0, #140]	@ 0x8c
	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 80017ee:	4906      	ldr	r1, [pc, #24]	@ (8001808 <InitDisplayUartConsole+0x28>)
}
 80017f0:	f85d 4b04 	ldr.w	r4, [sp], #4
	huart3.RxCpltCallback = huart3RxCpltCallback;
 80017f4:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 80017f8:	f004 beb4 	b.w	8006564 <HAL_UART_Receive_IT>
 80017fc:	200142a8 	.word	0x200142a8
 8001800:	08001419 	.word	0x08001419
 8001804:	08001429 	.word	0x08001429
 8001808:	200008e8 	.word	0x200008e8

0800180c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800180c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	2300      	movs	r3, #0
{
 8001810:	b095      	sub	sp, #84	@ 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4927      	ldr	r1, [pc, #156]	@ (80018b0 <SystemClock_Config+0xa4>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001814:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001818:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181a:	9303      	str	r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181c:	930d      	str	r3, [sp, #52]	@ 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800181e:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <SystemClock_Config+0xa8>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001820:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001828:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001832:	640b      	str	r3, [r1, #64]	@ 0x40
 8001834:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800183e:	6813      	ldr	r3, [r2, #0]
 8001840:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001848:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800184a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800184e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001850:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001854:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001856:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800185a:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001860:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001862:	f44f 73c8 	mov.w	r3, #400	@ 0x190
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001866:	e9cd 420e 	strd	r4, r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 400;
 800186a:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800186c:	2202      	movs	r2, #2
 800186e:	2302      	movs	r3, #2
 8001870:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001874:	f002 fc6a 	bl	800414c <HAL_RCC_OscConfig>
 8001878:	b108      	cbz	r0, 800187e <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187c:	e7fe      	b.n	800187c <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800187e:	f002 fc2b 	bl	80040d8 <HAL_PWREx_EnableOverDrive>
 8001882:	4603      	mov	r3, r0
 8001884:	b108      	cbz	r0, 800188a <SystemClock_Config+0x7e>
 8001886:	b672      	cpsid	i
  while (1)
 8001888:	e7fe      	b.n	8001888 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188a:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800188c:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001890:	a803      	add	r0, sp, #12
 8001892:	2106      	movs	r1, #6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001894:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001898:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800189c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018a0:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80018a2:	f002 fe75 	bl	8004590 <HAL_RCC_ClockConfig>
 80018a6:	b108      	cbz	r0, 80018ac <SystemClock_Config+0xa0>
 80018a8:	b672      	cpsid	i
  while (1)
 80018aa:	e7fe      	b.n	80018aa <SystemClock_Config+0x9e>
}
 80018ac:	b015      	add	sp, #84	@ 0x54
 80018ae:	bd30      	pop	{r4, r5, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000

080018b8 <main>:
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b0a4      	sub	sp, #144	@ 0x90
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018c0:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c4:	4bb4      	ldr	r3, [pc, #720]	@ (8001b98 <main+0x2e0>)
 80018c6:	2400      	movs	r4, #0
 80018c8:	f8c3 4250 	str.w	r4, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80018da:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80018dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018e0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80018e4:	f001 fbfa 	bl	80030dc <HAL_Init>
  DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM1_STOP|DBGMCU_APB2_FZ_DBG_TIM8_STOP;
 80018e8:	4aac      	ldr	r2, [pc, #688]	@ (8001b9c <main+0x2e4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ea:	4dad      	ldr	r5, [pc, #692]	@ (8001ba0 <main+0x2e8>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018ec:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
  DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM1_STOP|DBGMCU_APB2_FZ_DBG_TIM8_STOP;
 80018f0:	68d3      	ldr	r3, [r2, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2701      	movs	r7, #1
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018f4:	f04f 0803 	mov.w	r8, #3
 80018f8:	f04f 090b 	mov.w	r9, #11
  DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM1_STOP|DBGMCU_APB2_FZ_DBG_TIM8_STOP;
 80018fc:	f043 0303 	orr.w	r3, r3, #3
 8001900:	60d3      	str	r3, [r2, #12]
  SystemClock_Config();
 8001902:	f7ff ff83 	bl	800180c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	941d      	str	r4, [sp, #116]	@ 0x74
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001908:	4622      	mov	r2, r4
 800190a:	2181      	movs	r1, #129	@ 0x81
 800190c:	48a5      	ldr	r0, [pc, #660]	@ (8001ba4 <main+0x2ec>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
 8001912:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001916:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	632b      	str	r3, [r5, #48]	@ 0x30
 800191e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001928:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	632b      	str	r3, [r5, #48]	@ 0x30
 8001930:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	9303      	str	r3, [sp, #12]
 8001938:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800193a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800193c:	f043 0320 	orr.w	r3, r3, #32
 8001940:	632b      	str	r3, [r5, #48]	@ 0x30
 8001942:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	9304      	str	r3, [sp, #16]
 800194a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800194c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800194e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001952:	632b      	str	r3, [r5, #48]	@ 0x30
 8001954:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195a:	9305      	str	r3, [sp, #20]
 800195c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	632b      	str	r3, [r5, #48]	@ 0x30
 8001966:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	9306      	str	r3, [sp, #24]
 800196e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	632b      	str	r3, [r5, #48]	@ 0x30
 8001978:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	9307      	str	r3, [sp, #28]
 8001980:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001982:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001988:	632b      	str	r3, [r5, #48]	@ 0x30
 800198a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800198c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001990:	9308      	str	r3, [sp, #32]
 8001992:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001994:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	632b      	str	r3, [r5, #48]	@ 0x30
 800199c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80019a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019a6:	f002 fae7 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 80019aa:	4622      	mov	r2, r4
 80019ac:	f64c 4118 	movw	r1, #52248	@ 0xcc18
 80019b0:	487d      	ldr	r0, [pc, #500]	@ (8001ba8 <main+0x2f0>)
 80019b2:	f002 fae1 	bl	8003f78 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_15|GPIO_PIN_0
 80019b6:	f248 038b 	movw	r3, #32907	@ 0x808b
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ba:	a919      	add	r1, sp, #100	@ 0x64
 80019bc:	487b      	ldr	r0, [pc, #492]	@ (8001bac <main+0x2f4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	941b      	str	r4, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_15|GPIO_PIN_0
 80019c0:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c4:	f002 f998 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019cc:	a919      	add	r1, sp, #100	@ 0x64
 80019ce:	4878      	ldr	r0, [pc, #480]	@ (8001bb0 <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	941b      	str	r4, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d2:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f002 f98f 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019da:	f64f 0304 	movw	r3, #63492	@ 0xf804
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019de:	a919      	add	r1, sp, #100	@ 0x64
 80019e0:	4874      	ldr	r0, [pc, #464]	@ (8001bb4 <main+0x2fc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019e2:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e8:	f002 f986 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80019ec:	2381      	movs	r3, #129	@ 0x81
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	a919      	add	r1, sp, #100	@ 0x64
 80019f0:	486c      	ldr	r0, [pc, #432]	@ (8001ba4 <main+0x2ec>)
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80019f2:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	971a      	str	r7, [sp, #104]	@ 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f002 f97d 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019fe:	f24d 73ff 	movw	r3, #55295	@ 0xd7ff
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a02:	a919      	add	r1, sp, #100	@ 0x64
 8001a04:	486c      	ldr	r0, [pc, #432]	@ (8001bb8 <main+0x300>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a06:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a0c:	f002 f974 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001a10:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	a919      	add	r1, sp, #100	@ 0x64
 8001a16:	4863      	ldr	r0, [pc, #396]	@ (8001ba4 <main+0x2ec>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001a18:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f002 f96b 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a22:	9619      	str	r6, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2602      	movs	r6, #2
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a26:	a919      	add	r1, sp, #100	@ 0x64
 8001a28:	485e      	ldr	r0, [pc, #376]	@ (8001ba4 <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	e9cd 641a 	strd	r6, r4, [sp, #104]	@ 0x68
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a2e:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f002 f961 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001a36:	f64c 4318 	movw	r3, #52248	@ 0xcc18
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3a:	a919      	add	r1, sp, #100	@ 0x64
 8001a3c:	485a      	ldr	r0, [pc, #360]	@ (8001ba8 <main+0x2f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	941c      	str	r4, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001a40:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	e9cd 741a 	strd	r7, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a46:	f002 f957 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a4a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	a919      	add	r1, sp, #100	@ 0x64
 8001a50:	485a      	ldr	r0, [pc, #360]	@ (8001bbc <main+0x304>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a52:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a54:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a5a:	931d      	str	r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	e9cd 641a 	strd	r6, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f002 f94a 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a64:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a68:	a919      	add	r1, sp, #100	@ 0x64
 8001a6a:	4854      	ldr	r0, [pc, #336]	@ (8001bbc <main+0x304>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a6c:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f002 f941 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	a919      	add	r1, sp, #100	@ 0x64
 8001a7c:	484c      	ldr	r0, [pc, #304]	@ (8001bb0 <main+0x2f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a7e:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a84:	f002 f938 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a88:	23e4      	movs	r3, #228	@ 0xe4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8a:	a919      	add	r1, sp, #100	@ 0x64
 8001a8c:	4846      	ldr	r0, [pc, #280]	@ (8001ba8 <main+0x2f0>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a8e:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a94:	f002 f930 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a98:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a9c:	a919      	add	r1, sp, #100	@ 0x64
 8001a9e:	4846      	ldr	r0, [pc, #280]	@ (8001bb8 <main+0x300>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa0:	f8cd 9074 	str.w	r9, [sp, #116]	@ 0x74
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 8001aa4:	f04f 5980 	mov.w	r9, #268435456	@ 0x10000000
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001aa8:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	e9cd 641a 	strd	r6, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ab2:	f002 f921 	bl	8003cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ab6:	2330      	movs	r3, #48	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	a919      	add	r1, sp, #100	@ 0x64
 8001aba:	483a      	ldr	r0, [pc, #232]	@ (8001ba4 <main+0x2ec>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001abc:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	e9cd 641a 	strd	r6, r4, [sp, #104]	@ 0x68
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac2:	e9cd 461c 	strd	r4, r6, [sp, #112]	@ 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f002 f917 	bl	8003cf8 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001acc:	4622      	mov	r2, r4
 8001ace:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ad0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001ad4:	200f      	movs	r0, #15
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ad6:	632b      	str	r3, [r5, #48]	@ 0x30
 8001ad8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ae2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001ae4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ae8:	632b      	str	r3, [r5, #48]	@ 0x30
 8001aea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  hadc1.Instance = ADC1;
 8001aec:	4d34      	ldr	r5, [pc, #208]	@ (8001bc0 <main+0x308>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001af6:	f001 fe23 	bl	8003740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001afa:	200f      	movs	r0, #15
 8001afc:	f001 fe5c 	bl	80037b8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001b00:	4622      	mov	r2, r4
 8001b02:	4621      	mov	r1, r4
 8001b04:	203c      	movs	r0, #60	@ 0x3c
 8001b06:	f001 fe1b 	bl	8003740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001b0a:	203c      	movs	r0, #60	@ 0x3c
 8001b0c:	f001 fe54 	bl	80037b8 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001b10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b14:	f8df e0ac 	ldr.w	lr, [pc, #172]	@ 8001bc4 <main+0x30c>
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b18:	4628      	mov	r0, r5
  ADC_MultiModeTypeDef multimode = {0};
 8001b1a:	9412      	str	r4, [sp, #72]	@ 0x48
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b1c:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b1e:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b20:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b24:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b26:	616c      	str	r4, [r5, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b28:	612f      	str	r7, [r5, #16]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b2a:	f885 7030 	strb.w	r7, [r5, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b2e:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
 8001b32:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  ADC_MultiModeTypeDef multimode = {0};
 8001b36:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001b3a:	e9c5 e300 	strd	lr, r3, [r5]
  hadc1.Init.NbrOfConversion = 6;
 8001b3e:	2406      	movs	r4, #6
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 8001b40:	f04f 6320 	mov.w	r3, #167772160	@ 0xa000000
  hadc1.Init.NbrOfConversion = 6;
 8001b44:	61ec      	str	r4, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 8001b46:	e9c5 390a 	strd	r3, r9, [r5, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b4a:	f001 fae9 	bl	8003120 <HAL_ADC_Init>
 8001b4e:	b108      	cbz	r0, 8001b54 <main+0x29c>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b50:	b672      	cpsid	i
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <main+0x29a>
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8001b54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001b58:	9014      	str	r0, [sp, #80]	@ 0x50
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8001b5a:	2016      	movs	r0, #22
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b5c:	a912      	add	r1, sp, #72	@ 0x48
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8001b5e:	e9cd 0312 	strd	r0, r3, [sp, #72]	@ 0x48
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b62:	4628      	mov	r0, r5
 8001b64:	f001 fd2e 	bl	80035c4 <HAL_ADCEx_MultiModeConfigChannel>
 8001b68:	b108      	cbz	r0, 8001b6e <main+0x2b6>
 8001b6a:	b672      	cpsid	i
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <main+0x2b4>
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b6e:	e9cd 771a 	strd	r7, r7, [sp, #104]	@ 0x68
  sConfig.Channel = ADC_CHANNEL_5;
 8001b72:	2705      	movs	r7, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b74:	a919      	add	r1, sp, #100	@ 0x64
 8001b76:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8001b78:	9719      	str	r7, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7a:	f001 fb9d 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001b7e:	b108      	cbz	r0, 8001b84 <main+0x2cc>
 8001b80:	b672      	cpsid	i
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <main+0x2ca>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b84:	a919      	add	r1, sp, #100	@ 0x64
 8001b86:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_6;
 8001b88:	e9cd 4619 	strd	r4, r6, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8c:	f001 fb94 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001b90:	b1d0      	cbz	r0, 8001bc8 <main+0x310>
 8001b92:	b672      	cpsid	i
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <main+0x2dc>
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00
 8001b9c:	e0042000 	.word	0xe0042000
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40021400 	.word	0x40021400
 8001bb8:	40021800 	.word	0x40021800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	2001464c 	.word	0x2001464c
 8001bc4:	40012000 	.word	0x40012000
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc8:	a919      	add	r1, sp, #100	@ 0x64
 8001bca:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001bcc:	e9cd 8819 	strd	r8, r8, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd0:	f001 fb72 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001bd4:	b108      	cbz	r0, 8001bda <main+0x322>
 8001bd6:	b672      	cpsid	i
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <main+0x320>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001bda:	210d      	movs	r1, #13
 8001bdc:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bde:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001be0:	e9cd 1319 	strd	r1, r3, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be4:	a919      	add	r1, sp, #100	@ 0x64
 8001be6:	f001 fb67 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001bea:	b108      	cbz	r0, 8001bf0 <main+0x338>
 8001bec:	b672      	cpsid	i
  while (1)
 8001bee:	e7fe      	b.n	8001bee <main+0x336>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001bf0:	e9cd 0719 	strd	r0, r7, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf4:	a919      	add	r1, sp, #100	@ 0x64
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	f001 fb5e 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001bfc:	b108      	cbz	r0, 8001c02 <main+0x34a>
 8001bfe:	b672      	cpsid	i
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <main+0x348>
  sConfig.Channel = ADC_CHANNEL_15;
 8001c02:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c04:	4628      	mov	r0, r5
 8001c06:	a919      	add	r1, sp, #100	@ 0x64
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001c08:	941a      	str	r4, [sp, #104]	@ 0x68
  sConfig.Channel = ADC_CHANNEL_15;
 8001c0a:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c0c:	f001 fb54 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001c10:	4604      	mov	r4, r0
 8001c12:	b108      	cbz	r0, 8001c18 <main+0x360>
 8001c14:	b672      	cpsid	i
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <main+0x35e>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c18:	222c      	movs	r2, #44	@ 0x2c
 8001c1a:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1c:	900d      	str	r0, [sp, #52]	@ 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1e:	9018      	str	r0, [sp, #96]	@ 0x60
  htim1.Instance = TIM1;
 8001c20:	4da2      	ldr	r5, [pc, #648]	@ (8001eac <main+0x5f4>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c22:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 8001c26:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
 8001c2a:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c32:	a819      	add	r0, sp, #100	@ 0x64
 8001c34:	f005 fa31 	bl	800709a <memset>
  htim1.Instance = TIM1;
 8001c38:	4b9d      	ldr	r3, [pc, #628]	@ (8001eb0 <main+0x5f8>)
  htim1.Init.Period = 10000;
 8001c3a:	2220      	movs	r2, #32
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c3c:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 8001c3e:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 10000;
 8001c40:	f242 7310 	movw	r3, #10000	@ 0x2710
  htim1.Init.Prescaler = 0;
 8001c44:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c46:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = 0;
 8001c48:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 10000;
 8001c4c:	e9c5 2302 	strd	r2, r3, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c50:	f003 fc2a 	bl	80054a8 <HAL_TIM_PWM_Init>
 8001c54:	b108      	cbz	r0, 8001c5a <main+0x3a2>
 8001c56:	b672      	cpsid	i
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <main+0x3a0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001c5a:	2310      	movs	r3, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001c5c:	f44f 1900 	mov.w	r9, #2097152	@ 0x200000
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c60:	4628      	mov	r0, r5
 8001c62:	a90d      	add	r1, sp, #52	@ 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001c64:	930d      	str	r3, [sp, #52]	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001c66:	2380      	movs	r3, #128	@ 0x80
 8001c68:	e9cd 930e 	strd	r9, r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c6c:	f003 fdd0 	bl	8005810 <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	b108      	cbz	r0, 8001c76 <main+0x3be>
 8001c72:	b672      	cpsid	i
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <main+0x3bc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c76:	2200      	movs	r2, #0
 8001c78:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7a:	a912      	add	r1, sp, #72	@ 0x48
 8001c7c:	488b      	ldr	r0, [pc, #556]	@ (8001eac <main+0x5f4>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c7e:	9218      	str	r2, [sp, #96]	@ 0x60
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c80:	e9cd 3212 	strd	r3, r2, [sp, #72]	@ 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c84:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c88:	e9cd 2216 	strd	r2, r2, [sp, #88]	@ 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8c:	f003 fc72 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8001c90:	b108      	cbz	r0, 8001c96 <main+0x3de>
 8001c92:	b672      	cpsid	i
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <main+0x3dc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c96:	2204      	movs	r2, #4
 8001c98:	a912      	add	r1, sp, #72	@ 0x48
 8001c9a:	4884      	ldr	r0, [pc, #528]	@ (8001eac <main+0x5f4>)
 8001c9c:	f003 fc6a 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	b108      	cbz	r0, 8001ca6 <main+0x3ee>
 8001ca2:	b672      	cpsid	i
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <main+0x3ec>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	a912      	add	r1, sp, #72	@ 0x48
 8001caa:	4880      	ldr	r0, [pc, #512]	@ (8001eac <main+0x5f4>)
 8001cac:	f003 fc62 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8001cb0:	b108      	cbz	r0, 8001cb6 <main+0x3fe>
 8001cb2:	b672      	cpsid	i
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <main+0x3fc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	a912      	add	r1, sp, #72	@ 0x48
 8001cba:	487c      	ldr	r0, [pc, #496]	@ (8001eac <main+0x5f4>)
 8001cbc:	f003 fc5a 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	b108      	cbz	r0, 8001cc6 <main+0x40e>
 8001cc2:	b672      	cpsid	i
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <main+0x40c>
  sBreakDeadTimeConfig.DeadTime = 50;
 8001cc6:	2232      	movs	r2, #50	@ 0x32
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 1;
 8001ccc:	2501      	movs	r5, #1
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cce:	901d      	str	r0, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cd0:	9020      	str	r0, [sp, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cd2:	a919      	add	r1, sp, #100	@ 0x64
  sBreakDeadTimeConfig.BreakFilter = 1;
 8001cd4:	951f      	str	r5, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cd6:	9321      	str	r3, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.DeadTime = 50;
 8001cd8:	e9cd 021b 	strd	r0, r2, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ce0:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ce4:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ce8:	4870      	ldr	r0, [pc, #448]	@ (8001eac <main+0x5f4>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cea:	921e      	str	r2, [sp, #120]	@ 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cec:	f003 fdea 	bl	80058c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	b108      	cbz	r0, 8001cf8 <main+0x440>
 8001cf4:	b672      	cpsid	i
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <main+0x43e>
  HAL_TIM_MspPostInit(&htim1);
 8001cf8:	486c      	ldr	r0, [pc, #432]	@ (8001eac <main+0x5f4>)
 8001cfa:	f000 fffd 	bl	8002cf8 <HAL_TIM_MspPostInit>
  huart3.Init.BaudRate = 115200;
 8001cfe:	f8df 81c0 	ldr.w	r8, [pc, #448]	@ 8001ec0 <main+0x608>
  huart3.Instance = USART3;
 8001d02:	486c      	ldr	r0, [pc, #432]	@ (8001eb4 <main+0x5fc>)
  huart3.Init.BaudRate = 115200;
 8001d04:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001d08:	e9c0 8300 	strd	r8, r3, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	230c      	movs	r3, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d0e:	6104      	str	r4, [r0, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d10:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d18:	e9c0 4408 	strd	r4, r4, [r0, #32]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d1e:	f004 fb59 	bl	80063d4 <HAL_UART_Init>
 8001d22:	b108      	cbz	r0, 8001d28 <main+0x470>
 8001d24:	b672      	cpsid	i
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <main+0x46e>
  hadc2.Instance = ADC2;
 8001d28:	4c63      	ldr	r4, [pc, #396]	@ (8001eb8 <main+0x600>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001d2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d2e:	f8df e194 	ldr.w	lr, [pc, #404]	@ 8001ec4 <main+0x60c>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d32:	60a0      	str	r0, [r4, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d34:	61a0      	str	r0, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d36:	f884 0020 	strb.w	r0, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d3a:	60e0      	str	r0, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d3c:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d40:	6125      	str	r5, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d42:	6165      	str	r5, [r4, #20]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001d44:	e9c4 e300 	strd	lr, r3, [r4]
  hadc2.Init.NbrOfConversion = 6;
 8001d48:	2306      	movs	r3, #6
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d4a:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
 8001d4e:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d52:	4620      	mov	r0, r4
  hadc2.Init.NbrOfConversion = 6;
 8001d54:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d56:	f001 f9e3 	bl	8003120 <HAL_ADC_Init>
 8001d5a:	b108      	cbz	r0, 8001d60 <main+0x4a8>
 8001d5c:	b672      	cpsid	i
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <main+0x4a6>
  sConfig.Channel = ADC_CHANNEL_9;
 8001d60:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d62:	a919      	add	r1, sp, #100	@ 0x64
 8001d64:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8001d66:	9319      	str	r3, [sp, #100]	@ 0x64
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001d68:	e9cd 551a 	strd	r5, r5, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d6c:	f001 faa4 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001d70:	b108      	cbz	r0, 8001d76 <main+0x4be>
 8001d72:	b672      	cpsid	i
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <main+0x4bc>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d76:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d78:	a919      	add	r1, sp, #100	@ 0x64
 8001d7a:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d7c:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d7e:	f001 fa9b 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001d82:	b108      	cbz	r0, 8001d88 <main+0x4d0>
 8001d84:	b672      	cpsid	i
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <main+0x4ce>
  sConfig.Channel = ADC_CHANNEL_10;
 8001d88:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	a919      	add	r1, sp, #100	@ 0x64
  sConfig.Channel = ADC_CHANNEL_10;
 8001d8e:	9319      	str	r3, [sp, #100]	@ 0x64
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d90:	2303      	movs	r3, #3
 8001d92:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d94:	f001 fa90 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001d98:	b108      	cbz	r0, 8001d9e <main+0x4e6>
 8001d9a:	b672      	cpsid	i
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <main+0x4e4>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d9e:	230b      	movs	r3, #11
 8001da0:	f04f 0804 	mov.w	r8, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001da4:	a919      	add	r1, sp, #100	@ 0x64
 8001da6:	4844      	ldr	r0, [pc, #272]	@ (8001eb8 <main+0x600>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001da8:	e9cd 3819 	strd	r3, r8, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001dac:	f001 fa84 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001db0:	b108      	cbz	r0, 8001db6 <main+0x4fe>
 8001db2:	b672      	cpsid	i
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <main+0x4fc>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001db6:	2705      	movs	r7, #5
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001db8:	a919      	add	r1, sp, #100	@ 0x64
 8001dba:	483f      	ldr	r0, [pc, #252]	@ (8001eb8 <main+0x600>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001dbc:	971a      	str	r7, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001dbe:	f001 fa7b 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001dc2:	b108      	cbz	r0, 8001dc8 <main+0x510>
 8001dc4:	b672      	cpsid	i
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <main+0x50e>
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001dc8:	f04f 0902 	mov.w	r9, #2
 8001dcc:	2606      	movs	r6, #6
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001dce:	a919      	add	r1, sp, #100	@ 0x64
 8001dd0:	4839      	ldr	r0, [pc, #228]	@ (8001eb8 <main+0x600>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001dd2:	e9cd 9619 	strd	r9, r6, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001dd6:	f001 fa6f 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001dda:	b108      	cbz	r0, 8001de0 <main+0x528>
 8001ddc:	b672      	cpsid	i
  while (1)
 8001dde:	e7fe      	b.n	8001dde <main+0x526>
  hadc3.Instance = ADC3;
 8001de0:	4c36      	ldr	r4, [pc, #216]	@ (8001ebc <main+0x604>)
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001de2:	2501      	movs	r5, #1
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001de4:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8001ec8 <main+0x610>
 8001de8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
  hadc3.Init.NbrOfConversion = 9;
 8001dec:	f04f 0a09 	mov.w	sl, #9
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001df0:	60a0      	str	r0, [r4, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001df2:	61a0      	str	r0, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001df4:	f884 0020 	strb.w	r0, [r4, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001df8:	60e0      	str	r0, [r4, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001dfa:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
  hadc3.Init.NbrOfConversion = 9;
 8001dfe:	f8c4 a01c 	str.w	sl, [r4, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e02:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
 8001e06:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e0a:	4620      	mov	r0, r4
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001e10:	e9c4 c300 	strd	ip, r3, [r4]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e14:	f001 f984 	bl	8003120 <HAL_ADC_Init>
 8001e18:	b108      	cbz	r0, 8001e1e <main+0x566>
 8001e1a:	b672      	cpsid	i
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <main+0x564>
  sConfig.Channel = ADC_CHANNEL_8;
 8001e1e:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e20:	a919      	add	r1, sp, #100	@ 0x64
 8001e22:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_8;
 8001e24:	9319      	str	r3, [sp, #100]	@ 0x64
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001e26:	e9cd 551a 	strd	r5, r5, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e2a:	f001 fa45 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001e2e:	b108      	cbz	r0, 8001e34 <main+0x57c>
 8001e30:	b672      	cpsid	i
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <main+0x57a>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e34:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
  sConfig.Channel = ADC_CHANNEL_3;
 8001e38:	f04f 0903 	mov.w	r9, #3
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e3c:	a919      	add	r1, sp, #100	@ 0x64
 8001e3e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001e40:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e44:	f001 fa38 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001e48:	b108      	cbz	r0, 8001e4e <main+0x596>
 8001e4a:	b672      	cpsid	i
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <main+0x594>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e4e:	a919      	add	r1, sp, #100	@ 0x64
 8001e50:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e52:	e9cd a919 	strd	sl, r9, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e56:	f001 fa2f 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001e5a:	b108      	cbz	r0, 8001e60 <main+0x5a8>
 8001e5c:	b672      	cpsid	i
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <main+0x5a6>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e60:	a919      	add	r1, sp, #100	@ 0x64
 8001e62:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e64:	e9cd 5819 	strd	r5, r8, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e68:	f001 fa26 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001e6c:	b108      	cbz	r0, 8001e72 <main+0x5ba>
 8001e6e:	b672      	cpsid	i
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <main+0x5b8>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e72:	e9cd 0719 	strd	r0, r7, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e76:	a919      	add	r1, sp, #100	@ 0x64
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f001 fa1d 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001e7e:	b108      	cbz	r0, 8001e84 <main+0x5cc>
 8001e80:	b672      	cpsid	i
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <main+0x5ca>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e84:	4620      	mov	r0, r4
 8001e86:	a919      	add	r1, sp, #100	@ 0x64
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001e88:	e9cd 6619 	strd	r6, r6, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e8c:	f001 fa14 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001e90:	b108      	cbz	r0, 8001e96 <main+0x5de>
 8001e92:	b672      	cpsid	i
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <main+0x5dc>
  sConfig.Channel = ADC_CHANNEL_7;
 8001e96:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e98:	a919      	add	r1, sp, #100	@ 0x64
 8001e9a:	4808      	ldr	r0, [pc, #32]	@ (8001ebc <main+0x604>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001e9c:	e9cd 3319 	strd	r3, r3, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ea0:	f001 fa0a 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001ea4:	b190      	cbz	r0, 8001ecc <main+0x614>
 8001ea6:	b672      	cpsid	i
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <main+0x5f0>
 8001eaa:	bf00      	nop
 8001eac:	200143f4 	.word	0x200143f4
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	200142a8 	.word	0x200142a8
 8001eb8:	200145e8 	.word	0x200145e8
 8001ebc:	20014584 	.word	0x20014584
 8001ec0:	40004800 	.word	0x40004800
 8001ec4:	40012100 	.word	0x40012100
 8001ec8:	40012200 	.word	0x40012200
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	2608      	movs	r6, #8
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ed0:	a919      	add	r1, sp, #100	@ 0x64
 8001ed2:	489d      	ldr	r0, [pc, #628]	@ (8002148 <main+0x890>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001ed4:	e9cd 3619 	strd	r3, r6, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ed8:	f001 f9ee 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001edc:	b108      	cbz	r0, 8001ee2 <main+0x62a>
 8001ede:	b672      	cpsid	i
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <main+0x628>
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001ee2:	2309      	movs	r3, #9
 8001ee4:	2704      	movs	r7, #4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ee6:	a919      	add	r1, sp, #100	@ 0x64
 8001ee8:	4897      	ldr	r0, [pc, #604]	@ (8002148 <main+0x890>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001eea:	e9cd 7319 	strd	r7, r3, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001eee:	f001 f9e3 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	b108      	cbz	r0, 8001efa <main+0x642>
 8001ef6:	b672      	cpsid	i
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <main+0x640>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001efa:	4601      	mov	r1, r0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001efc:	9011      	str	r0, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efe:	900a      	str	r0, [sp, #40]	@ 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f00:	222c      	movs	r2, #44	@ 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f02:	9018      	str	r0, [sp, #96]	@ 0x60
  htim8.Instance = TIM8;
 8001f04:	4d91      	ldr	r5, [pc, #580]	@ (800214c <main+0x894>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f06:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8001f0a:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0e:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 8001f12:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
 8001f16:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1a:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f1e:	a819      	add	r0, sp, #100	@ 0x64
 8001f20:	f005 f8bb 	bl	800709a <memset>
  htim8.Instance = TIM8;
 8001f24:	4b8a      	ldr	r3, [pc, #552]	@ (8002150 <main+0x898>)
  htim8.Init.Period = 10000;
 8001f26:	2020      	movs	r0, #32
  htim8.Init.Prescaler = 0;
 8001f28:	606c      	str	r4, [r5, #4]
  htim8.Instance = TIM8;
 8001f2a:	602b      	str	r3, [r5, #0]
  htim8.Init.Period = 10000;
 8001f2c:	f242 7310 	movw	r3, #10000	@ 0x2710
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	61ac      	str	r4, [r5, #24]
  htim8.Init.Period = 10000;
 8001f32:	e9c5 0302 	strd	r0, r3, [r5, #8]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f36:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 8001f38:	e9c5 4404 	strd	r4, r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f3c:	f003 fa82 	bl	8005444 <HAL_TIM_Base_Init>
 8001f40:	b108      	cbz	r0, 8001f46 <main+0x68e>
 8001f42:	b672      	cpsid	i
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <main+0x68c>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001f46:	4628      	mov	r0, r5
 8001f48:	f003 faae 	bl	80054a8 <HAL_TIM_PWM_Init>
 8001f4c:	b108      	cbz	r0, 8001f52 <main+0x69a>
 8001f4e:	b672      	cpsid	i
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <main+0x698>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001f52:	2306      	movs	r3, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001f54:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001f56:	a90d      	add	r1, sp, #52	@ 0x34
 8001f58:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001f5a:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001f5c:	f003 f91a 	bl	8005194 <HAL_TIM_SlaveConfigSynchro>
 8001f60:	b108      	cbz	r0, 8001f66 <main+0x6ae>
 8001f62:	b672      	cpsid	i
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <main+0x6ac>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001f66:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f68:	a90a      	add	r1, sp, #40	@ 0x28
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f6a:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f6e:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001f70:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f72:	f003 fc4d 	bl	8005810 <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4602      	mov	r2, r0
 8001f78:	b108      	cbz	r0, 8001f7e <main+0x6c6>
 8001f7a:	b672      	cpsid	i
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <main+0x6c4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7e:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f80:	a912      	add	r1, sp, #72	@ 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f82:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f86:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f8a:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f8e:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f90:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f92:	f003 faef 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8001f96:	b108      	cbz	r0, 8001f9c <main+0x6e4>
 8001f98:	b672      	cpsid	i
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <main+0x6e2>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9c:	463a      	mov	r2, r7
 8001f9e:	a912      	add	r1, sp, #72	@ 0x48
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f003 fae7 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	b108      	cbz	r0, 8001fac <main+0x6f4>
 8001fa8:	b672      	cpsid	i
  while (1)
 8001faa:	e7fe      	b.n	8001faa <main+0x6f2>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fac:	4632      	mov	r2, r6
 8001fae:	a912      	add	r1, sp, #72	@ 0x48
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f003 fadf 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8001fb6:	b108      	cbz	r0, 8001fbc <main+0x704>
 8001fb8:	b672      	cpsid	i
  while (1)
 8001fba:	e7fe      	b.n	8001fba <main+0x702>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fbc:	220c      	movs	r2, #12
 8001fbe:	a912      	add	r1, sp, #72	@ 0x48
 8001fc0:	4862      	ldr	r0, [pc, #392]	@ (800214c <main+0x894>)
 8001fc2:	f003 fad7 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	b108      	cbz	r0, 8001fcc <main+0x714>
 8001fc8:	b672      	cpsid	i
  while (1)
 8001fca:	e7fe      	b.n	8001fca <main+0x712>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.DeadTime = 50;
 8001fd0:	2132      	movs	r1, #50	@ 0x32
  sBreakDeadTimeConfig.BreakFilter = 1;
 8001fd2:	2601      	movs	r6, #1
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fd4:	9020      	str	r0, [sp, #128]	@ 0x80
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fd6:	9022      	str	r0, [sp, #136]	@ 0x88
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fd8:	9023      	str	r0, [sp, #140]	@ 0x8c
  sBreakDeadTimeConfig.BreakFilter = 1;
 8001fda:	961f      	str	r6, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fdc:	e9cd 021d 	strd	r0, r2, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fe0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.DeadTime = 50;
 8001fe4:	e9cd 011b 	strd	r0, r1, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fe8:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001fec:	a919      	add	r1, sp, #100	@ 0x64
 8001fee:	4857      	ldr	r0, [pc, #348]	@ (800214c <main+0x894>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ff0:	9221      	str	r2, [sp, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff2:	f003 fc67 	bl	80058c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ff6:	4605      	mov	r5, r0
 8001ff8:	b108      	cbz	r0, 8001ffe <main+0x746>
 8001ffa:	b672      	cpsid	i
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <main+0x744>
  hi2c1.Instance = I2C1;
 8001ffe:	4c55      	ldr	r4, [pc, #340]	@ (8002154 <main+0x89c>)
  HAL_TIM_MspPostInit(&htim8);
 8002000:	4852      	ldr	r0, [pc, #328]	@ (800214c <main+0x894>)
 8002002:	f000 fe79 	bl	8002cf8 <HAL_TIM_MspPostInit>
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002006:	4b54      	ldr	r3, [pc, #336]	@ (8002158 <main+0x8a0>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002008:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800200a:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200c:	e9c4 5602 	strd	r5, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8002010:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002014:	e9c4 5506 	strd	r5, r5, [r4, #24]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002018:	4d50      	ldr	r5, [pc, #320]	@ (800215c <main+0x8a4>)
 800201a:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800201e:	f001 ffaf 	bl	8003f80 <HAL_I2C_Init>
 8002022:	4601      	mov	r1, r0
 8002024:	b108      	cbz	r0, 800202a <main+0x772>
 8002026:	b672      	cpsid	i
  while (1)
 8002028:	e7fe      	b.n	8002028 <main+0x770>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800202a:	4620      	mov	r0, r4
 800202c:	f001 fffe 	bl	800402c <HAL_I2CEx_ConfigAnalogFilter>
 8002030:	4601      	mov	r1, r0
 8002032:	b108      	cbz	r0, 8002038 <main+0x780>
 8002034:	b672      	cpsid	i
  while (1)
 8002036:	e7fe      	b.n	8002036 <main+0x77e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002038:	4620      	mov	r0, r4
 800203a:	f002 f821 	bl	8004080 <HAL_I2CEx_ConfigDigitalFilter>
 800203e:	4603      	mov	r3, r0
 8002040:	b108      	cbz	r0, 8002046 <main+0x78e>
 8002042:	b672      	cpsid	i
  while (1)
 8002044:	e7fe      	b.n	8002044 <main+0x78c>
  hcan1.Instance = CAN1;
 8002046:	4846      	ldr	r0, [pc, #280]	@ (8002160 <main+0x8a8>)
  hcan1.Init.Prescaler = 16;
 8002048:	4a46      	ldr	r2, [pc, #280]	@ (8002164 <main+0x8ac>)
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800204a:	8383      	strh	r3, [r0, #28]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800204c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002050:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcan1.Init.Prescaler = 16;
 8002054:	2310      	movs	r3, #16
 8002056:	e9c0 2300 	strd	r2, r3, [r0]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800205a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800205e:	6103      	str	r3, [r0, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002060:	f001 fadc 	bl	800361c <HAL_CAN_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	b108      	cbz	r0, 800206c <main+0x7b4>
 8002068:	b672      	cpsid	i
  while (1)
 800206a:	e7fe      	b.n	800206a <main+0x7b2>
  hi2c2.Instance = I2C2;
 800206c:	4c3e      	ldr	r4, [pc, #248]	@ (8002168 <main+0x8b0>)
  hi2c2.Init.OwnAddress2 = 0;
 800206e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002072:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002076:	6223      	str	r3, [r4, #32]
  hi2c2.Instance = I2C2;
 8002078:	4b3c      	ldr	r3, [pc, #240]	@ (800216c <main+0x8b4>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800207a:	60e6      	str	r6, [r4, #12]
  hi2c2.Instance = I2C2;
 800207c:	6023      	str	r3, [r4, #0]
  hi2c2.Init.OwnAddress1 = 0;
 800207e:	e9c4 5001 	strd	r5, r0, [r4, #4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002082:	4620      	mov	r0, r4
 8002084:	f001 ff7c 	bl	8003f80 <HAL_I2C_Init>
 8002088:	4601      	mov	r1, r0
 800208a:	b108      	cbz	r0, 8002090 <main+0x7d8>
 800208c:	b672      	cpsid	i
  while (1)
 800208e:	e7fe      	b.n	800208e <main+0x7d6>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002090:	4620      	mov	r0, r4
 8002092:	f001 ffcb 	bl	800402c <HAL_I2CEx_ConfigAnalogFilter>
 8002096:	4601      	mov	r1, r0
 8002098:	b108      	cbz	r0, 800209e <main+0x7e6>
 800209a:	b672      	cpsid	i
  while (1)
 800209c:	e7fe      	b.n	800209c <main+0x7e4>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800209e:	4620      	mov	r0, r4
 80020a0:	f001 ffee 	bl	8004080 <HAL_I2CEx_ConfigDigitalFilter>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b108      	cbz	r0, 80020ac <main+0x7f4>
 80020a8:	b672      	cpsid	i
  while (1)
 80020aa:	e7fe      	b.n	80020aa <main+0x7f2>
  htim2.Instance = TIM2;
 80020ac:	4830      	ldr	r0, [pc, #192]	@ (8002170 <main+0x8b8>)
 80020ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b2:	9314      	str	r3, [sp, #80]	@ 0x50
  htim2.Instance = TIM2;
 80020b4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 99;
 80020b6:	2263      	movs	r2, #99	@ 0x63
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b8:	931f      	str	r3, [sp, #124]	@ 0x7c
  htim2.Init.Prescaler = 99;
 80020ba:	6042      	str	r2, [r0, #4]
  htim2.Init.Period = 199;
 80020bc:	22c7      	movs	r2, #199	@ 0xc7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020be:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c2:	6183      	str	r3, [r0, #24]
  htim2.Init.Period = 199;
 80020c4:	60c2      	str	r2, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c6:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ca:	e9cd 3319 	strd	r3, r3, [sp, #100]	@ 0x64
 80020ce:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
 80020d2:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020d6:	f003 f9e7 	bl	80054a8 <HAL_TIM_PWM_Init>
 80020da:	b108      	cbz	r0, 80020e0 <main+0x828>
 80020dc:	b672      	cpsid	i
  while (1)
 80020de:	e7fe      	b.n	80020de <main+0x826>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020e2:	a912      	add	r1, sp, #72	@ 0x48
 80020e4:	4822      	ldr	r0, [pc, #136]	@ (8002170 <main+0x8b8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	9312      	str	r3, [sp, #72]	@ 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e8:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ea:	f003 fb91 	bl	8005810 <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	b108      	cbz	r0, 80020f6 <main+0x83e>
 80020f2:	b672      	cpsid	i
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <main+0x83c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f6:	2060      	movs	r0, #96	@ 0x60
  sConfigOC.Pulse = 100;
 80020f8:	2164      	movs	r1, #100	@ 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020fa:	2208      	movs	r2, #8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fc:	931b      	str	r3, [sp, #108]	@ 0x6c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fe:	931d      	str	r3, [sp, #116]	@ 0x74
  sConfigOC.Pulse = 100;
 8002100:	e9cd 0119 	strd	r0, r1, [sp, #100]	@ 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002104:	4469      	add	r1, sp
 8002106:	481a      	ldr	r0, [pc, #104]	@ (8002170 <main+0x8b8>)
 8002108:	f003 fa34 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	b108      	cbz	r0, 8002114 <main+0x85c>
 8002110:	b672      	cpsid	i
  while (1)
 8002112:	e7fe      	b.n	8002112 <main+0x85a>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002114:	220c      	movs	r2, #12
 8002116:	a919      	add	r1, sp, #100	@ 0x64
 8002118:	4815      	ldr	r0, [pc, #84]	@ (8002170 <main+0x8b8>)
  sConfigOC.Pulse = 0;
 800211a:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800211c:	f003 fa2a 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8002120:	4604      	mov	r4, r0
 8002122:	b108      	cbz	r0, 8002128 <main+0x870>
 8002124:	b672      	cpsid	i
  while (1)
 8002126:	e7fe      	b.n	8002126 <main+0x86e>
  HAL_TIM_MspPostInit(&htim2);
 8002128:	4811      	ldr	r0, [pc, #68]	@ (8002170 <main+0x8b8>)
  hdac.Instance = DAC;
 800212a:	4d12      	ldr	r5, [pc, #72]	@ (8002174 <main+0x8bc>)
  HAL_TIM_MspPostInit(&htim2);
 800212c:	f000 fde4 	bl	8002cf8 <HAL_TIM_MspPostInit>
  hdac.Instance = DAC;
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <main+0x8c0>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002132:	4628      	mov	r0, r5
  DAC_ChannelConfTypeDef sConfig = {0};
 8002134:	9419      	str	r4, [sp, #100]	@ 0x64
 8002136:	941a      	str	r4, [sp, #104]	@ 0x68
  hdac.Instance = DAC;
 8002138:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800213a:	f001 fb61 	bl	8003800 <HAL_DAC_Init>
 800213e:	4602      	mov	r2, r0
 8002140:	b1e0      	cbz	r0, 800217c <main+0x8c4>
 8002142:	b672      	cpsid	i
  while (1)
 8002144:	e7fe      	b.n	8002144 <main+0x88c>
 8002146:	bf00      	nop
 8002148:	20014584 	.word	0x20014584
 800214c:	2001435c 	.word	0x2001435c
 8002150:	40010400 	.word	0x40010400
 8002154:	20014494 	.word	0x20014494
 8002158:	40005400 	.word	0x40005400
 800215c:	00c0eaff 	.word	0x00c0eaff
 8002160:	200144fc 	.word	0x200144fc
 8002164:	40006400 	.word	0x40006400
 8002168:	20014440 	.word	0x20014440
 800216c:	40005800 	.word	0x40005800
 8002170:	200143a8 	.word	0x200143a8
 8002174:	200144e8 	.word	0x200144e8
 8002178:	40007400 	.word	0x40007400
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800217c:	a919      	add	r1, sp, #100	@ 0x64
 800217e:	4628      	mov	r0, r5
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002180:	e9cd 2219 	strd	r2, r2, [sp, #100]	@ 0x64
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002184:	f001 fb84 	bl	8003890 <HAL_DAC_ConfigChannel>
 8002188:	b108      	cbz	r0, 800218e <main+0x8d6>
 800218a:	b672      	cpsid	i
  while (1)
 800218c:	e7fe      	b.n	800218c <main+0x8d4>
  InitConverterControlSystemPeripherals();
 800218e:	f000 fa99 	bl	80026c4 <InitConverterControlSystemPeripherals>
	IdleProcess();
 8002192:	f000 fb39 	bl	8002808 <IdleProcess>
  while (1)
 8002196:	e7fc      	b.n	8002192 <main+0x8da>

08002198 <Error_Handler>:
 8002198:	b672      	cpsid	i
  while (1)
 800219a:	e7fe      	b.n	800219a <Error_Handler+0x2>

0800219c <RunControlAtEachSamplingPeriodEx1>:

int counter = 0;

void RunControlAtEachSamplingPeriodEx1()
{
	counter = counter + 1;
 800219c:	4a02      	ldr	r2, [pc, #8]	@ (80021a8 <RunControlAtEachSamplingPeriodEx1+0xc>)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200146b0 	.word	0x200146b0

080021ac <ADCErrorCallback>:

uint32_t db_ADCErrorCallback = 0;

void ADCErrorCallback(ADC_HandleTypeDef* hadc)
{
	db_ADCErrorCallback++;
 80021ac:	4a02      	ldr	r2, [pc, #8]	@ (80021b8 <ADCErrorCallback+0xc>)
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	200146bc 	.word	0x200146bc

080021bc <ADCHalfCompleteCallback>:

uint32_t db_ADCHalfCompleteCallback = 0;

void ADCHalfCompleteCallback(ADC_HandleTypeDef* hadc)
{
	db_ADCHalfCompleteCallback++;
 80021bc:	4a02      	ldr	r2, [pc, #8]	@ (80021c8 <ADCHalfCompleteCallback+0xc>)
 80021be:	6813      	ldr	r3, [r2, #0]
 80021c0:	3301      	adds	r3, #1
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	200146b8 	.word	0x200146b8
 80021cc:	00000000 	.word	0x00000000

080021d0 <StartPWMFan>:
{
 80021d0:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80021d2:	4c13      	ldr	r4, [pc, #76]	@ (8002220 <StartPWMFan+0x50>)
 80021d4:	2108      	movs	r1, #8
 80021d6:	4620      	mov	r0, r4
 80021d8:	f002 ffd8 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80021dc:	4620      	mov	r0, r4
	TIM2->CCR3 = TIM2->ARR*0.01;
 80021de:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80021e2:	210c      	movs	r1, #12
 80021e4:	f002 ffd2 	bl	800518c <HAL_TIM_PWM_Start>
	TIM2->CCR3 = TIM2->ARR*0.01;
 80021e8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021ea:	f7fe f9ab 	bl	8000544 <__aeabi_ui2d>
 80021ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8002218 <StartPWMFan+0x48>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe fa20 	bl	8000638 <__aeabi_dmul>
 80021f8:	f7fe fcf6 	bl	8000be8 <__aeabi_d2uiz>
 80021fc:	63e0      	str	r0, [r4, #60]	@ 0x3c
	TIM2->CCR3 = TIM2->ARR*0.01;
 80021fe:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002200:	f7fe f9a0 	bl	8000544 <__aeabi_ui2d>
 8002204:	a304      	add	r3, pc, #16	@ (adr r3, 8002218 <StartPWMFan+0x48>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	f7fe fa15 	bl	8000638 <__aeabi_dmul>
 800220e:	f7fe fceb 	bl	8000be8 <__aeabi_d2uiz>
 8002212:	63e0      	str	r0, [r4, #60]	@ 0x3c
}
 8002214:	bd10      	pop	{r4, pc}
 8002216:	bf00      	nop
 8002218:	47ae147b 	.word	0x47ae147b
 800221c:	3f847ae1 	.word	0x3f847ae1
 8002220:	200143a8 	.word	0x200143a8

08002224 <StartPWM>:
{
 8002224:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002226:	4c24      	ldr	r4, [pc, #144]	@ (80022b8 <StartPWM+0x94>)
 8002228:	2100      	movs	r1, #0
 800222a:	4620      	mov	r0, r4
 800222c:	f002 ffae 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002230:	2104      	movs	r1, #4
 8002232:	4620      	mov	r0, r4
 8002234:	f002 ffaa 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002238:	2108      	movs	r1, #8
 800223a:	4620      	mov	r0, r4
 800223c:	f002 ffa6 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002240:	210c      	movs	r1, #12
 8002242:	4620      	mov	r0, r4
 8002244:	f002 ffa2 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8002248:	2100      	movs	r1, #0
 800224a:	4620      	mov	r0, r4
 800224c:	f003 fadc 	bl	8005808 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8002250:	2104      	movs	r1, #4
 8002252:	4620      	mov	r0, r4
 8002254:	f003 fad8 	bl	8005808 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8002258:	2108      	movs	r1, #8
 800225a:	4620      	mov	r0, r4
 800225c:	f003 fad4 	bl	8005808 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8002260:	210c      	movs	r1, #12
 8002262:	4620      	mov	r0, r4
 8002264:	f003 fad0 	bl	8005808 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_5);
 8002268:	4620      	mov	r0, r4
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800226a:	4c14      	ldr	r4, [pc, #80]	@ (80022bc <StartPWM+0x98>)
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_5);
 800226c:	2110      	movs	r1, #16
 800226e:	f002 ff8d 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002272:	2100      	movs	r1, #0
 8002274:	4620      	mov	r0, r4
 8002276:	f002 ff89 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800227a:	2104      	movs	r1, #4
 800227c:	4620      	mov	r0, r4
 800227e:	f002 ff85 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002282:	2108      	movs	r1, #8
 8002284:	4620      	mov	r0, r4
 8002286:	f002 ff81 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800228a:	210c      	movs	r1, #12
 800228c:	4620      	mov	r0, r4
 800228e:	f002 ff7d 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002292:	2100      	movs	r1, #0
 8002294:	4620      	mov	r0, r4
 8002296:	f003 fab7 	bl	8005808 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800229a:	2104      	movs	r1, #4
 800229c:	4620      	mov	r0, r4
 800229e:	f003 fab3 	bl	8005808 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80022a2:	2108      	movs	r1, #8
 80022a4:	4620      	mov	r0, r4
 80022a6:	f003 faaf 	bl	8005808 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 80022aa:	4620      	mov	r0, r4
 80022ac:	2110      	movs	r1, #16
}
 80022ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 80022b2:	f002 bf6b 	b.w	800518c <HAL_TIM_PWM_Start>
 80022b6:	bf00      	nop
 80022b8:	2001435c 	.word	0x2001435c
 80022bc:	200143f4 	.word	0x200143f4

080022c0 <StopPWM>:
{
 80022c0:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80022c2:	4c22      	ldr	r4, [pc, #136]	@ (800234c <StopPWM+0x8c>)
 80022c4:	2100      	movs	r1, #0
 80022c6:	4620      	mov	r0, r4
 80022c8:	f002 ff62 	bl	8005190 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 80022cc:	2104      	movs	r1, #4
 80022ce:	4620      	mov	r0, r4
 80022d0:	f002 ff5e 	bl	8005190 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 80022d4:	2108      	movs	r1, #8
 80022d6:	4620      	mov	r0, r4
 80022d8:	f002 ff5a 	bl	8005190 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
 80022dc:	210c      	movs	r1, #12
 80022de:	4620      	mov	r0, r4
 80022e0:	f002 ff56 	bl	8005190 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80022e4:	2100      	movs	r1, #0
 80022e6:	4620      	mov	r0, r4
 80022e8:	f003 fa90 	bl	800580c <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 80022ec:	2104      	movs	r1, #4
 80022ee:	4620      	mov	r0, r4
 80022f0:	f003 fa8c 	bl	800580c <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 80022f4:	2108      	movs	r1, #8
 80022f6:	4620      	mov	r0, r4
 80022f8:	f003 fa88 	bl	800580c <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_4);
 80022fc:	4620      	mov	r0, r4
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80022fe:	4c14      	ldr	r4, [pc, #80]	@ (8002350 <StopPWM+0x90>)
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_4);
 8002300:	210c      	movs	r1, #12
 8002302:	f003 fa83 	bl	800580c <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002306:	2100      	movs	r1, #0
 8002308:	4620      	mov	r0, r4
 800230a:	f002 ff41 	bl	8005190 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800230e:	2104      	movs	r1, #4
 8002310:	4620      	mov	r0, r4
 8002312:	f002 ff3d 	bl	8005190 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002316:	2108      	movs	r1, #8
 8002318:	4620      	mov	r0, r4
 800231a:	f002 ff39 	bl	8005190 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 800231e:	210c      	movs	r1, #12
 8002320:	4620      	mov	r0, r4
 8002322:	f002 ff35 	bl	8005190 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002326:	2100      	movs	r1, #0
 8002328:	4620      	mov	r0, r4
 800232a:	f003 fa6f 	bl	800580c <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800232e:	2104      	movs	r1, #4
 8002330:	4620      	mov	r0, r4
 8002332:	f003 fa6b 	bl	800580c <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8002336:	2108      	movs	r1, #8
 8002338:	4620      	mov	r0, r4
 800233a:	f003 fa67 	bl	800580c <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 800233e:	4620      	mov	r0, r4
 8002340:	210c      	movs	r1, #12
}
 8002342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 8002346:	f003 ba61 	b.w	800580c <HAL_TIMEx_PWMN_Stop>
 800234a:	bf00      	nop
 800234c:	2001435c 	.word	0x2001435c
 8002350:	200143f4 	.word	0x200143f4
 8002354:	00000000 	.word	0x00000000

08002358 <ADCCompleteCallback>:
	db_ADCCompleteCallback++;
 8002358:	4ad1      	ldr	r2, [pc, #836]	@ (80026a0 <ADCCompleteCallback+0x348>)
{
 800235a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	db_ADCCompleteCallback++;
 800235e:	6813      	ldr	r3, [r2, #0]
 8002360:	4cd0      	ldr	r4, [pc, #832]	@ (80026a4 <ADCCompleteCallback+0x34c>)
 8002362:	3301      	adds	r3, #1
 8002364:	4dd0      	ldr	r5, [pc, #832]	@ (80026a8 <ADCCompleteCallback+0x350>)
 8002366:	f104 0824 	add.w	r8, r4, #36	@ 0x24
		ad_volt_float[k_tmp] = 3.3/4096.0*(float)ad_dma_buffer[k_tmp];
 800236a:	a7c9      	add	r7, pc, #804	@ (adr r7, 8002690 <ADCCompleteCallback+0x338>)
 800236c:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8002370:	ed2d 8b02 	vpush	{d8}
	db_ADCCompleteCallback++;
 8002374:	6013      	str	r3, [r2, #0]
		ad_volt_float[k_tmp] = 3.3/4096.0*(float)ad_dma_buffer[k_tmp];
 8002376:	f834 0f02 	ldrh.w	r0, [r4, #2]!
 800237a:	ee07 0a90 	vmov	s15, r0
 800237e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002382:	ee17 0a90 	vmov	r0, s15
 8002386:	f7fe f8ff 	bl	8000588 <__aeabi_f2d>
 800238a:	4632      	mov	r2, r6
 800238c:	463b      	mov	r3, r7
 800238e:	f7fe f953 	bl	8000638 <__aeabi_dmul>
 8002392:	f7fe fc49 	bl	8000c28 <__aeabi_d2f>
	for( uint16_t k_tmp=0; k_tmp<3*AD_RANK; k_tmp++) {
 8002396:	45a0      	cmp	r8, r4
		ad_volt_float[k_tmp] = 3.3/4096.0*(float)ad_dma_buffer[k_tmp];
 8002398:	f845 0b04 	str.w	r0, [r5], #4
	for( uint16_t k_tmp=0; k_tmp<3*AD_RANK; k_tmp++) {
 800239c:	d1eb      	bne.n	8002376 <ADCCompleteCallback+0x1e>
	switch(myconvvsi.sm) {
 800239e:	4cc3      	ldr	r4, [pc, #780]	@ (80026ac <ADCCompleteCallback+0x354>)
 80023a0:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d80f      	bhi.n	80023c8 <ADCCompleteCallback+0x70>
 80023a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023ac:	00ce00a7 	.word	0x00ce00a7
 80023b0:	00ec00e1 	.word	0x00ec00e1
 80023b4:	01220100 	.word	0x01220100
 80023b8:	012d000e 	.word	0x012d000e
 80023bc:	0009      	.short	0x0009
		if( myconvvsi.signal_run) {
 80023be:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 80ca 	bne.w	800255c <ADCCompleteCallback+0x204>
	myconvvsi.k++;
 80023c8:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 80023cc:	3701      	adds	r7, #1
	float arr = TIM1->ARR+1;
 80023ce:	4db8      	ldr	r5, [pc, #736]	@ (80026b0 <ADCCompleteCallback+0x358>)
	TIM1->CCR1 = arr * myconvvsi.da[0]+0.5;
 80023d0:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
	float arr = TIM1->ARR+1;
 80023d4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80023d6:	3301      	adds	r3, #1
 80023d8:	ee07 3a10 	vmov	s14, r3
 80023dc:	eeb8 8a47 	vcvt.f32.u32	s16, s14
	TIM1->CCR1 = arr * myconvvsi.da[0]+0.5;
 80023e0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80023e4:	ee17 0a90 	vmov	r0, s15
 80023e8:	f7fe f8ce 	bl	8000588 <__aeabi_f2d>
 80023ec:	2200      	movs	r2, #0
 80023ee:	4bb1      	ldr	r3, [pc, #708]	@ (80026b4 <ADCCompleteCallback+0x35c>)
 80023f0:	f7fd ff6c 	bl	80002cc <__adddf3>
 80023f4:	f7fe fbf8 	bl	8000be8 <__aeabi_d2uiz>
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 80023f8:	edd4 7a13 	vldr	s15, [r4, #76]	@ 0x4c
	TIM1->CCR1 = arr * myconvvsi.da[0]+0.5;
 80023fc:	4603      	mov	r3, r0
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 80023fe:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM1->CCR1 = arr * myconvvsi.da[0]+0.5;
 8002402:	636b      	str	r3, [r5, #52]	@ 0x34
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f8be 	bl	8000588 <__aeabi_f2d>
 800240c:	2200      	movs	r2, #0
 800240e:	4ba9      	ldr	r3, [pc, #676]	@ (80026b4 <ADCCompleteCallback+0x35c>)
 8002410:	f7fd ff5c 	bl	80002cc <__adddf3>
 8002414:	f7fe fbe8 	bl	8000be8 <__aeabi_d2uiz>
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 8002418:	edd4 7a14 	vldr	s15, [r4, #80]	@ 0x50
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 800241c:	4603      	mov	r3, r0
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 800241e:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 8002422:	63ab      	str	r3, [r5, #56]	@ 0x38
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 8002424:	ee17 0a90 	vmov	r0, s15
 8002428:	f7fe f8ae 	bl	8000588 <__aeabi_f2d>
 800242c:	2200      	movs	r2, #0
 800242e:	4ba1      	ldr	r3, [pc, #644]	@ (80026b4 <ADCCompleteCallback+0x35c>)
 8002430:	f7fd ff4c 	bl	80002cc <__adddf3>
 8002434:	f7fe fbd8 	bl	8000be8 <__aeabi_d2uiz>
	TIM1->CCR4 = arr * myconvvsi.da[3]+0.5;
 8002438:	edd4 7a15 	vldr	s15, [r4, #84]	@ 0x54
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 800243c:	4606      	mov	r6, r0
	TIM1->CCR4 = arr * myconvvsi.da[3]+0.5;
 800243e:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 8002442:	63ee      	str	r6, [r5, #60]	@ 0x3c
	TIM1->CCR4 = arr * myconvvsi.da[3]+0.5;
 8002444:	ee17 0a90 	vmov	r0, s15
 8002448:	f7fe f89e 	bl	8000588 <__aeabi_f2d>
 800244c:	2200      	movs	r2, #0
 800244e:	4b99      	ldr	r3, [pc, #612]	@ (80026b4 <ADCCompleteCallback+0x35c>)
 8002450:	f7fd ff3c 	bl	80002cc <__adddf3>
 8002454:	f7fe fbc8 	bl	8000be8 <__aeabi_d2uiz>
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 8002458:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
	TIM1->CCR4 = arr * myconvvsi.da[3]+0.5;
 800245c:	4603      	mov	r3, r0
 800245e:	6428      	str	r0, [r5, #64]	@ 0x40
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 8002460:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM1->CCR5 = arr * myconvvsi.da[2]+0.5;
 8002464:	65ae      	str	r6, [r5, #88]	@ 0x58
	TIM1->CCR6 = arr * myconvvsi.da[3]+0.5;
 8002466:	65eb      	str	r3, [r5, #92]	@ 0x5c
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 8002468:	ee17 0a90 	vmov	r0, s15
 800246c:	f7fe f88c 	bl	8000588 <__aeabi_f2d>
 8002470:	2200      	movs	r2, #0
 8002472:	4b90      	ldr	r3, [pc, #576]	@ (80026b4 <ADCCompleteCallback+0x35c>)
 8002474:	f7fd ff2a 	bl	80002cc <__adddf3>
 8002478:	f7fe fbb6 	bl	8000be8 <__aeabi_d2uiz>
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 800247c:	edd4 7a17 	vldr	s15, [r4, #92]	@ 0x5c
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 8002480:	4603      	mov	r3, r0
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 8002482:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 8002486:	f8c5 3434 	str.w	r3, [r5, #1076]	@ 0x434
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 800248a:	ee17 0a90 	vmov	r0, s15
 800248e:	f7fe f87b 	bl	8000588 <__aeabi_f2d>
 8002492:	2200      	movs	r2, #0
 8002494:	4b87      	ldr	r3, [pc, #540]	@ (80026b4 <ADCCompleteCallback+0x35c>)
 8002496:	f7fd ff19 	bl	80002cc <__adddf3>
 800249a:	f7fe fba5 	bl	8000be8 <__aeabi_d2uiz>
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 800249e:	edd4 7a18 	vldr	s15, [r4, #96]	@ 0x60
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 80024a2:	4603      	mov	r3, r0
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 80024a4:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 80024a8:	f8c5 3438 	str.w	r3, [r5, #1080]	@ 0x438
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 80024ac:	ee17 0a90 	vmov	r0, s15
 80024b0:	f7fe f86a 	bl	8000588 <__aeabi_f2d>
 80024b4:	2200      	movs	r2, #0
 80024b6:	4b7f      	ldr	r3, [pc, #508]	@ (80026b4 <ADCCompleteCallback+0x35c>)
 80024b8:	f7fd ff08 	bl	80002cc <__adddf3>
 80024bc:	f7fe fb94 	bl	8000be8 <__aeabi_d2uiz>
	TIM8->CCR4 = arr * myconvvsi.db[3]+0.5;
 80024c0:	edd4 7a19 	vldr	s15, [r4, #100]	@ 0x64
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 80024c4:	4606      	mov	r6, r0
	TIM8->CCR4 = arr * myconvvsi.db[3]+0.5;
 80024c6:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 80024ca:	f8c5 643c 	str.w	r6, [r5, #1084]	@ 0x43c
	TIM8->CCR4 = arr * myconvvsi.db[3]+0.5;
 80024ce:	ee17 0a90 	vmov	r0, s15
 80024d2:	f7fe f859 	bl	8000588 <__aeabi_f2d>
 80024d6:	2200      	movs	r2, #0
 80024d8:	4b76      	ldr	r3, [pc, #472]	@ (80026b4 <ADCCompleteCallback+0x35c>)
 80024da:	f7fd fef7 	bl	80002cc <__adddf3>
 80024de:	f7fe fb83 	bl	8000be8 <__aeabi_d2uiz>
	myconvvsi.k++;
 80024e2:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
	TIM8->CCR4 = arr * myconvvsi.db[3]+0.5;
 80024e6:	f8c5 0440 	str.w	r0, [r5, #1088]	@ 0x440
	TIM8->CCR5 = arr * myconvvsi.db[2]+0.5;
 80024ea:	f8c5 6458 	str.w	r6, [r5, #1112]	@ 0x458
	TIM8->CCR6 = arr * myconvvsi.db[3]+0.5;
 80024ee:	f8c5 045c 	str.w	r0, [r5, #1116]	@ 0x45c
}
 80024f2:	ecbd 8b02 	vpop	{d8}
 80024f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		myconvvsi.k = 0;
 80024fa:	2500      	movs	r5, #0
		myconvvsi.da[k_tmp] = 0;
 80024fc:	2300      	movs	r3, #0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);		// reset cmd
 80024fe:	2108      	movs	r1, #8
 8002500:	486d      	ldr	r0, [pc, #436]	@ (80026b8 <ADCCompleteCallback+0x360>)
 8002502:	462a      	mov	r2, r5
		myconvvsi.da[k_tmp] = 0;
 8002504:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002506:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8002508:	6523      	str	r3, [r4, #80]	@ 0x50
 800250a:	6563      	str	r3, [r4, #84]	@ 0x54
		myconvvsi.db[k_tmp] = 0;
 800250c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800250e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002510:	6623      	str	r3, [r4, #96]	@ 0x60
 8002512:	6663      	str	r3, [r4, #100]	@ 0x64
		myconvvsi.k = 0;
 8002514:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);		// reset cmd
 8002518:	f001 fd2e 	bl	8003f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);		// set 0 to Vi- (not used)
 800251c:	462a      	mov	r2, r5
 800251e:	2110      	movs	r1, #16
 8002520:	4865      	ldr	r0, [pc, #404]	@ (80026b8 <ADCCompleteCallback+0x360>)
 8002522:	f001 fd29 	bl	8003f78 <HAL_GPIO_WritePin>
		DisplayMessageInit();
 8002526:	f7ff f8f3 	bl	8001710 <DisplayMessageInit>
		StartPWMFan();
 800252a:	f7ff fe51 	bl	80021d0 <StartPWMFan>
		initInverterManagementStructure(inverterConfiguration);
 800252e:	4b63      	ldr	r3, [pc, #396]	@ (80026bc <ADCCompleteCallback+0x364>)
 8002530:	7818      	ldrb	r0, [r3, #0]
 8002532:	f7fe fedf 	bl	80012f4 <initInverterManagementStructure>
		initSineLookupTable();
 8002536:	f7fe fef7 	bl	8001328 <initSineLookupTable>
		myconvvsi.sm = SMWaitForRun;
 800253a:	2301      	movs	r3, #1
	myconvvsi.k++;
 800253c:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
		myconvvsi.sm = SMWaitForRun;
 8002540:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	myconvvsi.k++;
 8002544:	441f      	add	r7, r3
		break;
 8002546:	e742      	b.n	80023ce <ADCCompleteCallback+0x76>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);			// reset clear cmd
 8002548:	2201      	movs	r2, #1
 800254a:	2108      	movs	r1, #8
 800254c:	485a      	ldr	r0, [pc, #360]	@ (80026b8 <ADCCompleteCallback+0x360>)
 800254e:	f001 fd13 	bl	8003f78 <HAL_GPIO_WritePin>
		if( myconvvsi.signal_run) {
 8002552:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8002556:	2b00      	cmp	r3, #0
 8002558:	f43f af36 	beq.w	80023c8 <ADCCompleteCallback+0x70>
			myconvvsi.k = 0;
 800255c:	2200      	movs	r2, #0
			myconvvsi.sm = SMStartPWM;
 800255e:	2302      	movs	r3, #2
			myconvvsi.k = 0;
 8002560:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
			myconvvsi.sm = SMStartPWM;
 8002564:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
			DisplayMessageRun();
 8002568:	f7ff f8ec 	bl	8001744 <DisplayMessageRun>
 800256c:	e72c      	b.n	80023c8 <ADCCompleteCallback+0x70>
		if( myconvvsi.k == 1) {
 800256e:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8002572:	2f01      	cmp	r7, #1
 8002574:	d072      	beq.n	800265c <ADCCompleteCallback+0x304>
		} else if( myconvvsi.k > 10) {
 8002576:	2f0a      	cmp	r7, #10
 8002578:	f67f af28 	bls.w	80023cc <ADCCompleteCallback+0x74>
			myconvvsi.sm = SMRun;
 800257c:	2303      	movs	r3, #3
 800257e:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 8002582:	e033      	b.n	80025ec <ADCCompleteCallback+0x294>
		if( myconvvsi.signal_stop) {
 8002584:	f894 308a 	ldrb.w	r3, [r4, #138]	@ 0x8a
 8002588:	b13b      	cbz	r3, 800259a <ADCCompleteCallback+0x242>
			myconvvsi.k = 0;
 800258a:	2300      	movs	r3, #0
			myconvvsi.sm = SMSoftStop;
 800258c:	2204      	movs	r2, #4
			myconvvsi.k = 0;
 800258e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
			myconvvsi.sm = SMSoftStop;
 8002592:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
			myconvvsi.signal_stop = false;
 8002596:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
		functionalTestRoutine(&myconvvsi);
 800259a:	4844      	ldr	r0, [pc, #272]	@ (80026ac <ADCCompleteCallback+0x354>)
 800259c:	f7fe fef0 	bl	8001380 <functionalTestRoutine>
		RunControlAtEachSamplingPeriodEx1();
 80025a0:	f7ff fdfc 	bl	800219c <RunControlAtEachSamplingPeriodEx1>
	myconvvsi.k++;
 80025a4:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 80025a8:	3701      	adds	r7, #1
		break;
 80025aa:	e710      	b.n	80023ce <ADCCompleteCallback+0x76>
		if( myconvvsi.ref0 > 0) {
 80025ac:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80025b0:	2500      	movs	r5, #0
 80025b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ba:	dd2f      	ble.n	800261c <ADCCompleteCallback+0x2c4>
			myconvvsi.k = 0;
 80025bc:	2300      	movs	r3, #0
			myconvvsi.ref0 -= 0.002;
 80025be:	ee17 0a90 	vmov	r0, s15
			myconvvsi.k = 0;
 80025c2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
			myconvvsi.ref0 -= 0.002;
 80025c6:	f7fd ffdf 	bl	8000588 <__aeabi_f2d>
 80025ca:	a333      	add	r3, pc, #204	@ (adr r3, 8002698 <ADCCompleteCallback+0x340>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fd fe7a 	bl	80002c8 <__aeabi_dsub>
 80025d4:	f7fe fb28 	bl	8000c28 <__aeabi_d2f>
 80025d8:	ee07 0a90 	vmov	s15, r0
			if( myconvvsi.ref0 < 0) {
 80025dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			myconvvsi.ref0 -= 0.002;
 80025e4:	bf54      	ite	pl
 80025e6:	edc4 7a1f 	vstrpl	s15, [r4, #124]	@ 0x7c
				myconvvsi.ref0 = 0;
 80025ea:	67e5      	strmi	r5, [r4, #124]	@ 0x7c
{
 80025ec:	2701      	movs	r7, #1
 80025ee:	e6ee      	b.n	80023ce <ADCCompleteCallback+0x76>
		StopPWM();
 80025f0:	f7ff fe66 	bl	80022c0 <StopPWM>
		DisplayMessageFault();
 80025f4:	f7ff f8c0 	bl	8001778 <DisplayMessageFault>
		myconvvsi.sm = SMFaultSignal;
 80025f8:	2306      	movs	r3, #6
	myconvvsi.k++;
 80025fa:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
		myconvvsi.sm = SMFaultSignal;
 80025fe:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	myconvvsi.k++;
 8002602:	3701      	adds	r7, #1
		break;
 8002604:	e6e3      	b.n	80023ce <ADCCompleteCallback+0x76>
		StopPWM();
 8002606:	f7ff fe5b 	bl	80022c0 <StopPWM>
		DisplayMessageStop();
 800260a:	f7ff f8cf 	bl	80017ac <DisplayMessageStop>
		myconvvsi.sm = SMStopSignal;
 800260e:	2308      	movs	r3, #8
	myconvvsi.k++;
 8002610:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
		myconvvsi.sm = SMStopSignal;
 8002614:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	myconvvsi.k++;
 8002618:	3701      	adds	r7, #1
		break;
 800261a:	e6d8      	b.n	80023ce <ADCCompleteCallback+0x76>
		} else if( myconvvsi.ref>0) {
 800261c:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
 8002620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	dd1e      	ble.n	8002668 <ADCCompleteCallback+0x310>
			myconvvsi.k = 0;
 800262a:	2300      	movs	r3, #0
			myconvvsi.ref -= 0.002;
 800262c:	ee17 0a90 	vmov	r0, s15
			myconvvsi.k = 0;
 8002630:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
			myconvvsi.ref -= 0.002;
 8002634:	f7fd ffa8 	bl	8000588 <__aeabi_f2d>
 8002638:	a317      	add	r3, pc, #92	@ (adr r3, 8002698 <ADCCompleteCallback+0x340>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd fe43 	bl	80002c8 <__aeabi_dsub>
 8002642:	f7fe faf1 	bl	8000c28 <__aeabi_d2f>
 8002646:	ee07 0a90 	vmov	s15, r0
			if( myconvvsi.ref < 0) {
 800264a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			myconvvsi.ref -= 0.002;
 8002652:	bf54      	ite	pl
 8002654:	edc4 7a1e 	vstrpl	s15, [r4, #120]	@ 0x78
				myconvvsi.ref = 0;
 8002658:	67a5      	strmi	r5, [r4, #120]	@ 0x78
 800265a:	e7c7      	b.n	80025ec <ADCCompleteCallback+0x294>
			StartPWM();
 800265c:	f7ff fde2 	bl	8002224 <StartPWM>
	myconvvsi.k++;
 8002660:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8002664:	3701      	adds	r7, #1
 8002666:	e6b2      	b.n	80023ce <ADCCompleteCallback+0x76>
		} else if(myconvvsi.k>10){
 8002668:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 800266c:	2f0a      	cmp	r7, #10
 800266e:	f67f aead 	bls.w	80023cc <ADCCompleteCallback+0x74>
			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002672:	2100      	movs	r1, #0
 8002674:	4812      	ldr	r0, [pc, #72]	@ (80026c0 <ADCCompleteCallback+0x368>)
 8002676:	f002 fd8b 	bl	8005190 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800267a:	2108      	movs	r1, #8
 800267c:	4810      	ldr	r0, [pc, #64]	@ (80026c0 <ADCCompleteCallback+0x368>)
 800267e:	f002 fd87 	bl	8005190 <HAL_TIM_PWM_Stop>
	myconvvsi.k++;
 8002682:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8002686:	3701      	adds	r7, #1
 8002688:	e6a1      	b.n	80023ce <ADCCompleteCallback+0x76>
 800268a:	bf00      	nop
 800268c:	f3af 8000 	nop.w
 8002690:	66666666 	.word	0x66666666
 8002694:	3f4a6666 	.word	0x3f4a6666
 8002698:	d2f1a9fc 	.word	0xd2f1a9fc
 800269c:	3f60624d 	.word	0x3f60624d
 80026a0:	200146c0 	.word	0x200146c0
 80026a4:	200147aa 	.word	0x200147aa
 80026a8:	20014754 	.word	0x20014754
 80026ac:	200146c4 	.word	0x200146c4
 80026b0:	40010000 	.word	0x40010000
 80026b4:	3fe00000 	.word	0x3fe00000
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	200147d8 	.word	0x200147d8
 80026c0:	2001435c 	.word	0x2001435c

080026c4 <InitConverterControlSystemPeripherals>:
	__HAL_ADC_ENABLE(&hadc2);
 80026c4:	4a1d      	ldr	r2, [pc, #116]	@ (800273c <InitConverterControlSystemPeripherals+0x78>)
	__HAL_ADC_ENABLE(&hadc3);
 80026c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <InitConverterControlSystemPeripherals+0x7c>)
	__HAL_ADC_ENABLE(&hadc2);
 80026c8:	6811      	ldr	r1, [r2, #0]
	__HAL_ADC_ENABLE(&hadc3);
 80026ca:	681b      	ldr	r3, [r3, #0]
	hadc1.ConvCpltCallback = ADCCompleteCallback;
 80026cc:	481d      	ldr	r0, [pc, #116]	@ (8002744 <InitConverterControlSystemPeripherals+0x80>)
	hadc1.ConvHalfCpltCallback = ADCHalfCompleteCallback;
 80026ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002748 <InitConverterControlSystemPeripherals+0x84>)
{
 80026d0:	b510      	push	{r4, lr}
	hadc1.ConvCpltCallback = ADCCompleteCallback;
 80026d2:	4c1e      	ldr	r4, [pc, #120]	@ (800274c <InitConverterControlSystemPeripherals+0x88>)
	hadc1.ConvHalfCpltCallback = ADCHalfCompleteCallback;
 80026d4:	e9c0 4212 	strd	r4, r2, [r0, #72]	@ 0x48
	__HAL_ADC_ENABLE(&hadc3);
 80026d8:	689a      	ldr	r2, [r3, #8]
	hadc1.ErrorCallback = ADCErrorCallback;
 80026da:	4c1d      	ldr	r4, [pc, #116]	@ (8002750 <InitConverterControlSystemPeripherals+0x8c>)
	__HAL_ADC_ENABLE(&hadc3);
 80026dc:	f042 0201 	orr.w	r2, r2, #1
	hadc1.ErrorCallback = ADCErrorCallback;
 80026e0:	6544      	str	r4, [r0, #84]	@ 0x54
	__HAL_ADC_ENABLE(&hadc3);
 80026e2:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc2);
 80026e4:	688c      	ldr	r4, [r1, #8]
	__HAL_ADC_ENABLE(&hadc1);
 80026e6:	6802      	ldr	r2, [r0, #0]
	__HAL_ADC_ENABLE(&hadc2);
 80026e8:	f044 0401 	orr.w	r4, r4, #1
 80026ec:	608c      	str	r4, [r1, #8]
	__HAL_ADC_ENABLE(&hadc1);
 80026ee:	6894      	ldr	r4, [r2, #8]
 80026f0:	f044 0401 	orr.w	r4, r4, #1
 80026f4:	6094      	str	r4, [r2, #8]
	__HAL_ADC_ENABLE_IT(&hadc1, ( ADC_IT_OVR));
 80026f6:	6854      	ldr	r4, [r2, #4]
 80026f8:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
 80026fc:	6054      	str	r4, [r2, #4]
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)&ad_dma_buffer[0], NB_AD_VALUES);
 80026fe:	2215      	movs	r2, #21
	__HAL_ADC_ENABLE_IT(&hadc2, ( ADC_IT_OVR));
 8002700:	684c      	ldr	r4, [r1, #4]
 8002702:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
 8002706:	604c      	str	r4, [r1, #4]
	__HAL_ADC_ENABLE_IT(&hadc3, ( ADC_IT_OVR));
 8002708:	6859      	ldr	r1, [r3, #4]
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800270a:	4c12      	ldr	r4, [pc, #72]	@ (8002754 <InitConverterControlSystemPeripherals+0x90>)
	__HAL_ADC_ENABLE_IT(&hadc3, ( ADC_IT_OVR));
 800270c:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8002710:	6059      	str	r1, [r3, #4]
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)&ad_dma_buffer[0], NB_AD_VALUES);
 8002712:	4911      	ldr	r1, [pc, #68]	@ (8002758 <InitConverterControlSystemPeripherals+0x94>)
 8002714:	f000 fec8 	bl	80034a8 <HAL_ADCEx_MultiModeStart_DMA>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002718:	2100      	movs	r1, #0
 800271a:	4620      	mov	r0, r4
 800271c:	f001 f886 	bl	800382c <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002720:	2110      	movs	r1, #16
 8002722:	4620      	mov	r0, r4
 8002724:	f001 f882 	bl	800382c <HAL_DAC_Start>
	HAL_TIM_Base_Start(&htim8);
 8002728:	480c      	ldr	r0, [pc, #48]	@ (800275c <InitConverterControlSystemPeripherals+0x98>)
 800272a:	f002 fbd9 	bl	8004ee0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1);
 800272e:	480c      	ldr	r0, [pc, #48]	@ (8002760 <InitConverterControlSystemPeripherals+0x9c>)
 8002730:	f002 fbd6 	bl	8004ee0 <HAL_TIM_Base_Start>
}
 8002734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	InitDisplayUartConsole();
 8002738:	f7ff b852 	b.w	80017e0 <InitDisplayUartConsole>
 800273c:	200145e8 	.word	0x200145e8
 8002740:	20014584 	.word	0x20014584
 8002744:	2001464c 	.word	0x2001464c
 8002748:	080021bd 	.word	0x080021bd
 800274c:	08002359 	.word	0x08002359
 8002750:	080021ad 	.word	0x080021ad
 8002754:	200144e8 	.word	0x200144e8
 8002758:	200147ac 	.word	0x200147ac
 800275c:	2001435c 	.word	0x2001435c
 8002760:	200143f4 	.word	0x200143f4

08002764 <HAL_ADC_ConvCpltCallback>:

// Required because Ex do not use the callback

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	db_HAL_ADC_ConvCpltCallback++;
 8002764:	4a02      	ldr	r2, [pc, #8]	@ (8002770 <HAL_ADC_ConvCpltCallback+0xc>)
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	6013      	str	r3, [r2, #0]
	ADCCompleteCallback( hadc);
 800276c:	f7ff bdf4 	b.w	8002358 <ADCCompleteCallback>
 8002770:	200146b4 	.word	0x200146b4

08002774 <HAL_IncTick>:
int db_HAL_IncTick = 0;
int blink = 0;


void HAL_IncTick()
{
 8002774:	b538      	push	{r3, r4, r5, lr}
	uwTick += uwTickFreq;
 8002776:	4a1f      	ldr	r2, [pc, #124]	@ (80027f4 <HAL_IncTick+0x80>)
 8002778:	4d1f      	ldr	r5, [pc, #124]	@ (80027f8 <HAL_IncTick+0x84>)
	db_HAL_IncTick++;
 800277a:	4c20      	ldr	r4, [pc, #128]	@ (80027fc <HAL_IncTick+0x88>)
	uwTick += uwTickFreq;
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	7811      	ldrb	r1, [r2, #0]
	blink++;
 8002780:	481f      	ldr	r0, [pc, #124]	@ (8002800 <HAL_IncTick+0x8c>)
	uwTick += uwTickFreq;
 8002782:	4419      	add	r1, r3
	db_HAL_IncTick++;
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	1c5a      	adds	r2, r3, #1
	blink++;
 8002788:	6803      	ldr	r3, [r0, #0]
	uwTick += uwTickFreq;
 800278a:	6029      	str	r1, [r5, #0]
	blink++;
 800278c:	3301      	adds	r3, #1
	db_HAL_IncTick++;
 800278e:	6022      	str	r2, [r4, #0]
	if(blink>1000) {
 8002790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
	blink++;
 8002794:	6003      	str	r3, [r0, #0]
	if(blink>1000) {
 8002796:	dc26      	bgt.n	80027e6 <HAL_IncTick+0x72>
		blink = 0;
		DisplayMessageMeas();
	} else if( blink>500) {
 8002798:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800279c:	dd11      	ble.n	80027c2 <HAL_IncTick+0x4e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800279e:	2201      	movs	r2, #1
 80027a0:	4818      	ldr	r0, [pc, #96]	@ (8002804 <HAL_IncTick+0x90>)
 80027a2:	4611      	mov	r1, r2
 80027a4:	f001 fbe8 	bl	8003f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80027a8:	2201      	movs	r2, #1
 80027aa:	2180      	movs	r1, #128	@ 0x80
 80027ac:	4815      	ldr	r0, [pc, #84]	@ (8002804 <HAL_IncTick+0x90>)
 80027ae:	f001 fbe3 	bl	8003f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80027b2:	2201      	movs	r2, #1
 80027b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027b8:	4812      	ldr	r0, [pc, #72]	@ (8002804 <HAL_IncTick+0x90>)
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
	}

}
 80027ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80027be:	f001 bbdb 	b.w	8003f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2101      	movs	r1, #1
 80027c6:	480f      	ldr	r0, [pc, #60]	@ (8002804 <HAL_IncTick+0x90>)
 80027c8:	f001 fbd6 	bl	8003f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2180      	movs	r1, #128	@ 0x80
 80027d0:	480c      	ldr	r0, [pc, #48]	@ (8002804 <HAL_IncTick+0x90>)
 80027d2:	f001 fbd1 	bl	8003f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80027d6:	2200      	movs	r2, #0
 80027d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027dc:	4809      	ldr	r0, [pc, #36]	@ (8002804 <HAL_IncTick+0x90>)
}
 80027de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80027e2:	f001 bbc9 	b.w	8003f78 <HAL_GPIO_WritePin>
		blink = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	6003      	str	r3, [r0, #0]
}
 80027ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		DisplayMessageMeas();
 80027ee:	f7fe bf2b 	b.w	8001648 <DisplayMessageMeas>
 80027f2:	bf00      	nop
 80027f4:	20000004 	.word	0x20000004
 80027f8:	200147f0 	.word	0x200147f0
 80027fc:	200147e4 	.word	0x200147e4
 8002800:	200147e0 	.word	0x200147e0
 8002804:	40020400 	.word	0x40020400

08002808 <IdleProcess>:

uint32_t db_IdleProcess;

void IdleProcess()
{
	db_IdleProcess++;
 8002808:	4a02      	ldr	r2, [pc, #8]	@ (8002814 <IdleProcess+0xc>)
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	200147dc 	.word	0x200147dc

08002818 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <HAL_MspInit+0x2c>)
{
 800281a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800281e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40
 8002824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002826:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800282a:	9200      	str	r2, [sp, #0]
 800282c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002830:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
 8002836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002840:	b002      	add	sp, #8
 8002842:	4770      	bx	lr
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002848:	4a7b      	ldr	r2, [pc, #492]	@ (8002a38 <HAL_ADC_MspInit+0x1f0>)
 800284a:	6803      	ldr	r3, [r0, #0]
{
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 800284e:	4293      	cmp	r3, r2
{
 8002850:	b093      	sub	sp, #76	@ 0x4c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	f04f 0400 	mov.w	r4, #0
 8002856:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 800285a:	940e      	str	r4, [sp, #56]	@ 0x38
 800285c:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  if(hadc->Instance==ADC1)
 8002860:	d008      	beq.n	8002874 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002862:	4a76      	ldr	r2, [pc, #472]	@ (8002a3c <HAL_ADC_MspInit+0x1f4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d063      	beq.n	8002930 <HAL_ADC_MspInit+0xe8>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8002868:	4a75      	ldr	r2, [pc, #468]	@ (8002a40 <HAL_ADC_MspInit+0x1f8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	f000 80a1 	beq.w	80029b2 <HAL_ADC_MspInit+0x16a>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002870:	b013      	add	sp, #76	@ 0x4c
 8002872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002874:	4b73      	ldr	r3, [pc, #460]	@ (8002a44 <HAL_ADC_MspInit+0x1fc>)
 8002876:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002878:	4873      	ldr	r0, [pc, #460]	@ (8002a48 <HAL_ADC_MspInit+0x200>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800287a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_adc1.Instance = DMA2_Stream4;
 800287c:	4e73      	ldr	r6, [pc, #460]	@ (8002a4c <HAL_ADC_MspInit+0x204>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800287e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002882:	645a      	str	r2, [r3, #68]	@ 0x44
 8002884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002886:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800288e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002890:	f042 0204 	orr.w	r2, r2, #4
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
 8002896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002898:	f002 0204 	and.w	r2, r2, #4
 800289c:	9201      	str	r2, [sp, #4]
 800289e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028aa:	f002 0201 	and.w	r2, r2, #1
 80028ae:	9202      	str	r2, [sp, #8]
 80028b0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b4:	f042 0202 	orr.w	r2, r2, #2
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80028ba:	222f      	movs	r2, #47	@ 0x2f
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80028c4:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c6:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c8:	a90c      	add	r1, sp, #48	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80028ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ce:	f001 fa13 	bl	8003cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80028d2:	226f      	movs	r2, #111	@ 0x6f
 80028d4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	a90c      	add	r1, sp, #48	@ 0x30
 80028d8:	485d      	ldr	r0, [pc, #372]	@ (8002a50 <HAL_ADC_MspInit+0x208>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80028dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	f001 fa0a 	bl	8003cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028e4:	2202      	movs	r2, #2
 80028e6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	485a      	ldr	r0, [pc, #360]	@ (8002a54 <HAL_ADC_MspInit+0x20c>)
 80028ea:	a90c      	add	r1, sp, #48	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f2:	f001 fa01 	bl	8003cf8 <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_adc1.Instance = DMA2_Stream4;
 80028fa:	4a57      	ldr	r2, [pc, #348]	@ (8002a58 <HAL_ADC_MspInit+0x210>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028fc:	4630      	mov	r0, r6
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028fe:	6234      	str	r4, [r6, #32]
    hdma_adc1.Instance = DMA2_Stream4;
 8002900:	6032      	str	r2, [r6, #0]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002906:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002908:	6172      	str	r2, [r6, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800290a:	e9c6 4303 	strd	r4, r3, [r6, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800290e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002912:	61b3      	str	r3, [r6, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002914:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002918:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800291c:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800291e:	f000 ffe1 	bl	80038e4 <HAL_DMA_Init>
 8002922:	2800      	cmp	r0, #0
 8002924:	f040 8085 	bne.w	8002a32 <HAL_ADC_MspInit+0x1ea>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002928:	63ae      	str	r6, [r5, #56]	@ 0x38
 800292a:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 800292c:	b013      	add	sp, #76	@ 0x4c
 800292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002930:	4b44      	ldr	r3, [pc, #272]	@ (8002a44 <HAL_ADC_MspInit+0x1fc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002932:	a90c      	add	r1, sp, #48	@ 0x30
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293a:	645a      	str	r2, [r3, #68]	@ 0x44
 800293c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800293e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002942:	9204      	str	r2, [sp, #16]
 8002944:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002948:	f042 0204 	orr.w	r2, r2, #4
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
 800294e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002950:	f002 0204 	and.w	r2, r2, #4
 8002954:	9205      	str	r2, [sp, #20]
 8002956:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002962:	f002 0201 	and.w	r2, r2, #1
 8002966:	9206      	str	r2, [sp, #24]
 8002968:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800296c:	f042 0202 	orr.w	r2, r2, #2
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002972:	223f      	movs	r2, #63	@ 0x3f
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800297c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	9807      	ldr	r0, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002980:	4831      	ldr	r0, [pc, #196]	@ (8002a48 <HAL_ADC_MspInit+0x200>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002982:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002986:	f001 f9b7 	bl	8003cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800298a:	224f      	movs	r2, #79	@ 0x4f
 800298c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	a90c      	add	r1, sp, #48	@ 0x30
 8002990:	482f      	ldr	r0, [pc, #188]	@ (8002a50 <HAL_ADC_MspInit+0x208>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002994:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002998:	f001 f9ae 	bl	8003cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800299c:	2202      	movs	r2, #2
 800299e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	a90c      	add	r1, sp, #48	@ 0x30
 80029a2:	482c      	ldr	r0, [pc, #176]	@ (8002a54 <HAL_ADC_MspInit+0x20c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	f001 f9a5 	bl	8003cf8 <HAL_GPIO_Init>
}
 80029ae:	b013      	add	sp, #76	@ 0x4c
 80029b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029b2:	4b24      	ldr	r3, [pc, #144]	@ (8002a44 <HAL_ADC_MspInit+0x1fc>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029b4:	a90c      	add	r1, sp, #48	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80029b6:	260f      	movs	r6, #15
 80029b8:	2703      	movs	r7, #3
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80029c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029c4:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80029c8:	9208      	str	r2, [sp, #32]
 80029ca:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80029d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029d6:	f002 0220 	and.w	r2, r2, #32
 80029da:	9209      	str	r2, [sp, #36]	@ 0x24
 80029dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029e0:	f042 0204 	orr.w	r2, r2, #4
 80029e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80029e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029e8:	f002 0204 	and.w	r2, r2, #4
 80029ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80029ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80029f8:	f44f 62ff 	mov.w	r2, #2040	@ 0x7f8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002a04:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a08:	4814      	ldr	r0, [pc, #80]	@ (8002a5c <HAL_ADC_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002a0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a0e:	f001 f973 	bl	8003cf8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a12:	a90c      	add	r1, sp, #48	@ 0x30
 8002a14:	480c      	ldr	r0, [pc, #48]	@ (8002a48 <HAL_ADC_MspInit+0x200>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a18:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1c:	f001 f96c 	bl	8003cf8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	480b      	ldr	r0, [pc, #44]	@ (8002a50 <HAL_ADC_MspInit+0x208>)
 8002a22:	a90c      	add	r1, sp, #48	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a26:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2a:	f001 f965 	bl	8003cf8 <HAL_GPIO_Init>
}
 8002a2e:	b013      	add	sp, #76	@ 0x4c
 8002a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8002a32:	f7ff fbb1 	bl	8002198 <Error_Handler>
 8002a36:	e777      	b.n	8002928 <HAL_ADC_MspInit+0xe0>
 8002a38:	40012000 	.word	0x40012000
 8002a3c:	40012100 	.word	0x40012100
 8002a40:	40012200 	.word	0x40012200
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	20014524 	.word	0x20014524
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40026470 	.word	0x40026470
 8002a5c:	40021400 	.word	0x40021400

08002a60 <HAL_CAN_MspInit>:
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 8002a60:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <HAL_CAN_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a62:	2300      	movs	r3, #0
  if(hcan->Instance==CAN1)
 8002a64:	6801      	ldr	r1, [r0, #0]
{
 8002a66:	b500      	push	{lr}
  if(hcan->Instance==CAN1)
 8002a68:	4291      	cmp	r1, r2
{
 8002a6a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002a70:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002a74:	9306      	str	r3, [sp, #24]
  if(hcan->Instance==CAN1)
 8002a76:	d002      	beq.n	8002a7e <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a78:	b009      	add	sp, #36	@ 0x24
 8002a7a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_CAN_MspInit+0x74>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	2003      	movs	r0, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a82:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a86:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a8e:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8002a92:	9200      	str	r2, [sp, #0]
 8002a94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a98:	f042 0208 	orr.w	r2, r2, #8
 8002a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9e:	2209      	movs	r2, #9
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa4:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aa8:	480b      	ldr	r0, [pc, #44]	@ (8002ad8 <HAL_CAN_MspInit+0x78>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aaa:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ab0:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8002ac8 <HAL_CAN_MspInit+0x68>
 8002ab4:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ab8:	f001 f91e 	bl	8003cf8 <HAL_GPIO_Init>
}
 8002abc:	b009      	add	sp, #36	@ 0x24
 8002abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ac2:	bf00      	nop
 8002ac4:	f3af 8000 	nop.w
 8002ac8:	00000003 	.word	0x00000003
 8002acc:	00000002 	.word	0x00000002
 8002ad0:	40006400 	.word	0x40006400
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	00000000 	.word	0x00000000

08002ae0 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8002ae0:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <HAL_DAC_MspInit+0x68>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae2:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8002ae4:	6801      	ldr	r1, [r0, #0]
{
 8002ae6:	b500      	push	{lr}
  if(hdac->Instance==DAC)
 8002ae8:	4291      	cmp	r1, r2
{
 8002aea:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002af0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002af4:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8002af6:	d002      	beq.n	8002afe <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002af8:	b009      	add	sp, #36	@ 0x24
 8002afa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8002afe:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <HAL_DAC_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	a902      	add	r1, sp, #8
 8002b02:	4813      	ldr	r0, [pc, #76]	@ (8002b50 <HAL_DAC_MspInit+0x70>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8002b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b06:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b0e:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8002b12:	9200      	str	r2, [sp, #0]
 8002b14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b24:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 8002b40 <HAL_DAC_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b2c:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	f001 f8e2 	bl	8003cf8 <HAL_GPIO_Init>
}
 8002b34:	b009      	add	sp, #36	@ 0x24
 8002b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b3a:	bf00      	nop
 8002b3c:	f3af 8000 	nop.w
 8002b40:	00000010 	.word	0x00000010
 8002b44:	00000003 	.word	0x00000003
 8002b48:	40007400 	.word	0x40007400
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	00000000 	.word	0x00000000

08002b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	2100      	movs	r1, #0
{
 8002b5e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b60:	2284      	movs	r2, #132	@ 0x84
 8002b62:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	9108      	str	r1, [sp, #32]
 8002b66:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002b6a:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b6e:	f004 fa94 	bl	800709a <memset>
  if(hi2c->Instance==I2C1)
 8002b72:	4a37      	ldr	r2, [pc, #220]	@ (8002c50 <HAL_I2C_MspInit+0xf8>)
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8002b7a:	4a36      	ldr	r2, [pc, #216]	@ (8002c54 <HAL_I2C_MspInit+0xfc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <HAL_I2C_MspInit+0x82>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b80:	b02a      	add	sp, #168	@ 0xa8
 8002b82:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b88:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b8a:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8c:	f001 fdc0 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d14c      	bne.n	8002c2e <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b94:	4c30      	ldr	r4, [pc, #192]	@ (8002c58 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b96:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	a904      	add	r1, sp, #16
 8002b9a:	4830      	ldr	r0, [pc, #192]	@ (8002c5c <HAL_I2C_MspInit+0x104>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ba4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ba6:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002ba8:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002baa:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002bae:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8002c40 <HAL_I2C_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002bbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc0:	f001 f89a 	bl	8003cf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bca:	6423      	str	r3, [r4, #64]	@ 0x40
 8002bcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	9b01      	ldr	r3, [sp, #4]
}
 8002bd6:	b02a      	add	sp, #168	@ 0xa8
 8002bd8:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bde:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002be0:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002be2:	f001 fd95 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8002be6:	bb28      	cbnz	r0, 8002c34 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be8:	4c1b      	ldr	r4, [pc, #108]	@ (8002c58 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bea:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bec:	a904      	add	r1, sp, #16
 8002bee:	481c      	ldr	r0, [pc, #112]	@ (8002c60 <HAL_I2C_MspInit+0x108>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bf0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002bf2:	f043 0320 	orr.w	r3, r3, #32
 8002bf6:	6323      	str	r3, [r4, #48]	@ 0x30
 8002bf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bfa:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bfc:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bfe:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c02:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8002c48 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002c10:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c14:	f001 f870 	bl	8003cf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	6423      	str	r3, [r4, #64]	@ 0x40
 8002c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c26:	9303      	str	r3, [sp, #12]
 8002c28:	9b03      	ldr	r3, [sp, #12]
}
 8002c2a:	b02a      	add	sp, #168	@ 0xa8
 8002c2c:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002c2e:	f7ff fab3 	bl	8002198 <Error_Handler>
 8002c32:	e7af      	b.n	8002b94 <HAL_I2C_MspInit+0x3c>
      Error_Handler();
 8002c34:	f7ff fab0 	bl	8002198 <Error_Handler>
 8002c38:	e7d6      	b.n	8002be8 <HAL_I2C_MspInit+0x90>
 8002c3a:	bf00      	nop
 8002c3c:	f3af 8000 	nop.w
 8002c40:	00000240 	.word	0x00000240
 8002c44:	00000012 	.word	0x00000012
 8002c48:	00000003 	.word	0x00000003
 8002c4c:	00000012 	.word	0x00000012
 8002c50:	40005400 	.word	0x40005400
 8002c54:	40005800 	.word	0x40005800
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40021400 	.word	0x40021400

08002c64 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8002c64:	4a11      	ldr	r2, [pc, #68]	@ (8002cac <HAL_TIM_PWM_MspInit+0x48>)
{
 8002c66:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8002c68:	6803      	ldr	r3, [r0, #0]
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d011      	beq.n	8002c92 <HAL_TIM_PWM_MspInit+0x2e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8002c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c72:	d001      	beq.n	8002c78 <HAL_TIM_PWM_MspInit+0x14>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c74:	b002      	add	sp, #8
 8002c76:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c78:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8002c7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	9b01      	ldr	r3, [sp, #4]
}
 8002c8e:	b002      	add	sp, #8
 8002c90:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	9b00      	ldr	r3, [sp, #0]
}
 8002ca6:	b002      	add	sp, #8
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	40023800 	.word	0x40023800

08002cb4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x3c>)
 8002cb6:	6802      	ldr	r2, [r0, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d000      	beq.n	8002cbe <HAL_TIM_Base_MspInit+0xa>
 8002cbc:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cbe:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 7, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2107      	movs	r1, #7
 8002cc6:	202d      	movs	r0, #45	@ 0x2d
{
 8002cc8:	b510      	push	{r4, lr}
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cca:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
{
 8002ccc:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cce:	f044 0402 	orr.w	r4, r4, #2
 8002cd2:	645c      	str	r4, [r3, #68]	@ 0x44
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 7, 0);
 8002cde:	f000 fd2f 	bl	8003740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ce2:	202d      	movs	r0, #45	@ 0x2d
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ce4:	b002      	add	sp, #8
 8002ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002cea:	f000 bd65 	b.w	80037b8 <HAL_NVIC_EnableIRQ>
 8002cee:	bf00      	nop
 8002cf0:	40010400 	.word	0x40010400
 8002cf4:	00000000 	.word	0x00000000

08002cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002cf8:	4a45      	ldr	r2, [pc, #276]	@ (8002e10 <HAL_TIM_MspPostInit+0x118>)
 8002cfa:	6803      	ldr	r3, [r0, #0]
{
 8002cfc:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8002cfe:	4293      	cmp	r3, r2
{
 8002d00:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d02:	f04f 0400 	mov.w	r4, #0
 8002d06:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002d0a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002d0e:	940a      	str	r4, [sp, #40]	@ 0x28
  if(htim->Instance==TIM1)
 8002d10:	d007      	beq.n	8002d22 <HAL_TIM_MspPostInit+0x2a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d16:	d01a      	beq.n	8002d4e <HAL_TIM_MspPostInit+0x56>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 8002d18:	4a3e      	ldr	r2, [pc, #248]	@ (8002e14 <HAL_TIM_MspPostInit+0x11c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02e      	beq.n	8002d7c <HAL_TIM_MspPostInit+0x84>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002d1e:	b00c      	add	sp, #48	@ 0x30
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d22:	4b3d      	ldr	r3, [pc, #244]	@ (8002e18 <HAL_TIM_MspPostInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d24:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d26:	a906      	add	r1, sp, #24
 8002d28:	483c      	ldr	r0, [pc, #240]	@ (8002e1c <HAL_TIM_MspPostInit+0x124>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d2c:	f042 0210 	orr.w	r2, r2, #16
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d34:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d36:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8002d3a:	ed9f 7b31 	vldr	d7, [pc, #196]	@ 8002e00 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8002d42:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d46:	f000 ffd7 	bl	8003cf8 <HAL_GPIO_Init>
}
 8002d4a:	b00c      	add	sp, #48	@ 0x30
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4e:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d52:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	a906      	add	r1, sp, #24
 8002d56:	4832      	ldr	r0, [pc, #200]	@ (8002e20 <HAL_TIM_MspPostInit+0x128>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d5a:	f042 0202 	orr.w	r2, r2, #2
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d62:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d64:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d68:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8002e08 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6c:	9302      	str	r3, [sp, #8]
 8002d6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d70:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	f000 ffc0 	bl	8003cf8 <HAL_GPIO_Init>
}
 8002d78:	b00c      	add	sp, #48	@ 0x30
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	4b26      	ldr	r3, [pc, #152]	@ (8002e18 <HAL_TIM_MspPostInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d7e:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	4828      	ldr	r0, [pc, #160]	@ (8002e24 <HAL_TIM_MspPostInit+0x12c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d8e:	f002 0201 	and.w	r2, r2, #1
 8002d92:	9203      	str	r2, [sp, #12]
 8002d94:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d98:	f042 0202 	orr.w	r2, r2, #2
 8002d9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002da0:	f002 0202 	and.w	r2, r2, #2
 8002da4:	9204      	str	r2, [sp, #16]
 8002da6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002daa:	f042 0204 	orr.w	r2, r2, #4
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002db0:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002db4:	950a      	str	r5, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dbc:	2302      	movs	r3, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbe:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc6:	f000 ff97 	bl	8003cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002dca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	a906      	add	r1, sp, #24
 8002dd0:	4813      	ldr	r0, [pc, #76]	@ (8002e20 <HAL_TIM_MspPostInit+0x128>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002dd2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dda:	950a      	str	r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	f000 ff8c 	bl	8003cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002de0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de4:	a906      	add	r1, sp, #24
 8002de6:	4810      	ldr	r0, [pc, #64]	@ (8002e28 <HAL_TIM_MspPostInit+0x130>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002dea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dec:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dee:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df2:	f000 ff81 	bl	8003cf8 <HAL_GPIO_Init>
}
 8002df6:	b00c      	add	sp, #48	@ 0x30
 8002df8:	bd70      	pop	{r4, r5, r6, pc}
 8002dfa:	bf00      	nop
 8002dfc:	f3af 8000 	nop.w
 8002e00:	00005500 	.word	0x00005500
 8002e04:	00000002 	.word	0x00000002
 8002e08:	00000c00 	.word	0x00000c00
 8002e0c:	00000012 	.word	0x00000012
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40010400 	.word	0x40010400
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40020400 	.word	0x40020400
 8002e24:	40020000 	.word	0x40020000
 8002e28:	40020800 	.word	0x40020800

08002e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e2c:	b530      	push	{r4, r5, lr}
 8002e2e:	b0a9      	sub	sp, #164	@ 0xa4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	2100      	movs	r1, #0
{
 8002e32:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e34:	2284      	movs	r2, #132	@ 0x84
 8002e36:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	9106      	str	r1, [sp, #24]
 8002e3a:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002e3e:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e42:	f004 f92a 	bl	800709a <memset>
  if(huart->Instance==USART3)
 8002e46:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef8 <HAL_UART_MspInit+0xcc>)
 8002e48:	6822      	ldr	r2, [r4, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e4e:	b029      	add	sp, #164	@ 0xa4
 8002e50:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e52:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e56:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e58:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e5a:	f001 fc59 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d143      	bne.n	8002eea <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e62:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e64:	2007      	movs	r0, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e66:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e6a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e72:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002e76:	9200      	str	r2, [sp, #0]
 8002e78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e7c:	f042 0208 	orr.w	r2, r2, #8
 8002e80:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e82:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e88:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8a:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8e:	481c      	ldr	r0, [pc, #112]	@ (8002f00 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e90:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e92:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e94:	9d01      	ldr	r5, [sp, #4]
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002e96:	4d1b      	ldr	r5, [pc, #108]	@ (8002f04 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea4:	f000 ff28 	bl	8003cf8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002ea8:	4917      	ldr	r1, [pc, #92]	@ (8002f08 <HAL_UART_MspInit+0xdc>)
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8002eaa:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002eae:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002eb0:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8002eb2:	60eb      	str	r3, [r5, #12]
 8002eb4:	616b      	str	r3, [r5, #20]
 8002eb6:	e9c5 1200 	strd	r1, r2, [r5]
 8002eba:	2140      	movs	r1, #64	@ 0x40
 8002ebc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ec0:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8002ec4:	60a9      	str	r1, [r5, #8]
 8002ec6:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ec8:	e9c5 3308 	strd	r3, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ecc:	f000 fd0a 	bl	80038e4 <HAL_DMA_Init>
 8002ed0:	b970      	cbnz	r0, 8002ef0 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2027      	movs	r0, #39	@ 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002ed6:	6725      	str	r5, [r4, #112]	@ 0x70
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ed8:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002eda:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002edc:	f000 fc30 	bl	8003740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ee0:	2027      	movs	r0, #39	@ 0x27
 8002ee2:	f000 fc69 	bl	80037b8 <HAL_NVIC_EnableIRQ>
}
 8002ee6:	b029      	add	sp, #164	@ 0xa4
 8002ee8:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8002eea:	f7ff f955 	bl	8002198 <Error_Handler>
 8002eee:	e7b8      	b.n	8002e62 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002ef0:	f7ff f952 	bl	8002198 <Error_Handler>
 8002ef4:	e7ed      	b.n	8002ed2 <HAL_UART_MspInit+0xa6>
 8002ef6:	bf00      	nop
 8002ef8:	40004800 	.word	0x40004800
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	20014248 	.word	0x20014248
 8002f08:	40026070 	.word	0x40026070

08002f0c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f0c:	e7fe      	b.n	8002f0c <NMI_Handler>
 8002f0e:	bf00      	nop

08002f10 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f10:	e7fe      	b.n	8002f10 <HardFault_Handler>
 8002f12:	bf00      	nop

08002f14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f14:	e7fe      	b.n	8002f14 <MemManage_Handler>
 8002f16:	bf00      	nop

08002f18 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <BusFault_Handler>
 8002f1a:	bf00      	nop

08002f1c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <UsageFault_Handler>
 8002f1e:	bf00      	nop

08002f20 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop

08002f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop

08002f28 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop

08002f2c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f2c:	f7ff bc22 	b.w	8002774 <HAL_IncTick>

08002f30 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002f30:	4801      	ldr	r0, [pc, #4]	@ (8002f38 <DMA1_Stream4_IRQHandler+0x8>)
 8002f32:	f000 be0d 	b.w	8003b50 <HAL_DMA_IRQHandler>
 8002f36:	bf00      	nop
 8002f38:	20014248 	.word	0x20014248

08002f3c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f3c:	4801      	ldr	r0, [pc, #4]	@ (8002f44 <USART3_IRQHandler+0x8>)
 8002f3e:	f002 be99 	b.w	8005c74 <HAL_UART_IRQHandler>
 8002f42:	bf00      	nop
 8002f44:	200142a8 	.word	0x200142a8

08002f48 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002f48:	4801      	ldr	r0, [pc, #4]	@ (8002f50 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8002f4a:	f002 b953 	b.w	80051f4 <HAL_TIM_IRQHandler>
 8002f4e:	bf00      	nop
 8002f50:	2001435c 	.word	0x2001435c

08002f54 <DMA2_Stream4_IRQHandler>:
  */
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	db_DMA2_Stream4_IRQHandler++;
 8002f54:	4a03      	ldr	r2, [pc, #12]	@ (8002f64 <DMA2_Stream4_IRQHandler+0x10>)

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f56:	4804      	ldr	r0, [pc, #16]	@ (8002f68 <DMA2_Stream4_IRQHandler+0x14>)
	db_DMA2_Stream4_IRQHandler++;
 8002f58:	6813      	ldr	r3, [r2, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	6013      	str	r3, [r2, #0]
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f5e:	f000 bdf7 	b.w	8003b50 <HAL_DMA_IRQHandler>
 8002f62:	bf00      	nop
 8002f64:	200147e8 	.word	0x200147e8
 8002f68:	20014524 	.word	0x20014524

08002f6c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	4770      	bx	lr

08002f70 <_kill>:

int _kill(int pid, int sig)
{
 8002f70:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002f72:	f004 f8e5 	bl	8007140 <__errno>
 8002f76:	2216      	movs	r2, #22
 8002f78:	4603      	mov	r3, r0
	return -1;
}
 8002f7a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8002f7e:	601a      	str	r2, [r3, #0]
}
 8002f80:	bd08      	pop	{r3, pc}
 8002f82:	bf00      	nop

08002f84 <_exit>:

void _exit (int status)
{
 8002f84:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002f86:	f004 f8db 	bl	8007140 <__errno>
 8002f8a:	2316      	movs	r3, #22
 8002f8c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002f8e:	e7fe      	b.n	8002f8e <_exit+0xa>

08002f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f90:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f92:	1e16      	subs	r6, r2, #0
 8002f94:	dd07      	ble.n	8002fa6 <_read+0x16>
 8002f96:	460c      	mov	r4, r1
 8002f98:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002f9a:	f3af 8000 	nop.w
 8002f9e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	42a5      	cmp	r5, r4
 8002fa4:	d1f9      	bne.n	8002f9a <_read+0xa>
	}

return len;
}
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
 8002faa:	bf00      	nop

08002fac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fac:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fae:	1e16      	subs	r6, r2, #0
 8002fb0:	dd07      	ble.n	8002fc2 <_write+0x16>
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002fb6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002fba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fbe:	42a5      	cmp	r5, r4
 8002fc0:	d1f9      	bne.n	8002fb6 <_write+0xa>
	}
	return len;
}
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	bf00      	nop

08002fc8 <_close>:

int _close(int file)
{
	return -1;
}
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8002fd4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002fd6:	604b      	str	r3, [r1, #4]
}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop

08002fdc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002fdc:	2001      	movs	r0, #1
 8002fde:	4770      	bx	lr

08002fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	4770      	bx	lr

08002fe4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe4:	490d      	ldr	r1, [pc, #52]	@ (800301c <_sbrk+0x38>)
{
 8002fe6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8003020 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002fea:	6808      	ldr	r0, [r1, #0]
{
 8002fec:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fee:	4c0d      	ldr	r4, [pc, #52]	@ (8003024 <_sbrk+0x40>)
 8002ff0:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002ff2:	b120      	cbz	r0, 8002ffe <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff4:	4403      	add	r3, r0
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d807      	bhi.n	800300a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002ffa:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002ffc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002ffe:	4c0a      	ldr	r4, [pc, #40]	@ (8003028 <_sbrk+0x44>)
 8003000:	4620      	mov	r0, r4
 8003002:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003004:	4403      	add	r3, r0
 8003006:	4293      	cmp	r3, r2
 8003008:	d9f7      	bls.n	8002ffa <_sbrk+0x16>
    errno = ENOMEM;
 800300a:	f004 f899 	bl	8007140 <__errno>
 800300e:	220c      	movs	r2, #12
 8003010:	4603      	mov	r3, r0
    return (void *)-1;
 8003012:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8003016:	601a      	str	r2, [r3, #0]
}
 8003018:	bd10      	pop	{r4, pc}
 800301a:	bf00      	nop
 800301c:	200147ec 	.word	0x200147ec
 8003020:	20050000 	.word	0x20050000
 8003024:	00000400 	.word	0x00000400
 8003028:	20014940 	.word	0x20014940

0800302c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800302c:	4a03      	ldr	r2, [pc, #12]	@ (800303c <SystemInit+0x10>)
 800302e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003036:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003044:	480d      	ldr	r0, [pc, #52]	@ (800307c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003046:	490e      	ldr	r1, [pc, #56]	@ (8003080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003048:	4a0e      	ldr	r2, [pc, #56]	@ (8003084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0b      	ldr	r2, [pc, #44]	@ (8003088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800305c:	4c0b      	ldr	r4, [pc, #44]	@ (800308c <LoopFillZerobss+0x26>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800306a:	f7ff ffdf 	bl	800302c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800306e:	f004 f86d 	bl	800714c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003072:	f7fe fc21 	bl	80018b8 <main>
  bx  lr    
 8003076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003078:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800307c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003080:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003084:	0800a8b0 	.word	0x0800a8b0
  ldr r2, =_sbss
 8003088:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800308c:	20014940 	.word	0x20014940

08003090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003090:	e7fe      	b.n	8003090 <ADC_IRQHandler>
	...

08003094 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003094:	490e      	ldr	r1, [pc, #56]	@ (80030d0 <HAL_InitTick+0x3c>)
 8003096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <HAL_InitTick+0x40>)
{
 800309c:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800309e:	7809      	ldrb	r1, [r1, #0]
{
 80030a0:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a8:	fbb2 f0f3 	udiv	r0, r2, r3
 80030ac:	f000 fb92 	bl	80037d4 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b0:	b908      	cbnz	r0, 80030b6 <HAL_InitTick+0x22>
 80030b2:	2c0f      	cmp	r4, #15
 80030b4:	d901      	bls.n	80030ba <HAL_InitTick+0x26>
    return HAL_ERROR;
 80030b6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80030b8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ba:	2200      	movs	r2, #0
 80030bc:	4621      	mov	r1, r4
 80030be:	f04f 30ff 	mov.w	r0, #4294967295
 80030c2:	f000 fb3d 	bl	8003740 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c6:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <HAL_InitTick+0x44>)
 80030c8:	2000      	movs	r0, #0
 80030ca:	601c      	str	r4, [r3, #0]
}
 80030cc:	bd10      	pop	{r4, pc}
 80030ce:	bf00      	nop
 80030d0:	20000004 	.word	0x20000004
 80030d4:	20000000 	.word	0x20000000
 80030d8:	20000008 	.word	0x20000008

080030dc <HAL_Init>:
{
 80030dc:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 80030de:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e0:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e8:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f0:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030f2:	f000 fb13 	bl	800371c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f6:	2006      	movs	r0, #6
 80030f8:	f7ff ffcc 	bl	8003094 <HAL_InitTick>
  HAL_MspInit();
 80030fc:	f7ff fb8c 	bl	8002818 <HAL_MspInit>
}
 8003100:	2000      	movs	r0, #0
 8003102:	bd08      	pop	{r3, pc}
 8003104:	40023c00 	.word	0x40023c00

08003108 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003108:	4b01      	ldr	r3, [pc, #4]	@ (8003110 <HAL_GetTick+0x8>)
 800310a:	6818      	ldr	r0, [r3, #0]
}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	200147f0 	.word	0x200147f0

08003114 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop

08003118 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop

0800311c <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop

08003120 <HAL_ADC_Init>:
  if(hadc == NULL)
 8003120:	2800      	cmp	r0, #0
 8003122:	f000 80ac 	beq.w	800327e <HAL_ADC_Init+0x15e>
{
 8003126:	b538      	push	{r3, r4, r5, lr}
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003128:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800312a:	4604      	mov	r4, r0
 800312c:	b13b      	cbz	r3, 800313e <HAL_ADC_Init+0x1e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800312e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003130:	06db      	lsls	r3, r3, #27
 8003132:	d51b      	bpl.n	800316c <HAL_ADC_Init+0x4c>
  __HAL_UNLOCK(hadc);
 8003134:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8003136:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003138:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800313c:	bd38      	pop	{r3, r4, r5, pc}
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800313e:	4a55      	ldr	r2, [pc, #340]	@ (8003294 <HAL_ADC_Init+0x174>)
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003140:	4b55      	ldr	r3, [pc, #340]	@ (8003298 <HAL_ADC_Init+0x178>)
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003142:	4856      	ldr	r0, [pc, #344]	@ (800329c <HAL_ADC_Init+0x17c>)
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003144:	4956      	ldr	r1, [pc, #344]	@ (80032a0 <HAL_ADC_Init+0x180>)
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003146:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800314a:	4a56      	ldr	r2, [pc, #344]	@ (80032a4 <HAL_ADC_Init+0x184>)
    if (hadc->MspInitCallback == NULL)
 800314c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800314e:	65a2      	str	r2, [r4, #88]	@ 0x58
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003150:	e9c4 0114 	strd	r0, r1, [r4, #80]	@ 0x50
    if (hadc->MspInitCallback == NULL)
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8099 	beq.w	800328c <HAL_ADC_Init+0x16c>
    hadc->MspInitCallback(hadc);
 800315a:	4620      	mov	r0, r4
 800315c:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 800315e:	2300      	movs	r3, #0
 8003160:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8003162:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003166:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003168:	06db      	lsls	r3, r3, #27
 800316a:	d4e3      	bmi.n	8003134 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800316c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800316e:	4b4e      	ldr	r3, [pc, #312]	@ (80032a8 <HAL_ADC_Init+0x188>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003170:	4a4e      	ldr	r2, [pc, #312]	@ (80032ac <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8003172:	400b      	ands	r3, r1
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	6423      	str	r3, [r4, #64]	@ 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800317a:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800317c:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800317e:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8003182:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003184:	6850      	ldr	r0, [r2, #4]
 8003186:	6861      	ldr	r1, [r4, #4]
 8003188:	4308      	orrs	r0, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800318a:	4949      	ldr	r1, [pc, #292]	@ (80032b0 <HAL_ADC_Init+0x190>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800318c:	6050      	str	r0, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800318e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003190:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003192:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003196:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800319e:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	4302      	orrs	r2, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031ae:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4302      	orrs	r2, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031be:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80031c0:	4288      	cmp	r0, r1
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031c2:	609a      	str	r2, [r3, #8]
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c4:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c6:	d052      	beq.n	800326e <HAL_ADC_Init+0x14e>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031cc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	4310      	orrs	r0, r2
 80031d4:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031e4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031e6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031e8:	f022 0202 	bic.w	r2, r2, #2
 80031ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80031f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031f6:	f894 2020 	ldrb.w	r2, [r4, #32]
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d041      	beq.n	8003282 <HAL_ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031fe:	6858      	ldr	r0, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003200:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003202:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003206:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003208:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003210:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003218:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800321a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800321c:	69e2      	ldr	r2, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800321e:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003222:	6960      	ldr	r0, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003224:	1e51      	subs	r1, r2, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003226:	62dd      	str	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800322e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800323e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
    ADC_CLEAR_ERRORCODE(hadc);
 8003242:	2100      	movs	r1, #0
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003244:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800324c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003254:	4608      	mov	r0, r1
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003256:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003258:	6461      	str	r1, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800325a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800325c:	f023 0303 	bic.w	r3, r3, #3
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8003266:	2300      	movs	r3, #0
 8003268:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800326c:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800326e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003272:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	e7b2      	b.n	80031e4 <HAL_ADC_Init+0xc4>
    return HAL_ERROR;
 800327e:	2001      	movs	r0, #1
}
 8003280:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e7c6      	b.n	800321a <HAL_ADC_Init+0xfa>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800328c:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_ADC_Init+0x194>)
 800328e:	4613      	mov	r3, r2
 8003290:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8003292:	e762      	b.n	800315a <HAL_ADC_Init+0x3a>
 8003294:	08002765 	.word	0x08002765
 8003298:	08003119 	.word	0x08003119
 800329c:	0800311d 	.word	0x0800311d
 80032a0:	08003115 	.word	0x08003115
 80032a4:	080035c1 	.word	0x080035c1
 80032a8:	ffffeefd 	.word	0xffffeefd
 80032ac:	40012300 	.word	0x40012300
 80032b0:	0f000001 	.word	0x0f000001
 80032b4:	08002849 	.word	0x08002849

080032b8 <HAL_ADC_ConfigChannel>:
{
 80032b8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t counter = 0;
 80032ba:	2300      	movs	r3, #0
{
 80032bc:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80032be:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80032c0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f000 80a7 	beq.w	8003418 <HAL_ADC_ConfigChannel+0x160>
 80032ca:	2201      	movs	r2, #1
 80032cc:	4684      	mov	ip, r0
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032ce:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80032d0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80032d4:	6808      	ldr	r0, [r1, #0]
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80032d6:	688c      	ldr	r4, [r1, #8]
 80032d8:	b282      	uxth	r2, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80032da:	2809      	cmp	r0, #9
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032dc:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80032e0:	d92d      	bls.n	800333e <HAL_ADC_ConfigChannel+0x86>
 80032e2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80032e6:	d02a      	beq.n	800333e <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032e8:	f1ae 0e1e 	sub.w	lr, lr, #30
 80032ec:	2607      	movs	r6, #7
 80032ee:	68dd      	ldr	r5, [r3, #12]
 80032f0:	fa06 f60e 	lsl.w	r6, r6, lr
 80032f4:	ea25 0506 	bic.w	r5, r5, r6
 80032f8:	60dd      	str	r5, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032fa:	4d49      	ldr	r5, [pc, #292]	@ (8003420 <HAL_ADC_ConfigChannel+0x168>)
 80032fc:	42a8      	cmp	r0, r5
 80032fe:	f000 8086 	beq.w	800340e <HAL_ADC_ConfigChannel+0x156>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003302:	68dd      	ldr	r5, [r3, #12]
 8003304:	fa04 f40e 	lsl.w	r4, r4, lr
 8003308:	432c      	orrs	r4, r5
 800330a:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 800330c:	684c      	ldr	r4, [r1, #4]
 800330e:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003310:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 8003314:	d824      	bhi.n	8003360 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003316:	3905      	subs	r1, #5
 8003318:	241f      	movs	r4, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800331a:	408a      	lsls	r2, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800331c:	408c      	lsls	r4, r1
 800331e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003320:	ea21 0104 	bic.w	r1, r1, r4
 8003324:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003326:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003328:	430a      	orrs	r2, r1
 800332a:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800332c:	4a3d      	ldr	r2, [pc, #244]	@ (8003424 <HAL_ADC_ConfigChannel+0x16c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d026      	beq.n	8003380 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8003332:	2300      	movs	r3, #0
  return HAL_OK;
 8003334:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8003336:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 800333a:	b002      	add	sp, #8
 800333c:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800333e:	2507      	movs	r5, #7
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003340:	fa04 f40e 	lsl.w	r4, r4, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003344:	fa05 fe0e 	lsl.w	lr, r5, lr
 8003348:	691d      	ldr	r5, [r3, #16]
 800334a:	ea25 050e 	bic.w	r5, r5, lr
 800334e:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003350:	691d      	ldr	r5, [r3, #16]
 8003352:	432c      	orrs	r4, r5
 8003354:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7)
 8003356:	684c      	ldr	r4, [r1, #4]
 8003358:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800335a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 800335e:	d9da      	bls.n	8003316 <HAL_ADC_ConfigChannel+0x5e>
  else if (sConfig->Rank < 13)
 8003360:	2c0c      	cmp	r4, #12
 8003362:	d837      	bhi.n	80033d4 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003364:	3923      	subs	r1, #35	@ 0x23
 8003366:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003368:	408a      	lsls	r2, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800336a:	408c      	lsls	r4, r1
 800336c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800336e:	ea21 0104 	bic.w	r1, r1, r4
 8003372:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003374:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003376:	430a      	orrs	r2, r1
 8003378:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800337a:	4a2a      	ldr	r2, [pc, #168]	@ (8003424 <HAL_ADC_ConfigChannel+0x16c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d1d8      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x7a>
 8003380:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8003384:	d03c      	beq.n	8003400 <HAL_ADC_ConfigChannel+0x148>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003386:	2812      	cmp	r0, #18
 8003388:	d030      	beq.n	80033ec <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800338a:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <HAL_ADC_ConfigChannel+0x168>)
 800338c:	4298      	cmp	r0, r3
 800338e:	d001      	beq.n	8003394 <HAL_ADC_ConfigChannel+0xdc>
 8003390:	2811      	cmp	r0, #17
 8003392:	d1ce      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003394:	4b24      	ldr	r3, [pc, #144]	@ (8003428 <HAL_ADC_ConfigChannel+0x170>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003396:	4922      	ldr	r1, [pc, #136]	@ (8003420 <HAL_ADC_ConfigChannel+0x168>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003398:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800339a:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 800339c:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80033a0:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80033a8:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033aa:	d1c2      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x7a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80033ac:	4b1f      	ldr	r3, [pc, #124]	@ (800342c <HAL_ADC_ConfigChannel+0x174>)
 80033ae:	4a20      	ldr	r2, [pc, #128]	@ (8003430 <HAL_ADC_ConfigChannel+0x178>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0c9b      	lsrs	r3, r3, #18
 80033b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80033c0:	9b01      	ldr	r3, [sp, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0b5      	beq.n	8003332 <HAL_ADC_ConfigChannel+0x7a>
        counter--;
 80033c6:	9b01      	ldr	r3, [sp, #4]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80033cc:	9b01      	ldr	r3, [sp, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f9      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x10e>
 80033d2:	e7ae      	b.n	8003332 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033d4:	3941      	subs	r1, #65	@ 0x41
 80033d6:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033d8:	408a      	lsls	r2, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033da:	408c      	lsls	r4, r1
 80033dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033de:	ea21 0104 	bic.w	r1, r1, r4
 80033e2:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033e6:	430a      	orrs	r2, r1
 80033e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033ea:	e79f      	b.n	800332c <HAL_ADC_ConfigChannel+0x74>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80033ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <HAL_ADC_ConfigChannel+0x170>)
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80033f4:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80033fc:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033fe:	e798      	b.n	8003332 <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003400:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8003404:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003408:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800340c:	e791      	b.n	8003332 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800340e:	68dd      	ldr	r5, [r3, #12]
 8003410:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
 8003414:	60dc      	str	r4, [r3, #12]
 8003416:	e779      	b.n	800330c <HAL_ADC_ConfigChannel+0x54>
  __HAL_LOCK(hadc);
 8003418:	2002      	movs	r0, #2
}
 800341a:	b002      	add	sp, #8
 800341c:	bd70      	pop	{r4, r5, r6, pc}
 800341e:	bf00      	nop
 8003420:	10000012 	.word	0x10000012
 8003424:	40012000 	.word	0x40012000
 8003428:	40012300 	.word	0x40012300
 800342c:	20000000 	.word	0x20000000
 8003430:	431bde83 	.word	0x431bde83

08003434 <ADC_MultiModeDMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003434:	6b80      	ldr	r0, [r0, #56]	@ 0x38
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003436:	2340      	movs	r3, #64	@ 0x40
 8003438:	6403      	str	r3, [r0, #64]	@ 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800343a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6443      	str	r3, [r0, #68]	@ 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8003442:	f7ff be67 	b.w	8003114 <HAL_ADC_ErrorCallback>
 8003446:	bf00      	nop

08003448 <ADC_MultiModeDMAHalfConvCplt>:
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003448:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800344a:	f7ff be65 	b.w	8003118 <HAL_ADC_ConvHalfCpltCallback>
 800344e:	bf00      	nop

08003450 <ADC_MultiModeDMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003450:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003454:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8003458:	d123      	bne.n	80034a2 <ADC_MultiModeDMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800345a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800345c:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800345e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003464:	688a      	ldr	r2, [r1, #8]
 8003466:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800346a:	d117      	bne.n	800349c <ADC_MultiModeDMAConvCplt+0x4c>
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	b9aa      	cbnz	r2, 800349c <ADC_MultiModeDMAConvCplt+0x4c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003470:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003472:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8003476:	d002      	beq.n	800347e <ADC_MultiModeDMAConvCplt+0x2e>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003478:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800347a:	0550      	lsls	r0, r2, #21
 800347c:	d40e      	bmi.n	800349c <ADC_MultiModeDMAConvCplt+0x4c>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800347e:	684a      	ldr	r2, [r1, #4]
 8003480:	f022 0220 	bic.w	r2, r2, #32
 8003484:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003488:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800348e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003490:	04d2      	lsls	r2, r2, #19
 8003492:	d403      	bmi.n	800349c <ADC_MultiModeDMAConvCplt+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff b961 	b.w	8002764 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a6:	4718      	bx	r3

080034a8 <HAL_ADCEx_MultiModeStart_DMA>:
{
 80034a8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t counter = 0;
 80034aa:	2300      	movs	r3, #0
{
 80034ac:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80034ae:	9301      	str	r3, [sp, #4]
{
 80034b0:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 80034b2:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80034b6:	2a01      	cmp	r2, #1
 80034b8:	d06f      	beq.n	800359a <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 80034ba:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034bc:	6806      	ldr	r6, [r0, #0]
 80034be:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80034c0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034c4:	68b2      	ldr	r2, [r6, #8]
 80034c6:	07d4      	lsls	r4, r2, #31
 80034c8:	d414      	bmi.n	80034f4 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
    __HAL_ADC_ENABLE(hadc);
 80034ca:	68b2      	ldr	r2, [r6, #8]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80034d2:	4a33      	ldr	r2, [pc, #204]	@ (80035a0 <HAL_ADCEx_MultiModeStart_DMA+0xf8>)
 80034d4:	6810      	ldr	r0, [r2, #0]
 80034d6:	4a33      	ldr	r2, [pc, #204]	@ (80035a4 <HAL_ADCEx_MultiModeStart_DMA+0xfc>)
 80034d8:	fba2 2000 	umull	r2, r0, r2, r0
 80034dc:	0c80      	lsrs	r0, r0, #18
 80034de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80034e2:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 80034e4:	9a01      	ldr	r2, [sp, #4]
 80034e6:	b12a      	cbz	r2, 80034f4 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
      counter--;
 80034e8:	9c01      	ldr	r4, [sp, #4]
 80034ea:	3c01      	subs	r4, #1
 80034ec:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 80034ee:	9801      	ldr	r0, [sp, #4]
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d1f9      	bne.n	80034e8 <HAL_ADCEx_MultiModeStart_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034f4:	68b2      	ldr	r2, [r6, #8]
 80034f6:	07d0      	lsls	r0, r2, #31
 80034f8:	d53d      	bpl.n	8003576 <HAL_ADCEx_MultiModeStart_DMA+0xce>
    ADC_STATE_CLR_SET(hadc->State,
 80034fa:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 80034fc:	4a2a      	ldr	r2, [pc, #168]	@ (80035a8 <HAL_ADCEx_MultiModeStart_DMA+0x100>)
 80034fe:	4002      	ands	r2, r0
 8003500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003504:	642a      	str	r2, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003506:	6872      	ldr	r2, [r6, #4]
 8003508:	0552      	lsls	r2, r2, #21
 800350a:	d505      	bpl.n	8003518 <HAL_ADCEx_MultiModeStart_DMA+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800350c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800350e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003512:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003516:	642a      	str	r2, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003518:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800351a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800351e:	d03a      	beq.n	8003596 <HAL_ADCEx_MultiModeStart_DMA+0xee>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003520:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8003522:	f022 0206 	bic.w	r2, r2, #6
 8003526:	646a      	str	r2, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8003528:	2200      	movs	r2, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 800352a:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
      ADC->CCR |= ADC_CCR_DDS;
 800352c:	4c1f      	ldr	r4, [pc, #124]	@ (80035ac <HAL_ADCEx_MultiModeStart_DMA+0x104>)
    __HAL_UNLOCK(hadc);
 800352e:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 8003532:	4a1f      	ldr	r2, [pc, #124]	@ (80035b0 <HAL_ADCEx_MultiModeStart_DMA+0x108>)
 8003534:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 8003536:	4a1f      	ldr	r2, [pc, #124]	@ (80035b4 <HAL_ADCEx_MultiModeStart_DMA+0x10c>)
 8003538:	6402      	str	r2, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 800353a:	4a1f      	ldr	r2, [pc, #124]	@ (80035b8 <HAL_ADCEx_MultiModeStart_DMA+0x110>)
 800353c:	64c2      	str	r2, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800353e:	f06f 0202 	mvn.w	r2, #2
 8003542:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003544:	6872      	ldr	r2, [r6, #4]
 8003546:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800354a:	6072      	str	r2, [r6, #4]
    if (hadc->Init.DMAContinuousRequests != DISABLE)
 800354c:	f895 2030 	ldrb.w	r2, [r5, #48]	@ 0x30
 8003550:	b1e2      	cbz	r2, 800358c <HAL_ADCEx_MultiModeStart_DMA+0xe4>
      ADC->CCR |= ADC_CCR_DDS;
 8003552:	6862      	ldr	r2, [r4, #4]
 8003554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003558:	6062      	str	r2, [r4, #4]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
 800355a:	460a      	mov	r2, r1
 800355c:	4917      	ldr	r1, [pc, #92]	@ (80035bc <HAL_ADCEx_MultiModeStart_DMA+0x114>)
 800355e:	f000 fa59 	bl	8003a14 <HAL_DMA_Start_IT>
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003562:	682b      	ldr	r3, [r5, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800356a:	d10c      	bne.n	8003586 <HAL_ADCEx_MultiModeStart_DMA+0xde>
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	e007      	b.n	8003586 <HAL_ADCEx_MultiModeStart_DMA+0xde>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003576:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003578:	f043 0310 	orr.w	r3, r3, #16
 800357c:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 8003586:	2000      	movs	r0, #0
}
 8003588:	b002      	add	sp, #8
 800358a:	bd70      	pop	{r4, r5, r6, pc}
      ADC->CCR &= ~ADC_CCR_DDS;
 800358c:	6862      	ldr	r2, [r4, #4]
 800358e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003592:	6062      	str	r2, [r4, #4]
 8003594:	e7e1      	b.n	800355a <HAL_ADCEx_MultiModeStart_DMA+0xb2>
      ADC_CLEAR_ERRORCODE(hadc);
 8003596:	646a      	str	r2, [r5, #68]	@ 0x44
 8003598:	e7c6      	b.n	8003528 <HAL_ADCEx_MultiModeStart_DMA+0x80>
  __HAL_LOCK(hadc);
 800359a:	2002      	movs	r0, #2
}
 800359c:	b002      	add	sp, #8
 800359e:	bd70      	pop	{r4, r5, r6, pc}
 80035a0:	20000000 	.word	0x20000000
 80035a4:	431bde83 	.word	0x431bde83
 80035a8:	fffff8fe 	.word	0xfffff8fe
 80035ac:	40012300 	.word	0x40012300
 80035b0:	08003451 	.word	0x08003451
 80035b4:	08003449 	.word	0x08003449
 80035b8:	08003435 	.word	0x08003435
 80035bc:	40012308 	.word	0x40012308

080035c0 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop

080035c4 <HAL_ADCEx_MultiModeConfigChannel>:
  __HAL_LOCK(hadc);
 80035c4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d022      	beq.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
  ADC->CCR &= ~(ADC_CCR_MULTI);
 80035cc:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x54>)
 80035ce:	4602      	mov	r2, r0
  __HAL_UNLOCK(hadc);
 80035d0:	f04f 0c00 	mov.w	ip, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 80035d4:	6858      	ldr	r0, [r3, #4]
 80035d6:	f020 001f 	bic.w	r0, r0, #31
{
 80035da:	b410      	push	{r4}
  ADC->CCR &= ~(ADC_CCR_MULTI);
 80035dc:	6058      	str	r0, [r3, #4]
  ADC->CCR |= multimode->Mode;
 80035de:	6858      	ldr	r0, [r3, #4]
 80035e0:	680c      	ldr	r4, [r1, #0]
 80035e2:	4320      	orrs	r0, r4
 80035e4:	6058      	str	r0, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 80035e6:	6858      	ldr	r0, [r3, #4]
 80035e8:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80035ec:	6058      	str	r0, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 80035ee:	6858      	ldr	r0, [r3, #4]
 80035f0:	684c      	ldr	r4, [r1, #4]
 80035f2:	4320      	orrs	r0, r4
 80035f4:	6058      	str	r0, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 80035f6:	6858      	ldr	r0, [r3, #4]
 80035f8:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
 80035fc:	6058      	str	r0, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 80035fe:	6858      	ldr	r0, [r3, #4]
 8003600:	6889      	ldr	r1, [r1, #8]
 8003602:	4301      	orrs	r1, r0
  return HAL_OK;
 8003604:	4660      	mov	r0, ip
  ADC->CCR |= multimode->TwoSamplingDelay;
 8003606:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(hadc);
 8003608:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c
}
 800360c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003610:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8003612:	2002      	movs	r0, #2
}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40012300 	.word	0x40012300

0800361c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800361c:	2800      	cmp	r0, #0
 800361e:	d07b      	beq.n	8003718 <HAL_CAN_Init+0xfc>
{
 8003620:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003622:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003626:	4604      	mov	r4, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d072      	beq.n	8003712 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800362c:	6822      	ldr	r2, [r4, #0]
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003636:	f7ff fd67 	bl	8003108 <HAL_GetTick>
 800363a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800363c:	e004      	b.n	8003648 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800363e:	f7ff fd63 	bl	8003108 <HAL_GetTick>
 8003642:	1b40      	subs	r0, r0, r5
 8003644:	280a      	cmp	r0, #10
 8003646:	d85b      	bhi.n	8003700 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	07d1      	lsls	r1, r2, #31
 800364e:	d5f6      	bpl.n	800363e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	f022 0202 	bic.w	r2, r2, #2
 8003656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003658:	f7ff fd56 	bl	8003108 <HAL_GetTick>
 800365c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800365e:	e004      	b.n	800366a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003660:	f7ff fd52 	bl	8003108 <HAL_GetTick>
 8003664:	1b40      	subs	r0, r0, r5
 8003666:	280a      	cmp	r0, #10
 8003668:	d84a      	bhi.n	8003700 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	0792      	lsls	r2, r2, #30
 8003670:	d4f6      	bmi.n	8003660 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003672:	7e22      	ldrb	r2, [r4, #24]
 8003674:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	bf0c      	ite	eq
 800367a:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800367e:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003684:	7e62      	ldrb	r2, [r4, #25]
 8003686:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	bf0c      	ite	eq
 800368c:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003690:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003696:	7ea2      	ldrb	r2, [r4, #26]
 8003698:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	bf0c      	ite	eq
 800369e:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036a2:	f022 0220 	bicne.w	r2, r2, #32
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036a8:	7ee2      	ldrb	r2, [r4, #27]
 80036aa:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	bf0c      	ite	eq
 80036b0:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036b4:	f042 0210 	orrne.w	r2, r2, #16
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036ba:	7f22      	ldrb	r2, [r4, #28]
 80036bc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	bf0c      	ite	eq
 80036c2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036c6:	f022 0208 	bicne.w	r2, r2, #8
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036cc:	7f62      	ldrb	r2, [r4, #29]
 80036ce:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	bf0c      	ite	eq
 80036d4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036d8:	f022 0204 	bicne.w	r2, r2, #4
 80036dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036de:	6921      	ldr	r1, [r4, #16]
 80036e0:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 80036e4:	4302      	orrs	r2, r0
 80036e6:	6960      	ldr	r0, [r4, #20]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	6861      	ldr	r1, [r4, #4]
 80036ec:	4302      	orrs	r2, r0
 80036ee:	3901      	subs	r1, #1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036f0:	2000      	movs	r0, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036f2:	430a      	orrs	r2, r1

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036f4:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036f6:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036f8:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80036fa:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003700:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003702:	2205      	movs	r2, #5
    return HAL_ERROR;
 8003704:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370a:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800370c:	f884 2020 	strb.w	r2, [r4, #32]
}
 8003710:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8003712:	f7ff f9a5 	bl	8002a60 <HAL_CAN_MspInit>
 8003716:	e789      	b.n	800362c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8003718:	2001      	movs	r0, #1
}
 800371a:	4770      	bx	lr

0800371c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800371c:	4906      	ldr	r1, [pc, #24]	@ (8003738 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003722:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003726:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003730:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003732:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003734:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00
 800373c:	05fa0000 	.word	0x05fa0000

08003740 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003740:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_NVIC_SetPriority+0x6c>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003748:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003752:	f1be 0f04 	cmp.w	lr, #4
 8003756:	bf28      	it	cs
 8003758:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375c:	f1bc 0f06 	cmp.w	ip, #6
 8003760:	d91a      	bls.n	8003798 <HAL_NVIC_SetPriority+0x58>
 8003762:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	fa03 f30c 	lsl.w	r3, r3, ip
 800376e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8003776:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	fa03 f30e 	lsl.w	r3, r3, lr
 800377c:	ea21 0303 	bic.w	r3, r1, r3
 8003780:	fa03 f30c 	lsl.w	r3, r3, ip
 8003784:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003788:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800378c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800378e:	db06      	blt.n	800379e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003790:	4a07      	ldr	r2, [pc, #28]	@ (80037b0 <HAL_NVIC_SetPriority+0x70>)
 8003792:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003794:	f85d fb04 	ldr.w	pc, [sp], #4
 8003798:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379a:	4694      	mov	ip, r2
 800379c:	e7e9      	b.n	8003772 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379e:	f000 000f 	and.w	r0, r0, #15
 80037a2:	4a04      	ldr	r2, [pc, #16]	@ (80037b4 <HAL_NVIC_SetPriority+0x74>)
 80037a4:	5413      	strb	r3, [r2, r0]
 80037a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037aa:	bf00      	nop
 80037ac:	e000ed00 	.word	0xe000ed00
 80037b0:	e000e400 	.word	0xe000e400
 80037b4:	e000ed14 	.word	0xe000ed14

080037b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037b8:	2800      	cmp	r0, #0
 80037ba:	db07      	blt.n	80037cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037bc:	f000 011f 	and.w	r1, r0, #31
 80037c0:	2301      	movs	r3, #1
 80037c2:	0940      	lsrs	r0, r0, #5
 80037c4:	4a02      	ldr	r2, [pc, #8]	@ (80037d0 <HAL_NVIC_EnableIRQ+0x18>)
 80037c6:	408b      	lsls	r3, r1
 80037c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000e100 	.word	0xe000e100

080037d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d4:	1e43      	subs	r3, r0, #1
 80037d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037da:	d301      	bcc.n	80037e0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80037de:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e6:	4905      	ldr	r1, [pc, #20]	@ (80037fc <HAL_SYSTICK_Config+0x28>)
 80037e8:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ec:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ee:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003800:	b188      	cbz	r0, 8003826 <HAL_DAC_Init+0x26>
{
 8003802:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003804:	7903      	ldrb	r3, [r0, #4]
 8003806:	4604      	mov	r4, r0
 8003808:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800380c:	b13b      	cbz	r3, 800381e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800380e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003810:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003812:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003814:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8003816:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003818:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800381a:	7122      	strb	r2, [r4, #4]
}
 800381c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800381e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003820:	f7ff f95e 	bl	8002ae0 <HAL_DAC_MspInit>
 8003824:	e7f3      	b.n	800380e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8003826:	2001      	movs	r0, #1
}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800382c:	7942      	ldrb	r2, [r0, #5]
 800382e:	2a01      	cmp	r2, #1
 8003830:	d02b      	beq.n	800388a <HAL_DAC_Start+0x5e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003832:	4603      	mov	r3, r0
 8003834:	2202      	movs	r2, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003836:	6800      	ldr	r0, [r0, #0]
 8003838:	f001 0c10 	and.w	ip, r1, #16
{
 800383c:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 800383e:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8003840:	2201      	movs	r2, #1
 8003842:	6804      	ldr	r4, [r0, #0]
 8003844:	fa02 f20c 	lsl.w	r2, r2, ip
 8003848:	4322      	orrs	r2, r4
 800384a:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 800384c:	b981      	cbnz	r1, 8003870 <HAL_DAC_Start+0x44>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800384e:	6802      	ldr	r2, [r0, #0]
 8003850:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 8003854:	2a3c      	cmp	r2, #60	@ 0x3c
 8003856:	d103      	bne.n	8003860 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003858:	6842      	ldr	r2, [r0, #4]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003860:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8003862:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8003864:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003866:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8003868:	7119      	strb	r1, [r3, #4]
}
 800386a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800386e:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003870:	6801      	ldr	r1, [r0, #0]
 8003872:	223c      	movs	r2, #60	@ 0x3c
 8003874:	f401 1170 	and.w	r1, r1, #3932160	@ 0x3c0000
 8003878:	fa02 f20c 	lsl.w	r2, r2, ip
 800387c:	4291      	cmp	r1, r2
 800387e:	d1ef      	bne.n	8003860 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003880:	6842      	ldr	r2, [r0, #4]
 8003882:	f042 0202 	orr.w	r2, r2, #2
 8003886:	6042      	str	r2, [r0, #4]
 8003888:	e7ea      	b.n	8003860 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 800388a:	2002      	movs	r0, #2
}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop

08003890 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003890:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003892:	7940      	ldrb	r0, [r0, #5]
 8003894:	2801      	cmp	r0, #1
 8003896:	d023      	beq.n	80038e0 <HAL_DAC_ConfigChannel+0x50>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003898:	2002      	movs	r0, #2

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800389a:	f002 0210 	and.w	r2, r2, #16
 800389e:	f640 7cfe 	movw	ip, #4094	@ 0xffe
{
 80038a2:	b510      	push	{r4, lr}
  hdac->State = HAL_DAC_STATE_BUSY;
 80038a4:	7118      	strb	r0, [r3, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80038a6:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 = hdac->Instance->CR;
 80038aa:	681c      	ldr	r4, [r3, #0]
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038ac:	f04f 0e01 	mov.w	lr, #1
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80038b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038b4:	4301      	orrs	r1, r0
  tmpreg1 = hdac->Instance->CR;
 80038b6:	6820      	ldr	r0, [r4, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038b8:	4091      	lsls	r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80038ba:	ea20 000c 	bic.w	r0, r0, ip

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038be:	f04f 0c00 	mov.w	ip, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038c2:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038c4:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 80038c6:	6021      	str	r1, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038c8:	fa00 f102 	lsl.w	r1, r0, r2
 80038cc:	6822      	ldr	r2, [r4, #0]

  /* Return function status */
  return HAL_OK;
 80038ce:	4660      	mov	r0, ip
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038d0:	ea22 0201 	bic.w	r2, r2, r1
 80038d4:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80038d6:	f883 e004 	strb.w	lr, [r3, #4]
  __HAL_UNLOCK(hdac);
 80038da:	f883 c005 	strb.w	ip, [r3, #5]
}
 80038de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 80038e0:	2002      	movs	r0, #2
}
 80038e2:	4770      	bx	lr

080038e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80038e8:	f7ff fc0e 	bl	8003108 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038ec:	2c00      	cmp	r4, #0
 80038ee:	d070      	beq.n	80039d2 <HAL_DMA_Init+0xee>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038f0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80038f2:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80038f4:	2102      	movs	r1, #2
 80038f6:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80038f8:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80038fc:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_DMA_DISABLE(hdma);
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003908:	e005      	b.n	8003916 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800390a:	f7ff fbfd 	bl	8003108 <HAL_GetTick>
 800390e:	1b43      	subs	r3, r0, r5
 8003910:	2b05      	cmp	r3, #5
 8003912:	d83c      	bhi.n	800398e <HAL_DMA_Init+0xaa>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	07d1      	lsls	r1, r2, #31
 800391a:	d4f6      	bmi.n	800390a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800391c:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8003920:	68e1      	ldr	r1, [r4, #12]
 8003922:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003924:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8003926:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003928:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392a:	6921      	ldr	r1, [r4, #16]
 800392c:	430a      	orrs	r2, r1
 800392e:	6961      	ldr	r1, [r4, #20]
 8003930:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003932:	69e1      	ldr	r1, [r4, #28]
 8003934:	4302      	orrs	r2, r0
 8003936:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003938:	4933      	ldr	r1, [pc, #204]	@ (8003a08 <HAL_DMA_Init+0x124>)
 800393a:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800393c:	6a25      	ldr	r5, [r4, #32]
 800393e:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003940:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003942:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003944:	2904      	cmp	r1, #4
 8003946:	d029      	beq.n	800399c <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003948:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800394a:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800394c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003950:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003952:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8003954:	6159      	str	r1, [r3, #20]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003956:	482d      	ldr	r0, [pc, #180]	@ (8003a0c <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003958:	f36f 0309 	bfc	r3, #0, #10
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800395c:	f1a2 0110 	sub.w	r1, r2, #16
 8003960:	4a2b      	ldr	r2, [pc, #172]	@ (8003a10 <HAL_DMA_Init+0x12c>)
 8003962:	fba2 5201 	umull	r5, r2, r2, r1
  if (stream_number > 3U)
 8003966:	295f      	cmp	r1, #95	@ 0x5f
  hdma->State = HAL_DMA_STATE_READY;
 8003968:	f04f 0501 	mov.w	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396c:	f04f 0100 	mov.w	r1, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003970:	ea4f 1212 	mov.w	r2, r2, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003974:	bf88      	it	hi
 8003976:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003978:	5c80      	ldrb	r0, [r0, r2]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397a:	223f      	movs	r2, #63	@ 0x3f
 800397c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800397e:	4082      	lsls	r2, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003980:	65e0      	str	r0, [r4, #92]	@ 0x5c
  return HAL_OK;
 8003982:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003984:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003986:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003988:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 800398c:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800398e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003990:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8003992:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003994:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003996:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 800399a:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800399c:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 80039a0:	4329      	orrs	r1, r5
 80039a2:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80039a4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hdma->Instance->CR = tmp;  
 80039a6:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80039a8:	6959      	ldr	r1, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039aa:	f021 0107 	bic.w	r1, r1, #7
 80039ae:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80039b0:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039b4:	2d00      	cmp	r5, #0
 80039b6:	d0cc      	beq.n	8003952 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039b8:	b968      	cbnz	r0, 80039d6 <HAL_DMA_Init+0xf2>
  {
    switch (tmp)
 80039ba:	2a01      	cmp	r2, #1
 80039bc:	d020      	beq.n	8003a00 <HAL_DMA_Init+0x11c>
 80039be:	f032 0202 	bics.w	r2, r2, #2
 80039c2:	d1c6      	bne.n	8003952 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c4:	01ea      	lsls	r2, r5, #7
 80039c6:	d5c4      	bpl.n	8003952 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039c8:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80039ca:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039cc:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80039ce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80039d2:	2001      	movs	r0, #1
}
 80039d4:	bd38      	pop	{r3, r4, r5, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039d6:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_Init+0x102>
    switch (tmp)
 80039dc:	2a02      	cmp	r2, #2
 80039de:	d9f3      	bls.n	80039c8 <HAL_DMA_Init+0xe4>
 80039e0:	2a03      	cmp	r2, #3
 80039e2:	d0ef      	beq.n	80039c4 <HAL_DMA_Init+0xe0>
 80039e4:	e7b5      	b.n	8003952 <HAL_DMA_Init+0x6e>
    switch (tmp)
 80039e6:	2a03      	cmp	r2, #3
 80039e8:	d8b3      	bhi.n	8003952 <HAL_DMA_Init+0x6e>
 80039ea:	a001      	add	r0, pc, #4	@ (adr r0, 80039f0 <HAL_DMA_Init+0x10c>)
 80039ec:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80039f0:	080039c9 	.word	0x080039c9
 80039f4:	080039c5 	.word	0x080039c5
 80039f8:	080039c9 	.word	0x080039c9
 80039fc:	08003a01 	.word	0x08003a01
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a00:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8003a04:	d1a5      	bne.n	8003952 <HAL_DMA_Init+0x6e>
 8003a06:	e7df      	b.n	80039c8 <HAL_DMA_Init+0xe4>
 8003a08:	f010803f 	.word	0xf010803f
 8003a0c:	0800a348 	.word	0x0800a348
 8003a10:	aaaaaaab 	.word	0xaaaaaaab

08003a14 <HAL_DMA_Start_IT>:
{
 8003a14:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8003a16:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1a:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8003a1c:	f1bc 0f01 	cmp.w	ip, #1
 8003a20:	d009      	beq.n	8003a36 <HAL_DMA_Start_IT+0x22>
 8003a22:	2401      	movs	r4, #1
 8003a24:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a28:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8003a2c:	2c01      	cmp	r4, #1
 8003a2e:	d005      	beq.n	8003a3c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8003a30:	2300      	movs	r3, #0
 8003a32:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8003a36:	2002      	movs	r0, #2
}
 8003a38:	bc70      	pop	{r4, r5, r6}
 8003a3a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a3c:	2502      	movs	r5, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a3e:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a40:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a44:	2500      	movs	r5, #0
 8003a46:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a48:	6825      	ldr	r5, [r4, #0]
 8003a4a:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8003a4e:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003a50:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a52:	6883      	ldr	r3, [r0, #8]
 8003a54:	2b40      	cmp	r3, #64	@ 0x40
 8003a56:	d01a      	beq.n	8003a8e <HAL_DMA_Start_IT+0x7a>
    hdma->Instance->PAR = SrcAddress;
 8003a58:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a5a:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a5c:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8003a5e:	233f      	movs	r3, #63	@ 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8003a60:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a62:	408b      	lsls	r3, r1
 8003a64:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	f043 0316 	orr.w	r3, r3, #22
 8003a6c:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003a6e:	6963      	ldr	r3, [r4, #20]
 8003a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a74:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8003a76:	b11a      	cbz	r2, 8003a80 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	f043 0308 	orr.w	r3, r3, #8
 8003a7e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003a80:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6023      	str	r3, [r4, #0]
}
 8003a8a:	bc70      	pop	{r4, r5, r6}
 8003a8c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8003a8e:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003a90:	60e1      	str	r1, [r4, #12]
 8003a92:	e7e3      	b.n	8003a5c <HAL_DMA_Start_IT+0x48>

08003a94 <HAL_DMA_Abort>:
{
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a98:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8003a9a:	f7ff fb35 	bl	8003108 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a9e:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d006      	beq.n	8003ab4 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa6:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 8003aa8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aaa:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8003aac:	2300      	movs	r3, #0
 8003aae:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	4606      	mov	r6, r0
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	f022 0216 	bic.w	r2, r2, #22
 8003abe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ac6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ac8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003aca:	b34a      	cbz	r2, 8003b20 <HAL_DMA_Abort+0x8c>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	f022 0208 	bic.w	r2, r2, #8
 8003ad2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003adc:	e005      	b.n	8003aea <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ade:	f7ff fb13 	bl	8003108 <HAL_GetTick>
 8003ae2:	1b83      	subs	r3, r0, r6
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d811      	bhi.n	8003b0c <HAL_DMA_Abort+0x78>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f013 0301 	ands.w	r3, r3, #1
 8003af0:	d1f5      	bne.n	8003ade <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af2:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003af4:	223f      	movs	r2, #63	@ 0x3f
  return HAL_OK;
 8003af6:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 8003af8:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003afa:	fa02 f101 	lsl.w	r1, r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8003afe:	2201      	movs	r2, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b00:	60a9      	str	r1, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003b02:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8003b06:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b0e:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 8003b10:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b12:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b14:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b20:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003b22:	2a00      	cmp	r2, #0
 8003b24:	d1d2      	bne.n	8003acc <HAL_DMA_Abort+0x38>
 8003b26:	e7d5      	b.n	8003ad4 <HAL_DMA_Abort+0x40>

08003b28 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b28:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
{
 8003b2c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b2e:	2a02      	cmp	r2, #2
 8003b30:	d003      	beq.n	8003b3a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b32:	2280      	movs	r2, #128	@ 0x80
    return HAL_ERROR;
 8003b34:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b38:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8003b3a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b3c:	2105      	movs	r1, #5
  return HAL_OK;
 8003b3e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b40:	f883 1035 	strb.w	r1, [r3, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8003b44:	6813      	ldr	r3, [r2, #0]
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop

08003b50 <HAL_DMA_IRQHandler>:
{
 8003b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8003b52:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 8003b54:	4b66      	ldr	r3, [pc, #408]	@ (8003cf0 <HAL_DMA_IRQHandler+0x1a0>)
{
 8003b56:	b083      	sub	sp, #12
 8003b58:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600;
 8003b5a:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0;
 8003b5c:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b5e:	2208      	movs	r2, #8
 8003b60:	e9d0 7316 	ldrd	r7, r3, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8003b64:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b66:	409a      	lsls	r2, r3
 8003b68:	422a      	tst	r2, r5
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x26>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b6c:	6801      	ldr	r1, [r0, #0]
 8003b6e:	6808      	ldr	r0, [r1, #0]
 8003b70:	0740      	lsls	r0, r0, #29
 8003b72:	f100 8097 	bmi.w	8003ca4 <HAL_DMA_IRQHandler+0x154>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b76:	2201      	movs	r2, #1
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	422a      	tst	r2, r5
 8003b7c:	d004      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x38>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b7e:	6821      	ldr	r1, [r4, #0]
 8003b80:	6949      	ldr	r1, [r1, #20]
 8003b82:	0608      	lsls	r0, r1, #24
 8003b84:	f100 8088 	bmi.w	8003c98 <HAL_DMA_IRQHandler+0x148>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b88:	2204      	movs	r2, #4
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	422a      	tst	r2, r5
 8003b8e:	d003      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x48>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b90:	6821      	ldr	r1, [r4, #0]
 8003b92:	6809      	ldr	r1, [r1, #0]
 8003b94:	0789      	lsls	r1, r1, #30
 8003b96:	d479      	bmi.n	8003c8c <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b98:	2210      	movs	r2, #16
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	422a      	tst	r2, r5
 8003b9e:	d003      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x58>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ba0:	6821      	ldr	r1, [r4, #0]
 8003ba2:	6808      	ldr	r0, [r1, #0]
 8003ba4:	0700      	lsls	r0, r0, #28
 8003ba6:	d45e      	bmi.n	8003c66 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba8:	2220      	movs	r2, #32
 8003baa:	409a      	lsls	r2, r3
 8003bac:	422a      	tst	r2, r5
 8003bae:	d014      	beq.n	8003bda <HAL_DMA_IRQHandler+0x8a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bb0:	6821      	ldr	r1, [r4, #0]
 8003bb2:	6808      	ldr	r0, [r1, #0]
 8003bb4:	06c0      	lsls	r0, r0, #27
 8003bb6:	d510      	bpl.n	8003bda <HAL_DMA_IRQHandler+0x8a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bb8:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bba:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8003bbe:	2a05      	cmp	r2, #5
 8003bc0:	d033      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xda>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc2:	680b      	ldr	r3, [r1, #0]
 8003bc4:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bc8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bca:	d07b      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x174>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bcc:	0319      	lsls	r1, r3, #12
 8003bce:	f140 8086 	bpl.w	8003cde <HAL_DMA_IRQHandler+0x18e>
        if(hdma->XferCpltCallback != NULL)
 8003bd2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003bd4:	b10b      	cbz	r3, 8003bda <HAL_DMA_IRQHandler+0x8a>
          hdma->XferCpltCallback(hdma);
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bda:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d040      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x112>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003be0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003be2:	07da      	lsls	r2, r3, #31
 8003be4:	d51a      	bpl.n	8003c1c <HAL_DMA_IRQHandler+0xcc>
      __HAL_DMA_DISABLE(hdma);
 8003be6:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8003be8:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8003bea:	4b42      	ldr	r3, [pc, #264]	@ (8003cf4 <HAL_DMA_IRQHandler+0x1a4>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bec:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8003bf0:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8003bf4:	6813      	ldr	r3, [r2, #0]
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8003bfa:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e002      	b.n	8003c06 <HAL_DMA_IRQHandler+0xb6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c00:	6813      	ldr	r3, [r2, #0]
 8003c02:	07db      	lsls	r3, r3, #31
 8003c04:	d504      	bpl.n	8003c10 <HAL_DMA_IRQHandler+0xc0>
        if (++count > timeout)
 8003c06:	9b01      	ldr	r3, [sp, #4]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	42b3      	cmp	r3, r6
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	d9f7      	bls.n	8003c00 <HAL_DMA_IRQHandler+0xb0>
      hdma->State = HAL_DMA_STATE_READY;
 8003c10:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8003c12:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003c14:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8003c18:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8003c1c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003c1e:	b303      	cbz	r3, 8003c62 <HAL_DMA_IRQHandler+0x112>
      hdma->XferErrorCallback(hdma);
 8003c20:	4620      	mov	r0, r4
}
 8003c22:	b003      	add	sp, #12
 8003c24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8003c28:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c2a:	680a      	ldr	r2, [r1, #0]
 8003c2c:	f022 0216 	bic.w	r2, r2, #22
 8003c30:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c32:	694a      	ldr	r2, [r1, #20]
 8003c34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c38:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c3a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003c3c:	2a00      	cmp	r2, #0
 8003c3e:	d053      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x198>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c40:	680a      	ldr	r2, [r1, #0]
 8003c42:	f022 0208 	bic.w	r2, r2, #8
 8003c46:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c48:	223f      	movs	r2, #63	@ 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8003c50:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c52:	60bb      	str	r3, [r7, #8]
        if(hdma->XferAbortCallback != NULL)
 8003c54:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hdma->State = HAL_DMA_STATE_READY;
 8003c56:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003c5a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1de      	bne.n	8003c20 <HAL_DMA_IRQHandler+0xd0>
}
 8003c62:	b003      	add	sp, #12
 8003c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c66:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c68:	680a      	ldr	r2, [r1, #0]
 8003c6a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c6e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c70:	d122      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c72:	05d2      	lsls	r2, r2, #23
 8003c74:	d403      	bmi.n	8003c7e <HAL_DMA_IRQHandler+0x12e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c76:	680a      	ldr	r2, [r1, #0]
 8003c78:	f022 0208 	bic.w	r2, r2, #8
 8003c7c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003c7e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003c80:	2a00      	cmp	r2, #0
 8003c82:	d091      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x58>
          hdma->XferHalfCpltCallback(hdma);
 8003c84:	4620      	mov	r0, r4
 8003c86:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c88:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003c8a:	e78d      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x58>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c8c:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c90:	f042 0204 	orr.w	r2, r2, #4
 8003c94:	6562      	str	r2, [r4, #84]	@ 0x54
 8003c96:	e77f      	b.n	8003b98 <HAL_DMA_IRQHandler+0x48>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c98:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c9a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c9c:	f042 0202 	orr.w	r2, r2, #2
 8003ca0:	6562      	str	r2, [r4, #84]	@ 0x54
 8003ca2:	e771      	b.n	8003b88 <HAL_DMA_IRQHandler+0x38>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ca4:	6808      	ldr	r0, [r1, #0]
 8003ca6:	f020 0004 	bic.w	r0, r0, #4
 8003caa:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cac:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	6562      	str	r2, [r4, #84]	@ 0x54
 8003cb6:	e75e      	b.n	8003b76 <HAL_DMA_IRQHandler+0x26>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cb8:	0311      	lsls	r1, r2, #12
 8003cba:	d5e0      	bpl.n	8003c7e <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cbc:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003cbe:	2a00      	cmp	r2, #0
 8003cc0:	d1e0      	bne.n	8003c84 <HAL_DMA_IRQHandler+0x134>
 8003cc2:	e771      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x58>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cc4:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8003cc8:	d183      	bne.n	8003bd2 <HAL_DMA_IRQHandler+0x82>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cca:	680a      	ldr	r2, [r1, #0]
 8003ccc:	f022 0210 	bic.w	r2, r2, #16
 8003cd0:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8003cd4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003cd8:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003cdc:	e779      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x82>
          if(hdma->XferM1CpltCallback != NULL)
 8003cde:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f47f af78 	bne.w	8003bd6 <HAL_DMA_IRQHandler+0x86>
 8003ce6:	e778      	b.n	8003bda <HAL_DMA_IRQHandler+0x8a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ce8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d1a8      	bne.n	8003c40 <HAL_DMA_IRQHandler+0xf0>
 8003cee:	e7ab      	b.n	8003c48 <HAL_DMA_IRQHandler+0xf8>
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	1b4e81b5 	.word	0x1b4e81b5

08003cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cfc:	2300      	movs	r3, #0
{
 8003cfe:	b085      	sub	sp, #20
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d00:	f04f 0b01 	mov.w	fp, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d04:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d06:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003f4c <HAL_GPIO_Init+0x254>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d0a:	4689      	mov	r9, r1
 8003d0c:	e003      	b.n	8003d16 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d0e:	3301      	adds	r3, #1
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	f000 809b 	beq.w	8003e4c <HAL_GPIO_Init+0x154>
    ioposition = ((uint32_t)0x01) << position;
 8003d16:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d1a:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8003d1e:	43a2      	bics	r2, r4
 8003d20:	d1f5      	bne.n	8003d0e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d22:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003d26:	005a      	lsls	r2, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d28:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d2a:	f001 0c03 	and.w	ip, r1, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d2e:	4095      	lsls	r5, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d30:	f10c 36ff 	add.w	r6, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d34:	43ed      	mvns	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d36:	2e01      	cmp	r6, #1
 8003d38:	f240 808b 	bls.w	8003e52 <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3c:	f1bc 0f03 	cmp.w	ip, #3
 8003d40:	f040 80f4 	bne.w	8003f2c <HAL_GPIO_Init+0x234>
      temp = GPIOx->MODER;
 8003d44:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d46:	fa0c f202 	lsl.w	r2, ip, r2
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d4a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d4e:	ea05 0506 	and.w	r5, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d52:	ea42 0205 	orr.w	r2, r2, r5
      GPIOx->MODER = temp;
 8003d56:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d58:	d0d9      	beq.n	8003d0e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8003d5e:	f023 0503 	bic.w	r5, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d62:	f003 0603 	and.w	r6, r3, #3
 8003d66:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d6c:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d70:	00b6      	lsls	r6, r6, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d72:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8003d76:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8003d7a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d7e:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d82:	4f6f      	ldr	r7, [pc, #444]	@ (8003f40 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d84:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d88:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8a:	9203      	str	r2, [sp, #12]
 8003d8c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8003d8e:	68aa      	ldr	r2, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d90:	ea22 020c 	bic.w	r2, r2, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d94:	d031      	beq.n	8003dfa <HAL_GPIO_Init+0x102>
 8003d96:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8003d9a:	42b8      	cmp	r0, r7
 8003d9c:	f000 8096 	beq.w	8003ecc <HAL_GPIO_Init+0x1d4>
 8003da0:	4f68      	ldr	r7, [pc, #416]	@ (8003f44 <HAL_GPIO_Init+0x24c>)
 8003da2:	42b8      	cmp	r0, r7
 8003da4:	f000 8098 	beq.w	8003ed8 <HAL_GPIO_Init+0x1e0>
 8003da8:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8003f50 <HAL_GPIO_Init+0x258>
 8003dac:	4560      	cmp	r0, ip
 8003dae:	f000 8099 	beq.w	8003ee4 <HAL_GPIO_Init+0x1ec>
 8003db2:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8003f54 <HAL_GPIO_Init+0x25c>
 8003db6:	4560      	cmp	r0, ip
 8003db8:	f000 809a 	beq.w	8003ef0 <HAL_GPIO_Init+0x1f8>
 8003dbc:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8003f58 <HAL_GPIO_Init+0x260>
 8003dc0:	4560      	cmp	r0, ip
 8003dc2:	f000 80a1 	beq.w	8003f08 <HAL_GPIO_Init+0x210>
 8003dc6:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8003f5c <HAL_GPIO_Init+0x264>
 8003dca:	4560      	cmp	r0, ip
 8003dcc:	f000 80a2 	beq.w	8003f14 <HAL_GPIO_Init+0x21c>
 8003dd0:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8003f60 <HAL_GPIO_Init+0x268>
 8003dd4:	4560      	cmp	r0, ip
 8003dd6:	f000 8091 	beq.w	8003efc <HAL_GPIO_Init+0x204>
 8003dda:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8003f64 <HAL_GPIO_Init+0x26c>
 8003dde:	4560      	cmp	r0, ip
 8003de0:	f000 809e 	beq.w	8003f20 <HAL_GPIO_Init+0x228>
 8003de4:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8003f68 <HAL_GPIO_Init+0x270>
 8003de8:	4560      	cmp	r0, ip
 8003dea:	bf0c      	ite	eq
 8003dec:	f04f 0c09 	moveq.w	ip, #9
 8003df0:	f04f 0c0a 	movne.w	ip, #10
 8003df4:	fa0c f606 	lsl.w	r6, ip, r6
 8003df8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003dfa:	60aa      	str	r2, [r5, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dfc:	02ce      	lsls	r6, r1, #11
        temp = EXTI->RTSR;
 8003dfe:	4a52      	ldr	r2, [pc, #328]	@ (8003f48 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8003e00:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003e04:	4e50      	ldr	r6, [pc, #320]	@ (8003f48 <HAL_GPIO_Init+0x250>)
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e06:	f103 0301 	add.w	r3, r3, #1
        temp = EXTI->RTSR;
 8003e0a:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003e0c:	bf54      	ite	pl
 8003e0e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e10:	ea48 0202 	orrmi.w	r2, r8, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e14:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 8003e16:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8003e18:	68f2      	ldr	r2, [r6, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003e1a:	4e4b      	ldr	r6, [pc, #300]	@ (8003f48 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8003e1c:	bf54      	ite	pl
 8003e1e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e20:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8003e24:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8003e26:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e28:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003e2a:	4e47      	ldr	r6, [pc, #284]	@ (8003f48 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8003e2c:	bf54      	ite	pl
 8003e2e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e30:	ea48 0202 	orrmi.w	r2, r8, r2

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e34:	03c9      	lsls	r1, r1, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003e36:	4944      	ldr	r1, [pc, #272]	@ (8003f48 <HAL_GPIO_Init+0x250>)
        EXTI->EMR = temp;
 8003e38:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 8003e3a:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8003e3c:	bf54      	ite	pl
 8003e3e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e40:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e44:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8003e46:	600a      	str	r2, [r1, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e48:	f47f af65 	bne.w	8003d16 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8003e4c:	b005      	add	sp, #20
 8003e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003e52:	6886      	ldr	r6, [r0, #8]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e54:	f1bc 0f02 	cmp.w	ip, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e58:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e5c:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8003e60:	fa06 f602 	lsl.w	r6, r6, r2
 8003e64:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8003e68:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6a:	f3c1 1600 	ubfx	r6, r1, #4, #1
        temp = GPIOx->OTYPER;
 8003e6e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e72:	fa06 f603 	lsl.w	r6, r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e76:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e7a:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 8003e7e:	6046      	str	r6, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e80:	f8d9 6008 	ldr.w	r6, [r9, #8]
        temp = GPIOx->PUPDR;
 8003e84:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e88:	fa06 f602 	lsl.w	r6, r6, r2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e8c:	ea0e 0e05 	and.w	lr, lr, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e90:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8003e94:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e96:	f47f af55 	bne.w	8003d44 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3];
 8003e9a:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e9c:	f003 0e07 	and.w	lr, r3, #7
 8003ea0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8003ea4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8003ea8:	6a37      	ldr	r7, [r6, #32]
 8003eaa:	9601      	str	r6, [sp, #4]
 8003eac:	9700      	str	r7, [sp, #0]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003eae:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003eb0:	f8d9 6010 	ldr.w	r6, [r9, #16]
 8003eb4:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003eb8:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003ebc:	9f00      	ldr	r7, [sp, #0]
 8003ebe:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8003ec2:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ec4:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3] = temp;
 8003ec8:	623e      	str	r6, [r7, #32]
 8003eca:	e73b      	b.n	8003d44 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ecc:	f04f 0c01 	mov.w	ip, #1
 8003ed0:	fa0c f606 	lsl.w	r6, ip, r6
 8003ed4:	4332      	orrs	r2, r6
 8003ed6:	e790      	b.n	8003dfa <HAL_GPIO_Init+0x102>
 8003ed8:	f04f 0c02 	mov.w	ip, #2
 8003edc:	fa0c f606 	lsl.w	r6, ip, r6
 8003ee0:	4332      	orrs	r2, r6
 8003ee2:	e78a      	b.n	8003dfa <HAL_GPIO_Init+0x102>
 8003ee4:	f04f 0c03 	mov.w	ip, #3
 8003ee8:	fa0c f606 	lsl.w	r6, ip, r6
 8003eec:	4332      	orrs	r2, r6
 8003eee:	e784      	b.n	8003dfa <HAL_GPIO_Init+0x102>
 8003ef0:	f04f 0c04 	mov.w	ip, #4
 8003ef4:	fa0c f606 	lsl.w	r6, ip, r6
 8003ef8:	4332      	orrs	r2, r6
 8003efa:	e77e      	b.n	8003dfa <HAL_GPIO_Init+0x102>
 8003efc:	f04f 0c07 	mov.w	ip, #7
 8003f00:	fa0c f606 	lsl.w	r6, ip, r6
 8003f04:	4332      	orrs	r2, r6
 8003f06:	e778      	b.n	8003dfa <HAL_GPIO_Init+0x102>
 8003f08:	f04f 0c05 	mov.w	ip, #5
 8003f0c:	fa0c f606 	lsl.w	r6, ip, r6
 8003f10:	4332      	orrs	r2, r6
 8003f12:	e772      	b.n	8003dfa <HAL_GPIO_Init+0x102>
 8003f14:	f04f 0c06 	mov.w	ip, #6
 8003f18:	fa0c f606 	lsl.w	r6, ip, r6
 8003f1c:	4332      	orrs	r2, r6
 8003f1e:	e76c      	b.n	8003dfa <HAL_GPIO_Init+0x102>
 8003f20:	f04f 0c08 	mov.w	ip, #8
 8003f24:	fa0c f606 	lsl.w	r6, ip, r6
 8003f28:	4332      	orrs	r2, r6
 8003f2a:	e766      	b.n	8003dfa <HAL_GPIO_Init+0x102>
        temp = GPIOx->PUPDR;
 8003f2c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f2e:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f32:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8003f36:	4096      	lsls	r6, r2
 8003f38:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8003f3c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3e:	e701      	b.n	8003d44 <HAL_GPIO_Init+0x4c>
 8003f40:	40020000 	.word	0x40020000
 8003f44:	40020800 	.word	0x40020800
 8003f48:	40013c00 	.word	0x40013c00
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40020c00 	.word	0x40020c00
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40021400 	.word	0x40021400
 8003f5c:	40021800 	.word	0x40021800
 8003f60:	40021c00 	.word	0x40021c00
 8003f64:	40022000 	.word	0x40022000
 8003f68:	40022400 	.word	0x40022400

08003f6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f6c:	6903      	ldr	r3, [r0, #16]
 8003f6e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003f70:	bf14      	ite	ne
 8003f72:	2001      	movne	r0, #1
 8003f74:	2000      	moveq	r0, #0
 8003f76:	4770      	bx	lr

08003f78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f78:	b902      	cbnz	r2, 8003f7c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f7a:	0409      	lsls	r1, r1, #16
 8003f7c:	6181      	str	r1, [r0, #24]
  }
}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d04e      	beq.n	8004022 <HAL_I2C_Init+0xa2>
{
 8003f84:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f86:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d041      	beq.n	8004018 <HAL_I2C_Init+0x98>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f94:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f96:	2124      	movs	r1, #36	@ 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f98:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f9a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003f9e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa4:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003fa6:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003faa:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8003fac:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb0:	689a      	ldr	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fb2:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fb8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fba:	d029      	beq.n	8004010 <HAL_I2C_Init+0x90>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fbc:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fc0:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fc2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fc4:	d102      	bne.n	8003fcc <HAL_I2C_Init+0x4c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fcc:	6858      	ldr	r0, [r3, #4]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd2:	4915      	ldr	r1, [pc, #84]	@ (8004028 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd4:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd6:	4301      	orrs	r1, r0
 8003fd8:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fda:	68d9      	ldr	r1, [r3, #12]
 8003fdc:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8003fe0:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fe2:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fe6:	4302      	orrs	r2, r0
 8003fe8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fec:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff0:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff2:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ff4:	4301      	orrs	r1, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003ff6:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ff8:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003ffa:	6819      	ldr	r1, [r3, #0]
 8003ffc:	f041 0101 	orr.w	r1, r1, #1
 8004000:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004002:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004004:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004008:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800400a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 800400e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004010:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004014:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004016:	e7d9      	b.n	8003fcc <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8004018:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800401c:	f7fe fd9c 	bl	8002b58 <HAL_I2C_MspInit>
 8004020:	e7b8      	b.n	8003f94 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8004022:	2001      	movs	r0, #1
}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	02008000 	.word	0x02008000

0800402c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8004030:	2a20      	cmp	r2, #32
 8004032:	d123      	bne.n	800407c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004034:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004038:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800403c:	4603      	mov	r3, r0
 800403e:	2a01      	cmp	r2, #1
 8004040:	d01c      	beq.n	800407c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004042:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004044:	2024      	movs	r0, #36	@ 0x24
{
 8004046:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004048:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8004050:	6810      	ldr	r0, [r2, #0]
 8004052:	f020 0001 	bic.w	r0, r0, #1
 8004056:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004058:	6810      	ldr	r0, [r2, #0]
 800405a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800405e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8004060:	6810      	ldr	r0, [r2, #0]
 8004062:	4301      	orrs	r1, r0

    return HAL_OK;
 8004064:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 8004066:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004068:	6811      	ldr	r1, [r2, #0]
 800406a:	f041 0101 	orr.w	r1, r1, #1
 800406e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004074:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004078:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800407c:	2002      	movs	r0, #2
}
 800407e:	4770      	bx	lr

08004080 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004080:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8004084:	2a20      	cmp	r2, #32
 8004086:	d122      	bne.n	80040ce <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8004088:	4603      	mov	r3, r0
{
 800408a:	b500      	push	{lr}
 800408c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004090:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004094:	2a01      	cmp	r2, #1
 8004096:	d01c      	beq.n	80040d2 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004098:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800409a:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409c:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a0:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 80040a4:	6810      	ldr	r0, [r2, #0]
 80040a6:	f020 0001 	bic.w	r0, r0, #1
 80040aa:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80040ac:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80040ae:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 80040b2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 80040b6:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 80040b8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80040ba:	6811      	ldr	r1, [r2, #0]
 80040bc:	f041 0101 	orr.w	r1, r1, #1
 80040c0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80040c6:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80040ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80040ce:	2002      	movs	r0, #2
}
 80040d0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80040d2:	2002      	movs	r0, #2
}
 80040d4:	f85d fb04 	ldr.w	pc, [sp], #4

080040d8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_PWREx_EnableOverDrive+0x6c>)
 80040da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040dc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
{
 80040e0:	b530      	push	{r4, r5, lr}
 80040e2:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040e8:	4c17      	ldr	r4, [pc, #92]	@ (8004148 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f8:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040fa:	f7ff f805 	bl	8003108 <HAL_GetTick>
 80040fe:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004100:	e005      	b.n	800410e <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004102:	f7ff f801 	bl	8003108 <HAL_GetTick>
 8004106:	1b40      	subs	r0, r0, r5
 8004108:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800410c:	d817      	bhi.n	800413e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800410e:	6863      	ldr	r3, [r4, #4]
 8004110:	03da      	lsls	r2, r3, #15
 8004112:	d5f6      	bpl.n	8004102 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004114:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004116:	4d0c      	ldr	r5, [pc, #48]	@ (8004148 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800411c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800411e:	f7fe fff3 	bl	8003108 <HAL_GetTick>
 8004122:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004124:	e005      	b.n	8004132 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004126:	f7fe ffef 	bl	8003108 <HAL_GetTick>
 800412a:	1b00      	subs	r0, r0, r4
 800412c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004130:	d805      	bhi.n	800413e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004132:	686b      	ldr	r3, [r5, #4]
 8004134:	039b      	lsls	r3, r3, #14
 8004136:	d5f6      	bpl.n	8004126 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004138:	2000      	movs	r0, #0
}
 800413a:	b003      	add	sp, #12
 800413c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800413e:	2003      	movs	r0, #3
}
 8004140:	b003      	add	sp, #12
 8004142:	bd30      	pop	{r4, r5, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	40007000 	.word	0x40007000

0800414c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800414c:	2800      	cmp	r0, #0
 800414e:	f000 81e7 	beq.w	8004520 <HAL_RCC_OscConfig+0x3d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	6803      	ldr	r3, [r0, #0]
{
 8004154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004158:	07dd      	lsls	r5, r3, #31
{
 800415a:	b082      	sub	sp, #8
 800415c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415e:	d535      	bpl.n	80041cc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004160:	499a      	ldr	r1, [pc, #616]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 8004162:	688a      	ldr	r2, [r1, #8]
 8004164:	f002 020c 	and.w	r2, r2, #12
 8004168:	2a04      	cmp	r2, #4
 800416a:	f000 80e0 	beq.w	800432e <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416e:	688a      	ldr	r2, [r1, #8]
 8004170:	f002 020c 	and.w	r2, r2, #12
 8004174:	2a08      	cmp	r2, #8
 8004176:	f000 80d6 	beq.w	8004326 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417a:	6863      	ldr	r3, [r4, #4]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004180:	d010      	beq.n	80041a4 <HAL_RCC_OscConfig+0x58>
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80fd 	beq.w	8004382 <HAL_RCC_OscConfig+0x236>
 8004188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800418c:	4b8f      	ldr	r3, [pc, #572]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	f000 8185 	beq.w	800449e <HAL_RCC_OscConfig+0x352>
 8004194:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a2:	e004      	b.n	80041ae <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	4a89      	ldr	r2, [pc, #548]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fe ffab 	bl	8003108 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b2:	4e86      	ldr	r6, [pc, #536]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80041b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	e005      	b.n	80041c4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fe ffa6 	bl	8003108 <HAL_GetTick>
 80041bc:	1b40      	subs	r0, r0, r5
 80041be:	2864      	cmp	r0, #100	@ 0x64
 80041c0:	f200 80db 	bhi.w	800437a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c4:	6833      	ldr	r3, [r6, #0]
 80041c6:	039b      	lsls	r3, r3, #14
 80041c8:	d5f6      	bpl.n	80041b8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	079d      	lsls	r5, r3, #30
 80041ce:	d528      	bpl.n	8004222 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041d0:	4a7e      	ldr	r2, [pc, #504]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 80041d2:	6891      	ldr	r1, [r2, #8]
 80041d4:	f011 0f0c 	tst.w	r1, #12
 80041d8:	f000 8089 	beq.w	80042ee <HAL_RCC_OscConfig+0x1a2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041dc:	6891      	ldr	r1, [r2, #8]
 80041de:	f001 010c 	and.w	r1, r1, #12
 80041e2:	2908      	cmp	r1, #8
 80041e4:	d07f      	beq.n	80042e6 <HAL_RCC_OscConfig+0x19a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041e6:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e8:	4d78      	ldr	r5, [pc, #480]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8103 	beq.w	80043f6 <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fe ff86 	bl	8003108 <HAL_GetTick>
 80041fc:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	e005      	b.n	800420c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004200:	f7fe ff82 	bl	8003108 <HAL_GetTick>
 8004204:	1b80      	subs	r0, r0, r6
 8004206:	2802      	cmp	r0, #2
 8004208:	f200 80b7 	bhi.w	800437a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	079f      	lsls	r7, r3, #30
 8004210:	d5f6      	bpl.n	8004200 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004212:	682b      	ldr	r3, [r5, #0]
 8004214:	6922      	ldr	r2, [r4, #16]
 8004216:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800421a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800421e:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	071a      	lsls	r2, r3, #28
 8004224:	d428      	bmi.n	8004278 <HAL_RCC_OscConfig+0x12c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004226:	075e      	lsls	r6, r3, #29
 8004228:	d53d      	bpl.n	80042a6 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b68      	ldr	r3, [pc, #416]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 800422c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800422e:	00d5      	lsls	r5, r2, #3
 8004230:	d477      	bmi.n	8004322 <HAL_RCC_OscConfig+0x1d6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8004234:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800423a:	641a      	str	r2, [r3, #64]	@ 0x40
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004246:	4e62      	ldr	r6, [pc, #392]	@ (80043d0 <HAL_RCC_OscConfig+0x284>)
 8004248:	6833      	ldr	r3, [r6, #0]
 800424a:	05d8      	lsls	r0, r3, #23
 800424c:	f140 8085 	bpl.w	800435a <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004250:	68a3      	ldr	r3, [r4, #8]
 8004252:	2b01      	cmp	r3, #1
 8004254:	f000 80e1 	beq.w	800441a <HAL_RCC_OscConfig+0x2ce>
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80a8 	beq.w	80043ae <HAL_RCC_OscConfig+0x262>
 800425e:	2b05      	cmp	r3, #5
 8004260:	4b5a      	ldr	r3, [pc, #360]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 8004262:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004264:	f000 8123 	beq.w	80044ae <HAL_RCC_OscConfig+0x362>
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	671a      	str	r2, [r3, #112]	@ 0x70
 800426e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004270:	f022 0204 	bic.w	r2, r2, #4
 8004274:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004276:	e0d5      	b.n	8004424 <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004278:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800427a:	4d54      	ldr	r5, [pc, #336]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800427c:	2b00      	cmp	r3, #0
 800427e:	d03f      	beq.n	8004300 <HAL_RCC_OscConfig+0x1b4>
      __HAL_RCC_LSI_ENABLE();
 8004280:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004288:	f7fe ff3e 	bl	8003108 <HAL_GetTick>
 800428c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	e004      	b.n	800429a <HAL_RCC_OscConfig+0x14e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004290:	f7fe ff3a 	bl	8003108 <HAL_GetTick>
 8004294:	1b80      	subs	r0, r0, r6
 8004296:	2802      	cmp	r0, #2
 8004298:	d86f      	bhi.n	800437a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800429c:	079b      	lsls	r3, r3, #30
 800429e:	d5f7      	bpl.n	8004290 <HAL_RCC_OscConfig+0x144>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	075e      	lsls	r6, r3, #29
 80042a4:	d4c1      	bmi.n	800422a <HAL_RCC_OscConfig+0xde>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a6:	69a3      	ldr	r3, [r4, #24]
 80042a8:	b1cb      	cbz	r3, 80042de <HAL_RCC_OscConfig+0x192>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042aa:	4d48      	ldr	r5, [pc, #288]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 80042ac:	68aa      	ldr	r2, [r5, #8]
 80042ae:	f002 020c 	and.w	r2, r2, #12
 80042b2:	2a08      	cmp	r2, #8
 80042b4:	f000 80c9 	beq.w	800444a <HAL_RCC_OscConfig+0x2fe>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b8:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	682b      	ldr	r3, [r5, #0]
 80042bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042c0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c2:	f000 80fc 	beq.w	80044be <HAL_RCC_OscConfig+0x372>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fe ff1f 	bl	8003108 <HAL_GetTick>
 80042ca:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042cc:	e004      	b.n	80042d8 <HAL_RCC_OscConfig+0x18c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fe ff1b 	bl	8003108 <HAL_GetTick>
 80042d2:	1b00      	subs	r0, r0, r4
 80042d4:	2802      	cmp	r0, #2
 80042d6:	d850      	bhi.n	800437a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	019b      	lsls	r3, r3, #6
 80042dc:	d4f7      	bmi.n	80042ce <HAL_RCC_OscConfig+0x182>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80042de:	2000      	movs	r0, #0
}
 80042e0:	b002      	add	sp, #8
 80042e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	6852      	ldr	r2, [r2, #4]
 80042e8:	0251      	lsls	r1, r2, #9
 80042ea:	f53f af7c 	bmi.w	80041e6 <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ee:	4a37      	ldr	r2, [pc, #220]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	0792      	lsls	r2, r2, #30
 80042f4:	d525      	bpl.n	8004342 <HAL_RCC_OscConfig+0x1f6>
 80042f6:	68e2      	ldr	r2, [r4, #12]
 80042f8:	2a01      	cmp	r2, #1
 80042fa:	d022      	beq.n	8004342 <HAL_RCC_OscConfig+0x1f6>
    return HAL_ERROR;
 80042fc:	2001      	movs	r0, #1
 80042fe:	e7ef      	b.n	80042e0 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_LSI_DISABLE();
 8004300:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004308:	f7fe fefe 	bl	8003108 <HAL_GetTick>
 800430c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430e:	e004      	b.n	800431a <HAL_RCC_OscConfig+0x1ce>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004310:	f7fe fefa 	bl	8003108 <HAL_GetTick>
 8004314:	1b80      	subs	r0, r0, r6
 8004316:	2802      	cmp	r0, #2
 8004318:	d82f      	bhi.n	800437a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800431c:	079f      	lsls	r7, r3, #30
 800431e:	d4f7      	bmi.n	8004310 <HAL_RCC_OscConfig+0x1c4>
 8004320:	e7be      	b.n	80042a0 <HAL_RCC_OscConfig+0x154>
  FlagStatus pwrclkchanged = RESET;
 8004322:	2500      	movs	r5, #0
 8004324:	e78f      	b.n	8004246 <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004326:	684a      	ldr	r2, [r1, #4]
 8004328:	0251      	lsls	r1, r2, #9
 800432a:	f57f af26 	bpl.w	800417a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432e:	4a27      	ldr	r2, [pc, #156]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	0392      	lsls	r2, r2, #14
 8004334:	f57f af4a 	bpl.w	80041cc <HAL_RCC_OscConfig+0x80>
 8004338:	6862      	ldr	r2, [r4, #4]
 800433a:	2a00      	cmp	r2, #0
 800433c:	f47f af46 	bne.w	80041cc <HAL_RCC_OscConfig+0x80>
 8004340:	e7dc      	b.n	80042fc <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004342:	4922      	ldr	r1, [pc, #136]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 8004344:	6920      	ldr	r0, [r4, #16]
 8004346:	680a      	ldr	r2, [r1, #0]
 8004348:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800434c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004350:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004352:	071a      	lsls	r2, r3, #28
 8004354:	f57f af67 	bpl.w	8004226 <HAL_RCC_OscConfig+0xda>
 8004358:	e78e      	b.n	8004278 <HAL_RCC_OscConfig+0x12c>
      PWR->CR1 |= PWR_CR1_DBP;
 800435a:	6833      	ldr	r3, [r6, #0]
 800435c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004360:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004362:	f7fe fed1 	bl	8003108 <HAL_GetTick>
 8004366:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004368:	6833      	ldr	r3, [r6, #0]
 800436a:	05d9      	lsls	r1, r3, #23
 800436c:	f53f af70 	bmi.w	8004250 <HAL_RCC_OscConfig+0x104>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004370:	f7fe feca 	bl	8003108 <HAL_GetTick>
 8004374:	1bc0      	subs	r0, r0, r7
 8004376:	2864      	cmp	r0, #100	@ 0x64
 8004378:	d9f6      	bls.n	8004368 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 800437a:	2003      	movs	r0, #3
}
 800437c:	b002      	add	sp, #8
 800437e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004382:	4d12      	ldr	r5, [pc, #72]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004392:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004394:	f7fe feb8 	bl	8003108 <HAL_GetTick>
 8004398:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439a:	e004      	b.n	80043a6 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800439c:	f7fe feb4 	bl	8003108 <HAL_GetTick>
 80043a0:	1b80      	subs	r0, r0, r6
 80043a2:	2864      	cmp	r0, #100	@ 0x64
 80043a4:	d8e9      	bhi.n	800437a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	682b      	ldr	r3, [r5, #0]
 80043a8:	039f      	lsls	r7, r3, #14
 80043aa:	d4f7      	bmi.n	800439c <HAL_RCC_OscConfig+0x250>
 80043ac:	e70d      	b.n	80041ca <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ae:	4e07      	ldr	r6, [pc, #28]	@ (80043cc <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6733      	str	r3, [r6, #112]	@ 0x70
 80043bc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80043be:	f023 0304 	bic.w	r3, r3, #4
 80043c2:	6733      	str	r3, [r6, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80043c4:	f7fe fea0 	bl	8003108 <HAL_GetTick>
 80043c8:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x292>
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fe fe98 	bl	8003108 <HAL_GetTick>
 80043d8:	1bc0      	subs	r0, r0, r7
 80043da:	4540      	cmp	r0, r8
 80043dc:	d8cd      	bhi.n	800437a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80043e0:	079b      	lsls	r3, r3, #30
 80043e2:	d4f7      	bmi.n	80043d4 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 80043e4:	2d00      	cmp	r5, #0
 80043e6:	f43f af5e 	beq.w	80042a6 <HAL_RCC_OscConfig+0x15a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004524 <HAL_RCC_OscConfig+0x3d8>)
 80043ec:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80043ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80043f4:	e757      	b.n	80042a6 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80043f6:	682b      	ldr	r3, [r5, #0]
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043fe:	f7fe fe83 	bl	8003108 <HAL_GetTick>
 8004402:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004404:	e004      	b.n	8004410 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fe fe7f 	bl	8003108 <HAL_GetTick>
 800440a:	1b80      	subs	r0, r0, r6
 800440c:	2802      	cmp	r0, #2
 800440e:	d8b4      	bhi.n	800437a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	0799      	lsls	r1, r3, #30
 8004414:	d4f7      	bmi.n	8004406 <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	e703      	b.n	8004222 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441a:	4a42      	ldr	r2, [pc, #264]	@ (8004524 <HAL_RCC_OscConfig+0x3d8>)
 800441c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004424:	f7fe fe70 	bl	8003108 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	4f3e      	ldr	r7, [pc, #248]	@ (8004524 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800442e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	e004      	b.n	800443c <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fe fe69 	bl	8003108 <HAL_GetTick>
 8004436:	1b80      	subs	r0, r0, r6
 8004438:	4540      	cmp	r0, r8
 800443a:	d89e      	bhi.n	800437a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800443e:	079a      	lsls	r2, r3, #30
 8004440:	d5f7      	bpl.n	8004432 <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 8004442:	2d00      	cmp	r5, #0
 8004444:	f43f af2f 	beq.w	80042a6 <HAL_RCC_OscConfig+0x15a>
 8004448:	e7cf      	b.n	80043ea <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444a:	2b01      	cmp	r3, #1
      pll_config = RCC->PLLCFGR;
 800444c:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444e:	f43f af55 	beq.w	80042fc <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004456:	69e1      	ldr	r1, [r4, #28]
 8004458:	428b      	cmp	r3, r1
 800445a:	f47f af4f 	bne.w	80042fc <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800445e:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	6a21      	ldr	r1, [r4, #32]
 8004464:	428b      	cmp	r3, r1
 8004466:	f47f af49 	bne.w	80042fc <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800446a:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800446e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004470:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004472:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8004476:	f47f af41 	bne.w	80042fc <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800447a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800447c:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004484:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8004488:	f47f af38 	bne.w	80042fc <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800448c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800448e:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004492:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8004496:	bf14      	ite	ne
 8004498:	2001      	movne	r0, #1
 800449a:	2000      	moveq	r0, #0
 800449c:	e720      	b.n	80042e0 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80044aa:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ac:	e67f      	b.n	80041ae <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ae:	f042 0204 	orr.w	r2, r2, #4
 80044b2:	671a      	str	r2, [r3, #112]	@ 0x70
 80044b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044bc:	e7b2      	b.n	8004424 <HAL_RCC_OscConfig+0x2d8>
        tickstart = HAL_GetTick();
 80044be:	f7fe fe23 	bl	8003108 <HAL_GetTick>
 80044c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c4:	e005      	b.n	80044d2 <HAL_RCC_OscConfig+0x386>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fe fe1f 	bl	8003108 <HAL_GetTick>
 80044ca:	1b80      	subs	r0, r0, r6
 80044cc:	2802      	cmp	r0, #2
 80044ce:	f63f af54 	bhi.w	800437a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	682b      	ldr	r3, [r5, #0]
 80044d4:	0199      	lsls	r1, r3, #6
 80044d6:	d4f6      	bmi.n	80044c6 <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80044da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80044dc:	0852      	lsrs	r2, r2, #1
 80044de:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80044e2:	3a01      	subs	r2, #1
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80044e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044ec:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80044f0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80044f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044f8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80044fa:	682b      	ldr	r3, [r5, #0]
 80044fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004500:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004502:	f7fe fe01 	bl	8003108 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	4d07      	ldr	r5, [pc, #28]	@ (8004524 <HAL_RCC_OscConfig+0x3d8>)
        tickstart = HAL_GetTick();
 8004508:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	e005      	b.n	8004518 <HAL_RCC_OscConfig+0x3cc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fe fdfc 	bl	8003108 <HAL_GetTick>
 8004510:	1b00      	subs	r0, r0, r4
 8004512:	2802      	cmp	r0, #2
 8004514:	f63f af31 	bhi.w	800437a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	019a      	lsls	r2, r3, #6
 800451c:	d5f6      	bpl.n	800450c <HAL_RCC_OscConfig+0x3c0>
 800451e:	e6de      	b.n	80042de <HAL_RCC_OscConfig+0x192>
    return HAL_ERROR;
 8004520:	2001      	movs	r0, #1
}
 8004522:	4770      	bx	lr
 8004524:	40023800 	.word	0x40023800

08004528 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004528:	4916      	ldr	r1, [pc, #88]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800452a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800452c:	688b      	ldr	r3, [r1, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b04      	cmp	r3, #4
 8004534:	d01b      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x46>
 8004536:	2b08      	cmp	r3, #8
 8004538:	d001      	beq.n	800453e <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800453a:	4813      	ldr	r0, [pc, #76]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800453c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800453e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004540:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004542:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004546:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004548:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
 800454c:	d111      	bne.n	8004572 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454e:	480e      	ldr	r0, [pc, #56]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x60>)
 8004550:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004554:	fba1 0100 	umull	r0, r1, r1, r0
 8004558:	f7fc fbb6 	bl	8000cc8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800455c:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x5c>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004564:	3301      	adds	r3, #1
 8004566:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8004568:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800456c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800456e:	4807      	ldr	r0, [pc, #28]	@ (800458c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004570:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004572:	4806      	ldr	r0, [pc, #24]	@ (800458c <HAL_RCC_GetSysClockFreq+0x64>)
 8004574:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004578:	2300      	movs	r3, #0
 800457a:	fba1 0100 	umull	r0, r1, r1, r0
 800457e:	f7fc fba3 	bl	8000cc8 <__aeabi_uldivmod>
 8004582:	e7eb      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x34>
 8004584:	40023800 	.word	0x40023800
 8004588:	00f42400 	.word	0x00f42400
 800458c:	007a1200 	.word	0x007a1200

08004590 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004590:	2800      	cmp	r0, #0
 8004592:	f000 808c 	beq.w	80046ae <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004596:	4a49      	ldr	r2, [pc, #292]	@ (80046bc <HAL_RCC_ClockConfig+0x12c>)
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	428b      	cmp	r3, r1
{
 80045a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	4604      	mov	r4, r0
 80045a6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045a8:	d20c      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	f023 030f 	bic.w	r3, r3, #15
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b4:	6813      	ldr	r3, [r2, #0]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	428b      	cmp	r3, r1
 80045bc:	d002      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80045be:	2001      	movs	r0, #1
}
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	0798      	lsls	r0, r3, #30
 80045c8:	d514      	bpl.n	80045f4 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ca:	0759      	lsls	r1, r3, #29
 80045cc:	d504      	bpl.n	80045d8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045ce:	493c      	ldr	r1, [pc, #240]	@ (80046c0 <HAL_RCC_ClockConfig+0x130>)
 80045d0:	688a      	ldr	r2, [r1, #8]
 80045d2:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80045d6:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d8:	071a      	lsls	r2, r3, #28
 80045da:	d504      	bpl.n	80045e6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4938      	ldr	r1, [pc, #224]	@ (80046c0 <HAL_RCC_ClockConfig+0x130>)
 80045de:	688a      	ldr	r2, [r1, #8]
 80045e0:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80045e4:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e6:	4936      	ldr	r1, [pc, #216]	@ (80046c0 <HAL_RCC_ClockConfig+0x130>)
 80045e8:	68a0      	ldr	r0, [r4, #8]
 80045ea:	688a      	ldr	r2, [r1, #8]
 80045ec:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80045f0:	4302      	orrs	r2, r0
 80045f2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f4:	07df      	lsls	r7, r3, #31
 80045f6:	d520      	bpl.n	800463a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b31      	ldr	r3, [pc, #196]	@ (80046c0 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004600:	d057      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004602:	2a02      	cmp	r2, #2
 8004604:	d050      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004606:	0799      	lsls	r1, r3, #30
 8004608:	d5d9      	bpl.n	80045be <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4e2d      	ldr	r6, [pc, #180]	@ (80046c0 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004610:	68b3      	ldr	r3, [r6, #8]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	4313      	orrs	r3, r2
 8004618:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800461a:	f7fe fd75 	bl	8003108 <HAL_GetTick>
 800461e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004620:	e004      	b.n	800462c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004622:	f7fe fd71 	bl	8003108 <HAL_GetTick>
 8004626:	1bc0      	subs	r0, r0, r7
 8004628:	4540      	cmp	r0, r8
 800462a:	d845      	bhi.n	80046b8 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462c:	68b3      	ldr	r3, [r6, #8]
 800462e:	6862      	ldr	r2, [r4, #4]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004638:	d1f3      	bne.n	8004622 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800463a:	4a20      	ldr	r2, [pc, #128]	@ (80046bc <HAL_RCC_ClockConfig+0x12c>)
 800463c:	6813      	ldr	r3, [r2, #0]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	42ab      	cmp	r3, r5
 8004644:	d909      	bls.n	800465a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004646:	6813      	ldr	r3, [r2, #0]
 8004648:	f023 030f 	bic.w	r3, r3, #15
 800464c:	432b      	orrs	r3, r5
 800464e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	42ab      	cmp	r3, r5
 8004658:	d1b1      	bne.n	80045be <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	075a      	lsls	r2, r3, #29
 800465e:	d506      	bpl.n	800466e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004660:	4917      	ldr	r1, [pc, #92]	@ (80046c0 <HAL_RCC_ClockConfig+0x130>)
 8004662:	68e0      	ldr	r0, [r4, #12]
 8004664:	688a      	ldr	r2, [r1, #8]
 8004666:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800466a:	4302      	orrs	r2, r0
 800466c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466e:	071b      	lsls	r3, r3, #28
 8004670:	d507      	bpl.n	8004682 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004672:	4a13      	ldr	r2, [pc, #76]	@ (80046c0 <HAL_RCC_ClockConfig+0x130>)
 8004674:	6921      	ldr	r1, [r4, #16]
 8004676:	6893      	ldr	r3, [r2, #8]
 8004678:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800467c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004680:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004682:	f7ff ff51 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8004686:	4a0e      	ldr	r2, [pc, #56]	@ (80046c0 <HAL_RCC_ClockConfig+0x130>)
 8004688:	4c0e      	ldr	r4, [pc, #56]	@ (80046c4 <HAL_RCC_ClockConfig+0x134>)
 800468a:	4603      	mov	r3, r0
 800468c:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800468e:	480e      	ldr	r0, [pc, #56]	@ (80046c8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004690:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004694:	490d      	ldr	r1, [pc, #52]	@ (80046cc <HAL_RCC_ClockConfig+0x13c>)
  HAL_InitTick(uwTickPrio);
 8004696:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004698:	5ca2      	ldrb	r2, [r4, r2]
 800469a:	40d3      	lsrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800469e:	f7fe fcf9 	bl	8003094 <HAL_InitTick>
  return HAL_OK;
 80046a2:	2000      	movs	r0, #0
}
 80046a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a8:	0198      	lsls	r0, r3, #6
 80046aa:	d4ae      	bmi.n	800460a <HAL_RCC_ClockConfig+0x7a>
 80046ac:	e787      	b.n	80045be <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80046ae:	2001      	movs	r0, #1
}
 80046b0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	039e      	lsls	r6, r3, #14
 80046b4:	d4a9      	bmi.n	800460a <HAL_RCC_ClockConfig+0x7a>
 80046b6:	e782      	b.n	80045be <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80046b8:	2003      	movs	r0, #3
 80046ba:	e781      	b.n	80045c0 <HAL_RCC_ClockConfig+0x30>
 80046bc:	40023c00 	.word	0x40023c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	0800a338 	.word	0x0800a338
 80046c8:	20000008 	.word	0x20000008
 80046cc:	20000000 	.word	0x20000000

080046d0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046d0:	4b04      	ldr	r3, [pc, #16]	@ (80046e4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80046d2:	4905      	ldr	r1, [pc, #20]	@ (80046e8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4a05      	ldr	r2, [pc, #20]	@ (80046ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80046d8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80046dc:	6808      	ldr	r0, [r1, #0]
 80046de:	5cd3      	ldrb	r3, [r2, r3]
}
 80046e0:	40d8      	lsrs	r0, r3
 80046e2:	4770      	bx	lr
 80046e4:	40023800 	.word	0x40023800
 80046e8:	20000000 	.word	0x20000000
 80046ec:	0800a330 	.word	0x0800a330

080046f0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046f0:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80046f2:	4905      	ldr	r1, [pc, #20]	@ (8004708 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4a05      	ldr	r2, [pc, #20]	@ (800470c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80046f8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80046fc:	6808      	ldr	r0, [r1, #0]
 80046fe:	5cd3      	ldrb	r3, [r2, r3]
}
 8004700:	40d8      	lsrs	r0, r3
 8004702:	4770      	bx	lr
 8004704:	40023800 	.word	0x40023800
 8004708:	20000000 	.word	0x20000000
 800470c:	0800a330 	.word	0x0800a330

08004710 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004710:	6803      	ldr	r3, [r0, #0]
{
 8004712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004716:	f013 0601 	ands.w	r6, r3, #1
{
 800471a:	b083      	sub	sp, #12
 800471c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800471e:	d00b      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004720:	4aa8      	ldr	r2, [pc, #672]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004722:	6891      	ldr	r1, [r2, #8]
 8004724:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8004728:	6091      	str	r1, [r2, #8]
 800472a:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800472c:	6891      	ldr	r1, [r2, #8]
 800472e:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004730:	fab6 f686 	clz	r6, r6
 8004734:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004736:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004738:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800473c:	d010      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800473e:	49a1      	ldr	r1, [pc, #644]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004740:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8004742:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004746:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800474a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800474e:	ea42 0205 	orr.w	r2, r2, r5
 8004752:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004756:	f000 8214 	beq.w	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x472>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800475a:	fab5 f585 	clz	r5, r5
 800475e:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004760:	02df      	lsls	r7, r3, #11
 8004762:	d510      	bpl.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004764:	4897      	ldr	r0, [pc, #604]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004766:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004768:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800476c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004770:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004774:	ea42 0201 	orr.w	r2, r2, r1
 8004778:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800477c:	f000 8204 	beq.w	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x478>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004780:	2900      	cmp	r1, #0
 8004782:	bf08      	it	eq
 8004784:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004786:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800478a:	bf18      	it	ne
 800478c:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800478e:	0698      	lsls	r0, r3, #26
 8004790:	f100 81b2 	bmi.w	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004794:	06d9      	lsls	r1, r3, #27
 8004796:	d50c      	bpl.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004798:	4a8a      	ldr	r2, [pc, #552]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800479a:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800479e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80047a2:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80047a6:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80047aa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80047ac:	4301      	orrs	r1, r0
 80047ae:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b2:	045a      	lsls	r2, r3, #17
 80047b4:	d508      	bpl.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b6:	4983      	ldr	r1, [pc, #524]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80047b8:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80047ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80047be:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80047c2:	4302      	orrs	r2, r0
 80047c4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047c8:	041f      	lsls	r7, r3, #16
 80047ca:	d508      	bpl.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047cc:	497d      	ldr	r1, [pc, #500]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80047ce:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80047d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80047d4:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80047d8:	4302      	orrs	r2, r0
 80047da:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047de:	03d8      	lsls	r0, r3, #15
 80047e0:	d508      	bpl.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e2:	4978      	ldr	r1, [pc, #480]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80047e4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80047e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80047ea:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80047ee:	4302      	orrs	r2, r0
 80047f0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047f4:	0399      	lsls	r1, r3, #14
 80047f6:	d508      	bpl.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047f8:	4972      	ldr	r1, [pc, #456]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80047fa:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80047fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004800:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004804:	4302      	orrs	r2, r0
 8004806:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800480a:	065a      	lsls	r2, r3, #25
 800480c:	d508      	bpl.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800480e:	496d      	ldr	r1, [pc, #436]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004810:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004812:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004816:	f022 0203 	bic.w	r2, r2, #3
 800481a:	4302      	orrs	r2, r0
 800481c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004820:	061f      	lsls	r7, r3, #24
 8004822:	d508      	bpl.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004824:	4967      	ldr	r1, [pc, #412]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004826:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004828:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800482c:	f022 020c 	bic.w	r2, r2, #12
 8004830:	4302      	orrs	r2, r0
 8004832:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004836:	05d8      	lsls	r0, r3, #23
 8004838:	d508      	bpl.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800483a:	4962      	ldr	r1, [pc, #392]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800483c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800483e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004842:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8004846:	4302      	orrs	r2, r0
 8004848:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800484c:	0599      	lsls	r1, r3, #22
 800484e:	d508      	bpl.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004850:	495c      	ldr	r1, [pc, #368]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004852:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004854:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004858:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800485c:	4302      	orrs	r2, r0
 800485e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004862:	055a      	lsls	r2, r3, #21
 8004864:	d508      	bpl.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004866:	4957      	ldr	r1, [pc, #348]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004868:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800486a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800486e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004872:	4302      	orrs	r2, r0
 8004874:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004878:	051f      	lsls	r7, r3, #20
 800487a:	d508      	bpl.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800487c:	4951      	ldr	r1, [pc, #324]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800487e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004880:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004884:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004888:	4302      	orrs	r2, r0
 800488a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800488e:	04d8      	lsls	r0, r3, #19
 8004890:	d508      	bpl.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004892:	494c      	ldr	r1, [pc, #304]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004894:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004896:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800489a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800489e:	4302      	orrs	r2, r0
 80048a0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048a4:	0499      	lsls	r1, r3, #18
 80048a6:	d508      	bpl.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048a8:	4946      	ldr	r1, [pc, #280]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80048aa:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80048ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80048b0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80048b4:	4302      	orrs	r2, r0
 80048b6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048ba:	025a      	lsls	r2, r3, #9
 80048bc:	d508      	bpl.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048be:	4941      	ldr	r1, [pc, #260]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80048c0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80048c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80048c6:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80048ca:	4302      	orrs	r2, r0
 80048cc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048d0:	029f      	lsls	r7, r3, #10
 80048d2:	d50c      	bpl.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048d4:	493b      	ldr	r1, [pc, #236]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80048d6:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80048d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80048dc:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048e0:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 80048e4:	bf08      	it	eq
 80048e6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048e8:	4302      	orrs	r2, r0
 80048ea:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80048ee:	f013 0f08 	tst.w	r3, #8
 80048f2:	bf18      	it	ne
 80048f4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048f6:	0358      	lsls	r0, r3, #13
 80048f8:	d508      	bpl.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048fa:	4932      	ldr	r1, [pc, #200]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80048fc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80048fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004902:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004906:	4302      	orrs	r2, r0
 8004908:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800490c:	0219      	lsls	r1, r3, #8
 800490e:	d46a      	bmi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004910:	2e01      	cmp	r6, #1
 8004912:	d001      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004914:	019a      	lsls	r2, r3, #6
 8004916:	d560      	bpl.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004918:	4e2a      	ldr	r6, [pc, #168]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800491a:	6833      	ldr	r3, [r6, #0]
 800491c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004920:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004922:	f7fe fbf1 	bl	8003108 <HAL_GetTick>
 8004926:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004928:	e005      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800492a:	f7fe fbed 	bl	8003108 <HAL_GetTick>
 800492e:	1bc3      	subs	r3, r0, r7
 8004930:	2b64      	cmp	r3, #100	@ 0x64
 8004932:	f200 80dd 	bhi.w	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004936:	6833      	ldr	r3, [r6, #0]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	d4f6      	bmi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x21a>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	07df      	lsls	r7, r3, #31
 8004940:	d512      	bpl.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8004942:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004944:	b982      	cbnz	r2, 8004968 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004946:	f8d6 2084 	ldr.w	r2, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800494a:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800494e:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8004952:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8004956:	430a      	orrs	r2, r1
 8004958:	6861      	ldr	r1, [r4, #4]
 800495a:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800495e:	68a1      	ldr	r1, [r4, #8]
 8004960:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8004964:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004968:	031e      	lsls	r6, r3, #12
 800496a:	d504      	bpl.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800496c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800496e:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8004972:	f000 811a 	beq.w	8004baa <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8004976:	02d8      	lsls	r0, r3, #11
 8004978:	d504      	bpl.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x274>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800497a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800497c:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8004980:	f000 8113 	beq.w	8004baa <HAL_RCCEx_PeriphCLKConfig+0x49a>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004984:	01d9      	lsls	r1, r3, #7
 8004986:	d511      	bpl.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004988:	490e      	ldr	r1, [pc, #56]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800498a:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800498e:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004992:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 8004996:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800499a:	4302      	orrs	r2, r0
 800499c:	6860      	ldr	r0, [r4, #4]
 800499e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80049a2:	6920      	ldr	r0, [r4, #16]
 80049a4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80049a8:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ac:	019a      	lsls	r2, r3, #6
 80049ae:	f100 80ed 	bmi.w	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049b2:	4e04      	ldr	r6, [pc, #16]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80049b4:	6833      	ldr	r3, [r6, #0]
 80049b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049ba:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049bc:	f7fe fba4 	bl	8003108 <HAL_GetTick>
 80049c0:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049c2:	e007      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80049c4:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049c8:	f7fe fb9e 	bl	8003108 <HAL_GetTick>
 80049cc:	1bc0      	subs	r0, r0, r7
 80049ce:	2864      	cmp	r0, #100	@ 0x64
 80049d0:	f200 808e 	bhi.w	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049d4:	6833      	ldr	r3, [r6, #0]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	d5f6      	bpl.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049da:	2d01      	cmp	r5, #1
 80049dc:	d00e      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80049de:	2000      	movs	r0, #0
}
 80049e0:	b003      	add	sp, #12
 80049e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049e6:	4991      	ldr	r1, [pc, #580]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80049e8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80049ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80049f0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80049f4:	4302      	orrs	r2, r0
 80049f6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
 80049fa:	e789      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_PLLSAI_DISABLE();
 80049fc:	4d8b      	ldr	r5, [pc, #556]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a04:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004a06:	f7fe fb7f 	bl	8003108 <HAL_GetTick>
 8004a0a:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a0c:	e004      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x308>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a0e:	f7fe fb7b 	bl	8003108 <HAL_GetTick>
 8004a12:	1b80      	subs	r0, r0, r6
 8004a14:	2864      	cmp	r0, #100	@ 0x64
 8004a16:	d86b      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	009f      	lsls	r7, r3, #2
 8004a1c:	d4f7      	bmi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	031d      	lsls	r5, r3, #12
 8004a22:	f140 80fb 	bpl.w	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004a26:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004a28:	2a00      	cmp	r2, #0
 8004a2a:	f040 80f7 	bne.w	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a2e:	497f      	ldr	r1, [pc, #508]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004a30:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a34:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a38:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8004a3c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004a40:	4302      	orrs	r2, r0
 8004a42:	6960      	ldr	r0, [r4, #20]
 8004a44:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004a48:	69a0      	ldr	r0, [r4, #24]
 8004a4a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004a4e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a52:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8004a56:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004a58:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8004a5c:	3801      	subs	r0, #1
 8004a5e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004a62:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a66:	0299      	lsls	r1, r3, #10
 8004a68:	d515      	bpl.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004a6a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8004a6c:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 8004a70:	d111      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x386>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a72:	496e      	ldr	r1, [pc, #440]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004a74:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a78:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a7c:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 8004a80:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004a84:	4302      	orrs	r2, r0
 8004a86:	6960      	ldr	r0, [r4, #20]
 8004a88:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004a8c:	6a20      	ldr	r0, [r4, #32]
 8004a8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004a92:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a96:	071a      	lsls	r2, r3, #28
 8004a98:	d519      	bpl.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x3be>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a9a:	4a64      	ldr	r2, [pc, #400]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a9c:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a9e:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aa2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004aa6:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8004aaa:	69e0      	ldr	r0, [r4, #28]
 8004aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004ab6:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8004aba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004abe:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004ac2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004ac4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004ace:	4c57      	ldr	r4, [pc, #348]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ad6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004ad8:	f7fe fb16 	bl	8003108 <HAL_GetTick>
 8004adc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	f53f af7c 	bmi.w	80049de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ae6:	f7fe fb0f 	bl	8003108 <HAL_GetTick>
 8004aea:	1b40      	subs	r0, r0, r5
 8004aec:	2864      	cmp	r0, #100	@ 0x64
 8004aee:	d9f6      	bls.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        return HAL_TIMEOUT;
 8004af0:	2003      	movs	r0, #3
}
 8004af2:	b003      	add	sp, #12
 8004af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004af8:	4b4c      	ldr	r3, [pc, #304]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    PWR->CR1 |= PWR_CR1_DBP;
 8004afa:	4f4d      	ldr	r7, [pc, #308]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x520>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004afc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004afe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004b02:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b14:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004b16:	f7fe faf7 	bl	8003108 <HAL_GetTick>
 8004b1a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b1c:	e005      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1e:	f7fe faf3 	bl	8003108 <HAL_GetTick>
 8004b22:	eba0 0008 	sub.w	r0, r0, r8
 8004b26:	2864      	cmp	r0, #100	@ 0x64
 8004b28:	d8e2      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	05d9      	lsls	r1, r3, #23
 8004b2e:	d5f6      	bpl.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b30:	4f3e      	ldr	r7, [pc, #248]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b34:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b36:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8004b3a:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8004b3e:	d010      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004b40:	428a      	cmp	r2, r1
 8004b42:	d00e      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b44:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b46:	6f38      	ldr	r0, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b48:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b4c:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8004b50:	6738      	str	r0, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b52:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004b54:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8004b58:	6738      	str	r0, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8004b5a:	673a      	str	r2, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b5c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004b5e:	07d2      	lsls	r2, r2, #31
 8004b60:	d448      	bmi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b62:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8004b66:	d03c      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b68:	4930      	ldr	r1, [pc, #192]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004b6a:	688a      	ldr	r2, [r1, #8]
 8004b6c:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8004b70:	608a      	str	r2, [r1, #8]
 8004b72:	4a2e      	ldr	r2, [pc, #184]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	e608      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 8004b82:	2500      	movs	r5, #0
      plli2sused = 1;
 8004b84:	2601      	movs	r6, #1
 8004b86:	e5eb      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 8004b88:	2601      	movs	r6, #1
 8004b8a:	e5fc      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	6861      	ldr	r1, [r4, #4]
 8004b90:	041b      	lsls	r3, r3, #16
 8004b92:	68e2      	ldr	r2, [r4, #12]
 8004b94:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004b98:	68a1      	ldr	r1, [r4, #8]
 8004b9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b9e:	4a23      	ldr	r2, [pc, #140]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004ba0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004ba4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8004ba8:	e703      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004baa:	4920      	ldr	r1, [pc, #128]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004bac:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bb0:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004bb4:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8004bb8:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004bbc:	4302      	orrs	r2, r0
 8004bbe:	6860      	ldr	r0, [r4, #4]
 8004bc0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004bc4:	68e0      	ldr	r0, [r4, #12]
 8004bc6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004bca:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bce:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8004bd2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004bd4:	f020 001f 	bic.w	r0, r0, #31
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	4302      	orrs	r2, r0
 8004bdc:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 8004be0:	e6d0      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x274>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be2:	4812      	ldr	r0, [pc, #72]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004be4:	4913      	ldr	r1, [pc, #76]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8004be6:	6882      	ldr	r2, [r0, #8]
 8004be8:	4019      	ands	r1, r3
 8004bea:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	6082      	str	r2, [r0, #8]
 8004bf2:	e7be      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x462>
        tickstart = HAL_GetTick();
 8004bf4:	f7fe fa88 	bl	8003108 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004bfc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	e006      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fe fa82 	bl	8003108 <HAL_GetTick>
 8004c04:	eba0 0008 	sub.w	r0, r0, r8
 8004c08:	4548      	cmp	r0, r9
 8004c0a:	f63f af71 	bhi.w	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c10:	0798      	lsls	r0, r3, #30
 8004c12:	d5f5      	bpl.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c16:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8004c1a:	e7a2      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c1c:	02d8      	lsls	r0, r3, #11
 8004c1e:	f57f af22 	bpl.w	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x356>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c22:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004c24:	2a00      	cmp	r2, #0
 8004c26:	f47f af1e 	bne.w	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004c2a:	e700      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40007000 	.word	0x40007000
 8004c34:	0ffffcff 	.word	0x0ffffcff

08004c38 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c38:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c3a:	4a16      	ldr	r2, [pc, #88]	@ (8004c94 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
{
 8004c40:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c42:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004c44:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004c46:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004c48:	6985      	ldr	r5, [r0, #24]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c4a:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c4e:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8004c50:	680d      	ldr	r5, [r1, #0]
 8004c52:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c54:	688d      	ldr	r5, [r1, #8]
 8004c56:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c58:	4d0f      	ldr	r5, [pc, #60]	@ (8004c98 <TIM_OC1_SetConfig+0x60>)
 8004c5a:	42a8      	cmp	r0, r5
 8004c5c:	d00a      	beq.n	8004c74 <TIM_OC1_SetConfig+0x3c>
 8004c5e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004c62:	42a8      	cmp	r0, r5
 8004c64:	d006      	beq.n	8004c74 <TIM_OC1_SetConfig+0x3c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c66:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004c68:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004c6a:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004c6c:	6341      	str	r1, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6e:	6203      	str	r3, [r0, #32]
}
 8004c70:	bc70      	pop	{r4, r5, r6}
 8004c72:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004c74:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c76:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c7a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8004c7e:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c80:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c84:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c88:	ea46 0c05 	orr.w	ip, r6, r5
 8004c8c:	ea4c 0404 	orr.w	r4, ip, r4
 8004c90:	e7e9      	b.n	8004c66 <TIM_OC1_SetConfig+0x2e>
 8004c92:	bf00      	nop
 8004c94:	fffeff8c 	.word	0xfffeff8c
 8004c98:	40010000 	.word	0x40010000

08004c9c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c9c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c9e:	4a17      	ldr	r2, [pc, #92]	@ (8004cfc <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
{
 8004ca4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ca6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004ca8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004caa:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004cac:	69c5      	ldr	r5, [r0, #28]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cb2:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8004cb4:	680d      	ldr	r5, [r1, #0]
 8004cb6:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cb8:	688d      	ldr	r5, [r1, #8]
 8004cba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cbe:	4d10      	ldr	r5, [pc, #64]	@ (8004d00 <TIM_OC3_SetConfig+0x64>)
 8004cc0:	42a8      	cmp	r0, r5
 8004cc2:	d00a      	beq.n	8004cda <TIM_OC3_SetConfig+0x3e>
 8004cc4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004cc8:	42a8      	cmp	r0, r5
 8004cca:	d006      	beq.n	8004cda <TIM_OC3_SetConfig+0x3e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ccc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004cce:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004cd0:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004cd2:	63c1      	str	r1, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd4:	6203      	str	r3, [r0, #32]
}
 8004cd6:	bc70      	pop	{r4, r5, r6}
 8004cd8:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cda:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce0:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ce4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ce8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cf0:	ea46 0c05 	orr.w	ip, r6, r5
 8004cf4:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
 8004cf8:	e7e8      	b.n	8004ccc <TIM_OC3_SetConfig+0x30>
 8004cfa:	bf00      	nop
 8004cfc:	fffeff8c 	.word	0xfffeff8c
 8004d00:	40010000 	.word	0x40010000

08004d04 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d04:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d06:	4a12      	ldr	r2, [pc, #72]	@ (8004d50 <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 8004d0c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d0e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004d10:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004d12:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004d14:	69c5      	ldr	r5, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d1a:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d1c:	680d      	ldr	r5, [r1, #0]
 8004d1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d22:	688d      	ldr	r5, [r1, #8]
 8004d24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d28:	4d0a      	ldr	r5, [pc, #40]	@ (8004d54 <TIM_OC4_SetConfig+0x50>)
 8004d2a:	42a8      	cmp	r0, r5
 8004d2c:	d00a      	beq.n	8004d44 <TIM_OC4_SetConfig+0x40>
 8004d2e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004d32:	42a8      	cmp	r0, r5
 8004d34:	d006      	beq.n	8004d44 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d36:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004d38:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004d3a:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004d3c:	6401      	str	r1, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3e:	6203      	str	r3, [r0, #32]
}
 8004d40:	bc30      	pop	{r4, r5}
 8004d42:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d44:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d48:	694d      	ldr	r5, [r1, #20]
 8004d4a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004d4e:	e7f2      	b.n	8004d36 <TIM_OC4_SetConfig+0x32>
 8004d50:	feff8cff 	.word	0xfeff8cff
 8004d54:	40010000 	.word	0x40010000

08004d58 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d58:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d5a:	4a12      	ldr	r2, [pc, #72]	@ (8004da4 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
{
 8004d60:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d62:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004d64:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004d66:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8004d68:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d6a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d6e:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8004d70:	680d      	ldr	r5, [r1, #0]
 8004d72:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d74:	688d      	ldr	r5, [r1, #8]
 8004d76:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7a:	4d0b      	ldr	r5, [pc, #44]	@ (8004da8 <TIM_OC5_SetConfig+0x50>)
 8004d7c:	42a8      	cmp	r0, r5
 8004d7e:	d00a      	beq.n	8004d96 <TIM_OC5_SetConfig+0x3e>
 8004d80:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004d84:	42a8      	cmp	r0, r5
 8004d86:	d006      	beq.n	8004d96 <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d88:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004d8a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004d8c:	6542      	str	r2, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004d8e:	6581      	str	r1, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d90:	6203      	str	r3, [r0, #32]
}
 8004d92:	bc30      	pop	{r4, r5}
 8004d94:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d96:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d9a:	694d      	ldr	r5, [r1, #20]
 8004d9c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8004da0:	e7f2      	b.n	8004d88 <TIM_OC5_SetConfig+0x30>
 8004da2:	bf00      	nop
 8004da4:	fffeff8f 	.word	0xfffeff8f
 8004da8:	40010000 	.word	0x40010000

08004dac <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dae:	4a12      	ldr	r2, [pc, #72]	@ (8004df8 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004db0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
{
 8004db4:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004db6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004db8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004dba:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8004dbc:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004dbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dc2:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	680d      	ldr	r5, [r1, #0]
 8004dc6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dca:	688d      	ldr	r5, [r1, #8]
 8004dcc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd0:	4d0a      	ldr	r5, [pc, #40]	@ (8004dfc <TIM_OC6_SetConfig+0x50>)
 8004dd2:	42a8      	cmp	r0, r5
 8004dd4:	d00a      	beq.n	8004dec <TIM_OC6_SetConfig+0x40>
 8004dd6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004dda:	42a8      	cmp	r0, r5
 8004ddc:	d006      	beq.n	8004dec <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004dde:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004de0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004de2:	6542      	str	r2, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004de4:	65c1      	str	r1, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de6:	6203      	str	r3, [r0, #32]
}
 8004de8:	bc30      	pop	{r4, r5}
 8004dea:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dec:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004df0:	694d      	ldr	r5, [r1, #20]
 8004df2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8004df6:	e7f2      	b.n	8004dde <TIM_OC6_SetConfig+0x32>
 8004df8:	feff8fff 	.word	0xfeff8fff
 8004dfc:	40010000 	.word	0x40010000

08004e00 <TIM_SlaveTimer_SetConfig.constprop.0>:
  * @brief  Slave Timer configuration function
  * @param  htim TIM handle
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 8004e00:	b430      	push	{r4, r5}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e02:	6804      	ldr	r4, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e04:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004e06:	68a2      	ldr	r2, [r4, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e08:	4b34      	ldr	r3, [pc, #208]	@ (8004edc <TIM_SlaveTimer_SetConfig.constprop.0+0xdc>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004e0a:	2850      	cmp	r0, #80	@ 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e0c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e10:	ea42 0200 	orr.w	r2, r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e14:	ea03 0302 	and.w	r3, r3, r2
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e18:	680a      	ldr	r2, [r1, #0]
 8004e1a:	ea43 0302 	orr.w	r3, r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8004e1e:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004e20:	d022      	beq.n	8004e68 <TIM_SlaveTimer_SetConfig.constprop.0+0x68>
 8004e22:	d911      	bls.n	8004e48 <TIM_SlaveTimer_SetConfig.constprop.0+0x48>
 8004e24:	2860      	cmp	r0, #96	@ 0x60
 8004e26:	d031      	beq.n	8004e8c <TIM_SlaveTimer_SetConfig.constprop.0+0x8c>
 8004e28:	2870      	cmp	r0, #112	@ 0x70
 8004e2a:	d11a      	bne.n	8004e62 <TIM_SlaveTimer_SetConfig.constprop.0+0x62>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e2c:	68a2      	ldr	r2, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e2e:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
 8004e32:	6909      	ldr	r1, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e34:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e38:	4303      	orrs	r3, r0
 8004e3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004e3e:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e40:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2000      	movs	r0, #0
}
 8004e44:	bc30      	pop	{r4, r5}
 8004e46:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004e48:	2840      	cmp	r0, #64	@ 0x40
 8004e4a:	d032      	beq.n	8004eb2 <TIM_SlaveTimer_SetConfig.constprop.0+0xb2>
 8004e4c:	d809      	bhi.n	8004e62 <TIM_SlaveTimer_SetConfig.constprop.0+0x62>
 8004e4e:	2820      	cmp	r0, #32
 8004e50:	d0f7      	beq.n	8004e42 <TIM_SlaveTimer_SetConfig.constprop.0+0x42>
 8004e52:	d83e      	bhi.n	8004ed2 <TIM_SlaveTimer_SetConfig.constprop.0+0xd2>
 8004e54:	f030 0310 	bics.w	r3, r0, #16
 8004e58:	bf14      	ite	ne
 8004e5a:	2001      	movne	r0, #1
 8004e5c:	2000      	moveq	r0, #0
}
 8004e5e:	bc30      	pop	{r4, r5}
 8004e60:	4770      	bx	lr
        return HAL_ERROR;
 8004e62:	2001      	movs	r0, #1
}
 8004e64:	bc30      	pop	{r4, r5}
 8004e66:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004e68:	6a20      	ldr	r0, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6a:	6a23      	ldr	r3, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 8004e6c:	688a      	ldr	r2, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
                               sSlaveConfig->TriggerFilter);
 8004e72:	690d      	ldr	r5, [r1, #16]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e74:	f020 010a 	bic.w	r1, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e78:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7a:	69a3      	ldr	r3, [r4, #24]
  tmpccer |= TIM_ICPolarity;
 8004e7c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e82:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004e86:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e88:	6222      	str	r2, [r4, #32]
}
 8004e8a:	e7da      	b.n	8004e42 <TIM_SlaveTimer_SetConfig.constprop.0+0x42>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8c:	6a23      	ldr	r3, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 8004e8e:	6888      	ldr	r0, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e90:	f023 0310 	bic.w	r3, r3, #16
                               sSlaveConfig->TriggerFilter);
 8004e94:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e96:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e98:	69a2      	ldr	r2, [r4, #24]
  tmpccer = TIMx->CCER;
 8004e9a:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e9c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ea0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ea4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004eac:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004eae:	6223      	str	r3, [r4, #32]
}
 8004eb0:	e7c7      	b.n	8004e42 <TIM_SlaveTimer_SetConfig.constprop.0+0x42>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004eb2:	2a05      	cmp	r2, #5
 8004eb4:	d0d5      	beq.n	8004e62 <TIM_SlaveTimer_SetConfig.constprop.0+0x62>
      tmpccer = htim->Instance->CCER;
 8004eb6:	6a22      	ldr	r2, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004eb8:	6a23      	ldr	r3, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004eba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	6223      	str	r3, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004ec2:	69a3      	ldr	r3, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004ec8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004ecc:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004ece:	6222      	str	r2, [r4, #32]
      break;
 8004ed0:	e7b7      	b.n	8004e42 <TIM_SlaveTimer_SetConfig.constprop.0+0x42>
  switch (sSlaveConfig->InputTrigger)
 8004ed2:	3830      	subs	r0, #48	@ 0x30
 8004ed4:	bf18      	it	ne
 8004ed6:	2001      	movne	r0, #1
 8004ed8:	e7c1      	b.n	8004e5e <TIM_SlaveTimer_SetConfig.constprop.0+0x5e>
 8004eda:	bf00      	nop
 8004edc:	fffefff8 	.word	0xfffefff8

08004ee0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004ee0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d139      	bne.n	8004f5c <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee8:	6802      	ldr	r2, [r0, #0]
 8004eea:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <HAL_TIM_Base_Start+0x80>)
 8004eec:	491d      	ldr	r1, [pc, #116]	@ (8004f64 <HAL_TIM_Base_Start+0x84>)
 8004eee:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004ef2:	bf18      	it	ne
 8004ef4:	429a      	cmpne	r2, r3
{
 8004ef6:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	4d1a      	ldr	r5, [pc, #104]	@ (8004f68 <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f02:	42aa      	cmp	r2, r5
 8004f04:	bf08      	it	eq
 8004f06:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0a:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	4c17      	ldr	r4, [pc, #92]	@ (8004f6c <HAL_TIM_Base_Start+0x8c>)
 8004f10:	428a      	cmp	r2, r1
 8004f12:	bf08      	it	eq
 8004f14:	f043 0301 	orreq.w	r3, r3, #1
 8004f18:	4815      	ldr	r0, [pc, #84]	@ (8004f70 <HAL_TIM_Base_Start+0x90>)
 8004f1a:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
 8004f1e:	42a2      	cmp	r2, r4
 8004f20:	bf08      	it	eq
 8004f22:	f043 0301 	orreq.w	r3, r3, #1
 8004f26:	4282      	cmp	r2, r0
 8004f28:	bf08      	it	eq
 8004f2a:	f043 0301 	orreq.w	r3, r3, #1
 8004f2e:	428a      	cmp	r2, r1
 8004f30:	bf08      	it	eq
 8004f32:	f043 0301 	orreq.w	r3, r3, #1
 8004f36:	b913      	cbnz	r3, 8004f3e <HAL_TIM_Base_Start+0x5e>
 8004f38:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <HAL_TIM_Base_Start+0x94>)
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d107      	bne.n	8004f4e <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3e:	6891      	ldr	r1, [r2, #8]
 8004f40:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <HAL_TIM_Base_Start+0x98>)
 8004f42:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d006      	beq.n	8004f56 <HAL_TIM_Base_Start+0x76>
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 8004f4e:	6813      	ldr	r3, [r2, #0]
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004f56:	2000      	movs	r0, #0
}
 8004f58:	bc30      	pop	{r4, r5}
 8004f5a:	4770      	bx	lr
    return HAL_ERROR;
 8004f5c:	2001      	movs	r0, #1
}
 8004f5e:	4770      	bx	lr
 8004f60:	40010000 	.word	0x40010000
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000c00 	.word	0x40000c00
 8004f70:	40010400 	.word	0x40010400
 8004f74:	40001800 	.word	0x40001800
 8004f78:	00010007 	.word	0x00010007

08004f7c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f7c:	2910      	cmp	r1, #16
 8004f7e:	d80a      	bhi.n	8004f96 <HAL_TIM_OC_Start+0x1a>
 8004f80:	e8df f001 	tbb	[pc, r1]
 8004f84:	09090919 	.word	0x09090919
 8004f88:	0909094a 	.word	0x0909094a
 8004f8c:	09090952 	.word	0x09090952
 8004f90:	0909095a 	.word	0x0909095a
 8004f94:	62          	.byte	0x62
 8004f95:	00          	.byte	0x00
 8004f96:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d160      	bne.n	8005060 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f9e:	1f0b      	subs	r3, r1, #4
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d859      	bhi.n	8005058 <HAL_TIM_OC_Start+0xdc>
 8004fa4:	e8df f003 	tbb	[pc, r3]
 8004fa8:	5858583c 	.word	0x5858583c
 8004fac:	58585844 	.word	0x58585844
 8004fb0:	5858584c 	.word	0x5858584c
 8004fb4:	54          	.byte	0x54
 8004fb5:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fb6:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d150      	bne.n	8005060 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fc4:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fc6:	f001 011f 	and.w	r1, r1, #31
 8004fca:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fcc:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fce:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8004fd0:	ea20 0002 	bic.w	r0, r0, r2
{
 8004fd4:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8004fd6:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd8:	4c2f      	ldr	r4, [pc, #188]	@ (8005098 <HAL_TIM_OC_Start+0x11c>)

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fda:	6a19      	ldr	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fdc:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fde:	ea42 0201 	orr.w	r2, r2, r1
 8004fe2:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fe4:	d03e      	beq.n	8005064 <HAL_TIM_OC_Start+0xe8>
 8004fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800509c <HAL_TIM_OC_Start+0x120>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d03b      	beq.n	8005064 <HAL_TIM_OC_Start+0xe8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff0:	d002      	beq.n	8004ff8 <HAL_TIM_OC_Start+0x7c>
 8004ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80050a0 <HAL_TIM_OC_Start+0x124>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d13a      	bne.n	800506e <HAL_TIM_OC_Start+0xf2>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff8:	6899      	ldr	r1, [r3, #8]
 8004ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80050a4 <HAL_TIM_OC_Start+0x128>)
 8004ffc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffe:	2a06      	cmp	r2, #6
 8005000:	d006      	beq.n	8005010 <HAL_TIM_OC_Start+0x94>
 8005002:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005006:	d003      	beq.n	8005010 <HAL_TIM_OC_Start+0x94>
      __HAL_TIM_ENABLE(htim);
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005010:	2000      	movs	r0, #0
}
 8005012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005016:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005018:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800501c:	2b01      	cmp	r3, #1
 800501e:	d11f      	bne.n	8005060 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005020:	2302      	movs	r3, #2
 8005022:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8005026:	e7cd      	b.n	8004fc4 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005028:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800502c:	2b01      	cmp	r3, #1
 800502e:	d117      	bne.n	8005060 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005030:	2302      	movs	r3, #2
 8005032:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8005036:	e7c5      	b.n	8004fc4 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005038:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10f      	bne.n	8005060 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005040:	2302      	movs	r3, #2
 8005042:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8005046:	e7bd      	b.n	8004fc4 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005048:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800504c:	2b01      	cmp	r3, #1
 800504e:	d107      	bne.n	8005060 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005050:	2302      	movs	r3, #2
 8005052:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 8005056:	e7b5      	b.n	8004fc4 <HAL_TIM_OC_Start+0x48>
 8005058:	2302      	movs	r3, #2
 800505a:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 800505e:	e7b1      	b.n	8004fc4 <HAL_TIM_OC_Start+0x48>
    return HAL_ERROR;
 8005060:	2001      	movs	r0, #1
}
 8005062:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8005064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005066:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800506a:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506c:	e7c4      	b.n	8004ff8 <HAL_TIM_OC_Start+0x7c>
 800506e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005072:	480d      	ldr	r0, [pc, #52]	@ (80050a8 <HAL_TIM_OC_Start+0x12c>)
 8005074:	490d      	ldr	r1, [pc, #52]	@ (80050ac <HAL_TIM_OC_Start+0x130>)
 8005076:	4283      	cmp	r3, r0
 8005078:	bf18      	it	ne
 800507a:	4293      	cmpne	r3, r2
 800507c:	bf0c      	ite	eq
 800507e:	2201      	moveq	r2, #1
 8005080:	2200      	movne	r2, #0
 8005082:	428b      	cmp	r3, r1
 8005084:	bf08      	it	eq
 8005086:	f042 0201 	orreq.w	r2, r2, #1
 800508a:	2a00      	cmp	r2, #0
 800508c:	d1b4      	bne.n	8004ff8 <HAL_TIM_OC_Start+0x7c>
 800508e:	4a08      	ldr	r2, [pc, #32]	@ (80050b0 <HAL_TIM_OC_Start+0x134>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d1b9      	bne.n	8005008 <HAL_TIM_OC_Start+0x8c>
 8005094:	e7b0      	b.n	8004ff8 <HAL_TIM_OC_Start+0x7c>
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000
 800509c:	40010400 	.word	0x40010400
 80050a0:	40000400 	.word	0x40000400
 80050a4:	00010007 	.word	0x00010007
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40001800 	.word	0x40001800

080050b4 <HAL_TIM_OC_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050b4:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b6:	f04f 0c01 	mov.w	ip, #1
{
 80050ba:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050bc:	f001 041f 	and.w	r4, r1, #31
  TIMx->CCER &= ~tmp;
 80050c0:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050c2:	fa0c fc04 	lsl.w	ip, ip, r4
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050c6:	4c2f      	ldr	r4, [pc, #188]	@ (8005184 <HAL_TIM_OC_Stop+0xd0>)
  TIMx->CCER &= ~tmp;
 80050c8:	ea22 020c 	bic.w	r2, r2, ip
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050cc:	42a3      	cmp	r3, r4
  TIMx->CCER &= ~tmp;
 80050ce:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d4:	d01d      	beq.n	8005112 <HAL_TIM_OC_Stop+0x5e>
 80050d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005188 <HAL_TIM_OC_Stop+0xd4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01a      	beq.n	8005112 <HAL_TIM_OC_Stop+0x5e>
  __HAL_TIM_DISABLE(htim);
 80050dc:	6a1c      	ldr	r4, [r3, #32]
 80050de:	f241 1211 	movw	r2, #4369	@ 0x1111
 80050e2:	4214      	tst	r4, r2
 80050e4:	d108      	bne.n	80050f8 <HAL_TIM_OC_Stop+0x44>
 80050e6:	6a1c      	ldr	r4, [r3, #32]
 80050e8:	f240 4244 	movw	r2, #1092	@ 0x444
 80050ec:	4214      	tst	r4, r2
 80050ee:	d103      	bne.n	80050f8 <HAL_TIM_OC_Stop+0x44>
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	2910      	cmp	r1, #16
 80050fa:	d819      	bhi.n	8005130 <HAL_TIM_OC_Stop+0x7c>
 80050fc:	e8df f001 	tbb	[pc, r1]
 8005100:	18181826 	.word	0x18181826
 8005104:	1818182d 	.word	0x1818182d
 8005108:	18181834 	.word	0x18181834
 800510c:	1818183b 	.word	0x1818183b
 8005110:	1f          	.byte	0x1f
 8005111:	00          	.byte	0x00
    __HAL_TIM_MOE_DISABLE(htim);
 8005112:	6a1c      	ldr	r4, [r3, #32]
 8005114:	f241 1211 	movw	r2, #4369	@ 0x1111
 8005118:	4214      	tst	r4, r2
 800511a:	d1df      	bne.n	80050dc <HAL_TIM_OC_Stop+0x28>
 800511c:	6a1c      	ldr	r4, [r3, #32]
 800511e:	f240 4244 	movw	r2, #1092	@ 0x444
 8005122:	4214      	tst	r4, r2
 8005124:	d1da      	bne.n	80050dc <HAL_TIM_OC_Stop+0x28>
 8005126:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005128:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44
 800512e:	e7d5      	b.n	80050dc <HAL_TIM_OC_Stop+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005130:	2301      	movs	r3, #1
 8005132:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
}
 8005136:	2000      	movs	r0, #0
 8005138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800513c:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800513e:	2301      	movs	r3, #1
 8005140:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
}
 8005144:	2000      	movs	r0, #0
 8005146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800514a:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	2301      	movs	r3, #1
 800514e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
}
 8005152:	2000      	movs	r0, #0
 8005154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005158:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800515a:	2301      	movs	r3, #1
 800515c:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
}
 8005160:	2000      	movs	r0, #0
 8005162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005166:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	2301      	movs	r3, #1
 800516a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 800516e:	2000      	movs	r0, #0
 8005170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005174:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005176:	2301      	movs	r3, #1
 8005178:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 800517c:	2000      	movs	r0, #0
 800517e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40010000 	.word	0x40010000
 8005188:	40010400 	.word	0x40010400

0800518c <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800518c:	f7ff bef6 	b.w	8004f7c <HAL_TIM_OC_Start>

08005190 <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005190:	f7ff bf90 	b.w	80050b4 <HAL_TIM_OC_Stop>

08005194 <HAL_TIM_SlaveConfigSynchro>:
{
 8005194:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005196:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d01e      	beq.n	80051dc <HAL_TIM_SlaveConfigSynchro+0x48>
 800519e:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	2302      	movs	r3, #2
 80051a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80051a4:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80051ac:	f7ff fe28 	bl	8004e00 <TIM_SlaveTimer_SetConfig.constprop.0>
 80051b0:	b968      	cbnz	r0, 80051ce <HAL_TIM_SlaveConfigSynchro+0x3a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ba:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051c2:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	f884 503d 	strb.w	r5, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80051c8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80051cc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(htim);
 80051ce:	2300      	movs	r3, #0
    return HAL_ERROR;
 80051d0:	4628      	mov	r0, r5
    htim->State = HAL_TIM_STATE_READY;
 80051d2:	f884 503d 	strb.w	r5, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80051d6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80051da:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80051dc:	2002      	movs	r0, #2
}
 80051de:	bd38      	pop	{r3, r4, r5, pc}

080051e0 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop

080051e4 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop

080051ec <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop

080051f0 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop

080051f4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051f4:	6803      	ldr	r3, [r0, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	0791      	lsls	r1, r2, #30
{
 80051fa:	b510      	push	{r4, lr}
 80051fc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051fe:	d502      	bpl.n	8005206 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	0792      	lsls	r2, r2, #30
 8005204:	d468      	bmi.n	80052d8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	0752      	lsls	r2, r2, #29
 800520a:	d502      	bpl.n	8005212 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	0750      	lsls	r0, r2, #29
 8005210:	d44f      	bmi.n	80052b2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	0711      	lsls	r1, r2, #28
 8005216:	d502      	bpl.n	800521e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	0712      	lsls	r2, r2, #28
 800521c:	d437      	bmi.n	800528e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	06d0      	lsls	r0, r2, #27
 8005222:	d502      	bpl.n	800522a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	06d1      	lsls	r1, r2, #27
 8005228:	d41e      	bmi.n	8005268 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	07d2      	lsls	r2, r2, #31
 800522e:	d502      	bpl.n	8005236 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	07d0      	lsls	r0, r2, #31
 8005234:	d469      	bmi.n	800530a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	0611      	lsls	r1, r2, #24
 800523a:	d502      	bpl.n	8005242 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	0612      	lsls	r2, r2, #24
 8005240:	d46b      	bmi.n	800531a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	05d0      	lsls	r0, r2, #23
 8005246:	d502      	bpl.n	800524e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	0611      	lsls	r1, r2, #24
 800524c:	d46d      	bmi.n	800532a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	0652      	lsls	r2, r2, #25
 8005252:	d502      	bpl.n	800525a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	0650      	lsls	r0, r2, #25
 8005258:	d46f      	bmi.n	800533a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	0691      	lsls	r1, r2, #26
 800525e:	d502      	bpl.n	8005266 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	0692      	lsls	r2, r2, #26
 8005264:	d449      	bmi.n	80052fa <HAL_TIM_IRQHandler+0x106>
}
 8005266:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005268:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800526c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005270:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005272:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800527a:	d16f      	bne.n	800535c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527c:	f7ff ffb2 	bl	80051e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	4620      	mov	r0, r4
 8005282:	f7ff ffb3 	bl	80051ec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005288:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	7722      	strb	r2, [r4, #28]
 800528c:	e7cd      	b.n	800522a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800528e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005292:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8005294:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005296:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005298:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	079b      	lsls	r3, r3, #30
 800529e:	d15a      	bne.n	8005356 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a0:	f7ff ffa0 	bl	80051e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	4620      	mov	r0, r4
 80052a6:	f7ff ffa1 	bl	80051ec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ac:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ae:	7722      	strb	r2, [r4, #28]
 80052b0:	e7b5      	b.n	800521e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052b2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052b6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80052b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ba:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052bc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80052c4:	d144      	bne.n	8005350 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	f7ff ff8d 	bl	80051e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff ff8e 	bl	80051ec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052d2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d4:	7722      	strb	r2, [r4, #28]
 80052d6:	e79c      	b.n	8005212 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052d8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052dc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052de:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	0799      	lsls	r1, r3, #30
 80052e6:	d130      	bne.n	800534a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e8:	f7ff ff7c 	bl	80051e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7ff ff7d 	bl	80051ec <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052f4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	7722      	strb	r2, [r4, #28]
 80052f8:	e785      	b.n	8005206 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052fa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80052fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005300:	611a      	str	r2, [r3, #16]
}
 8005302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005306:	f000 bb23 	b.w	8005950 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800530a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800530e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005310:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005312:	f7ff ff65 	bl	80051e0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	e78d      	b.n	8005236 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800531a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800531e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005320:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005322:	f000 fb17 	bl	8005954 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	e78b      	b.n	8005242 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800532a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800532e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005330:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005332:	f000 fb11 	bl	8005958 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	e789      	b.n	800524e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800533a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800533e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005340:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005342:	f7ff ff55 	bl	80051f0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	e787      	b.n	800525a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800534a:	f7ff ff4d 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 800534e:	e7d0      	b.n	80052f2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8005350:	f7ff ff4a 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 8005354:	e7bc      	b.n	80052d0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	f7ff ff47 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 800535a:	e7a6      	b.n	80052aa <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800535c:	f7ff ff44 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 8005360:	e791      	b.n	8005286 <HAL_TIM_IRQHandler+0x92>
 8005362:	bf00      	nop

08005364 <TIM_Base_SetConfig>:
{
 8005364:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005366:	4a32      	ldr	r2, [pc, #200]	@ (8005430 <TIM_Base_SetConfig+0xcc>)
 8005368:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800536c:	4c31      	ldr	r4, [pc, #196]	@ (8005434 <TIM_Base_SetConfig+0xd0>)
 800536e:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 8005372:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005374:	eba0 0e04 	sub.w	lr, r0, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005378:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537a:	fab2 f282 	clz	r2, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537e:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005380:	fabe fe8e 	clz	lr, lr
  TIMx->PSC = Structure->Prescaler;
 8005384:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005386:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800538a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800538e:	d026      	beq.n	80053de <TIM_Base_SetConfig+0x7a>
 8005390:	bb2a      	cbnz	r2, 80053de <TIM_Base_SetConfig+0x7a>
 8005392:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 8005440 <TIM_Base_SetConfig+0xdc>
 8005396:	4560      	cmp	r0, ip
 8005398:	d038      	beq.n	800540c <TIM_Base_SetConfig+0xa8>
 800539a:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800539e:	4560      	cmp	r0, ip
 80053a0:	d034      	beq.n	800540c <TIM_Base_SetConfig+0xa8>
 80053a2:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80053a6:	4560      	cmp	r0, ip
 80053a8:	d019      	beq.n	80053de <TIM_Base_SetConfig+0x7a>
 80053aa:	f1be 0f00 	cmp.w	lr, #0
 80053ae:	d116      	bne.n	80053de <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b0:	4a21      	ldr	r2, [pc, #132]	@ (8005438 <TIM_Base_SetConfig+0xd4>)
 80053b2:	4290      	cmp	r0, r2
 80053b4:	d02e      	beq.n	8005414 <TIM_Base_SetConfig+0xb0>
 80053b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053ba:	4290      	cmp	r0, r2
 80053bc:	d02a      	beq.n	8005414 <TIM_Base_SetConfig+0xb0>
 80053be:	4a1f      	ldr	r2, [pc, #124]	@ (800543c <TIM_Base_SetConfig+0xd8>)
 80053c0:	4290      	cmp	r0, r2
 80053c2:	d027      	beq.n	8005414 <TIM_Base_SetConfig+0xb0>
 80053c4:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80053c8:	4290      	cmp	r0, r2
 80053ca:	d023      	beq.n	8005414 <TIM_Base_SetConfig+0xb0>
 80053cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053d0:	4290      	cmp	r0, r2
 80053d2:	d01f      	beq.n	8005414 <TIM_Base_SetConfig+0xb0>
 80053d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053d8:	4290      	cmp	r0, r2
 80053da:	d11f      	bne.n	800541c <TIM_Base_SetConfig+0xb8>
 80053dc:	e01a      	b.n	8005414 <TIM_Base_SetConfig+0xb0>
    tmpcr1 |= Structure->CounterMode;
 80053de:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80053e4:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80053e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ec:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f2:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80053f4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f6:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053f8:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053fa:	b912      	cbnz	r2, 8005402 <TIM_Base_SetConfig+0x9e>
 80053fc:	f1be 0f00 	cmp.w	lr, #0
 8005400:	d001      	beq.n	8005406 <TIM_Base_SetConfig+0xa2>
    TIMx->RCR = Structure->RepetitionCounter;
 8005402:	690b      	ldr	r3, [r1, #16]
 8005404:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005406:	2301      	movs	r3, #1
 8005408:	6143      	str	r3, [r0, #20]
}
 800540a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800540c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005410:	684a      	ldr	r2, [r1, #4]
 8005412:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005414:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800541c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005420:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8005422:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005424:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005426:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005428:	6285      	str	r5, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800542a:	6143      	str	r3, [r0, #20]
}
 800542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40010400 	.word	0x40010400
 8005438:	40014000 	.word	0x40014000
 800543c:	40014800 	.word	0x40014800
 8005440:	40000400 	.word	0x40000400

08005444 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005444:	b370      	cbz	r0, 80054a4 <HAL_TIM_Base_Init+0x60>
{
 8005446:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005448:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800544c:	4604      	mov	r4, r0
 800544e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005452:	b313      	cbz	r3, 800549a <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005454:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005456:	2302      	movs	r3, #2
 8005458:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005460:	f7ff ff80 	bl	8005364 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005464:	2301      	movs	r3, #1
  return HAL_OK;
 8005466:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005468:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005470:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005474:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005478:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800547c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005488:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800548c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005490:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005494:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005498:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800549a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800549e:	f7fd fc09 	bl	8002cb4 <HAL_TIM_Base_MspInit>
 80054a2:	e7d7      	b.n	8005454 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80054a4:	2001      	movs	r0, #1
}
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80054a8:	b370      	cbz	r0, 8005508 <HAL_TIM_PWM_Init+0x60>
{
 80054aa:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80054ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80054b0:	4604      	mov	r4, r0
 80054b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80054b6:	b313      	cbz	r3, 80054fe <HAL_TIM_PWM_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80054ba:	2302      	movs	r3, #2
 80054bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c0:	f851 0b04 	ldr.w	r0, [r1], #4
 80054c4:	f7ff ff4e 	bl	8005364 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c8:	2301      	movs	r3, #1
  return HAL_OK;
 80054ca:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054cc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80054d4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80054d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80054dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80054e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80054ec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80054f0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80054f4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80054fc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80054fe:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005502:	f7fd fbaf 	bl	8002c64 <HAL_TIM_PWM_MspInit>
 8005506:	e7d7      	b.n	80054b8 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8005508:	2001      	movs	r0, #1
}
 800550a:	4770      	bx	lr

0800550c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800550c:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800550e:	4a17      	ldr	r2, [pc, #92]	@ (800556c <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005510:	f023 0310 	bic.w	r3, r3, #16
{
 8005514:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005516:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005518:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800551a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800551c:	6985      	ldr	r5, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800551e:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005522:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005524:	680d      	ldr	r5, [r1, #0]
 8005526:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800552a:	688d      	ldr	r5, [r1, #8]
 800552c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005530:	4d0f      	ldr	r5, [pc, #60]	@ (8005570 <TIM_OC2_SetConfig+0x64>)
 8005532:	42a8      	cmp	r0, r5
 8005534:	d00a      	beq.n	800554c <TIM_OC2_SetConfig+0x40>
 8005536:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800553a:	42a8      	cmp	r0, r5
 800553c:	d006      	beq.n	800554c <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 800553e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005540:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005542:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005544:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005546:	6203      	str	r3, [r0, #32]
}
 8005548:	bc70      	pop	{r4, r5, r6}
 800554a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800554c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800554e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005552:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005556:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800555a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC2NE;
 800555e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005562:	ea46 0c05 	orr.w	ip, r6, r5
 8005566:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 800556a:	e7e8      	b.n	800553e <TIM_OC2_SetConfig+0x32>
 800556c:	feff8cff 	.word	0xfeff8cff
 8005570:	40010000 	.word	0x40010000

08005574 <HAL_TIM_PWM_ConfigChannel>:
{
 8005574:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005576:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d07c      	beq.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x104>
 800557e:	2301      	movs	r3, #1
 8005580:	4604      	mov	r4, r0
 8005582:	460d      	mov	r5, r1
 8005584:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005588:	2a14      	cmp	r2, #20
 800558a:	d80c      	bhi.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 800558c:	e8df f002 	tbb	[pc, r2]
 8005590:	0b0b0b22 	.word	0x0b0b0b22
 8005594:	0b0b0b32 	.word	0x0b0b0b32
 8005598:	0b0b0b43 	.word	0x0b0b0b43
 800559c:	0b0b0b53 	.word	0x0b0b0b53
 80055a0:	0b0b0b64 	.word	0x0b0b0b64
 80055a4:	10          	.byte	0x10
 80055a5:	00          	.byte	0x00
 80055a6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80055a8:	2300      	movs	r3, #0
 80055aa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055b0:	6800      	ldr	r0, [r0, #0]
 80055b2:	f7ff fbfb 	bl	8004dac <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055b6:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055b8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80055ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80055be:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055c0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80055c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055c6:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055c8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80055ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80055ce:	6543      	str	r3, [r0, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80055d0:	2000      	movs	r0, #0
 80055d2:	e7e9      	b.n	80055a8 <HAL_TIM_PWM_ConfigChannel+0x34>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055d4:	6800      	ldr	r0, [r0, #0]
 80055d6:	f7ff fb2f 	bl	8004c38 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055da:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055dc:	6983      	ldr	r3, [r0, #24]
 80055de:	f043 0308 	orr.w	r3, r3, #8
 80055e2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055e4:	6983      	ldr	r3, [r0, #24]
 80055e6:	f023 0304 	bic.w	r3, r3, #4
 80055ea:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055ec:	6983      	ldr	r3, [r0, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	6183      	str	r3, [r0, #24]
      break;
 80055f2:	e7ed      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055f4:	6800      	ldr	r0, [r0, #0]
 80055f6:	f7ff ff89 	bl	800550c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055fa:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055fc:	6983      	ldr	r3, [r0, #24]
 80055fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005602:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005604:	6983      	ldr	r3, [r0, #24]
 8005606:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800560a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800560c:	6983      	ldr	r3, [r0, #24]
 800560e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005612:	6183      	str	r3, [r0, #24]
      break;
 8005614:	e7dc      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005616:	6800      	ldr	r0, [r0, #0]
 8005618:	f7ff fb40 	bl	8004c9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800561c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800561e:	69c3      	ldr	r3, [r0, #28]
 8005620:	f043 0308 	orr.w	r3, r3, #8
 8005624:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005626:	69c3      	ldr	r3, [r0, #28]
 8005628:	f023 0304 	bic.w	r3, r3, #4
 800562c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800562e:	69c3      	ldr	r3, [r0, #28]
 8005630:	4313      	orrs	r3, r2
 8005632:	61c3      	str	r3, [r0, #28]
      break;
 8005634:	e7cc      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	f7ff fb64 	bl	8004d04 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800563c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800563e:	69c3      	ldr	r3, [r0, #28]
 8005640:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005644:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005646:	69c3      	ldr	r3, [r0, #28]
 8005648:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800564c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800564e:	69c3      	ldr	r3, [r0, #28]
 8005650:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005654:	61c3      	str	r3, [r0, #28]
      break;
 8005656:	e7bb      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005658:	6800      	ldr	r0, [r0, #0]
 800565a:	f7ff fb7d 	bl	8004d58 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800565e:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005660:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005662:	f043 0308 	orr.w	r3, r3, #8
 8005666:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005668:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800566a:	f023 0304 	bic.w	r3, r3, #4
 800566e:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005670:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005672:	4313      	orrs	r3, r2
 8005674:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 8005676:	e7ab      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x5c>
  __HAL_LOCK(htim);
 8005678:	2002      	movs	r0, #2
}
 800567a:	bd38      	pop	{r3, r4, r5, pc}

0800567c <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800567c:	2900      	cmp	r1, #0
 800567e:	d14e      	bne.n	800571e <HAL_TIMEx_OCN_Start+0xa2>
 8005680:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8005684:	2b01      	cmp	r3, #1
 8005686:	d152      	bne.n	800572e <HAL_TIMEx_OCN_Start+0xb2>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005688:	2302      	movs	r3, #2
 800568a:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800568e:	6803      	ldr	r3, [r0, #0]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005690:	f001 011f 	and.w	r1, r1, #31
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005694:	4a31      	ldr	r2, [pc, #196]	@ (800575c <HAL_TIMEx_OCN_Start+0xe0>)
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005696:	2004      	movs	r0, #4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569c:	bf18      	it	ne
 800569e:	4293      	cmpne	r3, r2
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056a0:	fa00 f101 	lsl.w	r1, r0, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a4:	482e      	ldr	r0, [pc, #184]	@ (8005760 <HAL_TIMEx_OCN_Start+0xe4>)
 80056a6:	bf0c      	ite	eq
 80056a8:	2201      	moveq	r2, #1
 80056aa:	2200      	movne	r2, #0
{
 80056ac:	b430      	push	{r4, r5}

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80056ae:	6a1c      	ldr	r4, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b0:	4d2c      	ldr	r5, [pc, #176]	@ (8005764 <HAL_TIMEx_OCN_Start+0xe8>)
  TIMx->CCER &=  ~tmp;
 80056b2:	ea24 0401 	bic.w	r4, r4, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b6:	42ab      	cmp	r3, r5
 80056b8:	bf08      	it	eq
 80056ba:	f042 0201 	orreq.w	r2, r2, #1
 80056be:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
  TIMx->CCER &=  ~tmp;
 80056c2:	621c      	str	r4, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c4:	42ab      	cmp	r3, r5
 80056c6:	bf08      	it	eq
 80056c8:	f042 0201 	orreq.w	r2, r2, #1

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056cc:	6a1c      	ldr	r4, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ce:	4283      	cmp	r3, r0
 80056d0:	bf08      	it	eq
 80056d2:	f042 0201 	orreq.w	r2, r2, #1
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d6:	4321      	orrs	r1, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d8:	4c23      	ldr	r4, [pc, #140]	@ (8005768 <HAL_TIMEx_OCN_Start+0xec>)
 80056da:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056de:	6219      	str	r1, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e0:	42a3      	cmp	r3, r4
 80056e2:	bf08      	it	eq
 80056e4:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_TIM_MOE_ENABLE(htim);
 80056e8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ea:	4283      	cmp	r3, r0
 80056ec:	bf08      	it	eq
 80056ee:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_TIM_MOE_ENABLE(htim);
 80056f2:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80056f6:	6459      	str	r1, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f8:	b912      	cbnz	r2, 8005700 <HAL_TIMEx_OCN_Start+0x84>
 80056fa:	4a1c      	ldr	r2, [pc, #112]	@ (800576c <HAL_TIMEx_OCN_Start+0xf0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d107      	bne.n	8005710 <HAL_TIMEx_OCN_Start+0x94>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005700:	6899      	ldr	r1, [r3, #8]
 8005702:	4a1b      	ldr	r2, [pc, #108]	@ (8005770 <HAL_TIMEx_OCN_Start+0xf4>)
 8005704:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005706:	2a06      	cmp	r2, #6
 8005708:	d006      	beq.n	8005718 <HAL_TIMEx_OCN_Start+0x9c>
 800570a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800570e:	d003      	beq.n	8005718 <HAL_TIMEx_OCN_Start+0x9c>
      __HAL_TIM_ENABLE(htim);
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005718:	2000      	movs	r0, #0
}
 800571a:	bc30      	pop	{r4, r5}
 800571c:	4770      	bx	lr
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800571e:	2904      	cmp	r1, #4
 8005720:	d00b      	beq.n	800573a <HAL_TIMEx_OCN_Start+0xbe>
 8005722:	2908      	cmp	r1, #8
 8005724:	d011      	beq.n	800574a <HAL_TIMEx_OCN_Start+0xce>
 8005726:	f890 3047 	ldrb.w	r3, [r0, #71]	@ 0x47
 800572a:	2b01      	cmp	r3, #1
 800572c:	d001      	beq.n	8005732 <HAL_TIMEx_OCN_Start+0xb6>
    return HAL_ERROR;
 800572e:	2001      	movs	r0, #1
}
 8005730:	4770      	bx	lr
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005732:	2302      	movs	r3, #2
 8005734:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 8005738:	e7a9      	b.n	800568e <HAL_TIMEx_OCN_Start+0x12>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800573a:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
 800573e:	2b01      	cmp	r3, #1
 8005740:	d1f5      	bne.n	800572e <HAL_TIMEx_OCN_Start+0xb2>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005742:	2302      	movs	r3, #2
 8005744:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
 8005748:	e7a1      	b.n	800568e <HAL_TIMEx_OCN_Start+0x12>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800574a:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800574e:	2b01      	cmp	r3, #1
 8005750:	d1ed      	bne.n	800572e <HAL_TIMEx_OCN_Start+0xb2>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005752:	2302      	movs	r3, #2
 8005754:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
 8005758:	e799      	b.n	800568e <HAL_TIMEx_OCN_Start+0x12>
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000c00 	.word	0x40000c00
 8005764:	40000400 	.word	0x40000400
 8005768:	40010400 	.word	0x40010400
 800576c:	40001800 	.word	0x40001800
 8005770:	00010007 	.word	0x00010007

08005774 <HAL_TIMEx_OCN_Stop>:
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005774:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005776:	f04f 0c04 	mov.w	ip, #4
{
 800577a:	b410      	push	{r4}
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800577c:	f001 041f 	and.w	r4, r1, #31
  TIMx->CCER &=  ~tmp;
 8005780:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005782:	fa0c fc04 	lsl.w	ip, ip, r4
  __HAL_TIM_MOE_DISABLE(htim);
 8005786:	f241 1411 	movw	r4, #4369	@ 0x1111
  TIMx->CCER &=  ~tmp;
 800578a:	ea22 020c 	bic.w	r2, r2, ip
 800578e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005790:	6a1a      	ldr	r2, [r3, #32]
 8005792:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_DISABLE(htim);
 8005794:	6a1a      	ldr	r2, [r3, #32]
 8005796:	4222      	tst	r2, r4
 8005798:	d104      	bne.n	80057a4 <HAL_TIMEx_OCN_Stop+0x30>
 800579a:	6a1c      	ldr	r4, [r3, #32]
 800579c:	f240 4244 	movw	r2, #1092	@ 0x444
 80057a0:	4214      	tst	r4, r2
 80057a2:	d020      	beq.n	80057e6 <HAL_TIMEx_OCN_Stop+0x72>
  __HAL_TIM_DISABLE(htim);
 80057a4:	6a1c      	ldr	r4, [r3, #32]
 80057a6:	f241 1211 	movw	r2, #4369	@ 0x1111
 80057aa:	4214      	tst	r4, r2
 80057ac:	d104      	bne.n	80057b8 <HAL_TIMEx_OCN_Stop+0x44>
 80057ae:	6a1c      	ldr	r4, [r3, #32]
 80057b0:	f240 4244 	movw	r2, #1092	@ 0x444
 80057b4:	4214      	tst	r4, r2
 80057b6:	d011      	beq.n	80057dc <HAL_TIMEx_OCN_Stop+0x68>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057b8:	2301      	movs	r3, #1
 80057ba:	b929      	cbnz	r1, 80057c8 <HAL_TIMEx_OCN_Stop+0x54>
 80057bc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
}
 80057c0:	2000      	movs	r0, #0
 80057c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057c6:	4770      	bx	lr
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	2904      	cmp	r1, #4
 80057ca:	d011      	beq.n	80057f0 <HAL_TIMEx_OCN_Stop+0x7c>
 80057cc:	2908      	cmp	r1, #8
 80057ce:	d015      	beq.n	80057fc <HAL_TIMEx_OCN_Stop+0x88>
 80057d0:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
}
 80057d4:	2000      	movs	r0, #0
 80057d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057da:	4770      	bx	lr
  __HAL_TIM_DISABLE(htim);
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e7e8      	b.n	80057b8 <HAL_TIMEx_OCN_Stop+0x44>
  __HAL_TIM_MOE_DISABLE(htim);
 80057e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80057ee:	e7d9      	b.n	80057a4 <HAL_TIMEx_OCN_Stop+0x30>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
}
 80057f4:	2000      	movs	r0, #0
 80057f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057fa:	4770      	bx	lr
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
}
 8005800:	2000      	movs	r0, #0
 8005802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005808:	f7ff bf38 	b.w	800567c <HAL_TIMEx_OCN_Start>

0800580c <HAL_TIMEx_PWMN_Stop>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 800580c:	f7ff bfb2 	b.w	8005774 <HAL_TIMEx_OCN_Stop>

08005810 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8005810:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d04b      	beq.n	80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
  tmpcr2 = htim->Instance->CR2;
 8005818:	6803      	ldr	r3, [r0, #0]
 800581a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	2002      	movs	r0, #2
{
 800581e:	b430      	push	{r4, r5}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005820:	4d24      	ldr	r5, [pc, #144]	@ (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005822:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005826:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8005828:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800582a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800582c:	d029      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800582e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005832:	42ab      	cmp	r3, r5
 8005834:	d025      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005836:	4d20      	ldr	r5, [pc, #128]	@ (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005838:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583c:	42ab      	cmp	r3, r5
 800583e:	bf18      	it	ne
 8005840:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8005844:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005848:	bf0c      	ite	eq
 800584a:	f04f 0c01 	moveq.w	ip, #1
 800584e:	f04f 0c00 	movne.w	ip, #0
 8005852:	42ab      	cmp	r3, r5
 8005854:	bf08      	it	eq
 8005856:	f04c 0c01 	orreq.w	ip, ip, #1
 800585a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800585e:	42ab      	cmp	r3, r5
 8005860:	bf08      	it	eq
 8005862:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005866:	680d      	ldr	r5, [r1, #0]
 8005868:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586a:	4d14      	ldr	r5, [pc, #80]	@ (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800586c:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586e:	42ab      	cmp	r3, r5
 8005870:	bf14      	ite	ne
 8005872:	4660      	movne	r0, ip
 8005874:	f04c 0001 	orreq.w	r0, ip, #1
 8005878:	b960      	cbnz	r0, 8005894 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800587a:	4811      	ldr	r0, [pc, #68]	@ (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800587c:	4283      	cmp	r3, r0
 800587e:	d009      	beq.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005880:	e00d      	b.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005882:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005884:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005888:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800588c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005890:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8005892:	6058      	str	r0, [r3, #4]
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005894:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005896:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800589a:	430c      	orrs	r4, r1
    htim->Instance->SMCR = tmpsmcr;
 800589c:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(htim);
 800589e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	2101      	movs	r1, #1
  return HAL_OK;
 80058a2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80058a8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80058ac:	bc30      	pop	{r4, r5}
 80058ae:	4770      	bx	lr
  __HAL_LOCK(htim);
 80058b0:	2002      	movs	r0, #2
}
 80058b2:	4770      	bx	lr
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40014000 	.word	0x40014000
 80058c0:	40001800 	.word	0x40001800

080058c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80058c4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d03d      	beq.n	8005948 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058cc:	4602      	mov	r2, r0
 80058ce:	6848      	ldr	r0, [r1, #4]
{
 80058d0:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058d2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80058d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058da:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058dc:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058e2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058e4:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058ea:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058ec:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058f2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058f4:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058fa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058fc:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005902:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005904:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005906:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800590a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800590e:	4c0f      	ldr	r4, [pc, #60]	@ (800594c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8005910:	42a0      	cmp	r0, r4
 8005912:	d00b      	beq.n	800592c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8005914:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8005918:	42a0      	cmp	r0, r4
 800591a:	d007      	beq.n	800592c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  __HAL_UNLOCK(htim);
 800591c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800591e:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005920:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c
  return HAL_OK;
 8005924:	4608      	mov	r0, r1
}
 8005926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800592a:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800592c:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800592e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005932:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005936:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800593a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800593e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005940:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005944:	430b      	orrs	r3, r1
 8005946:	e7e9      	b.n	800591c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005948:	2002      	movs	r0, #2
}
 800594a:	4770      	bx	lr
 800594c:	40010000 	.word	0x40010000

08005950 <HAL_TIMEx_CommutCallback>:
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop

08005954 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop

08005958 <HAL_TIMEx_Break2Callback>:
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop

0800595c <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop

08005960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005960:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	e842 3100 	strex	r1, r3, [r2]
 800596e:	2900      	cmp	r1, #0
 8005970:	d1f7      	bne.n	8005962 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	f102 0308 	add.w	r3, r2, #8
 8005976:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	f102 0c08 	add.w	ip, r2, #8
 8005982:	e84c 3100 	strex	r1, r3, [ip]
 8005986:	2900      	cmp	r1, #0
 8005988:	d1f3      	bne.n	8005972 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800598c:	2b01      	cmp	r3, #1
 800598e:	d006      	beq.n	800599e <UART_EndRxTransfer+0x3e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005992:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005994:	6683      	str	r3, [r0, #104]	@ 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8005996:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599a:	6603      	str	r3, [r0, #96]	@ 0x60
}
 800599c:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	e842 3100 	strex	r1, r3, [r2]
 80059aa:	2900      	cmp	r1, #0
 80059ac:	d0f0      	beq.n	8005990 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	e852 3f00 	ldrex	r3, [r2]
 80059b2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	e842 3100 	strex	r1, r3, [r2]
 80059ba:	2900      	cmp	r1, #0
 80059bc:	d1ef      	bne.n	800599e <UART_EndRxTransfer+0x3e>
 80059be:	e7e7      	b.n	8005990 <UART_EndRxTransfer+0x30>

080059c0 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80059c0:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059c2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80059c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059c8:	d018      	beq.n	80059fc <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	6802      	ldr	r2, [r0, #0]
 80059ce:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	f102 0308 	add.w	r3, r2, #8
 80059d6:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	f102 0008 	add.w	r0, r2, #8
 80059e2:	e840 3100 	strex	r1, r3, [r0]
 80059e6:	2900      	cmp	r1, #0
 80059e8:	d1f3      	bne.n	80059d2 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	e842 3100 	strex	r1, r3, [r2]
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d1f7      	bne.n	80059ea <UART_DMATransmitCplt+0x2a>
 80059fa:	4770      	bx	lr
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 80059fc:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8005a00:	4718      	bx	r3
 8005a02:	bf00      	nop

08005a04 <UART_DMATxHalfCplt>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a04:	6b80      	ldr	r0, [r0, #56]	@ 0x38

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005a06:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8005a0a:	4718      	bx	r3

08005a0c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a0c:	6b80      	ldr	r0, [r0, #56]	@ 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a0e:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a10:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
{
 8005a12:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a14:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a18:	6893      	ldr	r3, [r2, #8]
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	d501      	bpl.n	8005a22 <UART_DMAError+0x16>
 8005a1e:	2921      	cmp	r1, #33	@ 0x21
 8005a20:	d00f      	beq.n	8005a42 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a22:	6893      	ldr	r3, [r2, #8]
 8005a24:	065b      	lsls	r3, r3, #25
 8005a26:	d501      	bpl.n	8005a2c <UART_DMAError+0x20>
 8005a28:	2c22      	cmp	r4, #34	@ 0x22
 8005a2a:	d018      	beq.n	8005a5e <UART_DMAError+0x52>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a2c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005a30:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a34:	f043 0310 	orr.w	r3, r3, #16
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a3c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  huart->ErrorCallback(huart);
 8005a40:	4710      	bx	r2
    huart->TxXferCount = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	e842 3100 	strex	r1, r3, [r2]
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d1f7      	bne.n	8005a48 <UART_DMAError+0x3c>
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	2320      	movs	r3, #32
 8005a5a:	67c3      	str	r3, [r0, #124]	@ 0x7c
}
 8005a5c:	e7e1      	b.n	8005a22 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005a64:	f7ff ff7c 	bl	8005960 <UART_EndRxTransfer>
 8005a68:	e7e0      	b.n	8005a2c <UART_DMAError+0x20>
 8005a6a:	bf00      	nop

08005a6c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a6c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 8005a6e:	2300      	movs	r3, #0
  huart->TxXferCount = 0U;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005a70:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
  huart->RxXferCount = 0U;
 8005a74:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005a78:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  huart->ErrorCallback(huart);
 8005a7c:	4710      	bx	r2
 8005a7e:	bf00      	nop

08005a80 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a80:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
  uint16_t uhMask = huart->Mask;
 8005a84:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a88:	2a22      	cmp	r2, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a8a:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a8c:	d004      	beq.n	8005a98 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	f042 0208 	orr.w	r2, r2, #8
 8005a94:	619a      	str	r2, [r3, #24]
  }
}
 8005a96:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a9a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8005a9c:	400b      	ands	r3, r1
 8005a9e:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8005aa0:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 8005aa4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8005aa6:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 8005aa8:	3201      	adds	r2, #1
    huart->RxXferCount--;
 8005aaa:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8005aac:	6542      	str	r2, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8005aae:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 8005ab2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1ec      	bne.n	8005a96 <UART_RxISR_8BIT+0x16>
 8005abc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	e842 3100 	strex	r1, r3, [r2]
 8005aca:	2900      	cmp	r1, #0
 8005acc:	d1f7      	bne.n	8005abe <UART_RxISR_8BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	f102 0308 	add.w	r3, r2, #8
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	f102 0c08 	add.w	ip, r2, #8
 8005ade:	e84c 3100 	strex	r1, r3, [ip]
 8005ae2:	2900      	cmp	r1, #0
 8005ae4:	d1f3      	bne.n	8005ace <UART_RxISR_8BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	2320      	movs	r3, #32
      huart->RxISR = NULL;
 8005ae8:	6681      	str	r1, [r0, #104]	@ 0x68
      huart->RxState = HAL_UART_STATE_READY;
 8005aea:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aee:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af0:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d002      	beq.n	8005afc <UART_RxISR_8BIT+0x7c>
        huart->RxCpltCallback(huart);
 8005af6:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8005afa:	4718      	bx	r3
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afc:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b02:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	e842 3100 	strex	r1, r3, [r2]
 8005b0a:	2900      	cmp	r1, #0
 8005b0c:	d1f7      	bne.n	8005afe <UART_RxISR_8BIT+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b0e:	69d3      	ldr	r3, [r2, #28]
 8005b10:	06db      	lsls	r3, r3, #27
 8005b12:	d501      	bpl.n	8005b18 <UART_RxISR_8BIT+0x98>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b14:	2310      	movs	r3, #16
 8005b16:	6213      	str	r3, [r2, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005b18:	f8d0 30a8 	ldr.w	r3, [r0, #168]	@ 0xa8
 8005b1c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005b20:	4718      	bx	r3
 8005b22:	bf00      	nop

08005b24 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b24:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
  uint16_t uhMask = huart->Mask;
 8005b28:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b2c:	2922      	cmp	r1, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b2e:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b30:	d004      	beq.n	8005b3c <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	f042 0208 	orr.w	r2, r2, #8
 8005b38:	619a      	str	r2, [r3, #24]
 8005b3a:	4770      	bx	lr
{
 8005b3c:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b3e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b40:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 8005b42:	4022      	ands	r2, r4
 8005b44:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8005b48:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr += 2U;
 8005b4c:	6541      	str	r1, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8005b4e:	3a01      	subs	r2, #1
 8005b50:	b292      	uxth	r2, r2
 8005b52:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 8005b56:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	bb02      	cbnz	r2, 8005ba0 <UART_RxISR_16BIT+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b62:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	e843 2100 	strex	r1, r2, [r3]
 8005b6a:	2900      	cmp	r1, #0
 8005b6c:	d1f7      	bne.n	8005b5e <UART_RxISR_16BIT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	f103 0208 	add.w	r2, r3, #8
 8005b72:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b76:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	f103 0408 	add.w	r4, r3, #8
 8005b7e:	e844 2100 	strex	r1, r2, [r4]
 8005b82:	2900      	cmp	r1, #0
 8005b84:	d1f3      	bne.n	8005b6e <UART_RxISR_16BIT+0x4a>
      huart->RxState = HAL_UART_STATE_READY;
 8005b86:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8005b88:	6681      	str	r1, [r0, #104]	@ 0x68
      huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b8e:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b90:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8005b92:	2a01      	cmp	r2, #1
 8005b94:	d007      	beq.n	8005ba6 <UART_RxISR_16BIT+0x82>
        huart->RxCpltCallback(huart);
 8005b96:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
  }
}
 8005b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
        huart->RxCpltCallback(huart);
 8005b9e:	4718      	bx	r3
}
 8005ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba4:	4770      	bx	lr
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	e843 2100 	strex	r1, r2, [r3]
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	d1f7      	bne.n	8005ba8 <UART_RxISR_16BIT+0x84>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	06d2      	lsls	r2, r2, #27
 8005bbc:	d501      	bpl.n	8005bc2 <UART_RxISR_16BIT+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005bc2:	f8d0 30a8 	ldr.w	r3, [r0, #168]	@ 0xa8
 8005bc6:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
}
 8005bca:	f85d 4b04 	ldr.w	r4, [sp], #4
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005bce:	4718      	bx	r3

08005bd0 <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop

08005bd4 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop

08005bd8 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop

08005be0 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop

08005be4 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop

08005be8 <HAL_UART_AbortCpltCallback>:
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop

08005bec <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop

08005bf0 <HAL_UART_Transmit_DMA>:
{
 8005bf0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8005bf2:	6fc6      	ldr	r6, [r0, #124]	@ 0x7c
{
 8005bf4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005bf6:	2e20      	cmp	r6, #32
 8005bf8:	d123      	bne.n	8005c42 <HAL_UART_Transmit_DMA+0x52>
    if ((pData == NULL) || (Size == 0U))
 8005bfa:	b301      	cbz	r1, 8005c3e <HAL_UART_Transmit_DMA+0x4e>
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	fab2 f282 	clz	r2, r2
 8005c02:	0952      	lsrs	r2, r2, #5
 8005c04:	b1db      	cbz	r3, 8005c3e <HAL_UART_Transmit_DMA+0x4e>
    huart->TxXferCount = Size;
 8005c06:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    huart->pTxBuffPtr  = pData;
 8005c0a:	64c1      	str	r1, [r0, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005c0c:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c10:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c14:	2021      	movs	r0, #33	@ 0x21
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c16:	6825      	ldr	r5, [r4, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c18:	67e0      	str	r0, [r4, #124]	@ 0x7c
    if (huart->hdmatx != NULL)
 8005c1a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005c1c:	b1a0      	cbz	r0, 8005c48 <HAL_UART_Transmit_DMA+0x58>
      huart->hdmatx->XferAbortCallback = NULL;
 8005c1e:	6502      	str	r2, [r0, #80]	@ 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c20:	f105 0228 	add.w	r2, r5, #40	@ 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c24:	4d10      	ldr	r5, [pc, #64]	@ (8005c68 <HAL_UART_Transmit_DMA+0x78>)
 8005c26:	63c5      	str	r5, [r0, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c28:	4d10      	ldr	r5, [pc, #64]	@ (8005c6c <HAL_UART_Transmit_DMA+0x7c>)
 8005c2a:	6405      	str	r5, [r0, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c2c:	4d10      	ldr	r5, [pc, #64]	@ (8005c70 <HAL_UART_Transmit_DMA+0x80>)
 8005c2e:	64c5      	str	r5, [r0, #76]	@ 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c30:	f7fd fef0 	bl	8003a14 <HAL_DMA_Start_IT>
 8005c34:	b138      	cbz	r0, 8005c46 <HAL_UART_Transmit_DMA+0x56>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c36:	2310      	movs	r3, #16
 8005c38:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        huart->gState = HAL_UART_STATE_READY;
 8005c3c:	67e6      	str	r6, [r4, #124]	@ 0x7c
      return HAL_ERROR;
 8005c3e:	2001      	movs	r0, #1
}
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005c42:	2002      	movs	r0, #2
}
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
 8005c46:	6825      	ldr	r5, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c48:	2340      	movs	r3, #64	@ 0x40
 8005c4a:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	f105 0308 	add.w	r3, r5, #8
 8005c50:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	f105 0108 	add.w	r1, r5, #8
 8005c5c:	e841 3200 	strex	r2, r3, [r1]
 8005c60:	2a00      	cmp	r2, #0
 8005c62:	d1f3      	bne.n	8005c4c <HAL_UART_Transmit_DMA+0x5c>
    return HAL_OK;
 8005c64:	2000      	movs	r0, #0
}
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	080059c1 	.word	0x080059c1
 8005c6c:	08005a05 	.word	0x08005a05
 8005c70:	08005a0d 	.word	0x08005a0d

08005c74 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c74:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c76:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c7a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c7c:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8005c7e:	ea12 0f0c 	tst.w	r2, ip
{
 8005c82:	b570      	push	{r4, r5, r6, lr}
 8005c84:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c86:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8005c88:	d17d      	bne.n	8005d86 <HAL_UART_IRQHandler+0x112>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c8a:	0696      	lsls	r6, r2, #26
 8005c8c:	d502      	bpl.n	8005c94 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c8e:	068d      	lsls	r5, r1, #26
 8005c90:	f100 80c3 	bmi.w	8005e1a <HAL_UART_IRQHandler+0x1a6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c94:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005c96:	2801      	cmp	r0, #1
 8005c98:	d01f      	beq.n	8005cda <HAL_UART_IRQHandler+0x66>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c9a:	0615      	lsls	r5, r2, #24
 8005c9c:	d414      	bmi.n	8005cc8 <HAL_UART_IRQHandler+0x54>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c9e:	0652      	lsls	r2, r2, #25
 8005ca0:	d501      	bpl.n	8005ca6 <HAL_UART_IRQHandler+0x32>
 8005ca2:	064e      	lsls	r6, r1, #25
 8005ca4:	d400      	bmi.n	8005ca8 <HAL_UART_IRQHandler+0x34>
}
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	e843 2100 	strex	r1, r2, [r3]
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	d1f7      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x34>
  huart->gState = HAL_UART_STATE_READY;
 8005cb8:	2120      	movs	r1, #32
  huart->TxISR = NULL;
 8005cba:	2200      	movs	r2, #0
  huart->TxCpltCallback(huart);
 8005cbc:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005cc0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8005cc2:	67e1      	str	r1, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 8005cc4:	66e2      	str	r2, [r4, #108]	@ 0x6c
 8005cc6:	e0ac      	b.n	8005e22 <HAL_UART_IRQHandler+0x1ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005cc8:	0608      	lsls	r0, r1, #24
 8005cca:	d5e8      	bpl.n	8005c9e <HAL_UART_IRQHandler+0x2a>
    if (huart->TxISR != NULL)
 8005ccc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0e9      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x32>
      huart->TxISR(huart);
 8005cd2:	4620      	mov	r0, r4
}
 8005cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005cd8:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cda:	06d5      	lsls	r5, r2, #27
 8005cdc:	d5dd      	bpl.n	8005c9a <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cde:	06c8      	lsls	r0, r1, #27
 8005ce0:	d5db      	bpl.n	8005c9a <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	0656      	lsls	r6, r2, #25
 8005cea:	f140 810c 	bpl.w	8005f06 <HAL_UART_IRQHandler+0x292>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cee:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005cf0:	6802      	ldr	r2, [r0, #0]
 8005cf2:	6852      	ldr	r2, [r2, #4]
 8005cf4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	d0d5      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x32>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cfa:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8005cfe:	4291      	cmp	r1, r2
 8005d00:	d9d1      	bls.n	8005ca6 <HAL_UART_IRQHandler+0x32>
        huart->RxXferCount = nb_remaining_rx_data;
 8005d02:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d06:	69c2      	ldr	r2, [r0, #28]
 8005d08:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005d0c:	d02f      	beq.n	8005d6e <HAL_UART_IRQHandler+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	e843 2100 	strex	r1, r2, [r3]
 8005d1a:	2900      	cmp	r1, #0
 8005d1c:	d1f7      	bne.n	8005d0e <HAL_UART_IRQHandler+0x9a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	f103 0208 	add.w	r2, r3, #8
 8005d22:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d26:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	f103 0508 	add.w	r5, r3, #8
 8005d2e:	e845 2100 	strex	r1, r2, [r5]
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d1f3      	bne.n	8005d1e <HAL_UART_IRQHandler+0xaa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	f103 0208 	add.w	r2, r3, #8
 8005d3a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	f103 0508 	add.w	r5, r3, #8
 8005d46:	e845 2100 	strex	r1, r2, [r5]
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d1f3      	bne.n	8005d36 <HAL_UART_IRQHandler+0xc2>
          huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d54:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	e843 2100 	strex	r1, r2, [r3]
 8005d62:	2900      	cmp	r1, #0
 8005d64:	d1f7      	bne.n	8005d56 <HAL_UART_IRQHandler+0xe2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d66:	f7fd fe95 	bl	8003a94 <HAL_DMA_Abort>
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d6a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d6e:	2202      	movs	r2, #2
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d70:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8005d74:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d76:	6662      	str	r2, [r4, #100]	@ 0x64
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d78:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8005d7c:	1a89      	subs	r1, r1, r2
}
 8005d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d82:	b289      	uxth	r1, r1
 8005d84:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d86:	f015 0501 	ands.w	r5, r5, #1
 8005d8a:	461e      	mov	r6, r3
 8005d8c:	d16e      	bne.n	8005e6c <HAL_UART_IRQHandler+0x1f8>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d8e:	487d      	ldr	r0, [pc, #500]	@ (8005f84 <HAL_UART_IRQHandler+0x310>)
 8005d90:	4201      	tst	r1, r0
 8005d92:	f43f af7f 	beq.w	8005c94 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d96:	07d0      	lsls	r0, r2, #31
 8005d98:	d50e      	bpl.n	8005db8 <HAL_UART_IRQHandler+0x144>
 8005d9a:	05c8      	lsls	r0, r1, #23
 8005d9c:	f140 80af 	bpl.w	8005efe <HAL_UART_IRQHandler+0x28a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005da0:	2001      	movs	r0, #1
 8005da2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005da4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005da8:	f040 0001 	orr.w	r0, r0, #1
 8005dac:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005db0:	0790      	lsls	r0, r2, #30
 8005db2:	d53d      	bpl.n	8005e30 <HAL_UART_IRQHandler+0x1bc>
 8005db4:	2d00      	cmp	r5, #0
 8005db6:	d15d      	bne.n	8005e74 <HAL_UART_IRQHandler+0x200>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005db8:	0750      	lsls	r0, r2, #29
 8005dba:	d550      	bpl.n	8005e5e <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dbc:	0710      	lsls	r0, r2, #28
 8005dbe:	f100 809b 	bmi.w	8005ef8 <HAL_UART_IRQHandler+0x284>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dc2:	0510      	lsls	r0, r2, #20
 8005dc4:	d50a      	bpl.n	8005ddc <HAL_UART_IRQHandler+0x168>
 8005dc6:	014d      	lsls	r5, r1, #5
 8005dc8:	d508      	bpl.n	8005ddc <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dca:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005dce:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dd0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005dd4:	f043 0320 	orr.w	r3, r3, #32
 8005dd8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ddc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f43f af60 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x32>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005de6:	0690      	lsls	r0, r2, #26
 8005de8:	d506      	bpl.n	8005df8 <HAL_UART_IRQHandler+0x184>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dea:	068a      	lsls	r2, r1, #26
 8005dec:	d504      	bpl.n	8005df8 <HAL_UART_IRQHandler+0x184>
        if (huart->RxISR != NULL)
 8005dee:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005df0:	b113      	cbz	r3, 8005df8 <HAL_UART_IRQHandler+0x184>
          huart->RxISR(huart);
 8005df2:	4620      	mov	r0, r4
 8005df4:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005df6:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 8005df8:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dfc:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dfe:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e06:	ea53 0502 	orrs.w	r5, r3, r2
 8005e0a:	d140      	bne.n	8005e8e <HAL_UART_IRQHandler+0x21a>
        huart->ErrorCallback(huart);
 8005e0c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8005e10:	4620      	mov	r0, r4
 8005e12:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e14:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 8005e18:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005e1a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f43f af42 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x32>
}
 8005e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  huart->TxCpltCallback(huart);
 8005e26:	4718      	bx	r3
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e28:	05c8      	lsls	r0, r1, #23
 8005e2a:	d4b9      	bmi.n	8005da0 <HAL_UART_IRQHandler+0x12c>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e2c:	0790      	lsls	r0, r2, #30
 8005e2e:	d421      	bmi.n	8005e74 <HAL_UART_IRQHandler+0x200>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e30:	0750      	lsls	r0, r2, #29
 8005e32:	d514      	bpl.n	8005e5e <HAL_UART_IRQHandler+0x1ea>
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	d0c1      	beq.n	8005dbc <HAL_UART_IRQHandler+0x148>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e38:	2004      	movs	r0, #4
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e3a:	0715      	lsls	r5, r2, #28
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e3c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e3e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005e42:	f040 0002 	orr.w	r0, r0, #2
 8005e46:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e4a:	d5ba      	bpl.n	8005dc2 <HAL_UART_IRQHandler+0x14e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e4c:	2008      	movs	r0, #8
 8005e4e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e50:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005e54:	f040 0008 	orr.w	r0, r0, #8
 8005e58:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8005e5c:	e7b1      	b.n	8005dc2 <HAL_UART_IRQHandler+0x14e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e5e:	0710      	lsls	r0, r2, #28
 8005e60:	d5af      	bpl.n	8005dc2 <HAL_UART_IRQHandler+0x14e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e62:	f001 0020 	and.w	r0, r1, #32
 8005e66:	4328      	orrs	r0, r5
 8005e68:	d0ab      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x14e>
 8005e6a:	e7ef      	b.n	8005e4c <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e6c:	07d0      	lsls	r0, r2, #31
 8005e6e:	d4db      	bmi.n	8005e28 <HAL_UART_IRQHandler+0x1b4>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e70:	0790      	lsls	r0, r2, #30
 8005e72:	d53e      	bpl.n	8005ef2 <HAL_UART_IRQHandler+0x27e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e74:	2002      	movs	r0, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e76:	0755      	lsls	r5, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e78:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e7a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005e7e:	f040 0004 	orr.w	r0, r0, #4
 8005e82:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e86:	d4d7      	bmi.n	8005e38 <HAL_UART_IRQHandler+0x1c4>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e88:	0710      	lsls	r0, r2, #28
 8005e8a:	d4df      	bmi.n	8005e4c <HAL_UART_IRQHandler+0x1d8>
 8005e8c:	e799      	b.n	8005dc2 <HAL_UART_IRQHandler+0x14e>
        UART_EndRxTransfer(huart);
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7ff fd66 	bl	8005960 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	68b3      	ldr	r3, [r6, #8]
 8005e96:	065b      	lsls	r3, r3, #25
 8005e98:	d526      	bpl.n	8005ee8 <HAL_UART_IRQHandler+0x274>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	f106 0308 	add.w	r3, r6, #8
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	f106 0108 	add.w	r1, r6, #8
 8005eaa:	e841 3200 	strex	r2, r3, [r1]
 8005eae:	b162      	cbz	r2, 8005eca <HAL_UART_IRQHandler+0x256>
 8005eb0:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	f103 0208 	add.w	r2, r3, #8
 8005eb6:	e852 2f00 	ldrex	r2, [r2]
 8005eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	f103 0008 	add.w	r0, r3, #8
 8005ec2:	e840 2100 	strex	r1, r2, [r0]
 8005ec6:	2900      	cmp	r1, #0
 8005ec8:	d1f3      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x23e>
          if (huart->hdmarx != NULL)
 8005eca:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d052      	beq.n	8005f76 <HAL_UART_IRQHandler+0x302>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f88 <HAL_UART_IRQHandler+0x314>)
 8005ed2:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ed4:	f7fd fe28 	bl	8003b28 <HAL_DMA_Abort_IT>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f43f aee4 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x32>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ede:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 8005ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ee4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005ee6:	4718      	bx	r3
          huart->ErrorCallback(huart);
 8005ee8:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
}
 8005eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          huart->ErrorCallback(huart);
 8005ef0:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ef2:	0755      	lsls	r5, r2, #29
 8005ef4:	d4a0      	bmi.n	8005e38 <HAL_UART_IRQHandler+0x1c4>
 8005ef6:	e7c7      	b.n	8005e88 <HAL_UART_IRQHandler+0x214>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ef8:	068d      	lsls	r5, r1, #26
 8005efa:	d4a7      	bmi.n	8005e4c <HAL_UART_IRQHandler+0x1d8>
 8005efc:	e761      	b.n	8005dc2 <HAL_UART_IRQHandler+0x14e>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005efe:	0790      	lsls	r0, r2, #30
 8005f00:	f53f af5a 	bmi.w	8005db8 <HAL_UART_IRQHandler+0x144>
 8005f04:	e794      	b.n	8005e30 <HAL_UART_IRQHandler+0x1bc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f06:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 8005f0a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 8005f0e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f12:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8005f14:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f16:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	f43f aec4 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x32>
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	f43f aec1 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f28:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	e843 2000 	strex	r0, r2, [r3]
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d1f7      	bne.n	8005f24 <HAL_UART_IRQHandler+0x2b0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	f103 0208 	add.w	r2, r3, #8
 8005f38:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	f103 0508 	add.w	r5, r3, #8
 8005f44:	e845 2000 	strex	r0, r2, [r5]
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d1f3      	bne.n	8005f34 <HAL_UART_IRQHandler+0x2c0>
        huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8005f4e:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8005f50:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f54:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	e843 2000 	strex	r0, r2, [r3]
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d1f7      	bne.n	8005f56 <HAL_UART_IRQHandler+0x2e2>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f66:	2202      	movs	r2, #2
        huart->RxEventCallback(huart, nb_rx_data);
 8005f68:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8005f6c:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f6e:	6662      	str	r2, [r4, #100]	@ 0x64
}
 8005f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        huart->RxEventCallback(huart, nb_rx_data);
 8005f74:	4718      	bx	r3
            huart->ErrorCallback(huart);
 8005f76:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8005f7a:	4620      	mov	r0, r4
}
 8005f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            huart->ErrorCallback(huart);
 8005f80:	4718      	bx	r3
 8005f82:	bf00      	nop
 8005f84:	04000120 	.word	0x04000120
 8005f88:	08005a6d 	.word	0x08005a6d

08005f8c <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f8c:	6901      	ldr	r1, [r0, #16]
 8005f8e:	6882      	ldr	r2, [r0, #8]
{
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f94:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f96:	430a      	orrs	r2, r1
 8005f98:	69c0      	ldr	r0, [r0, #28]
 8005f9a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f9c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f9e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa0:	4987      	ldr	r1, [pc, #540]	@ (80061c0 <UART_SetConfig+0x234>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa4:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa6:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fac:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fae:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb0:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005fb4:	4329      	orrs	r1, r5
 8005fb6:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8005fb8:	6a21      	ldr	r1, [r4, #32]
 8005fba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fbc:	6899      	ldr	r1, [r3, #8]
 8005fbe:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005fc2:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fc4:	497f      	ldr	r1, [pc, #508]	@ (80061c4 <UART_SetConfig+0x238>)
 8005fc6:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fc8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fca:	d03f      	beq.n	800604c <UART_SetConfig+0xc0>
 8005fcc:	4a7e      	ldr	r2, [pc, #504]	@ (80061c8 <UART_SetConfig+0x23c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d017      	beq.n	8006002 <UART_SetConfig+0x76>
 8005fd2:	4a7e      	ldr	r2, [pc, #504]	@ (80061cc <UART_SetConfig+0x240>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	f000 80ad 	beq.w	8006134 <UART_SetConfig+0x1a8>
 8005fda:	4a7d      	ldr	r2, [pc, #500]	@ (80061d0 <UART_SetConfig+0x244>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	f000 80b4 	beq.w	800614a <UART_SetConfig+0x1be>
 8005fe2:	4a7c      	ldr	r2, [pc, #496]	@ (80061d4 <UART_SetConfig+0x248>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d073      	beq.n	80060d0 <UART_SetConfig+0x144>
 8005fe8:	4a7b      	ldr	r2, [pc, #492]	@ (80061d8 <UART_SetConfig+0x24c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d03d      	beq.n	800606a <UART_SetConfig+0xde>
 8005fee:	4a7b      	ldr	r2, [pc, #492]	@ (80061dc <UART_SetConfig+0x250>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	f000 80c1 	beq.w	8006178 <UART_SetConfig+0x1ec>
 8005ff6:	4a7a      	ldr	r2, [pc, #488]	@ (80061e0 <UART_SetConfig+0x254>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	f000 80cc 	beq.w	8006196 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 8005ffe:	2001      	movs	r0, #1
 8006000:	e04d      	b.n	800609e <UART_SetConfig+0x112>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006002:	4b78      	ldr	r3, [pc, #480]	@ (80061e4 <UART_SetConfig+0x258>)
 8006004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006008:	f003 030c 	and.w	r3, r3, #12
 800600c:	2b0c      	cmp	r3, #12
 800600e:	d8f6      	bhi.n	8005ffe <UART_SetConfig+0x72>
 8006010:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <UART_SetConfig+0x8c>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	080060e7 	.word	0x080060e7
 800601c:	08005fff 	.word	0x08005fff
 8006020:	08005fff 	.word	0x08005fff
 8006024:	08005fff 	.word	0x08005fff
 8006028:	080060ad 	.word	0x080060ad
 800602c:	08005fff 	.word	0x08005fff
 8006030:	08005fff 	.word	0x08005fff
 8006034:	08005fff 	.word	0x08005fff
 8006038:	0800607b 	.word	0x0800607b
 800603c:	08005fff 	.word	0x08005fff
 8006040:	08005fff 	.word	0x08005fff
 8006044:	08005fff 	.word	0x08005fff
 8006048:	0800605f 	.word	0x0800605f
 800604c:	4b65      	ldr	r3, [pc, #404]	@ (80061e4 <UART_SetConfig+0x258>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d00f      	beq.n	800607a <UART_SetConfig+0xee>
 800605a:	2b03      	cmp	r3, #3
 800605c:	d12e      	bne.n	80060bc <UART_SetConfig+0x130>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800605e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006062:	d05e      	beq.n	8006122 <UART_SetConfig+0x196>
        pclk = (uint32_t) LSE_VALUE;
 8006064:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006068:	e00b      	b.n	8006082 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800606a:	4b5e      	ldr	r3, [pc, #376]	@ (80061e4 <UART_SetConfig+0x258>)
 800606c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006070:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006078:	d115      	bne.n	80060a6 <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800607e:	d03a      	beq.n	80060f6 <UART_SetConfig+0x16a>
        pclk = (uint32_t) HSI_VALUE;
 8006080:	4859      	ldr	r0, [pc, #356]	@ (80061e8 <UART_SetConfig+0x25c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006082:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006084:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006088:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800608c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006090:	f1a0 0310 	sub.w	r3, r0, #16
 8006094:	4293      	cmp	r3, r2
 8006096:	d8b2      	bhi.n	8005ffe <UART_SetConfig+0x72>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 800609c:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80060a4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a6:	f200 8085 	bhi.w	80061b4 <UART_SetConfig+0x228>
 80060aa:	b14b      	cbz	r3, 80060c0 <UART_SetConfig+0x134>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80060b0:	d03a      	beq.n	8006128 <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fe fa39 	bl	8004528 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d0f0      	beq.n	800609c <UART_SetConfig+0x110>
 80060ba:	e7e2      	b.n	8006082 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d0f5      	beq.n	80060ac <UART_SetConfig+0x120>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80060c4:	d04d      	beq.n	8006162 <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c6:	f7fe fb13 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d0e6      	beq.n	800609c <UART_SetConfig+0x110>
 80060ce:	e7d8      	b.n	8006082 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060d0:	4b44      	ldr	r3, [pc, #272]	@ (80061e4 <UART_SetConfig+0x258>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060de:	d0cc      	beq.n	800607a <UART_SetConfig+0xee>
 80060e0:	d845      	bhi.n	800616e <UART_SetConfig+0x1e2>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e2      	bne.n	80060ac <UART_SetConfig+0x120>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80060ea:	d03d      	beq.n	8006168 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7fe faf0 	bl	80046d0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d0d3      	beq.n	800609c <UART_SetConfig+0x110>
 80060f4:	e7c5      	b.n	8006082 <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f6:	483d      	ldr	r0, [pc, #244]	@ (80061ec <UART_SetConfig+0x260>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060f8:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060fa:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060fe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006102:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006106:	f1a3 0110 	sub.w	r1, r3, #16
 800610a:	4291      	cmp	r1, r2
 800610c:	f63f af77 	bhi.w	8005ffe <UART_SetConfig+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006110:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006114:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006118:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800611a:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800611c:	4313      	orrs	r3, r2
 800611e:	60cb      	str	r3, [r1, #12]
 8006120:	e7bc      	b.n	800609c <UART_SetConfig+0x110>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006122:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006126:	e7e7      	b.n	80060f8 <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006128:	f7fe f9fe 	bl	8004528 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800612c:	2800      	cmp	r0, #0
 800612e:	d0b5      	beq.n	800609c <UART_SetConfig+0x110>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006130:	0040      	lsls	r0, r0, #1
 8006132:	e7e1      	b.n	80060f8 <UART_SetConfig+0x16c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006134:	4b2b      	ldr	r3, [pc, #172]	@ (80061e4 <UART_SetConfig+0x258>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800613e:	2b20      	cmp	r3, #32
 8006140:	d09b      	beq.n	800607a <UART_SetConfig+0xee>
 8006142:	d9ce      	bls.n	80060e2 <UART_SetConfig+0x156>
 8006144:	2b30      	cmp	r3, #48	@ 0x30
 8006146:	d08a      	beq.n	800605e <UART_SetConfig+0xd2>
 8006148:	e759      	b.n	8005ffe <UART_SetConfig+0x72>
 800614a:	4b26      	ldr	r3, [pc, #152]	@ (80061e4 <UART_SetConfig+0x258>)
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006150:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006154:	2b80      	cmp	r3, #128	@ 0x80
 8006156:	d090      	beq.n	800607a <UART_SetConfig+0xee>
 8006158:	d9c3      	bls.n	80060e2 <UART_SetConfig+0x156>
 800615a:	2bc0      	cmp	r3, #192	@ 0xc0
 800615c:	f43f af7f 	beq.w	800605e <UART_SetConfig+0xd2>
 8006160:	e74d      	b.n	8005ffe <UART_SetConfig+0x72>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006162:	f7fe fac5 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
        break;
 8006166:	e7e1      	b.n	800612c <UART_SetConfig+0x1a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006168:	f7fe fab2 	bl	80046d0 <HAL_RCC_GetPCLK1Freq>
        break;
 800616c:	e7de      	b.n	800612c <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800616e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006172:	f43f af74 	beq.w	800605e <UART_SetConfig+0xd2>
 8006176:	e742      	b.n	8005ffe <UART_SetConfig+0x72>
 8006178:	4b1a      	ldr	r3, [pc, #104]	@ (80061e4 <UART_SetConfig+0x258>)
 800617a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006186:	f43f af78 	beq.w	800607a <UART_SetConfig+0xee>
 800618a:	d9aa      	bls.n	80060e2 <UART_SetConfig+0x156>
 800618c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006190:	f43f af65 	beq.w	800605e <UART_SetConfig+0xd2>
 8006194:	e733      	b.n	8005ffe <UART_SetConfig+0x72>
 8006196:	4b13      	ldr	r3, [pc, #76]	@ (80061e4 <UART_SetConfig+0x258>)
 8006198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80061a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a4:	f43f af69 	beq.w	800607a <UART_SetConfig+0xee>
 80061a8:	d99b      	bls.n	80060e2 <UART_SetConfig+0x156>
 80061aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80061ae:	f43f af56 	beq.w	800605e <UART_SetConfig+0xd2>
 80061b2:	e724      	b.n	8005ffe <UART_SetConfig+0x72>
 80061b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061b8:	f43f af51 	beq.w	800605e <UART_SetConfig+0xd2>
 80061bc:	e71f      	b.n	8005ffe <UART_SetConfig+0x72>
 80061be:	bf00      	nop
 80061c0:	efff69f3 	.word	0xefff69f3
 80061c4:	40011000 	.word	0x40011000
 80061c8:	40004400 	.word	0x40004400
 80061cc:	40004800 	.word	0x40004800
 80061d0:	40004c00 	.word	0x40004c00
 80061d4:	40005000 	.word	0x40005000
 80061d8:	40011400 	.word	0x40011400
 80061dc:	40007800 	.word	0x40007800
 80061e0:	40007c00 	.word	0x40007c00
 80061e4:	40023800 	.word	0x40023800
 80061e8:	00f42400 	.word	0x00f42400
 80061ec:	01e84800 	.word	0x01e84800

080061f0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061f0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80061f2:	07da      	lsls	r2, r3, #31
{
 80061f4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061f6:	d506      	bpl.n	8006206 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061f8:	6801      	ldr	r1, [r0, #0]
 80061fa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80061fc:	684a      	ldr	r2, [r1, #4]
 80061fe:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006202:	4322      	orrs	r2, r4
 8006204:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006206:	079c      	lsls	r4, r3, #30
 8006208:	d506      	bpl.n	8006218 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800620a:	6801      	ldr	r1, [r0, #0]
 800620c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800620e:	684a      	ldr	r2, [r1, #4]
 8006210:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006214:	4322      	orrs	r2, r4
 8006216:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006218:	0759      	lsls	r1, r3, #29
 800621a:	d506      	bpl.n	800622a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800621c:	6801      	ldr	r1, [r0, #0]
 800621e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006220:	684a      	ldr	r2, [r1, #4]
 8006222:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006226:	4322      	orrs	r2, r4
 8006228:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800622a:	071a      	lsls	r2, r3, #28
 800622c:	d506      	bpl.n	800623c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800622e:	6801      	ldr	r1, [r0, #0]
 8006230:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006232:	684a      	ldr	r2, [r1, #4]
 8006234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006238:	4322      	orrs	r2, r4
 800623a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800623c:	06dc      	lsls	r4, r3, #27
 800623e:	d506      	bpl.n	800624e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006240:	6801      	ldr	r1, [r0, #0]
 8006242:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006244:	688a      	ldr	r2, [r1, #8]
 8006246:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800624a:	4322      	orrs	r2, r4
 800624c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624e:	0699      	lsls	r1, r3, #26
 8006250:	d506      	bpl.n	8006260 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006252:	6801      	ldr	r1, [r0, #0]
 8006254:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006256:	688a      	ldr	r2, [r1, #8]
 8006258:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800625c:	4322      	orrs	r2, r4
 800625e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006260:	065a      	lsls	r2, r3, #25
 8006262:	d50a      	bpl.n	800627a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006264:	6801      	ldr	r1, [r0, #0]
 8006266:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006268:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800626a:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800626e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006272:	ea42 0204 	orr.w	r2, r2, r4
 8006276:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006278:	d00b      	beq.n	8006292 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627a:	061b      	lsls	r3, r3, #24
 800627c:	d506      	bpl.n	800628c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800627e:	6802      	ldr	r2, [r0, #0]
 8006280:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006282:	6853      	ldr	r3, [r2, #4]
 8006284:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006288:	430b      	orrs	r3, r1
 800628a:	6053      	str	r3, [r2, #4]
}
 800628c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006290:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006292:	684a      	ldr	r2, [r1, #4]
 8006294:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006296:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800629a:	4322      	orrs	r2, r4
 800629c:	604a      	str	r2, [r1, #4]
 800629e:	e7ec      	b.n	800627a <UART_AdvFeatureConfig+0x8a>

080062a0 <UART_WaitOnFlagUntilTimeout>:
{
 80062a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062a8:	4607      	mov	r7, r0
 80062aa:	460e      	mov	r6, r1
 80062ac:	4615      	mov	r5, r2
 80062ae:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b0:	6804      	ldr	r4, [r0, #0]
 80062b2:	69e2      	ldr	r2, [r4, #28]
 80062b4:	ea36 0202 	bics.w	r2, r6, r2
 80062b8:	bf0c      	ite	eq
 80062ba:	2301      	moveq	r3, #1
 80062bc:	2300      	movne	r3, #0
 80062be:	42ab      	cmp	r3, r5
 80062c0:	d10a      	bne.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x38>
    if (Timeout != HAL_MAX_DELAY)
 80062c2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80062c6:	d10a      	bne.n	80062de <UART_WaitOnFlagUntilTimeout+0x3e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c8:	69e3      	ldr	r3, [r4, #28]
 80062ca:	ea36 0303 	bics.w	r3, r6, r3
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	d0f7      	beq.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x28>
  return HAL_OK;
 80062d8:	2000      	movs	r0, #0
}
 80062da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062de:	f7fc ff13 	bl	8003108 <HAL_GetTick>
 80062e2:	eba0 0009 	sub.w	r0, r0, r9
 80062e6:	4540      	cmp	r0, r8
 80062e8:	d833      	bhi.n	8006352 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062ea:	f1b8 0f00 	cmp.w	r8, #0
 80062ee:	d030      	beq.n	8006352 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062f0:	683c      	ldr	r4, [r7, #0]
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	4623      	mov	r3, r4
 80062f6:	0751      	lsls	r1, r2, #29
 80062f8:	d5db      	bpl.n	80062b2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062fa:	69e2      	ldr	r2, [r4, #28]
 80062fc:	0512      	lsls	r2, r2, #20
 80062fe:	d5d8      	bpl.n	80062b2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006300:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006304:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800630a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	e844 2100 	strex	r1, r2, [r4]
 8006312:	b139      	cbz	r1, 8006324 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	e853 2f00 	ldrex	r2, [r3]
 8006318:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	e843 2100 	strex	r1, r2, [r3]
 8006320:	2900      	cmp	r1, #0
 8006322:	d1f7      	bne.n	8006314 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	f103 0208 	add.w	r2, r3, #8
 8006328:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	f103 0008 	add.w	r0, r3, #8
 8006334:	e840 2100 	strex	r1, r2, [r0]
 8006338:	2900      	cmp	r1, #0
 800633a:	d1f3      	bne.n	8006324 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800633c:	2320      	movs	r3, #32
 800633e:	67fb      	str	r3, [r7, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8006348:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800634a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800634c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8006350:	e7c3      	b.n	80062da <UART_WaitOnFlagUntilTimeout+0x3a>
 8006352:	683b      	ldr	r3, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006358:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	e843 2100 	strex	r1, r2, [r3]
 8006360:	2900      	cmp	r1, #0
 8006362:	d1f7      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	f103 0208 	add.w	r2, r3, #8
 8006368:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	f103 0008 	add.w	r0, r3, #8
 8006374:	e840 2100 	strex	r1, r2, [r0]
 8006378:	2900      	cmp	r1, #0
 800637a:	d1f3      	bne.n	8006364 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800637c:	2320      	movs	r3, #32
 800637e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 8006384:	e7e0      	b.n	8006348 <UART_WaitOnFlagUntilTimeout+0xa8>
 8006386:	bf00      	nop

08006388 <UART_CheckIdleState>:
{
 8006388:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638a:	2500      	movs	r5, #0
{
 800638c:	4604      	mov	r4, r0
 800638e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006390:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8006394:	f7fc feb8 	bl	8003108 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	071b      	lsls	r3, r3, #28
 800639e:	d40b      	bmi.n	80063b8 <UART_CheckIdleState+0x30>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80063a2:	2220      	movs	r2, #32
  return HAL_OK;
 80063a4:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80063a6:	67e2      	str	r2, [r4, #124]	@ 0x7c
  __HAL_UNLOCK(huart);
 80063a8:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063ac:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b2:	6663      	str	r3, [r4, #100]	@ 0x64
}
 80063b4:	b002      	add	sp, #8
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b8:	f06f 467e 	mvn.w	r6, #4261412864	@ 0xfe000000
 80063bc:	4603      	mov	r3, r0
 80063be:	462a      	mov	r2, r5
 80063c0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063c4:	4620      	mov	r0, r4
 80063c6:	9600      	str	r6, [sp, #0]
 80063c8:	f7ff ff6a 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d0e7      	beq.n	80063a0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80063d0:	2003      	movs	r0, #3
 80063d2:	e7ef      	b.n	80063b4 <UART_CheckIdleState+0x2c>

080063d4 <HAL_UART_Init>:
  if (huart == NULL)
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d048      	beq.n	800646a <HAL_UART_Init+0x96>
{
 80063d8:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80063da:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80063dc:	4604      	mov	r4, r0
 80063de:	b9cb      	cbnz	r3, 8006414 <HAL_UART_Init+0x40>
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80063e0:	4a23      	ldr	r2, [pc, #140]	@ (8006470 <HAL_UART_Init+0x9c>)
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80063e2:	4824      	ldr	r0, [pc, #144]	@ (8006474 <HAL_UART_Init+0xa0>)
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80063e4:	4d24      	ldr	r5, [pc, #144]	@ (8006478 <HAL_UART_Init+0xa4>)
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80063e6:	4925      	ldr	r1, [pc, #148]	@ (800647c <HAL_UART_Init+0xa8>)
    huart->Lock = HAL_UNLOCKED;
 80063e8:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80063ec:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80063f0:	4b23      	ldr	r3, [pc, #140]	@ (8006480 <HAL_UART_Init+0xac>)
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80063f2:	4a24      	ldr	r2, [pc, #144]	@ (8006484 <HAL_UART_Init+0xb0>)
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80063f4:	e9c4 5023 	strd	r5, r0, [r4, #140]	@ 0x8c
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80063f8:	4823      	ldr	r0, [pc, #140]	@ (8006488 <HAL_UART_Init+0xb4>)
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80063fa:	e9c4 1225 	strd	r1, r2, [r4, #148]	@ 0x94
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80063fe:	e9c4 0327 	strd	r0, r3, [r4, #156]	@ 0x9c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006402:	4922      	ldr	r1, [pc, #136]	@ (800648c <HAL_UART_Init+0xb8>)
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006404:	4a22      	ldr	r2, [pc, #136]	@ (8006490 <HAL_UART_Init+0xbc>)
    if (huart->MspInitCallback == NULL)
 8006406:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800640a:	e9c4 1229 	strd	r1, r2, [r4, #164]	@ 0xa4
    if (huart->MspInitCallback == NULL)
 800640e:	b33b      	cbz	r3, 8006460 <HAL_UART_Init+0x8c>
    huart->MspInitCallback(huart);
 8006410:	4620      	mov	r0, r4
 8006412:	4798      	blx	r3
  __HAL_UART_DISABLE(huart);
 8006414:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006416:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006418:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800641a:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800641c:	6813      	ldr	r3, [r2, #0]
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006424:	f7ff fdb2 	bl	8005f8c <UART_SetConfig>
 8006428:	2801      	cmp	r0, #1
 800642a:	d017      	beq.n	800645c <HAL_UART_Init+0x88>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800642c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800642e:	b98b      	cbnz	r3, 8006454 <HAL_UART_Init+0x80>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006430:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006432:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800643a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006442:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
}
 800644c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8006450:	f7ff bf9a 	b.w	8006388 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8006454:	4620      	mov	r0, r4
 8006456:	f7ff fecb 	bl	80061f0 <UART_AdvFeatureConfig>
 800645a:	e7e9      	b.n	8006430 <HAL_UART_Init+0x5c>
}
 800645c:	2001      	movs	r0, #1
 800645e:	bd38      	pop	{r3, r4, r5, pc}
      huart->MspInitCallback = HAL_UART_MspInit;
 8006460:	4a0c      	ldr	r2, [pc, #48]	@ (8006494 <HAL_UART_Init+0xc0>)
 8006462:	4613      	mov	r3, r2
 8006464:	f8c4 20ac 	str.w	r2, [r4, #172]	@ 0xac
 8006468:	e7d2      	b.n	8006410 <HAL_UART_Init+0x3c>
}
 800646a:	2001      	movs	r0, #1
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	08005bd9 	.word	0x08005bd9
 8006474:	08005be1 	.word	0x08005be1
 8006478:	08005bd5 	.word	0x08005bd5
 800647c:	08005bdd 	.word	0x08005bdd
 8006480:	08005bed 	.word	0x08005bed
 8006484:	08005be5 	.word	0x08005be5
 8006488:	08005be9 	.word	0x08005be9
 800648c:	08005bd1 	.word	0x08005bd1
 8006490:	0800595d 	.word	0x0800595d
 8006494:	08002e2d 	.word	0x08002e2d

08006498 <UART_Start_Receive_IT>:
{
 8006498:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 800649a:	6884      	ldr	r4, [r0, #8]
  huart->RxISR       = NULL;
 800649c:	2300      	movs	r3, #0
  huart->pRxBuffPtr  = pData;
 800649e:	6541      	str	r1, [r0, #84]	@ 0x54
  UART_MASK_COMPUTATION(huart);
 80064a0:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
  huart->RxXferSize  = Size;
 80064a4:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->RxXferCount = Size;
 80064a8:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80064ac:	6683      	str	r3, [r0, #104]	@ 0x68
  UART_MASK_COMPUTATION(huart);
 80064ae:	d04b      	beq.n	8006548 <UART_Start_Receive_IT+0xb0>
 80064b0:	bb6c      	cbnz	r4, 800650e <UART_Start_Receive_IT+0x76>
 80064b2:	6903      	ldr	r3, [r0, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf0c      	ite	eq
 80064b8:	23ff      	moveq	r3, #255	@ 0xff
 80064ba:	237f      	movne	r3, #127	@ 0x7f
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064bc:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064be:	2122      	movs	r1, #34	@ 0x22
 80064c0:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c2:	f8c0 4084 	str.w	r4, [r0, #132]	@ 0x84
  UART_MASK_COMPUTATION(huart);
 80064c6:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064ca:	f8c0 1080 	str.w	r1, [r0, #128]	@ 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ce:	f102 0308 	add.w	r3, r2, #8
 80064d2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	f102 0408 	add.w	r4, r2, #8
 80064de:	e844 3100 	strex	r1, r3, [r4]
 80064e2:	2900      	cmp	r1, #0
 80064e4:	d1f3      	bne.n	80064ce <UART_Start_Receive_IT+0x36>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e6:	6883      	ldr	r3, [r0, #8]
 80064e8:	6901      	ldr	r1, [r0, #16]
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ee:	d017      	beq.n	8006520 <UART_Start_Receive_IT+0x88>
 80064f0:	4b1a      	ldr	r3, [pc, #104]	@ (800655c <UART_Start_Receive_IT+0xc4>)
 80064f2:	6683      	str	r3, [r0, #104]	@ 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 80064f4:	b1b9      	cbz	r1, 8006526 <UART_Start_Receive_IT+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80064fa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	e842 3100 	strex	r1, r3, [r2]
 8006502:	2900      	cmp	r1, #0
 8006504:	d1f7      	bne.n	80064f6 <UART_Start_Receive_IT+0x5e>
}
 8006506:	2000      	movs	r0, #0
 8006508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800650c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800650e:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8006512:	d1d3      	bne.n	80064bc <UART_Start_Receive_IT+0x24>
 8006514:	6903      	ldr	r3, [r0, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf0c      	ite	eq
 800651a:	237f      	moveq	r3, #127	@ 0x7f
 800651c:	233f      	movne	r3, #63	@ 0x3f
 800651e:	e7cd      	b.n	80064bc <UART_Start_Receive_IT+0x24>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006520:	b9c9      	cbnz	r1, 8006556 <UART_Start_Receive_IT+0xbe>
 8006522:	4b0f      	ldr	r3, [pc, #60]	@ (8006560 <UART_Start_Receive_IT+0xc8>)
 8006524:	6683      	str	r3, [r0, #104]	@ 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800652a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	e842 3100 	strex	r1, r3, [r2]
 8006532:	2900      	cmp	r1, #0
 8006534:	d0e7      	beq.n	8006506 <UART_Start_Receive_IT+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	e852 3f00 	ldrex	r3, [r2]
 800653a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	e842 3100 	strex	r1, r3, [r2]
 8006542:	2900      	cmp	r1, #0
 8006544:	d1ef      	bne.n	8006526 <UART_Start_Receive_IT+0x8e>
 8006546:	e7de      	b.n	8006506 <UART_Start_Receive_IT+0x6e>
  UART_MASK_COMPUTATION(huart);
 8006548:	6902      	ldr	r2, [r0, #16]
 800654a:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800654e:	2a00      	cmp	r2, #0
 8006550:	bf18      	it	ne
 8006552:	23ff      	movne	r3, #255	@ 0xff
 8006554:	e7b2      	b.n	80064bc <UART_Start_Receive_IT+0x24>
 8006556:	4b01      	ldr	r3, [pc, #4]	@ (800655c <UART_Start_Receive_IT+0xc4>)
 8006558:	6683      	str	r3, [r0, #104]	@ 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 800655a:	e7cc      	b.n	80064f6 <UART_Start_Receive_IT+0x5e>
 800655c:	08005a81 	.word	0x08005a81
 8006560:	08005b25 	.word	0x08005b25

08006564 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006564:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8006568:	2b20      	cmp	r3, #32
 800656a:	d117      	bne.n	800659c <HAL_UART_Receive_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 800656c:	b1a1      	cbz	r1, 8006598 <HAL_UART_Receive_IT+0x34>
 800656e:	fab2 f382 	clz	r3, r2
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	b182      	cbz	r2, 8006598 <HAL_UART_Receive_IT+0x34>
{
 8006576:	b430      	push	{r4, r5}
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006578:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657a:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800657c:	6863      	ldr	r3, [r4, #4]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	d507      	bpl.n	8006592 <HAL_UART_Receive_IT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006586:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	e844 3500 	strex	r5, r3, [r4]
 800658e:	2d00      	cmp	r5, #0
 8006590:	d1f7      	bne.n	8006582 <HAL_UART_Receive_IT+0x1e>
}
 8006592:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006594:	f7ff bf80 	b.w	8006498 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8006598:	2001      	movs	r0, #1
}
 800659a:	4770      	bx	lr
    return HAL_BUSY;
 800659c:	2002      	movs	r0, #2
 800659e:	4770      	bx	lr

080065a0 <__cvt>:
 80065a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065a4:	ec57 6b10 	vmov	r6, r7, d0
 80065a8:	2f00      	cmp	r7, #0
 80065aa:	460c      	mov	r4, r1
 80065ac:	4619      	mov	r1, r3
 80065ae:	463b      	mov	r3, r7
 80065b0:	bfbb      	ittet	lt
 80065b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80065b6:	461f      	movlt	r7, r3
 80065b8:	2300      	movge	r3, #0
 80065ba:	232d      	movlt	r3, #45	@ 0x2d
 80065bc:	700b      	strb	r3, [r1, #0]
 80065be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065c4:	4691      	mov	r9, r2
 80065c6:	f023 0820 	bic.w	r8, r3, #32
 80065ca:	bfbc      	itt	lt
 80065cc:	4632      	movlt	r2, r6
 80065ce:	4616      	movlt	r6, r2
 80065d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065d4:	d005      	beq.n	80065e2 <__cvt+0x42>
 80065d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065da:	d100      	bne.n	80065de <__cvt+0x3e>
 80065dc:	3401      	adds	r4, #1
 80065de:	2102      	movs	r1, #2
 80065e0:	e000      	b.n	80065e4 <__cvt+0x44>
 80065e2:	2103      	movs	r1, #3
 80065e4:	ab03      	add	r3, sp, #12
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	ab02      	add	r3, sp, #8
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	ec47 6b10 	vmov	d0, r6, r7
 80065f0:	4653      	mov	r3, sl
 80065f2:	4622      	mov	r2, r4
 80065f4:	f000 fe5c 	bl	80072b0 <_dtoa_r>
 80065f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065fc:	4605      	mov	r5, r0
 80065fe:	d119      	bne.n	8006634 <__cvt+0x94>
 8006600:	f019 0f01 	tst.w	r9, #1
 8006604:	d00e      	beq.n	8006624 <__cvt+0x84>
 8006606:	eb00 0904 	add.w	r9, r0, r4
 800660a:	2200      	movs	r2, #0
 800660c:	2300      	movs	r3, #0
 800660e:	4630      	mov	r0, r6
 8006610:	4639      	mov	r1, r7
 8006612:	f7fa fa79 	bl	8000b08 <__aeabi_dcmpeq>
 8006616:	b108      	cbz	r0, 800661c <__cvt+0x7c>
 8006618:	f8cd 900c 	str.w	r9, [sp, #12]
 800661c:	2230      	movs	r2, #48	@ 0x30
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	454b      	cmp	r3, r9
 8006622:	d31e      	bcc.n	8006662 <__cvt+0xc2>
 8006624:	9b03      	ldr	r3, [sp, #12]
 8006626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006628:	1b5b      	subs	r3, r3, r5
 800662a:	4628      	mov	r0, r5
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	b004      	add	sp, #16
 8006630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006634:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006638:	eb00 0904 	add.w	r9, r0, r4
 800663c:	d1e5      	bne.n	800660a <__cvt+0x6a>
 800663e:	7803      	ldrb	r3, [r0, #0]
 8006640:	2b30      	cmp	r3, #48	@ 0x30
 8006642:	d10a      	bne.n	800665a <__cvt+0xba>
 8006644:	2200      	movs	r2, #0
 8006646:	2300      	movs	r3, #0
 8006648:	4630      	mov	r0, r6
 800664a:	4639      	mov	r1, r7
 800664c:	f7fa fa5c 	bl	8000b08 <__aeabi_dcmpeq>
 8006650:	b918      	cbnz	r0, 800665a <__cvt+0xba>
 8006652:	f1c4 0401 	rsb	r4, r4, #1
 8006656:	f8ca 4000 	str.w	r4, [sl]
 800665a:	f8da 3000 	ldr.w	r3, [sl]
 800665e:	4499      	add	r9, r3
 8006660:	e7d3      	b.n	800660a <__cvt+0x6a>
 8006662:	1c59      	adds	r1, r3, #1
 8006664:	9103      	str	r1, [sp, #12]
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	e7d9      	b.n	800661e <__cvt+0x7e>

0800666a <__exponent>:
 800666a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800666c:	2900      	cmp	r1, #0
 800666e:	bfba      	itte	lt
 8006670:	4249      	neglt	r1, r1
 8006672:	232d      	movlt	r3, #45	@ 0x2d
 8006674:	232b      	movge	r3, #43	@ 0x2b
 8006676:	2909      	cmp	r1, #9
 8006678:	7002      	strb	r2, [r0, #0]
 800667a:	7043      	strb	r3, [r0, #1]
 800667c:	dd29      	ble.n	80066d2 <__exponent+0x68>
 800667e:	f10d 0307 	add.w	r3, sp, #7
 8006682:	461d      	mov	r5, r3
 8006684:	270a      	movs	r7, #10
 8006686:	461a      	mov	r2, r3
 8006688:	fbb1 f6f7 	udiv	r6, r1, r7
 800668c:	fb07 1416 	mls	r4, r7, r6, r1
 8006690:	3430      	adds	r4, #48	@ 0x30
 8006692:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006696:	460c      	mov	r4, r1
 8006698:	2c63      	cmp	r4, #99	@ 0x63
 800669a:	f103 33ff 	add.w	r3, r3, #4294967295
 800669e:	4631      	mov	r1, r6
 80066a0:	dcf1      	bgt.n	8006686 <__exponent+0x1c>
 80066a2:	3130      	adds	r1, #48	@ 0x30
 80066a4:	1e94      	subs	r4, r2, #2
 80066a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066aa:	1c41      	adds	r1, r0, #1
 80066ac:	4623      	mov	r3, r4
 80066ae:	42ab      	cmp	r3, r5
 80066b0:	d30a      	bcc.n	80066c8 <__exponent+0x5e>
 80066b2:	f10d 0309 	add.w	r3, sp, #9
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	42ac      	cmp	r4, r5
 80066ba:	bf88      	it	hi
 80066bc:	2300      	movhi	r3, #0
 80066be:	3302      	adds	r3, #2
 80066c0:	4403      	add	r3, r0
 80066c2:	1a18      	subs	r0, r3, r0
 80066c4:	b003      	add	sp, #12
 80066c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066d0:	e7ed      	b.n	80066ae <__exponent+0x44>
 80066d2:	2330      	movs	r3, #48	@ 0x30
 80066d4:	3130      	adds	r1, #48	@ 0x30
 80066d6:	7083      	strb	r3, [r0, #2]
 80066d8:	70c1      	strb	r1, [r0, #3]
 80066da:	1d03      	adds	r3, r0, #4
 80066dc:	e7f1      	b.n	80066c2 <__exponent+0x58>
	...

080066e0 <_printf_float>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	b08d      	sub	sp, #52	@ 0x34
 80066e6:	460c      	mov	r4, r1
 80066e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066ec:	4616      	mov	r6, r2
 80066ee:	461f      	mov	r7, r3
 80066f0:	4605      	mov	r5, r0
 80066f2:	f000 fcdb 	bl	80070ac <_localeconv_r>
 80066f6:	6803      	ldr	r3, [r0, #0]
 80066f8:	9304      	str	r3, [sp, #16]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7f9 fdd8 	bl	80002b0 <strlen>
 8006700:	2300      	movs	r3, #0
 8006702:	930a      	str	r3, [sp, #40]	@ 0x28
 8006704:	f8d8 3000 	ldr.w	r3, [r8]
 8006708:	9005      	str	r0, [sp, #20]
 800670a:	3307      	adds	r3, #7
 800670c:	f023 0307 	bic.w	r3, r3, #7
 8006710:	f103 0208 	add.w	r2, r3, #8
 8006714:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006718:	f8d4 b000 	ldr.w	fp, [r4]
 800671c:	f8c8 2000 	str.w	r2, [r8]
 8006720:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006724:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006728:	9307      	str	r3, [sp, #28]
 800672a:	f8cd 8018 	str.w	r8, [sp, #24]
 800672e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006736:	4b9c      	ldr	r3, [pc, #624]	@ (80069a8 <_printf_float+0x2c8>)
 8006738:	f04f 32ff 	mov.w	r2, #4294967295
 800673c:	f7fa fa16 	bl	8000b6c <__aeabi_dcmpun>
 8006740:	bb70      	cbnz	r0, 80067a0 <_printf_float+0xc0>
 8006742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006746:	4b98      	ldr	r3, [pc, #608]	@ (80069a8 <_printf_float+0x2c8>)
 8006748:	f04f 32ff 	mov.w	r2, #4294967295
 800674c:	f7fa f9f0 	bl	8000b30 <__aeabi_dcmple>
 8006750:	bb30      	cbnz	r0, 80067a0 <_printf_float+0xc0>
 8006752:	2200      	movs	r2, #0
 8006754:	2300      	movs	r3, #0
 8006756:	4640      	mov	r0, r8
 8006758:	4649      	mov	r1, r9
 800675a:	f7fa f9df 	bl	8000b1c <__aeabi_dcmplt>
 800675e:	b110      	cbz	r0, 8006766 <_printf_float+0x86>
 8006760:	232d      	movs	r3, #45	@ 0x2d
 8006762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006766:	4a91      	ldr	r2, [pc, #580]	@ (80069ac <_printf_float+0x2cc>)
 8006768:	4b91      	ldr	r3, [pc, #580]	@ (80069b0 <_printf_float+0x2d0>)
 800676a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800676e:	bf8c      	ite	hi
 8006770:	4690      	movhi	r8, r2
 8006772:	4698      	movls	r8, r3
 8006774:	2303      	movs	r3, #3
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	f02b 0304 	bic.w	r3, fp, #4
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	f04f 0900 	mov.w	r9, #0
 8006782:	9700      	str	r7, [sp, #0]
 8006784:	4633      	mov	r3, r6
 8006786:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006788:	4621      	mov	r1, r4
 800678a:	4628      	mov	r0, r5
 800678c:	f000 f9d2 	bl	8006b34 <_printf_common>
 8006790:	3001      	adds	r0, #1
 8006792:	f040 808d 	bne.w	80068b0 <_printf_float+0x1d0>
 8006796:	f04f 30ff 	mov.w	r0, #4294967295
 800679a:	b00d      	add	sp, #52	@ 0x34
 800679c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	4640      	mov	r0, r8
 80067a6:	4649      	mov	r1, r9
 80067a8:	f7fa f9e0 	bl	8000b6c <__aeabi_dcmpun>
 80067ac:	b140      	cbz	r0, 80067c0 <_printf_float+0xe0>
 80067ae:	464b      	mov	r3, r9
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bfbc      	itt	lt
 80067b4:	232d      	movlt	r3, #45	@ 0x2d
 80067b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067ba:	4a7e      	ldr	r2, [pc, #504]	@ (80069b4 <_printf_float+0x2d4>)
 80067bc:	4b7e      	ldr	r3, [pc, #504]	@ (80069b8 <_printf_float+0x2d8>)
 80067be:	e7d4      	b.n	800676a <_printf_float+0x8a>
 80067c0:	6863      	ldr	r3, [r4, #4]
 80067c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067c6:	9206      	str	r2, [sp, #24]
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	d13b      	bne.n	8006844 <_printf_float+0x164>
 80067cc:	2306      	movs	r3, #6
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80067d4:	2300      	movs	r3, #0
 80067d6:	6022      	str	r2, [r4, #0]
 80067d8:	9303      	str	r3, [sp, #12]
 80067da:	ab0a      	add	r3, sp, #40	@ 0x28
 80067dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80067e0:	ab09      	add	r3, sp, #36	@ 0x24
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	6861      	ldr	r1, [r4, #4]
 80067e6:	ec49 8b10 	vmov	d0, r8, r9
 80067ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067ee:	4628      	mov	r0, r5
 80067f0:	f7ff fed6 	bl	80065a0 <__cvt>
 80067f4:	9b06      	ldr	r3, [sp, #24]
 80067f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067f8:	2b47      	cmp	r3, #71	@ 0x47
 80067fa:	4680      	mov	r8, r0
 80067fc:	d129      	bne.n	8006852 <_printf_float+0x172>
 80067fe:	1cc8      	adds	r0, r1, #3
 8006800:	db02      	blt.n	8006808 <_printf_float+0x128>
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	4299      	cmp	r1, r3
 8006806:	dd41      	ble.n	800688c <_printf_float+0x1ac>
 8006808:	f1aa 0a02 	sub.w	sl, sl, #2
 800680c:	fa5f fa8a 	uxtb.w	sl, sl
 8006810:	3901      	subs	r1, #1
 8006812:	4652      	mov	r2, sl
 8006814:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006818:	9109      	str	r1, [sp, #36]	@ 0x24
 800681a:	f7ff ff26 	bl	800666a <__exponent>
 800681e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006820:	1813      	adds	r3, r2, r0
 8006822:	2a01      	cmp	r2, #1
 8006824:	4681      	mov	r9, r0
 8006826:	6123      	str	r3, [r4, #16]
 8006828:	dc02      	bgt.n	8006830 <_printf_float+0x150>
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	07d2      	lsls	r2, r2, #31
 800682e:	d501      	bpl.n	8006834 <_printf_float+0x154>
 8006830:	3301      	adds	r3, #1
 8006832:	6123      	str	r3, [r4, #16]
 8006834:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0a2      	beq.n	8006782 <_printf_float+0xa2>
 800683c:	232d      	movs	r3, #45	@ 0x2d
 800683e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006842:	e79e      	b.n	8006782 <_printf_float+0xa2>
 8006844:	9a06      	ldr	r2, [sp, #24]
 8006846:	2a47      	cmp	r2, #71	@ 0x47
 8006848:	d1c2      	bne.n	80067d0 <_printf_float+0xf0>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1c0      	bne.n	80067d0 <_printf_float+0xf0>
 800684e:	2301      	movs	r3, #1
 8006850:	e7bd      	b.n	80067ce <_printf_float+0xee>
 8006852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006856:	d9db      	bls.n	8006810 <_printf_float+0x130>
 8006858:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800685c:	d118      	bne.n	8006890 <_printf_float+0x1b0>
 800685e:	2900      	cmp	r1, #0
 8006860:	6863      	ldr	r3, [r4, #4]
 8006862:	dd0b      	ble.n	800687c <_printf_float+0x19c>
 8006864:	6121      	str	r1, [r4, #16]
 8006866:	b913      	cbnz	r3, 800686e <_printf_float+0x18e>
 8006868:	6822      	ldr	r2, [r4, #0]
 800686a:	07d0      	lsls	r0, r2, #31
 800686c:	d502      	bpl.n	8006874 <_printf_float+0x194>
 800686e:	3301      	adds	r3, #1
 8006870:	440b      	add	r3, r1
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	e7db      	b.n	8006834 <_printf_float+0x154>
 800687c:	b913      	cbnz	r3, 8006884 <_printf_float+0x1a4>
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	07d2      	lsls	r2, r2, #31
 8006882:	d501      	bpl.n	8006888 <_printf_float+0x1a8>
 8006884:	3302      	adds	r3, #2
 8006886:	e7f4      	b.n	8006872 <_printf_float+0x192>
 8006888:	2301      	movs	r3, #1
 800688a:	e7f2      	b.n	8006872 <_printf_float+0x192>
 800688c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006892:	4299      	cmp	r1, r3
 8006894:	db05      	blt.n	80068a2 <_printf_float+0x1c2>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	6121      	str	r1, [r4, #16]
 800689a:	07d8      	lsls	r0, r3, #31
 800689c:	d5ea      	bpl.n	8006874 <_printf_float+0x194>
 800689e:	1c4b      	adds	r3, r1, #1
 80068a0:	e7e7      	b.n	8006872 <_printf_float+0x192>
 80068a2:	2900      	cmp	r1, #0
 80068a4:	bfd4      	ite	le
 80068a6:	f1c1 0202 	rsble	r2, r1, #2
 80068aa:	2201      	movgt	r2, #1
 80068ac:	4413      	add	r3, r2
 80068ae:	e7e0      	b.n	8006872 <_printf_float+0x192>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	055a      	lsls	r2, r3, #21
 80068b4:	d407      	bmi.n	80068c6 <_printf_float+0x1e6>
 80068b6:	6923      	ldr	r3, [r4, #16]
 80068b8:	4642      	mov	r2, r8
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	d12b      	bne.n	800691c <_printf_float+0x23c>
 80068c4:	e767      	b.n	8006796 <_printf_float+0xb6>
 80068c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068ca:	f240 80dd 	bls.w	8006a88 <_printf_float+0x3a8>
 80068ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068d2:	2200      	movs	r2, #0
 80068d4:	2300      	movs	r3, #0
 80068d6:	f7fa f917 	bl	8000b08 <__aeabi_dcmpeq>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d033      	beq.n	8006946 <_printf_float+0x266>
 80068de:	4a37      	ldr	r2, [pc, #220]	@ (80069bc <_printf_float+0x2dc>)
 80068e0:	2301      	movs	r3, #1
 80068e2:	4631      	mov	r1, r6
 80068e4:	4628      	mov	r0, r5
 80068e6:	47b8      	blx	r7
 80068e8:	3001      	adds	r0, #1
 80068ea:	f43f af54 	beq.w	8006796 <_printf_float+0xb6>
 80068ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068f2:	4543      	cmp	r3, r8
 80068f4:	db02      	blt.n	80068fc <_printf_float+0x21c>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	07d8      	lsls	r0, r3, #31
 80068fa:	d50f      	bpl.n	800691c <_printf_float+0x23c>
 80068fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f af45 	beq.w	8006796 <_printf_float+0xb6>
 800690c:	f04f 0900 	mov.w	r9, #0
 8006910:	f108 38ff 	add.w	r8, r8, #4294967295
 8006914:	f104 0a1a 	add.w	sl, r4, #26
 8006918:	45c8      	cmp	r8, r9
 800691a:	dc09      	bgt.n	8006930 <_printf_float+0x250>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	079b      	lsls	r3, r3, #30
 8006920:	f100 8103 	bmi.w	8006b2a <_printf_float+0x44a>
 8006924:	68e0      	ldr	r0, [r4, #12]
 8006926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006928:	4298      	cmp	r0, r3
 800692a:	bfb8      	it	lt
 800692c:	4618      	movlt	r0, r3
 800692e:	e734      	b.n	800679a <_printf_float+0xba>
 8006930:	2301      	movs	r3, #1
 8006932:	4652      	mov	r2, sl
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af2b 	beq.w	8006796 <_printf_float+0xb6>
 8006940:	f109 0901 	add.w	r9, r9, #1
 8006944:	e7e8      	b.n	8006918 <_printf_float+0x238>
 8006946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	dc39      	bgt.n	80069c0 <_printf_float+0x2e0>
 800694c:	4a1b      	ldr	r2, [pc, #108]	@ (80069bc <_printf_float+0x2dc>)
 800694e:	2301      	movs	r3, #1
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	f43f af1d 	beq.w	8006796 <_printf_float+0xb6>
 800695c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006960:	ea59 0303 	orrs.w	r3, r9, r3
 8006964:	d102      	bne.n	800696c <_printf_float+0x28c>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	07d9      	lsls	r1, r3, #31
 800696a:	d5d7      	bpl.n	800691c <_printf_float+0x23c>
 800696c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	f43f af0d 	beq.w	8006796 <_printf_float+0xb6>
 800697c:	f04f 0a00 	mov.w	sl, #0
 8006980:	f104 0b1a 	add.w	fp, r4, #26
 8006984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006986:	425b      	negs	r3, r3
 8006988:	4553      	cmp	r3, sl
 800698a:	dc01      	bgt.n	8006990 <_printf_float+0x2b0>
 800698c:	464b      	mov	r3, r9
 800698e:	e793      	b.n	80068b8 <_printf_float+0x1d8>
 8006990:	2301      	movs	r3, #1
 8006992:	465a      	mov	r2, fp
 8006994:	4631      	mov	r1, r6
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	f43f aefb 	beq.w	8006796 <_printf_float+0xb6>
 80069a0:	f10a 0a01 	add.w	sl, sl, #1
 80069a4:	e7ee      	b.n	8006984 <_printf_float+0x2a4>
 80069a6:	bf00      	nop
 80069a8:	7fefffff 	.word	0x7fefffff
 80069ac:	0800a354 	.word	0x0800a354
 80069b0:	0800a350 	.word	0x0800a350
 80069b4:	0800a35c 	.word	0x0800a35c
 80069b8:	0800a358 	.word	0x0800a358
 80069bc:	0800a360 	.word	0x0800a360
 80069c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069c6:	4553      	cmp	r3, sl
 80069c8:	bfa8      	it	ge
 80069ca:	4653      	movge	r3, sl
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	4699      	mov	r9, r3
 80069d0:	dc36      	bgt.n	8006a40 <_printf_float+0x360>
 80069d2:	f04f 0b00 	mov.w	fp, #0
 80069d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069da:	f104 021a 	add.w	r2, r4, #26
 80069de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069e0:	9306      	str	r3, [sp, #24]
 80069e2:	eba3 0309 	sub.w	r3, r3, r9
 80069e6:	455b      	cmp	r3, fp
 80069e8:	dc31      	bgt.n	8006a4e <_printf_float+0x36e>
 80069ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ec:	459a      	cmp	sl, r3
 80069ee:	dc3a      	bgt.n	8006a66 <_printf_float+0x386>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	07da      	lsls	r2, r3, #31
 80069f4:	d437      	bmi.n	8006a66 <_printf_float+0x386>
 80069f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f8:	ebaa 0903 	sub.w	r9, sl, r3
 80069fc:	9b06      	ldr	r3, [sp, #24]
 80069fe:	ebaa 0303 	sub.w	r3, sl, r3
 8006a02:	4599      	cmp	r9, r3
 8006a04:	bfa8      	it	ge
 8006a06:	4699      	movge	r9, r3
 8006a08:	f1b9 0f00 	cmp.w	r9, #0
 8006a0c:	dc33      	bgt.n	8006a76 <_printf_float+0x396>
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a16:	f104 0b1a 	add.w	fp, r4, #26
 8006a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006a20:	eba3 0309 	sub.w	r3, r3, r9
 8006a24:	4543      	cmp	r3, r8
 8006a26:	f77f af79 	ble.w	800691c <_printf_float+0x23c>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	465a      	mov	r2, fp
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	f43f aeae 	beq.w	8006796 <_printf_float+0xb6>
 8006a3a:	f108 0801 	add.w	r8, r8, #1
 8006a3e:	e7ec      	b.n	8006a1a <_printf_float+0x33a>
 8006a40:	4642      	mov	r2, r8
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d1c2      	bne.n	80069d2 <_printf_float+0x2f2>
 8006a4c:	e6a3      	b.n	8006796 <_printf_float+0xb6>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	9206      	str	r2, [sp, #24]
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f43f ae9c 	beq.w	8006796 <_printf_float+0xb6>
 8006a5e:	9a06      	ldr	r2, [sp, #24]
 8006a60:	f10b 0b01 	add.w	fp, fp, #1
 8006a64:	e7bb      	b.n	80069de <_printf_float+0x2fe>
 8006a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b8      	blx	r7
 8006a70:	3001      	adds	r0, #1
 8006a72:	d1c0      	bne.n	80069f6 <_printf_float+0x316>
 8006a74:	e68f      	b.n	8006796 <_printf_float+0xb6>
 8006a76:	9a06      	ldr	r2, [sp, #24]
 8006a78:	464b      	mov	r3, r9
 8006a7a:	4442      	add	r2, r8
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	d1c3      	bne.n	8006a0e <_printf_float+0x32e>
 8006a86:	e686      	b.n	8006796 <_printf_float+0xb6>
 8006a88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a8c:	f1ba 0f01 	cmp.w	sl, #1
 8006a90:	dc01      	bgt.n	8006a96 <_printf_float+0x3b6>
 8006a92:	07db      	lsls	r3, r3, #31
 8006a94:	d536      	bpl.n	8006b04 <_printf_float+0x424>
 8006a96:	2301      	movs	r3, #1
 8006a98:	4642      	mov	r2, r8
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f43f ae78 	beq.w	8006796 <_printf_float+0xb6>
 8006aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f ae70 	beq.w	8006796 <_printf_float+0xb6>
 8006ab6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aba:	2200      	movs	r2, #0
 8006abc:	2300      	movs	r3, #0
 8006abe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ac2:	f7fa f821 	bl	8000b08 <__aeabi_dcmpeq>
 8006ac6:	b9c0      	cbnz	r0, 8006afa <_printf_float+0x41a>
 8006ac8:	4653      	mov	r3, sl
 8006aca:	f108 0201 	add.w	r2, r8, #1
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d10c      	bne.n	8006af2 <_printf_float+0x412>
 8006ad8:	e65d      	b.n	8006796 <_printf_float+0xb6>
 8006ada:	2301      	movs	r3, #1
 8006adc:	465a      	mov	r2, fp
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	f43f ae56 	beq.w	8006796 <_printf_float+0xb6>
 8006aea:	f108 0801 	add.w	r8, r8, #1
 8006aee:	45d0      	cmp	r8, sl
 8006af0:	dbf3      	blt.n	8006ada <_printf_float+0x3fa>
 8006af2:	464b      	mov	r3, r9
 8006af4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006af8:	e6df      	b.n	80068ba <_printf_float+0x1da>
 8006afa:	f04f 0800 	mov.w	r8, #0
 8006afe:	f104 0b1a 	add.w	fp, r4, #26
 8006b02:	e7f4      	b.n	8006aee <_printf_float+0x40e>
 8006b04:	2301      	movs	r3, #1
 8006b06:	4642      	mov	r2, r8
 8006b08:	e7e1      	b.n	8006ace <_printf_float+0x3ee>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	464a      	mov	r2, r9
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b8      	blx	r7
 8006b14:	3001      	adds	r0, #1
 8006b16:	f43f ae3e 	beq.w	8006796 <_printf_float+0xb6>
 8006b1a:	f108 0801 	add.w	r8, r8, #1
 8006b1e:	68e3      	ldr	r3, [r4, #12]
 8006b20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b22:	1a5b      	subs	r3, r3, r1
 8006b24:	4543      	cmp	r3, r8
 8006b26:	dcf0      	bgt.n	8006b0a <_printf_float+0x42a>
 8006b28:	e6fc      	b.n	8006924 <_printf_float+0x244>
 8006b2a:	f04f 0800 	mov.w	r8, #0
 8006b2e:	f104 0919 	add.w	r9, r4, #25
 8006b32:	e7f4      	b.n	8006b1e <_printf_float+0x43e>

08006b34 <_printf_common>:
 8006b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	4616      	mov	r6, r2
 8006b3a:	4698      	mov	r8, r3
 8006b3c:	688a      	ldr	r2, [r1, #8]
 8006b3e:	690b      	ldr	r3, [r1, #16]
 8006b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b44:	4293      	cmp	r3, r2
 8006b46:	bfb8      	it	lt
 8006b48:	4613      	movlt	r3, r2
 8006b4a:	6033      	str	r3, [r6, #0]
 8006b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b50:	4607      	mov	r7, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	b10a      	cbz	r2, 8006b5a <_printf_common+0x26>
 8006b56:	3301      	adds	r3, #1
 8006b58:	6033      	str	r3, [r6, #0]
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	0699      	lsls	r1, r3, #26
 8006b5e:	bf42      	ittt	mi
 8006b60:	6833      	ldrmi	r3, [r6, #0]
 8006b62:	3302      	addmi	r3, #2
 8006b64:	6033      	strmi	r3, [r6, #0]
 8006b66:	6825      	ldr	r5, [r4, #0]
 8006b68:	f015 0506 	ands.w	r5, r5, #6
 8006b6c:	d106      	bne.n	8006b7c <_printf_common+0x48>
 8006b6e:	f104 0a19 	add.w	sl, r4, #25
 8006b72:	68e3      	ldr	r3, [r4, #12]
 8006b74:	6832      	ldr	r2, [r6, #0]
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	42ab      	cmp	r3, r5
 8006b7a:	dc26      	bgt.n	8006bca <_printf_common+0x96>
 8006b7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	3b00      	subs	r3, #0
 8006b84:	bf18      	it	ne
 8006b86:	2301      	movne	r3, #1
 8006b88:	0692      	lsls	r2, r2, #26
 8006b8a:	d42b      	bmi.n	8006be4 <_printf_common+0xb0>
 8006b8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b90:	4641      	mov	r1, r8
 8006b92:	4638      	mov	r0, r7
 8006b94:	47c8      	blx	r9
 8006b96:	3001      	adds	r0, #1
 8006b98:	d01e      	beq.n	8006bd8 <_printf_common+0xa4>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	6922      	ldr	r2, [r4, #16]
 8006b9e:	f003 0306 	and.w	r3, r3, #6
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	bf02      	ittt	eq
 8006ba6:	68e5      	ldreq	r5, [r4, #12]
 8006ba8:	6833      	ldreq	r3, [r6, #0]
 8006baa:	1aed      	subeq	r5, r5, r3
 8006bac:	68a3      	ldr	r3, [r4, #8]
 8006bae:	bf0c      	ite	eq
 8006bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bb4:	2500      	movne	r5, #0
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	bfc4      	itt	gt
 8006bba:	1a9b      	subgt	r3, r3, r2
 8006bbc:	18ed      	addgt	r5, r5, r3
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	341a      	adds	r4, #26
 8006bc2:	42b5      	cmp	r5, r6
 8006bc4:	d11a      	bne.n	8006bfc <_printf_common+0xc8>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	e008      	b.n	8006bdc <_printf_common+0xa8>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4652      	mov	r2, sl
 8006bce:	4641      	mov	r1, r8
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	47c8      	blx	r9
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d103      	bne.n	8006be0 <_printf_common+0xac>
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be0:	3501      	adds	r5, #1
 8006be2:	e7c6      	b.n	8006b72 <_printf_common+0x3e>
 8006be4:	18e1      	adds	r1, r4, r3
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	2030      	movs	r0, #48	@ 0x30
 8006bea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bee:	4422      	add	r2, r4
 8006bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	e7c7      	b.n	8006b8c <_printf_common+0x58>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4622      	mov	r2, r4
 8006c00:	4641      	mov	r1, r8
 8006c02:	4638      	mov	r0, r7
 8006c04:	47c8      	blx	r9
 8006c06:	3001      	adds	r0, #1
 8006c08:	d0e6      	beq.n	8006bd8 <_printf_common+0xa4>
 8006c0a:	3601      	adds	r6, #1
 8006c0c:	e7d9      	b.n	8006bc2 <_printf_common+0x8e>
	...

08006c10 <_printf_i>:
 8006c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	7e0f      	ldrb	r7, [r1, #24]
 8006c16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c18:	2f78      	cmp	r7, #120	@ 0x78
 8006c1a:	4691      	mov	r9, r2
 8006c1c:	4680      	mov	r8, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	469a      	mov	sl, r3
 8006c22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c26:	d807      	bhi.n	8006c38 <_printf_i+0x28>
 8006c28:	2f62      	cmp	r7, #98	@ 0x62
 8006c2a:	d80a      	bhi.n	8006c42 <_printf_i+0x32>
 8006c2c:	2f00      	cmp	r7, #0
 8006c2e:	f000 80d1 	beq.w	8006dd4 <_printf_i+0x1c4>
 8006c32:	2f58      	cmp	r7, #88	@ 0x58
 8006c34:	f000 80b8 	beq.w	8006da8 <_printf_i+0x198>
 8006c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c40:	e03a      	b.n	8006cb8 <_printf_i+0xa8>
 8006c42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c46:	2b15      	cmp	r3, #21
 8006c48:	d8f6      	bhi.n	8006c38 <_printf_i+0x28>
 8006c4a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c50 <_printf_i+0x40>)
 8006c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c50:	08006ca9 	.word	0x08006ca9
 8006c54:	08006cbd 	.word	0x08006cbd
 8006c58:	08006c39 	.word	0x08006c39
 8006c5c:	08006c39 	.word	0x08006c39
 8006c60:	08006c39 	.word	0x08006c39
 8006c64:	08006c39 	.word	0x08006c39
 8006c68:	08006cbd 	.word	0x08006cbd
 8006c6c:	08006c39 	.word	0x08006c39
 8006c70:	08006c39 	.word	0x08006c39
 8006c74:	08006c39 	.word	0x08006c39
 8006c78:	08006c39 	.word	0x08006c39
 8006c7c:	08006dbb 	.word	0x08006dbb
 8006c80:	08006ce7 	.word	0x08006ce7
 8006c84:	08006d75 	.word	0x08006d75
 8006c88:	08006c39 	.word	0x08006c39
 8006c8c:	08006c39 	.word	0x08006c39
 8006c90:	08006ddd 	.word	0x08006ddd
 8006c94:	08006c39 	.word	0x08006c39
 8006c98:	08006ce7 	.word	0x08006ce7
 8006c9c:	08006c39 	.word	0x08006c39
 8006ca0:	08006c39 	.word	0x08006c39
 8006ca4:	08006d7d 	.word	0x08006d7d
 8006ca8:	6833      	ldr	r3, [r6, #0]
 8006caa:	1d1a      	adds	r2, r3, #4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6032      	str	r2, [r6, #0]
 8006cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e09c      	b.n	8006df6 <_printf_i+0x1e6>
 8006cbc:	6833      	ldr	r3, [r6, #0]
 8006cbe:	6820      	ldr	r0, [r4, #0]
 8006cc0:	1d19      	adds	r1, r3, #4
 8006cc2:	6031      	str	r1, [r6, #0]
 8006cc4:	0606      	lsls	r6, r0, #24
 8006cc6:	d501      	bpl.n	8006ccc <_printf_i+0xbc>
 8006cc8:	681d      	ldr	r5, [r3, #0]
 8006cca:	e003      	b.n	8006cd4 <_printf_i+0xc4>
 8006ccc:	0645      	lsls	r5, r0, #25
 8006cce:	d5fb      	bpl.n	8006cc8 <_printf_i+0xb8>
 8006cd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	da03      	bge.n	8006ce0 <_printf_i+0xd0>
 8006cd8:	232d      	movs	r3, #45	@ 0x2d
 8006cda:	426d      	negs	r5, r5
 8006cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ce0:	4858      	ldr	r0, [pc, #352]	@ (8006e44 <_printf_i+0x234>)
 8006ce2:	230a      	movs	r3, #10
 8006ce4:	e011      	b.n	8006d0a <_printf_i+0xfa>
 8006ce6:	6821      	ldr	r1, [r4, #0]
 8006ce8:	6833      	ldr	r3, [r6, #0]
 8006cea:	0608      	lsls	r0, r1, #24
 8006cec:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cf0:	d402      	bmi.n	8006cf8 <_printf_i+0xe8>
 8006cf2:	0649      	lsls	r1, r1, #25
 8006cf4:	bf48      	it	mi
 8006cf6:	b2ad      	uxthmi	r5, r5
 8006cf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cfa:	4852      	ldr	r0, [pc, #328]	@ (8006e44 <_printf_i+0x234>)
 8006cfc:	6033      	str	r3, [r6, #0]
 8006cfe:	bf14      	ite	ne
 8006d00:	230a      	movne	r3, #10
 8006d02:	2308      	moveq	r3, #8
 8006d04:	2100      	movs	r1, #0
 8006d06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d0a:	6866      	ldr	r6, [r4, #4]
 8006d0c:	60a6      	str	r6, [r4, #8]
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	db05      	blt.n	8006d1e <_printf_i+0x10e>
 8006d12:	6821      	ldr	r1, [r4, #0]
 8006d14:	432e      	orrs	r6, r5
 8006d16:	f021 0104 	bic.w	r1, r1, #4
 8006d1a:	6021      	str	r1, [r4, #0]
 8006d1c:	d04b      	beq.n	8006db6 <_printf_i+0x1a6>
 8006d1e:	4616      	mov	r6, r2
 8006d20:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d24:	fb03 5711 	mls	r7, r3, r1, r5
 8006d28:	5dc7      	ldrb	r7, [r0, r7]
 8006d2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d2e:	462f      	mov	r7, r5
 8006d30:	42bb      	cmp	r3, r7
 8006d32:	460d      	mov	r5, r1
 8006d34:	d9f4      	bls.n	8006d20 <_printf_i+0x110>
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d10b      	bne.n	8006d52 <_printf_i+0x142>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	07df      	lsls	r7, r3, #31
 8006d3e:	d508      	bpl.n	8006d52 <_printf_i+0x142>
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	6861      	ldr	r1, [r4, #4]
 8006d44:	4299      	cmp	r1, r3
 8006d46:	bfde      	ittt	le
 8006d48:	2330      	movle	r3, #48	@ 0x30
 8006d4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d52:	1b92      	subs	r2, r2, r6
 8006d54:	6122      	str	r2, [r4, #16]
 8006d56:	f8cd a000 	str.w	sl, [sp]
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	aa03      	add	r2, sp, #12
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4640      	mov	r0, r8
 8006d62:	f7ff fee7 	bl	8006b34 <_printf_common>
 8006d66:	3001      	adds	r0, #1
 8006d68:	d14a      	bne.n	8006e00 <_printf_i+0x1f0>
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	b004      	add	sp, #16
 8006d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	f043 0320 	orr.w	r3, r3, #32
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	4832      	ldr	r0, [pc, #200]	@ (8006e48 <_printf_i+0x238>)
 8006d7e:	2778      	movs	r7, #120	@ 0x78
 8006d80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	6831      	ldr	r1, [r6, #0]
 8006d88:	061f      	lsls	r7, r3, #24
 8006d8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d8e:	d402      	bmi.n	8006d96 <_printf_i+0x186>
 8006d90:	065f      	lsls	r7, r3, #25
 8006d92:	bf48      	it	mi
 8006d94:	b2ad      	uxthmi	r5, r5
 8006d96:	6031      	str	r1, [r6, #0]
 8006d98:	07d9      	lsls	r1, r3, #31
 8006d9a:	bf44      	itt	mi
 8006d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8006da0:	6023      	strmi	r3, [r4, #0]
 8006da2:	b11d      	cbz	r5, 8006dac <_printf_i+0x19c>
 8006da4:	2310      	movs	r3, #16
 8006da6:	e7ad      	b.n	8006d04 <_printf_i+0xf4>
 8006da8:	4826      	ldr	r0, [pc, #152]	@ (8006e44 <_printf_i+0x234>)
 8006daa:	e7e9      	b.n	8006d80 <_printf_i+0x170>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	f023 0320 	bic.w	r3, r3, #32
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	e7f6      	b.n	8006da4 <_printf_i+0x194>
 8006db6:	4616      	mov	r6, r2
 8006db8:	e7bd      	b.n	8006d36 <_printf_i+0x126>
 8006dba:	6833      	ldr	r3, [r6, #0]
 8006dbc:	6825      	ldr	r5, [r4, #0]
 8006dbe:	6961      	ldr	r1, [r4, #20]
 8006dc0:	1d18      	adds	r0, r3, #4
 8006dc2:	6030      	str	r0, [r6, #0]
 8006dc4:	062e      	lsls	r6, r5, #24
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	d501      	bpl.n	8006dce <_printf_i+0x1be>
 8006dca:	6019      	str	r1, [r3, #0]
 8006dcc:	e002      	b.n	8006dd4 <_printf_i+0x1c4>
 8006dce:	0668      	lsls	r0, r5, #25
 8006dd0:	d5fb      	bpl.n	8006dca <_printf_i+0x1ba>
 8006dd2:	8019      	strh	r1, [r3, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	4616      	mov	r6, r2
 8006dda:	e7bc      	b.n	8006d56 <_printf_i+0x146>
 8006ddc:	6833      	ldr	r3, [r6, #0]
 8006dde:	1d1a      	adds	r2, r3, #4
 8006de0:	6032      	str	r2, [r6, #0]
 8006de2:	681e      	ldr	r6, [r3, #0]
 8006de4:	6862      	ldr	r2, [r4, #4]
 8006de6:	2100      	movs	r1, #0
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7f9 fa11 	bl	8000210 <memchr>
 8006dee:	b108      	cbz	r0, 8006df4 <_printf_i+0x1e4>
 8006df0:	1b80      	subs	r0, r0, r6
 8006df2:	6060      	str	r0, [r4, #4]
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	6123      	str	r3, [r4, #16]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dfe:	e7aa      	b.n	8006d56 <_printf_i+0x146>
 8006e00:	6923      	ldr	r3, [r4, #16]
 8006e02:	4632      	mov	r2, r6
 8006e04:	4649      	mov	r1, r9
 8006e06:	4640      	mov	r0, r8
 8006e08:	47d0      	blx	sl
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d0ad      	beq.n	8006d6a <_printf_i+0x15a>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	079b      	lsls	r3, r3, #30
 8006e12:	d413      	bmi.n	8006e3c <_printf_i+0x22c>
 8006e14:	68e0      	ldr	r0, [r4, #12]
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	4298      	cmp	r0, r3
 8006e1a:	bfb8      	it	lt
 8006e1c:	4618      	movlt	r0, r3
 8006e1e:	e7a6      	b.n	8006d6e <_printf_i+0x15e>
 8006e20:	2301      	movs	r3, #1
 8006e22:	4632      	mov	r2, r6
 8006e24:	4649      	mov	r1, r9
 8006e26:	4640      	mov	r0, r8
 8006e28:	47d0      	blx	sl
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d09d      	beq.n	8006d6a <_printf_i+0x15a>
 8006e2e:	3501      	adds	r5, #1
 8006e30:	68e3      	ldr	r3, [r4, #12]
 8006e32:	9903      	ldr	r1, [sp, #12]
 8006e34:	1a5b      	subs	r3, r3, r1
 8006e36:	42ab      	cmp	r3, r5
 8006e38:	dcf2      	bgt.n	8006e20 <_printf_i+0x210>
 8006e3a:	e7eb      	b.n	8006e14 <_printf_i+0x204>
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	f104 0619 	add.w	r6, r4, #25
 8006e42:	e7f5      	b.n	8006e30 <_printf_i+0x220>
 8006e44:	0800a362 	.word	0x0800a362
 8006e48:	0800a373 	.word	0x0800a373

08006e4c <std>:
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	4604      	mov	r4, r0
 8006e52:	e9c0 3300 	strd	r3, r3, [r0]
 8006e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e5a:	6083      	str	r3, [r0, #8]
 8006e5c:	8181      	strh	r1, [r0, #12]
 8006e5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e60:	81c2      	strh	r2, [r0, #14]
 8006e62:	6183      	str	r3, [r0, #24]
 8006e64:	4619      	mov	r1, r3
 8006e66:	2208      	movs	r2, #8
 8006e68:	305c      	adds	r0, #92	@ 0x5c
 8006e6a:	f000 f916 	bl	800709a <memset>
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <std+0x58>)
 8006e70:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea8 <std+0x5c>)
 8006e74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <std+0x60>)
 8006e78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <std+0x64>)
 8006e7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <std+0x68>)
 8006e80:	6224      	str	r4, [r4, #32]
 8006e82:	429c      	cmp	r4, r3
 8006e84:	d006      	beq.n	8006e94 <std+0x48>
 8006e86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e8a:	4294      	cmp	r4, r2
 8006e8c:	d002      	beq.n	8006e94 <std+0x48>
 8006e8e:	33d0      	adds	r3, #208	@ 0xd0
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d105      	bne.n	8006ea0 <std+0x54>
 8006e94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9c:	f000 b97a 	b.w	8007194 <__retarget_lock_init_recursive>
 8006ea0:	bd10      	pop	{r4, pc}
 8006ea2:	bf00      	nop
 8006ea4:	08007015 	.word	0x08007015
 8006ea8:	08007037 	.word	0x08007037
 8006eac:	0800706f 	.word	0x0800706f
 8006eb0:	08007093 	.word	0x08007093
 8006eb4:	200147f4 	.word	0x200147f4

08006eb8 <stdio_exit_handler>:
 8006eb8:	4a02      	ldr	r2, [pc, #8]	@ (8006ec4 <stdio_exit_handler+0xc>)
 8006eba:	4903      	ldr	r1, [pc, #12]	@ (8006ec8 <stdio_exit_handler+0x10>)
 8006ebc:	4803      	ldr	r0, [pc, #12]	@ (8006ecc <stdio_exit_handler+0x14>)
 8006ebe:	f000 b869 	b.w	8006f94 <_fwalk_sglue>
 8006ec2:	bf00      	nop
 8006ec4:	2000000c 	.word	0x2000000c
 8006ec8:	08008afd 	.word	0x08008afd
 8006ecc:	2000001c 	.word	0x2000001c

08006ed0 <cleanup_stdio>:
 8006ed0:	6841      	ldr	r1, [r0, #4]
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <cleanup_stdio+0x34>)
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	4604      	mov	r4, r0
 8006eda:	d001      	beq.n	8006ee0 <cleanup_stdio+0x10>
 8006edc:	f001 fe0e 	bl	8008afc <_fflush_r>
 8006ee0:	68a1      	ldr	r1, [r4, #8]
 8006ee2:	4b09      	ldr	r3, [pc, #36]	@ (8006f08 <cleanup_stdio+0x38>)
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	d002      	beq.n	8006eee <cleanup_stdio+0x1e>
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f001 fe07 	bl	8008afc <_fflush_r>
 8006eee:	68e1      	ldr	r1, [r4, #12]
 8006ef0:	4b06      	ldr	r3, [pc, #24]	@ (8006f0c <cleanup_stdio+0x3c>)
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	d004      	beq.n	8006f00 <cleanup_stdio+0x30>
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efc:	f001 bdfe 	b.w	8008afc <_fflush_r>
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	bf00      	nop
 8006f04:	200147f4 	.word	0x200147f4
 8006f08:	2001485c 	.word	0x2001485c
 8006f0c:	200148c4 	.word	0x200148c4

08006f10 <global_stdio_init.part.0>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4b0b      	ldr	r3, [pc, #44]	@ (8006f40 <global_stdio_init.part.0+0x30>)
 8006f14:	4c0b      	ldr	r4, [pc, #44]	@ (8006f44 <global_stdio_init.part.0+0x34>)
 8006f16:	4a0c      	ldr	r2, [pc, #48]	@ (8006f48 <global_stdio_init.part.0+0x38>)
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2104      	movs	r1, #4
 8006f20:	f7ff ff94 	bl	8006e4c <std>
 8006f24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f28:	2201      	movs	r2, #1
 8006f2a:	2109      	movs	r1, #9
 8006f2c:	f7ff ff8e 	bl	8006e4c <std>
 8006f30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f34:	2202      	movs	r2, #2
 8006f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f3a:	2112      	movs	r1, #18
 8006f3c:	f7ff bf86 	b.w	8006e4c <std>
 8006f40:	2001492c 	.word	0x2001492c
 8006f44:	200147f4 	.word	0x200147f4
 8006f48:	08006eb9 	.word	0x08006eb9

08006f4c <__sfp_lock_acquire>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	@ (8006f54 <__sfp_lock_acquire+0x8>)
 8006f4e:	f000 b922 	b.w	8007196 <__retarget_lock_acquire_recursive>
 8006f52:	bf00      	nop
 8006f54:	20014935 	.word	0x20014935

08006f58 <__sfp_lock_release>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__sfp_lock_release+0x8>)
 8006f5a:	f000 b91d 	b.w	8007198 <__retarget_lock_release_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20014935 	.word	0x20014935

08006f64 <__sinit>:
 8006f64:	b510      	push	{r4, lr}
 8006f66:	4604      	mov	r4, r0
 8006f68:	f7ff fff0 	bl	8006f4c <__sfp_lock_acquire>
 8006f6c:	6a23      	ldr	r3, [r4, #32]
 8006f6e:	b11b      	cbz	r3, 8006f78 <__sinit+0x14>
 8006f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f74:	f7ff bff0 	b.w	8006f58 <__sfp_lock_release>
 8006f78:	4b04      	ldr	r3, [pc, #16]	@ (8006f8c <__sinit+0x28>)
 8006f7a:	6223      	str	r3, [r4, #32]
 8006f7c:	4b04      	ldr	r3, [pc, #16]	@ (8006f90 <__sinit+0x2c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1f5      	bne.n	8006f70 <__sinit+0xc>
 8006f84:	f7ff ffc4 	bl	8006f10 <global_stdio_init.part.0>
 8006f88:	e7f2      	b.n	8006f70 <__sinit+0xc>
 8006f8a:	bf00      	nop
 8006f8c:	08006ed1 	.word	0x08006ed1
 8006f90:	2001492c 	.word	0x2001492c

08006f94 <_fwalk_sglue>:
 8006f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f98:	4607      	mov	r7, r0
 8006f9a:	4688      	mov	r8, r1
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fa4:	f1b9 0901 	subs.w	r9, r9, #1
 8006fa8:	d505      	bpl.n	8006fb6 <_fwalk_sglue+0x22>
 8006faa:	6824      	ldr	r4, [r4, #0]
 8006fac:	2c00      	cmp	r4, #0
 8006fae:	d1f7      	bne.n	8006fa0 <_fwalk_sglue+0xc>
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d907      	bls.n	8006fcc <_fwalk_sglue+0x38>
 8006fbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	d003      	beq.n	8006fcc <_fwalk_sglue+0x38>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	47c0      	blx	r8
 8006fca:	4306      	orrs	r6, r0
 8006fcc:	3568      	adds	r5, #104	@ 0x68
 8006fce:	e7e9      	b.n	8006fa4 <_fwalk_sglue+0x10>

08006fd0 <siprintf>:
 8006fd0:	b40e      	push	{r1, r2, r3}
 8006fd2:	b510      	push	{r4, lr}
 8006fd4:	b09d      	sub	sp, #116	@ 0x74
 8006fd6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006fd8:	9002      	str	r0, [sp, #8]
 8006fda:	9006      	str	r0, [sp, #24]
 8006fdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fe0:	480a      	ldr	r0, [pc, #40]	@ (800700c <siprintf+0x3c>)
 8006fe2:	9107      	str	r1, [sp, #28]
 8006fe4:	9104      	str	r1, [sp, #16]
 8006fe6:	490a      	ldr	r1, [pc, #40]	@ (8007010 <siprintf+0x40>)
 8006fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fec:	9105      	str	r1, [sp, #20]
 8006fee:	2400      	movs	r4, #0
 8006ff0:	a902      	add	r1, sp, #8
 8006ff2:	6800      	ldr	r0, [r0, #0]
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006ff8:	f001 fc00 	bl	80087fc <_svfiprintf_r>
 8006ffc:	9b02      	ldr	r3, [sp, #8]
 8006ffe:	701c      	strb	r4, [r3, #0]
 8007000:	b01d      	add	sp, #116	@ 0x74
 8007002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007006:	b003      	add	sp, #12
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20000018 	.word	0x20000018
 8007010:	ffff0208 	.word	0xffff0208

08007014 <__sread>:
 8007014:	b510      	push	{r4, lr}
 8007016:	460c      	mov	r4, r1
 8007018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701c:	f000 f86c 	bl	80070f8 <_read_r>
 8007020:	2800      	cmp	r0, #0
 8007022:	bfab      	itete	ge
 8007024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007026:	89a3      	ldrhlt	r3, [r4, #12]
 8007028:	181b      	addge	r3, r3, r0
 800702a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800702e:	bfac      	ite	ge
 8007030:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007032:	81a3      	strhlt	r3, [r4, #12]
 8007034:	bd10      	pop	{r4, pc}

08007036 <__swrite>:
 8007036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703a:	461f      	mov	r7, r3
 800703c:	898b      	ldrh	r3, [r1, #12]
 800703e:	05db      	lsls	r3, r3, #23
 8007040:	4605      	mov	r5, r0
 8007042:	460c      	mov	r4, r1
 8007044:	4616      	mov	r6, r2
 8007046:	d505      	bpl.n	8007054 <__swrite+0x1e>
 8007048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704c:	2302      	movs	r3, #2
 800704e:	2200      	movs	r2, #0
 8007050:	f000 f840 	bl	80070d4 <_lseek_r>
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800705a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800705e:	81a3      	strh	r3, [r4, #12]
 8007060:	4632      	mov	r2, r6
 8007062:	463b      	mov	r3, r7
 8007064:	4628      	mov	r0, r5
 8007066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800706a:	f000 b857 	b.w	800711c <_write_r>

0800706e <__sseek>:
 800706e:	b510      	push	{r4, lr}
 8007070:	460c      	mov	r4, r1
 8007072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007076:	f000 f82d 	bl	80070d4 <_lseek_r>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	bf15      	itete	ne
 8007080:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800708a:	81a3      	strheq	r3, [r4, #12]
 800708c:	bf18      	it	ne
 800708e:	81a3      	strhne	r3, [r4, #12]
 8007090:	bd10      	pop	{r4, pc}

08007092 <__sclose>:
 8007092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007096:	f000 b80d 	b.w	80070b4 <_close_r>

0800709a <memset>:
 800709a:	4402      	add	r2, r0
 800709c:	4603      	mov	r3, r0
 800709e:	4293      	cmp	r3, r2
 80070a0:	d100      	bne.n	80070a4 <memset+0xa>
 80070a2:	4770      	bx	lr
 80070a4:	f803 1b01 	strb.w	r1, [r3], #1
 80070a8:	e7f9      	b.n	800709e <memset+0x4>
	...

080070ac <_localeconv_r>:
 80070ac:	4800      	ldr	r0, [pc, #0]	@ (80070b0 <_localeconv_r+0x4>)
 80070ae:	4770      	bx	lr
 80070b0:	20000158 	.word	0x20000158

080070b4 <_close_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4d06      	ldr	r5, [pc, #24]	@ (80070d0 <_close_r+0x1c>)
 80070b8:	2300      	movs	r3, #0
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	602b      	str	r3, [r5, #0]
 80070c0:	f7fb ff82 	bl	8002fc8 <_close>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_close_r+0x1a>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_close_r+0x1a>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	20014930 	.word	0x20014930

080070d4 <_lseek_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4d07      	ldr	r5, [pc, #28]	@ (80070f4 <_lseek_r+0x20>)
 80070d8:	4604      	mov	r4, r0
 80070da:	4608      	mov	r0, r1
 80070dc:	4611      	mov	r1, r2
 80070de:	2200      	movs	r2, #0
 80070e0:	602a      	str	r2, [r5, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	f7fb ff7c 	bl	8002fe0 <_lseek>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_lseek_r+0x1e>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_lseek_r+0x1e>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	20014930 	.word	0x20014930

080070f8 <_read_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4d07      	ldr	r5, [pc, #28]	@ (8007118 <_read_r+0x20>)
 80070fc:	4604      	mov	r4, r0
 80070fe:	4608      	mov	r0, r1
 8007100:	4611      	mov	r1, r2
 8007102:	2200      	movs	r2, #0
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f7fb ff42 	bl	8002f90 <_read>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_read_r+0x1e>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_read_r+0x1e>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20014930 	.word	0x20014930

0800711c <_write_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	@ (800713c <_write_r+0x20>)
 8007120:	4604      	mov	r4, r0
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	2200      	movs	r2, #0
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7fb ff3e 	bl	8002fac <_write>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_write_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_write_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20014930 	.word	0x20014930

08007140 <__errno>:
 8007140:	4b01      	ldr	r3, [pc, #4]	@ (8007148 <__errno+0x8>)
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20000018 	.word	0x20000018

0800714c <__libc_init_array>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	4d0d      	ldr	r5, [pc, #52]	@ (8007184 <__libc_init_array+0x38>)
 8007150:	4c0d      	ldr	r4, [pc, #52]	@ (8007188 <__libc_init_array+0x3c>)
 8007152:	1b64      	subs	r4, r4, r5
 8007154:	10a4      	asrs	r4, r4, #2
 8007156:	2600      	movs	r6, #0
 8007158:	42a6      	cmp	r6, r4
 800715a:	d109      	bne.n	8007170 <__libc_init_array+0x24>
 800715c:	4d0b      	ldr	r5, [pc, #44]	@ (800718c <__libc_init_array+0x40>)
 800715e:	4c0c      	ldr	r4, [pc, #48]	@ (8007190 <__libc_init_array+0x44>)
 8007160:	f003 f88e 	bl	800a280 <_init>
 8007164:	1b64      	subs	r4, r4, r5
 8007166:	10a4      	asrs	r4, r4, #2
 8007168:	2600      	movs	r6, #0
 800716a:	42a6      	cmp	r6, r4
 800716c:	d105      	bne.n	800717a <__libc_init_array+0x2e>
 800716e:	bd70      	pop	{r4, r5, r6, pc}
 8007170:	f855 3b04 	ldr.w	r3, [r5], #4
 8007174:	4798      	blx	r3
 8007176:	3601      	adds	r6, #1
 8007178:	e7ee      	b.n	8007158 <__libc_init_array+0xc>
 800717a:	f855 3b04 	ldr.w	r3, [r5], #4
 800717e:	4798      	blx	r3
 8007180:	3601      	adds	r6, #1
 8007182:	e7f2      	b.n	800716a <__libc_init_array+0x1e>
 8007184:	0800a8a8 	.word	0x0800a8a8
 8007188:	0800a8a8 	.word	0x0800a8a8
 800718c:	0800a8a8 	.word	0x0800a8a8
 8007190:	0800a8ac 	.word	0x0800a8ac

08007194 <__retarget_lock_init_recursive>:
 8007194:	4770      	bx	lr

08007196 <__retarget_lock_acquire_recursive>:
 8007196:	4770      	bx	lr

08007198 <__retarget_lock_release_recursive>:
 8007198:	4770      	bx	lr

0800719a <quorem>:
 800719a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719e:	6903      	ldr	r3, [r0, #16]
 80071a0:	690c      	ldr	r4, [r1, #16]
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	4607      	mov	r7, r0
 80071a6:	db7e      	blt.n	80072a6 <quorem+0x10c>
 80071a8:	3c01      	subs	r4, #1
 80071aa:	f101 0814 	add.w	r8, r1, #20
 80071ae:	00a3      	lsls	r3, r4, #2
 80071b0:	f100 0514 	add.w	r5, r0, #20
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c4:	3301      	adds	r3, #1
 80071c6:	429a      	cmp	r2, r3
 80071c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80071d0:	d32e      	bcc.n	8007230 <quorem+0x96>
 80071d2:	f04f 0a00 	mov.w	sl, #0
 80071d6:	46c4      	mov	ip, r8
 80071d8:	46ae      	mov	lr, r5
 80071da:	46d3      	mov	fp, sl
 80071dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071e0:	b298      	uxth	r0, r3
 80071e2:	fb06 a000 	mla	r0, r6, r0, sl
 80071e6:	0c02      	lsrs	r2, r0, #16
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	fb06 2303 	mla	r3, r6, r3, r2
 80071ee:	f8de 2000 	ldr.w	r2, [lr]
 80071f2:	b280      	uxth	r0, r0
 80071f4:	b292      	uxth	r2, r2
 80071f6:	1a12      	subs	r2, r2, r0
 80071f8:	445a      	add	r2, fp
 80071fa:	f8de 0000 	ldr.w	r0, [lr]
 80071fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007202:	b29b      	uxth	r3, r3
 8007204:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007208:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800720c:	b292      	uxth	r2, r2
 800720e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007212:	45e1      	cmp	r9, ip
 8007214:	f84e 2b04 	str.w	r2, [lr], #4
 8007218:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800721c:	d2de      	bcs.n	80071dc <quorem+0x42>
 800721e:	9b00      	ldr	r3, [sp, #0]
 8007220:	58eb      	ldr	r3, [r5, r3]
 8007222:	b92b      	cbnz	r3, 8007230 <quorem+0x96>
 8007224:	9b01      	ldr	r3, [sp, #4]
 8007226:	3b04      	subs	r3, #4
 8007228:	429d      	cmp	r5, r3
 800722a:	461a      	mov	r2, r3
 800722c:	d32f      	bcc.n	800728e <quorem+0xf4>
 800722e:	613c      	str	r4, [r7, #16]
 8007230:	4638      	mov	r0, r7
 8007232:	f001 f97f 	bl	8008534 <__mcmp>
 8007236:	2800      	cmp	r0, #0
 8007238:	db25      	blt.n	8007286 <quorem+0xec>
 800723a:	4629      	mov	r1, r5
 800723c:	2000      	movs	r0, #0
 800723e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007242:	f8d1 c000 	ldr.w	ip, [r1]
 8007246:	fa1f fe82 	uxth.w	lr, r2
 800724a:	fa1f f38c 	uxth.w	r3, ip
 800724e:	eba3 030e 	sub.w	r3, r3, lr
 8007252:	4403      	add	r3, r0
 8007254:	0c12      	lsrs	r2, r2, #16
 8007256:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800725a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800725e:	b29b      	uxth	r3, r3
 8007260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007264:	45c1      	cmp	r9, r8
 8007266:	f841 3b04 	str.w	r3, [r1], #4
 800726a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800726e:	d2e6      	bcs.n	800723e <quorem+0xa4>
 8007270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007274:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007278:	b922      	cbnz	r2, 8007284 <quorem+0xea>
 800727a:	3b04      	subs	r3, #4
 800727c:	429d      	cmp	r5, r3
 800727e:	461a      	mov	r2, r3
 8007280:	d30b      	bcc.n	800729a <quorem+0x100>
 8007282:	613c      	str	r4, [r7, #16]
 8007284:	3601      	adds	r6, #1
 8007286:	4630      	mov	r0, r6
 8007288:	b003      	add	sp, #12
 800728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	3b04      	subs	r3, #4
 8007292:	2a00      	cmp	r2, #0
 8007294:	d1cb      	bne.n	800722e <quorem+0x94>
 8007296:	3c01      	subs	r4, #1
 8007298:	e7c6      	b.n	8007228 <quorem+0x8e>
 800729a:	6812      	ldr	r2, [r2, #0]
 800729c:	3b04      	subs	r3, #4
 800729e:	2a00      	cmp	r2, #0
 80072a0:	d1ef      	bne.n	8007282 <quorem+0xe8>
 80072a2:	3c01      	subs	r4, #1
 80072a4:	e7ea      	b.n	800727c <quorem+0xe2>
 80072a6:	2000      	movs	r0, #0
 80072a8:	e7ee      	b.n	8007288 <quorem+0xee>
 80072aa:	0000      	movs	r0, r0
 80072ac:	0000      	movs	r0, r0
	...

080072b0 <_dtoa_r>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	69c7      	ldr	r7, [r0, #28]
 80072b6:	b097      	sub	sp, #92	@ 0x5c
 80072b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80072bc:	ec55 4b10 	vmov	r4, r5, d0
 80072c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80072c2:	9107      	str	r1, [sp, #28]
 80072c4:	4681      	mov	r9, r0
 80072c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80072c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80072ca:	b97f      	cbnz	r7, 80072ec <_dtoa_r+0x3c>
 80072cc:	2010      	movs	r0, #16
 80072ce:	f000 fe09 	bl	8007ee4 <malloc>
 80072d2:	4602      	mov	r2, r0
 80072d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80072d8:	b920      	cbnz	r0, 80072e4 <_dtoa_r+0x34>
 80072da:	4ba9      	ldr	r3, [pc, #676]	@ (8007580 <_dtoa_r+0x2d0>)
 80072dc:	21ef      	movs	r1, #239	@ 0xef
 80072de:	48a9      	ldr	r0, [pc, #676]	@ (8007584 <_dtoa_r+0x2d4>)
 80072e0:	f001 fc6c 	bl	8008bbc <__assert_func>
 80072e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072e8:	6007      	str	r7, [r0, #0]
 80072ea:	60c7      	str	r7, [r0, #12]
 80072ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80072f0:	6819      	ldr	r1, [r3, #0]
 80072f2:	b159      	cbz	r1, 800730c <_dtoa_r+0x5c>
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	604a      	str	r2, [r1, #4]
 80072f8:	2301      	movs	r3, #1
 80072fa:	4093      	lsls	r3, r2
 80072fc:	608b      	str	r3, [r1, #8]
 80072fe:	4648      	mov	r0, r9
 8007300:	f000 fee6 	bl	80080d0 <_Bfree>
 8007304:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	1e2b      	subs	r3, r5, #0
 800730e:	bfb9      	ittee	lt
 8007310:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007314:	9305      	strlt	r3, [sp, #20]
 8007316:	2300      	movge	r3, #0
 8007318:	6033      	strge	r3, [r6, #0]
 800731a:	9f05      	ldr	r7, [sp, #20]
 800731c:	4b9a      	ldr	r3, [pc, #616]	@ (8007588 <_dtoa_r+0x2d8>)
 800731e:	bfbc      	itt	lt
 8007320:	2201      	movlt	r2, #1
 8007322:	6032      	strlt	r2, [r6, #0]
 8007324:	43bb      	bics	r3, r7
 8007326:	d112      	bne.n	800734e <_dtoa_r+0x9e>
 8007328:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800732a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007334:	4323      	orrs	r3, r4
 8007336:	f000 855a 	beq.w	8007dee <_dtoa_r+0xb3e>
 800733a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800733c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800759c <_dtoa_r+0x2ec>
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 855c 	beq.w	8007dfe <_dtoa_r+0xb4e>
 8007346:	f10a 0303 	add.w	r3, sl, #3
 800734a:	f000 bd56 	b.w	8007dfa <_dtoa_r+0xb4a>
 800734e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007352:	2200      	movs	r2, #0
 8007354:	ec51 0b17 	vmov	r0, r1, d7
 8007358:	2300      	movs	r3, #0
 800735a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800735e:	f7f9 fbd3 	bl	8000b08 <__aeabi_dcmpeq>
 8007362:	4680      	mov	r8, r0
 8007364:	b158      	cbz	r0, 800737e <_dtoa_r+0xce>
 8007366:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007368:	2301      	movs	r3, #1
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800736e:	b113      	cbz	r3, 8007376 <_dtoa_r+0xc6>
 8007370:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007372:	4b86      	ldr	r3, [pc, #536]	@ (800758c <_dtoa_r+0x2dc>)
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80075a0 <_dtoa_r+0x2f0>
 800737a:	f000 bd40 	b.w	8007dfe <_dtoa_r+0xb4e>
 800737e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007382:	aa14      	add	r2, sp, #80	@ 0x50
 8007384:	a915      	add	r1, sp, #84	@ 0x54
 8007386:	4648      	mov	r0, r9
 8007388:	f001 f984 	bl	8008694 <__d2b>
 800738c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007390:	9002      	str	r0, [sp, #8]
 8007392:	2e00      	cmp	r6, #0
 8007394:	d078      	beq.n	8007488 <_dtoa_r+0x1d8>
 8007396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007398:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800739c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073b0:	4619      	mov	r1, r3
 80073b2:	2200      	movs	r2, #0
 80073b4:	4b76      	ldr	r3, [pc, #472]	@ (8007590 <_dtoa_r+0x2e0>)
 80073b6:	f7f8 ff87 	bl	80002c8 <__aeabi_dsub>
 80073ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8007568 <_dtoa_r+0x2b8>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f7f9 f93a 	bl	8000638 <__aeabi_dmul>
 80073c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007570 <_dtoa_r+0x2c0>)
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f7f8 ff7f 	bl	80002cc <__adddf3>
 80073ce:	4604      	mov	r4, r0
 80073d0:	4630      	mov	r0, r6
 80073d2:	460d      	mov	r5, r1
 80073d4:	f7f9 f8c6 	bl	8000564 <__aeabi_i2d>
 80073d8:	a367      	add	r3, pc, #412	@ (adr r3, 8007578 <_dtoa_r+0x2c8>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f7f9 f92b 	bl	8000638 <__aeabi_dmul>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4620      	mov	r0, r4
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7f8 ff6f 	bl	80002cc <__adddf3>
 80073ee:	4604      	mov	r4, r0
 80073f0:	460d      	mov	r5, r1
 80073f2:	f7f9 fbd1 	bl	8000b98 <__aeabi_d2iz>
 80073f6:	2200      	movs	r2, #0
 80073f8:	4607      	mov	r7, r0
 80073fa:	2300      	movs	r3, #0
 80073fc:	4620      	mov	r0, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	f7f9 fb8c 	bl	8000b1c <__aeabi_dcmplt>
 8007404:	b140      	cbz	r0, 8007418 <_dtoa_r+0x168>
 8007406:	4638      	mov	r0, r7
 8007408:	f7f9 f8ac 	bl	8000564 <__aeabi_i2d>
 800740c:	4622      	mov	r2, r4
 800740e:	462b      	mov	r3, r5
 8007410:	f7f9 fb7a 	bl	8000b08 <__aeabi_dcmpeq>
 8007414:	b900      	cbnz	r0, 8007418 <_dtoa_r+0x168>
 8007416:	3f01      	subs	r7, #1
 8007418:	2f16      	cmp	r7, #22
 800741a:	d852      	bhi.n	80074c2 <_dtoa_r+0x212>
 800741c:	4b5d      	ldr	r3, [pc, #372]	@ (8007594 <_dtoa_r+0x2e4>)
 800741e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800742a:	f7f9 fb77 	bl	8000b1c <__aeabi_dcmplt>
 800742e:	2800      	cmp	r0, #0
 8007430:	d049      	beq.n	80074c6 <_dtoa_r+0x216>
 8007432:	3f01      	subs	r7, #1
 8007434:	2300      	movs	r3, #0
 8007436:	9310      	str	r3, [sp, #64]	@ 0x40
 8007438:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800743a:	1b9b      	subs	r3, r3, r6
 800743c:	1e5a      	subs	r2, r3, #1
 800743e:	bf45      	ittet	mi
 8007440:	f1c3 0301 	rsbmi	r3, r3, #1
 8007444:	9300      	strmi	r3, [sp, #0]
 8007446:	2300      	movpl	r3, #0
 8007448:	2300      	movmi	r3, #0
 800744a:	9206      	str	r2, [sp, #24]
 800744c:	bf54      	ite	pl
 800744e:	9300      	strpl	r3, [sp, #0]
 8007450:	9306      	strmi	r3, [sp, #24]
 8007452:	2f00      	cmp	r7, #0
 8007454:	db39      	blt.n	80074ca <_dtoa_r+0x21a>
 8007456:	9b06      	ldr	r3, [sp, #24]
 8007458:	970d      	str	r7, [sp, #52]	@ 0x34
 800745a:	443b      	add	r3, r7
 800745c:	9306      	str	r3, [sp, #24]
 800745e:	2300      	movs	r3, #0
 8007460:	9308      	str	r3, [sp, #32]
 8007462:	9b07      	ldr	r3, [sp, #28]
 8007464:	2b09      	cmp	r3, #9
 8007466:	d863      	bhi.n	8007530 <_dtoa_r+0x280>
 8007468:	2b05      	cmp	r3, #5
 800746a:	bfc4      	itt	gt
 800746c:	3b04      	subgt	r3, #4
 800746e:	9307      	strgt	r3, [sp, #28]
 8007470:	9b07      	ldr	r3, [sp, #28]
 8007472:	f1a3 0302 	sub.w	r3, r3, #2
 8007476:	bfcc      	ite	gt
 8007478:	2400      	movgt	r4, #0
 800747a:	2401      	movle	r4, #1
 800747c:	2b03      	cmp	r3, #3
 800747e:	d863      	bhi.n	8007548 <_dtoa_r+0x298>
 8007480:	e8df f003 	tbb	[pc, r3]
 8007484:	2b375452 	.word	0x2b375452
 8007488:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800748c:	441e      	add	r6, r3
 800748e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007492:	2b20      	cmp	r3, #32
 8007494:	bfc1      	itttt	gt
 8007496:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800749a:	409f      	lslgt	r7, r3
 800749c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074a4:	bfd6      	itet	le
 80074a6:	f1c3 0320 	rsble	r3, r3, #32
 80074aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80074ae:	fa04 f003 	lslle.w	r0, r4, r3
 80074b2:	f7f9 f847 	bl	8000544 <__aeabi_ui2d>
 80074b6:	2201      	movs	r2, #1
 80074b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074bc:	3e01      	subs	r6, #1
 80074be:	9212      	str	r2, [sp, #72]	@ 0x48
 80074c0:	e776      	b.n	80073b0 <_dtoa_r+0x100>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e7b7      	b.n	8007436 <_dtoa_r+0x186>
 80074c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80074c8:	e7b6      	b.n	8007438 <_dtoa_r+0x188>
 80074ca:	9b00      	ldr	r3, [sp, #0]
 80074cc:	1bdb      	subs	r3, r3, r7
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	427b      	negs	r3, r7
 80074d2:	9308      	str	r3, [sp, #32]
 80074d4:	2300      	movs	r3, #0
 80074d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80074d8:	e7c3      	b.n	8007462 <_dtoa_r+0x1b2>
 80074da:	2301      	movs	r3, #1
 80074dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074e0:	eb07 0b03 	add.w	fp, r7, r3
 80074e4:	f10b 0301 	add.w	r3, fp, #1
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	9303      	str	r3, [sp, #12]
 80074ec:	bfb8      	it	lt
 80074ee:	2301      	movlt	r3, #1
 80074f0:	e006      	b.n	8007500 <_dtoa_r+0x250>
 80074f2:	2301      	movs	r3, #1
 80074f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	dd28      	ble.n	800754e <_dtoa_r+0x29e>
 80074fc:	469b      	mov	fp, r3
 80074fe:	9303      	str	r3, [sp, #12]
 8007500:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007504:	2100      	movs	r1, #0
 8007506:	2204      	movs	r2, #4
 8007508:	f102 0514 	add.w	r5, r2, #20
 800750c:	429d      	cmp	r5, r3
 800750e:	d926      	bls.n	800755e <_dtoa_r+0x2ae>
 8007510:	6041      	str	r1, [r0, #4]
 8007512:	4648      	mov	r0, r9
 8007514:	f000 fd9c 	bl	8008050 <_Balloc>
 8007518:	4682      	mov	sl, r0
 800751a:	2800      	cmp	r0, #0
 800751c:	d142      	bne.n	80075a4 <_dtoa_r+0x2f4>
 800751e:	4b1e      	ldr	r3, [pc, #120]	@ (8007598 <_dtoa_r+0x2e8>)
 8007520:	4602      	mov	r2, r0
 8007522:	f240 11af 	movw	r1, #431	@ 0x1af
 8007526:	e6da      	b.n	80072de <_dtoa_r+0x2e>
 8007528:	2300      	movs	r3, #0
 800752a:	e7e3      	b.n	80074f4 <_dtoa_r+0x244>
 800752c:	2300      	movs	r3, #0
 800752e:	e7d5      	b.n	80074dc <_dtoa_r+0x22c>
 8007530:	2401      	movs	r4, #1
 8007532:	2300      	movs	r3, #0
 8007534:	9307      	str	r3, [sp, #28]
 8007536:	9409      	str	r4, [sp, #36]	@ 0x24
 8007538:	f04f 3bff 	mov.w	fp, #4294967295
 800753c:	2200      	movs	r2, #0
 800753e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007542:	2312      	movs	r3, #18
 8007544:	920c      	str	r2, [sp, #48]	@ 0x30
 8007546:	e7db      	b.n	8007500 <_dtoa_r+0x250>
 8007548:	2301      	movs	r3, #1
 800754a:	9309      	str	r3, [sp, #36]	@ 0x24
 800754c:	e7f4      	b.n	8007538 <_dtoa_r+0x288>
 800754e:	f04f 0b01 	mov.w	fp, #1
 8007552:	f8cd b00c 	str.w	fp, [sp, #12]
 8007556:	465b      	mov	r3, fp
 8007558:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800755c:	e7d0      	b.n	8007500 <_dtoa_r+0x250>
 800755e:	3101      	adds	r1, #1
 8007560:	0052      	lsls	r2, r2, #1
 8007562:	e7d1      	b.n	8007508 <_dtoa_r+0x258>
 8007564:	f3af 8000 	nop.w
 8007568:	636f4361 	.word	0x636f4361
 800756c:	3fd287a7 	.word	0x3fd287a7
 8007570:	8b60c8b3 	.word	0x8b60c8b3
 8007574:	3fc68a28 	.word	0x3fc68a28
 8007578:	509f79fb 	.word	0x509f79fb
 800757c:	3fd34413 	.word	0x3fd34413
 8007580:	0800a391 	.word	0x0800a391
 8007584:	0800a3a8 	.word	0x0800a3a8
 8007588:	7ff00000 	.word	0x7ff00000
 800758c:	0800a361 	.word	0x0800a361
 8007590:	3ff80000 	.word	0x3ff80000
 8007594:	0800a4f8 	.word	0x0800a4f8
 8007598:	0800a400 	.word	0x0800a400
 800759c:	0800a38d 	.word	0x0800a38d
 80075a0:	0800a360 	.word	0x0800a360
 80075a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80075a8:	6018      	str	r0, [r3, #0]
 80075aa:	9b03      	ldr	r3, [sp, #12]
 80075ac:	2b0e      	cmp	r3, #14
 80075ae:	f200 80a1 	bhi.w	80076f4 <_dtoa_r+0x444>
 80075b2:	2c00      	cmp	r4, #0
 80075b4:	f000 809e 	beq.w	80076f4 <_dtoa_r+0x444>
 80075b8:	2f00      	cmp	r7, #0
 80075ba:	dd33      	ble.n	8007624 <_dtoa_r+0x374>
 80075bc:	4b9c      	ldr	r3, [pc, #624]	@ (8007830 <_dtoa_r+0x580>)
 80075be:	f007 020f 	and.w	r2, r7, #15
 80075c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c6:	ed93 7b00 	vldr	d7, [r3]
 80075ca:	05f8      	lsls	r0, r7, #23
 80075cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80075d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075d4:	d516      	bpl.n	8007604 <_dtoa_r+0x354>
 80075d6:	4b97      	ldr	r3, [pc, #604]	@ (8007834 <_dtoa_r+0x584>)
 80075d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80075dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075e0:	f7f9 f954 	bl	800088c <__aeabi_ddiv>
 80075e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075e8:	f004 040f 	and.w	r4, r4, #15
 80075ec:	2603      	movs	r6, #3
 80075ee:	4d91      	ldr	r5, [pc, #580]	@ (8007834 <_dtoa_r+0x584>)
 80075f0:	b954      	cbnz	r4, 8007608 <_dtoa_r+0x358>
 80075f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075fa:	f7f9 f947 	bl	800088c <__aeabi_ddiv>
 80075fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007602:	e028      	b.n	8007656 <_dtoa_r+0x3a6>
 8007604:	2602      	movs	r6, #2
 8007606:	e7f2      	b.n	80075ee <_dtoa_r+0x33e>
 8007608:	07e1      	lsls	r1, r4, #31
 800760a:	d508      	bpl.n	800761e <_dtoa_r+0x36e>
 800760c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007610:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007614:	f7f9 f810 	bl	8000638 <__aeabi_dmul>
 8007618:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800761c:	3601      	adds	r6, #1
 800761e:	1064      	asrs	r4, r4, #1
 8007620:	3508      	adds	r5, #8
 8007622:	e7e5      	b.n	80075f0 <_dtoa_r+0x340>
 8007624:	f000 80af 	beq.w	8007786 <_dtoa_r+0x4d6>
 8007628:	427c      	negs	r4, r7
 800762a:	4b81      	ldr	r3, [pc, #516]	@ (8007830 <_dtoa_r+0x580>)
 800762c:	4d81      	ldr	r5, [pc, #516]	@ (8007834 <_dtoa_r+0x584>)
 800762e:	f004 020f 	and.w	r2, r4, #15
 8007632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800763e:	f7f8 fffb 	bl	8000638 <__aeabi_dmul>
 8007642:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007646:	1124      	asrs	r4, r4, #4
 8007648:	2300      	movs	r3, #0
 800764a:	2602      	movs	r6, #2
 800764c:	2c00      	cmp	r4, #0
 800764e:	f040 808f 	bne.w	8007770 <_dtoa_r+0x4c0>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1d3      	bne.n	80075fe <_dtoa_r+0x34e>
 8007656:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007658:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 8094 	beq.w	800778a <_dtoa_r+0x4da>
 8007662:	4b75      	ldr	r3, [pc, #468]	@ (8007838 <_dtoa_r+0x588>)
 8007664:	2200      	movs	r2, #0
 8007666:	4620      	mov	r0, r4
 8007668:	4629      	mov	r1, r5
 800766a:	f7f9 fa57 	bl	8000b1c <__aeabi_dcmplt>
 800766e:	2800      	cmp	r0, #0
 8007670:	f000 808b 	beq.w	800778a <_dtoa_r+0x4da>
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 8087 	beq.w	800778a <_dtoa_r+0x4da>
 800767c:	f1bb 0f00 	cmp.w	fp, #0
 8007680:	dd34      	ble.n	80076ec <_dtoa_r+0x43c>
 8007682:	4620      	mov	r0, r4
 8007684:	4b6d      	ldr	r3, [pc, #436]	@ (800783c <_dtoa_r+0x58c>)
 8007686:	2200      	movs	r2, #0
 8007688:	4629      	mov	r1, r5
 800768a:	f7f8 ffd5 	bl	8000638 <__aeabi_dmul>
 800768e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007692:	f107 38ff 	add.w	r8, r7, #4294967295
 8007696:	3601      	adds	r6, #1
 8007698:	465c      	mov	r4, fp
 800769a:	4630      	mov	r0, r6
 800769c:	f7f8 ff62 	bl	8000564 <__aeabi_i2d>
 80076a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a4:	f7f8 ffc8 	bl	8000638 <__aeabi_dmul>
 80076a8:	4b65      	ldr	r3, [pc, #404]	@ (8007840 <_dtoa_r+0x590>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	f7f8 fe0e 	bl	80002cc <__adddf3>
 80076b0:	4605      	mov	r5, r0
 80076b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076b6:	2c00      	cmp	r4, #0
 80076b8:	d16a      	bne.n	8007790 <_dtoa_r+0x4e0>
 80076ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076be:	4b61      	ldr	r3, [pc, #388]	@ (8007844 <_dtoa_r+0x594>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	f7f8 fe01 	bl	80002c8 <__aeabi_dsub>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076ce:	462a      	mov	r2, r5
 80076d0:	4633      	mov	r3, r6
 80076d2:	f7f9 fa41 	bl	8000b58 <__aeabi_dcmpgt>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f040 8298 	bne.w	8007c0c <_dtoa_r+0x95c>
 80076dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076e0:	462a      	mov	r2, r5
 80076e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076e6:	f7f9 fa19 	bl	8000b1c <__aeabi_dcmplt>
 80076ea:	bb38      	cbnz	r0, 800773c <_dtoa_r+0x48c>
 80076ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80076f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f2c0 8157 	blt.w	80079aa <_dtoa_r+0x6fa>
 80076fc:	2f0e      	cmp	r7, #14
 80076fe:	f300 8154 	bgt.w	80079aa <_dtoa_r+0x6fa>
 8007702:	4b4b      	ldr	r3, [pc, #300]	@ (8007830 <_dtoa_r+0x580>)
 8007704:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007708:	ed93 7b00 	vldr	d7, [r3]
 800770c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800770e:	2b00      	cmp	r3, #0
 8007710:	ed8d 7b00 	vstr	d7, [sp]
 8007714:	f280 80e5 	bge.w	80078e2 <_dtoa_r+0x632>
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f300 80e1 	bgt.w	80078e2 <_dtoa_r+0x632>
 8007720:	d10c      	bne.n	800773c <_dtoa_r+0x48c>
 8007722:	4b48      	ldr	r3, [pc, #288]	@ (8007844 <_dtoa_r+0x594>)
 8007724:	2200      	movs	r2, #0
 8007726:	ec51 0b17 	vmov	r0, r1, d7
 800772a:	f7f8 ff85 	bl	8000638 <__aeabi_dmul>
 800772e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007732:	f7f9 fa07 	bl	8000b44 <__aeabi_dcmpge>
 8007736:	2800      	cmp	r0, #0
 8007738:	f000 8266 	beq.w	8007c08 <_dtoa_r+0x958>
 800773c:	2400      	movs	r4, #0
 800773e:	4625      	mov	r5, r4
 8007740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007742:	4656      	mov	r6, sl
 8007744:	ea6f 0803 	mvn.w	r8, r3
 8007748:	2700      	movs	r7, #0
 800774a:	4621      	mov	r1, r4
 800774c:	4648      	mov	r0, r9
 800774e:	f000 fcbf 	bl	80080d0 <_Bfree>
 8007752:	2d00      	cmp	r5, #0
 8007754:	f000 80bd 	beq.w	80078d2 <_dtoa_r+0x622>
 8007758:	b12f      	cbz	r7, 8007766 <_dtoa_r+0x4b6>
 800775a:	42af      	cmp	r7, r5
 800775c:	d003      	beq.n	8007766 <_dtoa_r+0x4b6>
 800775e:	4639      	mov	r1, r7
 8007760:	4648      	mov	r0, r9
 8007762:	f000 fcb5 	bl	80080d0 <_Bfree>
 8007766:	4629      	mov	r1, r5
 8007768:	4648      	mov	r0, r9
 800776a:	f000 fcb1 	bl	80080d0 <_Bfree>
 800776e:	e0b0      	b.n	80078d2 <_dtoa_r+0x622>
 8007770:	07e2      	lsls	r2, r4, #31
 8007772:	d505      	bpl.n	8007780 <_dtoa_r+0x4d0>
 8007774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007778:	f7f8 ff5e 	bl	8000638 <__aeabi_dmul>
 800777c:	3601      	adds	r6, #1
 800777e:	2301      	movs	r3, #1
 8007780:	1064      	asrs	r4, r4, #1
 8007782:	3508      	adds	r5, #8
 8007784:	e762      	b.n	800764c <_dtoa_r+0x39c>
 8007786:	2602      	movs	r6, #2
 8007788:	e765      	b.n	8007656 <_dtoa_r+0x3a6>
 800778a:	9c03      	ldr	r4, [sp, #12]
 800778c:	46b8      	mov	r8, r7
 800778e:	e784      	b.n	800769a <_dtoa_r+0x3ea>
 8007790:	4b27      	ldr	r3, [pc, #156]	@ (8007830 <_dtoa_r+0x580>)
 8007792:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007794:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007798:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800779c:	4454      	add	r4, sl
 800779e:	2900      	cmp	r1, #0
 80077a0:	d054      	beq.n	800784c <_dtoa_r+0x59c>
 80077a2:	4929      	ldr	r1, [pc, #164]	@ (8007848 <_dtoa_r+0x598>)
 80077a4:	2000      	movs	r0, #0
 80077a6:	f7f9 f871 	bl	800088c <__aeabi_ddiv>
 80077aa:	4633      	mov	r3, r6
 80077ac:	462a      	mov	r2, r5
 80077ae:	f7f8 fd8b 	bl	80002c8 <__aeabi_dsub>
 80077b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077b6:	4656      	mov	r6, sl
 80077b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077bc:	f7f9 f9ec 	bl	8000b98 <__aeabi_d2iz>
 80077c0:	4605      	mov	r5, r0
 80077c2:	f7f8 fecf 	bl	8000564 <__aeabi_i2d>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ce:	f7f8 fd7b 	bl	80002c8 <__aeabi_dsub>
 80077d2:	3530      	adds	r5, #48	@ 0x30
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077dc:	f806 5b01 	strb.w	r5, [r6], #1
 80077e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077e4:	f7f9 f99a 	bl	8000b1c <__aeabi_dcmplt>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d172      	bne.n	80078d2 <_dtoa_r+0x622>
 80077ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077f0:	4911      	ldr	r1, [pc, #68]	@ (8007838 <_dtoa_r+0x588>)
 80077f2:	2000      	movs	r0, #0
 80077f4:	f7f8 fd68 	bl	80002c8 <__aeabi_dsub>
 80077f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077fc:	f7f9 f98e 	bl	8000b1c <__aeabi_dcmplt>
 8007800:	2800      	cmp	r0, #0
 8007802:	f040 80b4 	bne.w	800796e <_dtoa_r+0x6be>
 8007806:	42a6      	cmp	r6, r4
 8007808:	f43f af70 	beq.w	80076ec <_dtoa_r+0x43c>
 800780c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007810:	4b0a      	ldr	r3, [pc, #40]	@ (800783c <_dtoa_r+0x58c>)
 8007812:	2200      	movs	r2, #0
 8007814:	f7f8 ff10 	bl	8000638 <__aeabi_dmul>
 8007818:	4b08      	ldr	r3, [pc, #32]	@ (800783c <_dtoa_r+0x58c>)
 800781a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800781e:	2200      	movs	r2, #0
 8007820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007824:	f7f8 ff08 	bl	8000638 <__aeabi_dmul>
 8007828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800782c:	e7c4      	b.n	80077b8 <_dtoa_r+0x508>
 800782e:	bf00      	nop
 8007830:	0800a4f8 	.word	0x0800a4f8
 8007834:	0800a4d0 	.word	0x0800a4d0
 8007838:	3ff00000 	.word	0x3ff00000
 800783c:	40240000 	.word	0x40240000
 8007840:	401c0000 	.word	0x401c0000
 8007844:	40140000 	.word	0x40140000
 8007848:	3fe00000 	.word	0x3fe00000
 800784c:	4631      	mov	r1, r6
 800784e:	4628      	mov	r0, r5
 8007850:	f7f8 fef2 	bl	8000638 <__aeabi_dmul>
 8007854:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007858:	9413      	str	r4, [sp, #76]	@ 0x4c
 800785a:	4656      	mov	r6, sl
 800785c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007860:	f7f9 f99a 	bl	8000b98 <__aeabi_d2iz>
 8007864:	4605      	mov	r5, r0
 8007866:	f7f8 fe7d 	bl	8000564 <__aeabi_i2d>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007872:	f7f8 fd29 	bl	80002c8 <__aeabi_dsub>
 8007876:	3530      	adds	r5, #48	@ 0x30
 8007878:	f806 5b01 	strb.w	r5, [r6], #1
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	42a6      	cmp	r6, r4
 8007882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	d124      	bne.n	80078d6 <_dtoa_r+0x626>
 800788c:	4baf      	ldr	r3, [pc, #700]	@ (8007b4c <_dtoa_r+0x89c>)
 800788e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007892:	f7f8 fd1b 	bl	80002cc <__adddf3>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800789e:	f7f9 f95b 	bl	8000b58 <__aeabi_dcmpgt>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d163      	bne.n	800796e <_dtoa_r+0x6be>
 80078a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078aa:	49a8      	ldr	r1, [pc, #672]	@ (8007b4c <_dtoa_r+0x89c>)
 80078ac:	2000      	movs	r0, #0
 80078ae:	f7f8 fd0b 	bl	80002c8 <__aeabi_dsub>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078ba:	f7f9 f92f 	bl	8000b1c <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f43f af14 	beq.w	80076ec <_dtoa_r+0x43c>
 80078c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80078c6:	1e73      	subs	r3, r6, #1
 80078c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078ce:	2b30      	cmp	r3, #48	@ 0x30
 80078d0:	d0f8      	beq.n	80078c4 <_dtoa_r+0x614>
 80078d2:	4647      	mov	r7, r8
 80078d4:	e03b      	b.n	800794e <_dtoa_r+0x69e>
 80078d6:	4b9e      	ldr	r3, [pc, #632]	@ (8007b50 <_dtoa_r+0x8a0>)
 80078d8:	f7f8 feae 	bl	8000638 <__aeabi_dmul>
 80078dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078e0:	e7bc      	b.n	800785c <_dtoa_r+0x5ac>
 80078e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80078e6:	4656      	mov	r6, sl
 80078e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7f8 ffcc 	bl	800088c <__aeabi_ddiv>
 80078f4:	f7f9 f950 	bl	8000b98 <__aeabi_d2iz>
 80078f8:	4680      	mov	r8, r0
 80078fa:	f7f8 fe33 	bl	8000564 <__aeabi_i2d>
 80078fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007902:	f7f8 fe99 	bl	8000638 <__aeabi_dmul>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4620      	mov	r0, r4
 800790c:	4629      	mov	r1, r5
 800790e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007912:	f7f8 fcd9 	bl	80002c8 <__aeabi_dsub>
 8007916:	f806 4b01 	strb.w	r4, [r6], #1
 800791a:	9d03      	ldr	r5, [sp, #12]
 800791c:	eba6 040a 	sub.w	r4, r6, sl
 8007920:	42a5      	cmp	r5, r4
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	d133      	bne.n	8007990 <_dtoa_r+0x6e0>
 8007928:	f7f8 fcd0 	bl	80002cc <__adddf3>
 800792c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007930:	4604      	mov	r4, r0
 8007932:	460d      	mov	r5, r1
 8007934:	f7f9 f910 	bl	8000b58 <__aeabi_dcmpgt>
 8007938:	b9c0      	cbnz	r0, 800796c <_dtoa_r+0x6bc>
 800793a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f9 f8e1 	bl	8000b08 <__aeabi_dcmpeq>
 8007946:	b110      	cbz	r0, 800794e <_dtoa_r+0x69e>
 8007948:	f018 0f01 	tst.w	r8, #1
 800794c:	d10e      	bne.n	800796c <_dtoa_r+0x6bc>
 800794e:	9902      	ldr	r1, [sp, #8]
 8007950:	4648      	mov	r0, r9
 8007952:	f000 fbbd 	bl	80080d0 <_Bfree>
 8007956:	2300      	movs	r3, #0
 8007958:	7033      	strb	r3, [r6, #0]
 800795a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800795c:	3701      	adds	r7, #1
 800795e:	601f      	str	r7, [r3, #0]
 8007960:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 824b 	beq.w	8007dfe <_dtoa_r+0xb4e>
 8007968:	601e      	str	r6, [r3, #0]
 800796a:	e248      	b.n	8007dfe <_dtoa_r+0xb4e>
 800796c:	46b8      	mov	r8, r7
 800796e:	4633      	mov	r3, r6
 8007970:	461e      	mov	r6, r3
 8007972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007976:	2a39      	cmp	r2, #57	@ 0x39
 8007978:	d106      	bne.n	8007988 <_dtoa_r+0x6d8>
 800797a:	459a      	cmp	sl, r3
 800797c:	d1f8      	bne.n	8007970 <_dtoa_r+0x6c0>
 800797e:	2230      	movs	r2, #48	@ 0x30
 8007980:	f108 0801 	add.w	r8, r8, #1
 8007984:	f88a 2000 	strb.w	r2, [sl]
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	3201      	adds	r2, #1
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e7a0      	b.n	80078d2 <_dtoa_r+0x622>
 8007990:	4b6f      	ldr	r3, [pc, #444]	@ (8007b50 <_dtoa_r+0x8a0>)
 8007992:	2200      	movs	r2, #0
 8007994:	f7f8 fe50 	bl	8000638 <__aeabi_dmul>
 8007998:	2200      	movs	r2, #0
 800799a:	2300      	movs	r3, #0
 800799c:	4604      	mov	r4, r0
 800799e:	460d      	mov	r5, r1
 80079a0:	f7f9 f8b2 	bl	8000b08 <__aeabi_dcmpeq>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d09f      	beq.n	80078e8 <_dtoa_r+0x638>
 80079a8:	e7d1      	b.n	800794e <_dtoa_r+0x69e>
 80079aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ac:	2a00      	cmp	r2, #0
 80079ae:	f000 80ea 	beq.w	8007b86 <_dtoa_r+0x8d6>
 80079b2:	9a07      	ldr	r2, [sp, #28]
 80079b4:	2a01      	cmp	r2, #1
 80079b6:	f300 80cd 	bgt.w	8007b54 <_dtoa_r+0x8a4>
 80079ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079bc:	2a00      	cmp	r2, #0
 80079be:	f000 80c1 	beq.w	8007b44 <_dtoa_r+0x894>
 80079c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079c6:	9c08      	ldr	r4, [sp, #32]
 80079c8:	9e00      	ldr	r6, [sp, #0]
 80079ca:	9a00      	ldr	r2, [sp, #0]
 80079cc:	441a      	add	r2, r3
 80079ce:	9200      	str	r2, [sp, #0]
 80079d0:	9a06      	ldr	r2, [sp, #24]
 80079d2:	2101      	movs	r1, #1
 80079d4:	441a      	add	r2, r3
 80079d6:	4648      	mov	r0, r9
 80079d8:	9206      	str	r2, [sp, #24]
 80079da:	f000 fc2d 	bl	8008238 <__i2b>
 80079de:	4605      	mov	r5, r0
 80079e0:	b166      	cbz	r6, 80079fc <_dtoa_r+0x74c>
 80079e2:	9b06      	ldr	r3, [sp, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dd09      	ble.n	80079fc <_dtoa_r+0x74c>
 80079e8:	42b3      	cmp	r3, r6
 80079ea:	9a00      	ldr	r2, [sp, #0]
 80079ec:	bfa8      	it	ge
 80079ee:	4633      	movge	r3, r6
 80079f0:	1ad2      	subs	r2, r2, r3
 80079f2:	9200      	str	r2, [sp, #0]
 80079f4:	9a06      	ldr	r2, [sp, #24]
 80079f6:	1af6      	subs	r6, r6, r3
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	9306      	str	r3, [sp, #24]
 80079fc:	9b08      	ldr	r3, [sp, #32]
 80079fe:	b30b      	cbz	r3, 8007a44 <_dtoa_r+0x794>
 8007a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80c6 	beq.w	8007b94 <_dtoa_r+0x8e4>
 8007a08:	2c00      	cmp	r4, #0
 8007a0a:	f000 80c0 	beq.w	8007b8e <_dtoa_r+0x8de>
 8007a0e:	4629      	mov	r1, r5
 8007a10:	4622      	mov	r2, r4
 8007a12:	4648      	mov	r0, r9
 8007a14:	f000 fcc8 	bl	80083a8 <__pow5mult>
 8007a18:	9a02      	ldr	r2, [sp, #8]
 8007a1a:	4601      	mov	r1, r0
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f000 fc20 	bl	8008264 <__multiply>
 8007a24:	9902      	ldr	r1, [sp, #8]
 8007a26:	4680      	mov	r8, r0
 8007a28:	4648      	mov	r0, r9
 8007a2a:	f000 fb51 	bl	80080d0 <_Bfree>
 8007a2e:	9b08      	ldr	r3, [sp, #32]
 8007a30:	1b1b      	subs	r3, r3, r4
 8007a32:	9308      	str	r3, [sp, #32]
 8007a34:	f000 80b1 	beq.w	8007b9a <_dtoa_r+0x8ea>
 8007a38:	9a08      	ldr	r2, [sp, #32]
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	f000 fcb3 	bl	80083a8 <__pow5mult>
 8007a42:	9002      	str	r0, [sp, #8]
 8007a44:	2101      	movs	r1, #1
 8007a46:	4648      	mov	r0, r9
 8007a48:	f000 fbf6 	bl	8008238 <__i2b>
 8007a4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a4e:	4604      	mov	r4, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 81d8 	beq.w	8007e06 <_dtoa_r+0xb56>
 8007a56:	461a      	mov	r2, r3
 8007a58:	4601      	mov	r1, r0
 8007a5a:	4648      	mov	r0, r9
 8007a5c:	f000 fca4 	bl	80083a8 <__pow5mult>
 8007a60:	9b07      	ldr	r3, [sp, #28]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	4604      	mov	r4, r0
 8007a66:	f300 809f 	bgt.w	8007ba8 <_dtoa_r+0x8f8>
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f040 8097 	bne.w	8007ba0 <_dtoa_r+0x8f0>
 8007a72:	9b05      	ldr	r3, [sp, #20]
 8007a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 8093 	bne.w	8007ba4 <_dtoa_r+0x8f4>
 8007a7e:	9b05      	ldr	r3, [sp, #20]
 8007a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a84:	0d1b      	lsrs	r3, r3, #20
 8007a86:	051b      	lsls	r3, r3, #20
 8007a88:	b133      	cbz	r3, 8007a98 <_dtoa_r+0x7e8>
 8007a8a:	9b00      	ldr	r3, [sp, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	9b06      	ldr	r3, [sp, #24]
 8007a92:	3301      	adds	r3, #1
 8007a94:	9306      	str	r3, [sp, #24]
 8007a96:	2301      	movs	r3, #1
 8007a98:	9308      	str	r3, [sp, #32]
 8007a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 81b8 	beq.w	8007e12 <_dtoa_r+0xb62>
 8007aa2:	6923      	ldr	r3, [r4, #16]
 8007aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007aa8:	6918      	ldr	r0, [r3, #16]
 8007aaa:	f000 fb79 	bl	80081a0 <__hi0bits>
 8007aae:	f1c0 0020 	rsb	r0, r0, #32
 8007ab2:	9b06      	ldr	r3, [sp, #24]
 8007ab4:	4418      	add	r0, r3
 8007ab6:	f010 001f 	ands.w	r0, r0, #31
 8007aba:	f000 8082 	beq.w	8007bc2 <_dtoa_r+0x912>
 8007abe:	f1c0 0320 	rsb	r3, r0, #32
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	dd73      	ble.n	8007bae <_dtoa_r+0x8fe>
 8007ac6:	9b00      	ldr	r3, [sp, #0]
 8007ac8:	f1c0 001c 	rsb	r0, r0, #28
 8007acc:	4403      	add	r3, r0
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	9b06      	ldr	r3, [sp, #24]
 8007ad2:	4403      	add	r3, r0
 8007ad4:	4406      	add	r6, r0
 8007ad6:	9306      	str	r3, [sp, #24]
 8007ad8:	9b00      	ldr	r3, [sp, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	dd05      	ble.n	8007aea <_dtoa_r+0x83a>
 8007ade:	9902      	ldr	r1, [sp, #8]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4648      	mov	r0, r9
 8007ae4:	f000 fcba 	bl	800845c <__lshift>
 8007ae8:	9002      	str	r0, [sp, #8]
 8007aea:	9b06      	ldr	r3, [sp, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dd05      	ble.n	8007afc <_dtoa_r+0x84c>
 8007af0:	4621      	mov	r1, r4
 8007af2:	461a      	mov	r2, r3
 8007af4:	4648      	mov	r0, r9
 8007af6:	f000 fcb1 	bl	800845c <__lshift>
 8007afa:	4604      	mov	r4, r0
 8007afc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d061      	beq.n	8007bc6 <_dtoa_r+0x916>
 8007b02:	9802      	ldr	r0, [sp, #8]
 8007b04:	4621      	mov	r1, r4
 8007b06:	f000 fd15 	bl	8008534 <__mcmp>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	da5b      	bge.n	8007bc6 <_dtoa_r+0x916>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	9902      	ldr	r1, [sp, #8]
 8007b12:	220a      	movs	r2, #10
 8007b14:	4648      	mov	r0, r9
 8007b16:	f000 fafd 	bl	8008114 <__multadd>
 8007b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1c:	9002      	str	r0, [sp, #8]
 8007b1e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 8177 	beq.w	8007e16 <_dtoa_r+0xb66>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	220a      	movs	r2, #10
 8007b2e:	4648      	mov	r0, r9
 8007b30:	f000 faf0 	bl	8008114 <__multadd>
 8007b34:	f1bb 0f00 	cmp.w	fp, #0
 8007b38:	4605      	mov	r5, r0
 8007b3a:	dc6f      	bgt.n	8007c1c <_dtoa_r+0x96c>
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	dc49      	bgt.n	8007bd6 <_dtoa_r+0x926>
 8007b42:	e06b      	b.n	8007c1c <_dtoa_r+0x96c>
 8007b44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b4a:	e73c      	b.n	80079c6 <_dtoa_r+0x716>
 8007b4c:	3fe00000 	.word	0x3fe00000
 8007b50:	40240000 	.word	0x40240000
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	1e5c      	subs	r4, r3, #1
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	42a3      	cmp	r3, r4
 8007b5c:	db09      	blt.n	8007b72 <_dtoa_r+0x8c2>
 8007b5e:	1b1c      	subs	r4, r3, r4
 8007b60:	9b03      	ldr	r3, [sp, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f6bf af30 	bge.w	80079c8 <_dtoa_r+0x718>
 8007b68:	9b00      	ldr	r3, [sp, #0]
 8007b6a:	9a03      	ldr	r2, [sp, #12]
 8007b6c:	1a9e      	subs	r6, r3, r2
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e72b      	b.n	80079ca <_dtoa_r+0x71a>
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b76:	9408      	str	r4, [sp, #32]
 8007b78:	1ae3      	subs	r3, r4, r3
 8007b7a:	441a      	add	r2, r3
 8007b7c:	9e00      	ldr	r6, [sp, #0]
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	920d      	str	r2, [sp, #52]	@ 0x34
 8007b82:	2400      	movs	r4, #0
 8007b84:	e721      	b.n	80079ca <_dtoa_r+0x71a>
 8007b86:	9c08      	ldr	r4, [sp, #32]
 8007b88:	9e00      	ldr	r6, [sp, #0]
 8007b8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007b8c:	e728      	b.n	80079e0 <_dtoa_r+0x730>
 8007b8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007b92:	e751      	b.n	8007a38 <_dtoa_r+0x788>
 8007b94:	9a08      	ldr	r2, [sp, #32]
 8007b96:	9902      	ldr	r1, [sp, #8]
 8007b98:	e750      	b.n	8007a3c <_dtoa_r+0x78c>
 8007b9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8007b9e:	e751      	b.n	8007a44 <_dtoa_r+0x794>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e779      	b.n	8007a98 <_dtoa_r+0x7e8>
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	e777      	b.n	8007a98 <_dtoa_r+0x7e8>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9308      	str	r3, [sp, #32]
 8007bac:	e779      	b.n	8007aa2 <_dtoa_r+0x7f2>
 8007bae:	d093      	beq.n	8007ad8 <_dtoa_r+0x828>
 8007bb0:	9a00      	ldr	r2, [sp, #0]
 8007bb2:	331c      	adds	r3, #28
 8007bb4:	441a      	add	r2, r3
 8007bb6:	9200      	str	r2, [sp, #0]
 8007bb8:	9a06      	ldr	r2, [sp, #24]
 8007bba:	441a      	add	r2, r3
 8007bbc:	441e      	add	r6, r3
 8007bbe:	9206      	str	r2, [sp, #24]
 8007bc0:	e78a      	b.n	8007ad8 <_dtoa_r+0x828>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	e7f4      	b.n	8007bb0 <_dtoa_r+0x900>
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	46b8      	mov	r8, r7
 8007bcc:	dc20      	bgt.n	8007c10 <_dtoa_r+0x960>
 8007bce:	469b      	mov	fp, r3
 8007bd0:	9b07      	ldr	r3, [sp, #28]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	dd1e      	ble.n	8007c14 <_dtoa_r+0x964>
 8007bd6:	f1bb 0f00 	cmp.w	fp, #0
 8007bda:	f47f adb1 	bne.w	8007740 <_dtoa_r+0x490>
 8007bde:	4621      	mov	r1, r4
 8007be0:	465b      	mov	r3, fp
 8007be2:	2205      	movs	r2, #5
 8007be4:	4648      	mov	r0, r9
 8007be6:	f000 fa95 	bl	8008114 <__multadd>
 8007bea:	4601      	mov	r1, r0
 8007bec:	4604      	mov	r4, r0
 8007bee:	9802      	ldr	r0, [sp, #8]
 8007bf0:	f000 fca0 	bl	8008534 <__mcmp>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f77f ada3 	ble.w	8007740 <_dtoa_r+0x490>
 8007bfa:	4656      	mov	r6, sl
 8007bfc:	2331      	movs	r3, #49	@ 0x31
 8007bfe:	f806 3b01 	strb.w	r3, [r6], #1
 8007c02:	f108 0801 	add.w	r8, r8, #1
 8007c06:	e59f      	b.n	8007748 <_dtoa_r+0x498>
 8007c08:	9c03      	ldr	r4, [sp, #12]
 8007c0a:	46b8      	mov	r8, r7
 8007c0c:	4625      	mov	r5, r4
 8007c0e:	e7f4      	b.n	8007bfa <_dtoa_r+0x94a>
 8007c10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 8101 	beq.w	8007e1e <_dtoa_r+0xb6e>
 8007c1c:	2e00      	cmp	r6, #0
 8007c1e:	dd05      	ble.n	8007c2c <_dtoa_r+0x97c>
 8007c20:	4629      	mov	r1, r5
 8007c22:	4632      	mov	r2, r6
 8007c24:	4648      	mov	r0, r9
 8007c26:	f000 fc19 	bl	800845c <__lshift>
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	9b08      	ldr	r3, [sp, #32]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d05c      	beq.n	8007cec <_dtoa_r+0xa3c>
 8007c32:	6869      	ldr	r1, [r5, #4]
 8007c34:	4648      	mov	r0, r9
 8007c36:	f000 fa0b 	bl	8008050 <_Balloc>
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	b928      	cbnz	r0, 8007c4a <_dtoa_r+0x99a>
 8007c3e:	4b82      	ldr	r3, [pc, #520]	@ (8007e48 <_dtoa_r+0xb98>)
 8007c40:	4602      	mov	r2, r0
 8007c42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c46:	f7ff bb4a 	b.w	80072de <_dtoa_r+0x2e>
 8007c4a:	692a      	ldr	r2, [r5, #16]
 8007c4c:	3202      	adds	r2, #2
 8007c4e:	0092      	lsls	r2, r2, #2
 8007c50:	f105 010c 	add.w	r1, r5, #12
 8007c54:	300c      	adds	r0, #12
 8007c56:	f000 ffa3 	bl	8008ba0 <memcpy>
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4648      	mov	r0, r9
 8007c60:	f000 fbfc 	bl	800845c <__lshift>
 8007c64:	f10a 0301 	add.w	r3, sl, #1
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	eb0a 030b 	add.w	r3, sl, fp
 8007c6e:	9308      	str	r3, [sp, #32]
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	462f      	mov	r7, r5
 8007c78:	9306      	str	r3, [sp, #24]
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	9b00      	ldr	r3, [sp, #0]
 8007c7e:	9802      	ldr	r0, [sp, #8]
 8007c80:	4621      	mov	r1, r4
 8007c82:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c86:	f7ff fa88 	bl	800719a <quorem>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	3330      	adds	r3, #48	@ 0x30
 8007c8e:	9003      	str	r0, [sp, #12]
 8007c90:	4639      	mov	r1, r7
 8007c92:	9802      	ldr	r0, [sp, #8]
 8007c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c96:	f000 fc4d 	bl	8008534 <__mcmp>
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	9004      	str	r0, [sp, #16]
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f000 fc63 	bl	800856c <__mdiff>
 8007ca6:	68c2      	ldr	r2, [r0, #12]
 8007ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007caa:	4606      	mov	r6, r0
 8007cac:	bb02      	cbnz	r2, 8007cf0 <_dtoa_r+0xa40>
 8007cae:	4601      	mov	r1, r0
 8007cb0:	9802      	ldr	r0, [sp, #8]
 8007cb2:	f000 fc3f 	bl	8008534 <__mcmp>
 8007cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb8:	4602      	mov	r2, r0
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4648      	mov	r0, r9
 8007cbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc2:	f000 fa05 	bl	80080d0 <_Bfree>
 8007cc6:	9b07      	ldr	r3, [sp, #28]
 8007cc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007cca:	9e00      	ldr	r6, [sp, #0]
 8007ccc:	ea42 0103 	orr.w	r1, r2, r3
 8007cd0:	9b06      	ldr	r3, [sp, #24]
 8007cd2:	4319      	orrs	r1, r3
 8007cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd6:	d10d      	bne.n	8007cf4 <_dtoa_r+0xa44>
 8007cd8:	2b39      	cmp	r3, #57	@ 0x39
 8007cda:	d027      	beq.n	8007d2c <_dtoa_r+0xa7c>
 8007cdc:	9a04      	ldr	r2, [sp, #16]
 8007cde:	2a00      	cmp	r2, #0
 8007ce0:	dd01      	ble.n	8007ce6 <_dtoa_r+0xa36>
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	3331      	adds	r3, #49	@ 0x31
 8007ce6:	f88b 3000 	strb.w	r3, [fp]
 8007cea:	e52e      	b.n	800774a <_dtoa_r+0x49a>
 8007cec:	4628      	mov	r0, r5
 8007cee:	e7b9      	b.n	8007c64 <_dtoa_r+0x9b4>
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	e7e2      	b.n	8007cba <_dtoa_r+0xa0a>
 8007cf4:	9904      	ldr	r1, [sp, #16]
 8007cf6:	2900      	cmp	r1, #0
 8007cf8:	db04      	blt.n	8007d04 <_dtoa_r+0xa54>
 8007cfa:	9807      	ldr	r0, [sp, #28]
 8007cfc:	4301      	orrs	r1, r0
 8007cfe:	9806      	ldr	r0, [sp, #24]
 8007d00:	4301      	orrs	r1, r0
 8007d02:	d120      	bne.n	8007d46 <_dtoa_r+0xa96>
 8007d04:	2a00      	cmp	r2, #0
 8007d06:	ddee      	ble.n	8007ce6 <_dtoa_r+0xa36>
 8007d08:	9902      	ldr	r1, [sp, #8]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	4648      	mov	r0, r9
 8007d10:	f000 fba4 	bl	800845c <__lshift>
 8007d14:	4621      	mov	r1, r4
 8007d16:	9002      	str	r0, [sp, #8]
 8007d18:	f000 fc0c 	bl	8008534 <__mcmp>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	9b00      	ldr	r3, [sp, #0]
 8007d20:	dc02      	bgt.n	8007d28 <_dtoa_r+0xa78>
 8007d22:	d1e0      	bne.n	8007ce6 <_dtoa_r+0xa36>
 8007d24:	07da      	lsls	r2, r3, #31
 8007d26:	d5de      	bpl.n	8007ce6 <_dtoa_r+0xa36>
 8007d28:	2b39      	cmp	r3, #57	@ 0x39
 8007d2a:	d1da      	bne.n	8007ce2 <_dtoa_r+0xa32>
 8007d2c:	2339      	movs	r3, #57	@ 0x39
 8007d2e:	f88b 3000 	strb.w	r3, [fp]
 8007d32:	4633      	mov	r3, r6
 8007d34:	461e      	mov	r6, r3
 8007d36:	3b01      	subs	r3, #1
 8007d38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d3c:	2a39      	cmp	r2, #57	@ 0x39
 8007d3e:	d04e      	beq.n	8007dde <_dtoa_r+0xb2e>
 8007d40:	3201      	adds	r2, #1
 8007d42:	701a      	strb	r2, [r3, #0]
 8007d44:	e501      	b.n	800774a <_dtoa_r+0x49a>
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	dd03      	ble.n	8007d52 <_dtoa_r+0xaa2>
 8007d4a:	2b39      	cmp	r3, #57	@ 0x39
 8007d4c:	d0ee      	beq.n	8007d2c <_dtoa_r+0xa7c>
 8007d4e:	3301      	adds	r3, #1
 8007d50:	e7c9      	b.n	8007ce6 <_dtoa_r+0xa36>
 8007d52:	9a00      	ldr	r2, [sp, #0]
 8007d54:	9908      	ldr	r1, [sp, #32]
 8007d56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d5a:	428a      	cmp	r2, r1
 8007d5c:	d028      	beq.n	8007db0 <_dtoa_r+0xb00>
 8007d5e:	9902      	ldr	r1, [sp, #8]
 8007d60:	2300      	movs	r3, #0
 8007d62:	220a      	movs	r2, #10
 8007d64:	4648      	mov	r0, r9
 8007d66:	f000 f9d5 	bl	8008114 <__multadd>
 8007d6a:	42af      	cmp	r7, r5
 8007d6c:	9002      	str	r0, [sp, #8]
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	f04f 020a 	mov.w	r2, #10
 8007d76:	4639      	mov	r1, r7
 8007d78:	4648      	mov	r0, r9
 8007d7a:	d107      	bne.n	8007d8c <_dtoa_r+0xadc>
 8007d7c:	f000 f9ca 	bl	8008114 <__multadd>
 8007d80:	4607      	mov	r7, r0
 8007d82:	4605      	mov	r5, r0
 8007d84:	9b00      	ldr	r3, [sp, #0]
 8007d86:	3301      	adds	r3, #1
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	e777      	b.n	8007c7c <_dtoa_r+0x9cc>
 8007d8c:	f000 f9c2 	bl	8008114 <__multadd>
 8007d90:	4629      	mov	r1, r5
 8007d92:	4607      	mov	r7, r0
 8007d94:	2300      	movs	r3, #0
 8007d96:	220a      	movs	r2, #10
 8007d98:	4648      	mov	r0, r9
 8007d9a:	f000 f9bb 	bl	8008114 <__multadd>
 8007d9e:	4605      	mov	r5, r0
 8007da0:	e7f0      	b.n	8007d84 <_dtoa_r+0xad4>
 8007da2:	f1bb 0f00 	cmp.w	fp, #0
 8007da6:	bfcc      	ite	gt
 8007da8:	465e      	movgt	r6, fp
 8007daa:	2601      	movle	r6, #1
 8007dac:	4456      	add	r6, sl
 8007dae:	2700      	movs	r7, #0
 8007db0:	9902      	ldr	r1, [sp, #8]
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	2201      	movs	r2, #1
 8007db6:	4648      	mov	r0, r9
 8007db8:	f000 fb50 	bl	800845c <__lshift>
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	9002      	str	r0, [sp, #8]
 8007dc0:	f000 fbb8 	bl	8008534 <__mcmp>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	dcb4      	bgt.n	8007d32 <_dtoa_r+0xa82>
 8007dc8:	d102      	bne.n	8007dd0 <_dtoa_r+0xb20>
 8007dca:	9b00      	ldr	r3, [sp, #0]
 8007dcc:	07db      	lsls	r3, r3, #31
 8007dce:	d4b0      	bmi.n	8007d32 <_dtoa_r+0xa82>
 8007dd0:	4633      	mov	r3, r6
 8007dd2:	461e      	mov	r6, r3
 8007dd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dd8:	2a30      	cmp	r2, #48	@ 0x30
 8007dda:	d0fa      	beq.n	8007dd2 <_dtoa_r+0xb22>
 8007ddc:	e4b5      	b.n	800774a <_dtoa_r+0x49a>
 8007dde:	459a      	cmp	sl, r3
 8007de0:	d1a8      	bne.n	8007d34 <_dtoa_r+0xa84>
 8007de2:	2331      	movs	r3, #49	@ 0x31
 8007de4:	f108 0801 	add.w	r8, r8, #1
 8007de8:	f88a 3000 	strb.w	r3, [sl]
 8007dec:	e4ad      	b.n	800774a <_dtoa_r+0x49a>
 8007dee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007df0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007e4c <_dtoa_r+0xb9c>
 8007df4:	b11b      	cbz	r3, 8007dfe <_dtoa_r+0xb4e>
 8007df6:	f10a 0308 	add.w	r3, sl, #8
 8007dfa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	4650      	mov	r0, sl
 8007e00:	b017      	add	sp, #92	@ 0x5c
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	9b07      	ldr	r3, [sp, #28]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	f77f ae2e 	ble.w	8007a6a <_dtoa_r+0x7ba>
 8007e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e10:	9308      	str	r3, [sp, #32]
 8007e12:	2001      	movs	r0, #1
 8007e14:	e64d      	b.n	8007ab2 <_dtoa_r+0x802>
 8007e16:	f1bb 0f00 	cmp.w	fp, #0
 8007e1a:	f77f aed9 	ble.w	8007bd0 <_dtoa_r+0x920>
 8007e1e:	4656      	mov	r6, sl
 8007e20:	9802      	ldr	r0, [sp, #8]
 8007e22:	4621      	mov	r1, r4
 8007e24:	f7ff f9b9 	bl	800719a <quorem>
 8007e28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007e2c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e30:	eba6 020a 	sub.w	r2, r6, sl
 8007e34:	4593      	cmp	fp, r2
 8007e36:	ddb4      	ble.n	8007da2 <_dtoa_r+0xaf2>
 8007e38:	9902      	ldr	r1, [sp, #8]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	220a      	movs	r2, #10
 8007e3e:	4648      	mov	r0, r9
 8007e40:	f000 f968 	bl	8008114 <__multadd>
 8007e44:	9002      	str	r0, [sp, #8]
 8007e46:	e7eb      	b.n	8007e20 <_dtoa_r+0xb70>
 8007e48:	0800a400 	.word	0x0800a400
 8007e4c:	0800a384 	.word	0x0800a384

08007e50 <_free_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4605      	mov	r5, r0
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d041      	beq.n	8007edc <_free_r+0x8c>
 8007e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5c:	1f0c      	subs	r4, r1, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bfb8      	it	lt
 8007e62:	18e4      	addlt	r4, r4, r3
 8007e64:	f000 f8e8 	bl	8008038 <__malloc_lock>
 8007e68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee0 <_free_r+0x90>)
 8007e6a:	6813      	ldr	r3, [r2, #0]
 8007e6c:	b933      	cbnz	r3, 8007e7c <_free_r+0x2c>
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	6014      	str	r4, [r2, #0]
 8007e72:	4628      	mov	r0, r5
 8007e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e78:	f000 b8e4 	b.w	8008044 <__malloc_unlock>
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d908      	bls.n	8007e92 <_free_r+0x42>
 8007e80:	6820      	ldr	r0, [r4, #0]
 8007e82:	1821      	adds	r1, r4, r0
 8007e84:	428b      	cmp	r3, r1
 8007e86:	bf01      	itttt	eq
 8007e88:	6819      	ldreq	r1, [r3, #0]
 8007e8a:	685b      	ldreq	r3, [r3, #4]
 8007e8c:	1809      	addeq	r1, r1, r0
 8007e8e:	6021      	streq	r1, [r4, #0]
 8007e90:	e7ed      	b.n	8007e6e <_free_r+0x1e>
 8007e92:	461a      	mov	r2, r3
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b10b      	cbz	r3, 8007e9c <_free_r+0x4c>
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d9fa      	bls.n	8007e92 <_free_r+0x42>
 8007e9c:	6811      	ldr	r1, [r2, #0]
 8007e9e:	1850      	adds	r0, r2, r1
 8007ea0:	42a0      	cmp	r0, r4
 8007ea2:	d10b      	bne.n	8007ebc <_free_r+0x6c>
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	4401      	add	r1, r0
 8007ea8:	1850      	adds	r0, r2, r1
 8007eaa:	4283      	cmp	r3, r0
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	d1e0      	bne.n	8007e72 <_free_r+0x22>
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	6053      	str	r3, [r2, #4]
 8007eb6:	4408      	add	r0, r1
 8007eb8:	6010      	str	r0, [r2, #0]
 8007eba:	e7da      	b.n	8007e72 <_free_r+0x22>
 8007ebc:	d902      	bls.n	8007ec4 <_free_r+0x74>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	602b      	str	r3, [r5, #0]
 8007ec2:	e7d6      	b.n	8007e72 <_free_r+0x22>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	1821      	adds	r1, r4, r0
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	bf04      	itt	eq
 8007ecc:	6819      	ldreq	r1, [r3, #0]
 8007ece:	685b      	ldreq	r3, [r3, #4]
 8007ed0:	6063      	str	r3, [r4, #4]
 8007ed2:	bf04      	itt	eq
 8007ed4:	1809      	addeq	r1, r1, r0
 8007ed6:	6021      	streq	r1, [r4, #0]
 8007ed8:	6054      	str	r4, [r2, #4]
 8007eda:	e7ca      	b.n	8007e72 <_free_r+0x22>
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
 8007ede:	bf00      	nop
 8007ee0:	2001493c 	.word	0x2001493c

08007ee4 <malloc>:
 8007ee4:	4b02      	ldr	r3, [pc, #8]	@ (8007ef0 <malloc+0xc>)
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	f000 b825 	b.w	8007f38 <_malloc_r>
 8007eee:	bf00      	nop
 8007ef0:	20000018 	.word	0x20000018

08007ef4 <sbrk_aligned>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8007f34 <sbrk_aligned+0x40>)
 8007ef8:	460c      	mov	r4, r1
 8007efa:	6831      	ldr	r1, [r6, #0]
 8007efc:	4605      	mov	r5, r0
 8007efe:	b911      	cbnz	r1, 8007f06 <sbrk_aligned+0x12>
 8007f00:	f000 fe3e 	bl	8008b80 <_sbrk_r>
 8007f04:	6030      	str	r0, [r6, #0]
 8007f06:	4621      	mov	r1, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f000 fe39 	bl	8008b80 <_sbrk_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d103      	bne.n	8007f1a <sbrk_aligned+0x26>
 8007f12:	f04f 34ff 	mov.w	r4, #4294967295
 8007f16:	4620      	mov	r0, r4
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	1cc4      	adds	r4, r0, #3
 8007f1c:	f024 0403 	bic.w	r4, r4, #3
 8007f20:	42a0      	cmp	r0, r4
 8007f22:	d0f8      	beq.n	8007f16 <sbrk_aligned+0x22>
 8007f24:	1a21      	subs	r1, r4, r0
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 fe2a 	bl	8008b80 <_sbrk_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d1f2      	bne.n	8007f16 <sbrk_aligned+0x22>
 8007f30:	e7ef      	b.n	8007f12 <sbrk_aligned+0x1e>
 8007f32:	bf00      	nop
 8007f34:	20014938 	.word	0x20014938

08007f38 <_malloc_r>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	1ccd      	adds	r5, r1, #3
 8007f3e:	f025 0503 	bic.w	r5, r5, #3
 8007f42:	3508      	adds	r5, #8
 8007f44:	2d0c      	cmp	r5, #12
 8007f46:	bf38      	it	cc
 8007f48:	250c      	movcc	r5, #12
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	db01      	blt.n	8007f54 <_malloc_r+0x1c>
 8007f50:	42a9      	cmp	r1, r5
 8007f52:	d904      	bls.n	8007f5e <_malloc_r+0x26>
 8007f54:	230c      	movs	r3, #12
 8007f56:	6033      	str	r3, [r6, #0]
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008034 <_malloc_r+0xfc>
 8007f62:	f000 f869 	bl	8008038 <__malloc_lock>
 8007f66:	f8d8 3000 	ldr.w	r3, [r8]
 8007f6a:	461c      	mov	r4, r3
 8007f6c:	bb44      	cbnz	r4, 8007fc0 <_malloc_r+0x88>
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4630      	mov	r0, r6
 8007f72:	f7ff ffbf 	bl	8007ef4 <sbrk_aligned>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	4604      	mov	r4, r0
 8007f7a:	d158      	bne.n	800802e <_malloc_r+0xf6>
 8007f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f80:	4627      	mov	r7, r4
 8007f82:	2f00      	cmp	r7, #0
 8007f84:	d143      	bne.n	800800e <_malloc_r+0xd6>
 8007f86:	2c00      	cmp	r4, #0
 8007f88:	d04b      	beq.n	8008022 <_malloc_r+0xea>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	4630      	mov	r0, r6
 8007f90:	eb04 0903 	add.w	r9, r4, r3
 8007f94:	f000 fdf4 	bl	8008b80 <_sbrk_r>
 8007f98:	4581      	cmp	r9, r0
 8007f9a:	d142      	bne.n	8008022 <_malloc_r+0xea>
 8007f9c:	6821      	ldr	r1, [r4, #0]
 8007f9e:	1a6d      	subs	r5, r5, r1
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ffa6 	bl	8007ef4 <sbrk_aligned>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d03a      	beq.n	8008022 <_malloc_r+0xea>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	442b      	add	r3, r5
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	bb62      	cbnz	r2, 8008014 <_malloc_r+0xdc>
 8007fba:	f8c8 7000 	str.w	r7, [r8]
 8007fbe:	e00f      	b.n	8007fe0 <_malloc_r+0xa8>
 8007fc0:	6822      	ldr	r2, [r4, #0]
 8007fc2:	1b52      	subs	r2, r2, r5
 8007fc4:	d420      	bmi.n	8008008 <_malloc_r+0xd0>
 8007fc6:	2a0b      	cmp	r2, #11
 8007fc8:	d917      	bls.n	8007ffa <_malloc_r+0xc2>
 8007fca:	1961      	adds	r1, r4, r5
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	6025      	str	r5, [r4, #0]
 8007fd0:	bf18      	it	ne
 8007fd2:	6059      	strne	r1, [r3, #4]
 8007fd4:	6863      	ldr	r3, [r4, #4]
 8007fd6:	bf08      	it	eq
 8007fd8:	f8c8 1000 	streq.w	r1, [r8]
 8007fdc:	5162      	str	r2, [r4, r5]
 8007fde:	604b      	str	r3, [r1, #4]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f82f 	bl	8008044 <__malloc_unlock>
 8007fe6:	f104 000b 	add.w	r0, r4, #11
 8007fea:	1d23      	adds	r3, r4, #4
 8007fec:	f020 0007 	bic.w	r0, r0, #7
 8007ff0:	1ac2      	subs	r2, r0, r3
 8007ff2:	bf1c      	itt	ne
 8007ff4:	1a1b      	subne	r3, r3, r0
 8007ff6:	50a3      	strne	r3, [r4, r2]
 8007ff8:	e7af      	b.n	8007f5a <_malloc_r+0x22>
 8007ffa:	6862      	ldr	r2, [r4, #4]
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	bf0c      	ite	eq
 8008000:	f8c8 2000 	streq.w	r2, [r8]
 8008004:	605a      	strne	r2, [r3, #4]
 8008006:	e7eb      	b.n	8007fe0 <_malloc_r+0xa8>
 8008008:	4623      	mov	r3, r4
 800800a:	6864      	ldr	r4, [r4, #4]
 800800c:	e7ae      	b.n	8007f6c <_malloc_r+0x34>
 800800e:	463c      	mov	r4, r7
 8008010:	687f      	ldr	r7, [r7, #4]
 8008012:	e7b6      	b.n	8007f82 <_malloc_r+0x4a>
 8008014:	461a      	mov	r2, r3
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	42a3      	cmp	r3, r4
 800801a:	d1fb      	bne.n	8008014 <_malloc_r+0xdc>
 800801c:	2300      	movs	r3, #0
 800801e:	6053      	str	r3, [r2, #4]
 8008020:	e7de      	b.n	8007fe0 <_malloc_r+0xa8>
 8008022:	230c      	movs	r3, #12
 8008024:	6033      	str	r3, [r6, #0]
 8008026:	4630      	mov	r0, r6
 8008028:	f000 f80c 	bl	8008044 <__malloc_unlock>
 800802c:	e794      	b.n	8007f58 <_malloc_r+0x20>
 800802e:	6005      	str	r5, [r0, #0]
 8008030:	e7d6      	b.n	8007fe0 <_malloc_r+0xa8>
 8008032:	bf00      	nop
 8008034:	2001493c 	.word	0x2001493c

08008038 <__malloc_lock>:
 8008038:	4801      	ldr	r0, [pc, #4]	@ (8008040 <__malloc_lock+0x8>)
 800803a:	f7ff b8ac 	b.w	8007196 <__retarget_lock_acquire_recursive>
 800803e:	bf00      	nop
 8008040:	20014934 	.word	0x20014934

08008044 <__malloc_unlock>:
 8008044:	4801      	ldr	r0, [pc, #4]	@ (800804c <__malloc_unlock+0x8>)
 8008046:	f7ff b8a7 	b.w	8007198 <__retarget_lock_release_recursive>
 800804a:	bf00      	nop
 800804c:	20014934 	.word	0x20014934

08008050 <_Balloc>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	69c6      	ldr	r6, [r0, #28]
 8008054:	4604      	mov	r4, r0
 8008056:	460d      	mov	r5, r1
 8008058:	b976      	cbnz	r6, 8008078 <_Balloc+0x28>
 800805a:	2010      	movs	r0, #16
 800805c:	f7ff ff42 	bl	8007ee4 <malloc>
 8008060:	4602      	mov	r2, r0
 8008062:	61e0      	str	r0, [r4, #28]
 8008064:	b920      	cbnz	r0, 8008070 <_Balloc+0x20>
 8008066:	4b18      	ldr	r3, [pc, #96]	@ (80080c8 <_Balloc+0x78>)
 8008068:	4818      	ldr	r0, [pc, #96]	@ (80080cc <_Balloc+0x7c>)
 800806a:	216b      	movs	r1, #107	@ 0x6b
 800806c:	f000 fda6 	bl	8008bbc <__assert_func>
 8008070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008074:	6006      	str	r6, [r0, #0]
 8008076:	60c6      	str	r6, [r0, #12]
 8008078:	69e6      	ldr	r6, [r4, #28]
 800807a:	68f3      	ldr	r3, [r6, #12]
 800807c:	b183      	cbz	r3, 80080a0 <_Balloc+0x50>
 800807e:	69e3      	ldr	r3, [r4, #28]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008086:	b9b8      	cbnz	r0, 80080b8 <_Balloc+0x68>
 8008088:	2101      	movs	r1, #1
 800808a:	fa01 f605 	lsl.w	r6, r1, r5
 800808e:	1d72      	adds	r2, r6, #5
 8008090:	0092      	lsls	r2, r2, #2
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fdb0 	bl	8008bf8 <_calloc_r>
 8008098:	b160      	cbz	r0, 80080b4 <_Balloc+0x64>
 800809a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800809e:	e00e      	b.n	80080be <_Balloc+0x6e>
 80080a0:	2221      	movs	r2, #33	@ 0x21
 80080a2:	2104      	movs	r1, #4
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fda7 	bl	8008bf8 <_calloc_r>
 80080aa:	69e3      	ldr	r3, [r4, #28]
 80080ac:	60f0      	str	r0, [r6, #12]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e4      	bne.n	800807e <_Balloc+0x2e>
 80080b4:	2000      	movs	r0, #0
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	6802      	ldr	r2, [r0, #0]
 80080ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080be:	2300      	movs	r3, #0
 80080c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080c4:	e7f7      	b.n	80080b6 <_Balloc+0x66>
 80080c6:	bf00      	nop
 80080c8:	0800a391 	.word	0x0800a391
 80080cc:	0800a411 	.word	0x0800a411

080080d0 <_Bfree>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	69c6      	ldr	r6, [r0, #28]
 80080d4:	4605      	mov	r5, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	b976      	cbnz	r6, 80080f8 <_Bfree+0x28>
 80080da:	2010      	movs	r0, #16
 80080dc:	f7ff ff02 	bl	8007ee4 <malloc>
 80080e0:	4602      	mov	r2, r0
 80080e2:	61e8      	str	r0, [r5, #28]
 80080e4:	b920      	cbnz	r0, 80080f0 <_Bfree+0x20>
 80080e6:	4b09      	ldr	r3, [pc, #36]	@ (800810c <_Bfree+0x3c>)
 80080e8:	4809      	ldr	r0, [pc, #36]	@ (8008110 <_Bfree+0x40>)
 80080ea:	218f      	movs	r1, #143	@ 0x8f
 80080ec:	f000 fd66 	bl	8008bbc <__assert_func>
 80080f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080f4:	6006      	str	r6, [r0, #0]
 80080f6:	60c6      	str	r6, [r0, #12]
 80080f8:	b13c      	cbz	r4, 800810a <_Bfree+0x3a>
 80080fa:	69eb      	ldr	r3, [r5, #28]
 80080fc:	6862      	ldr	r2, [r4, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008104:	6021      	str	r1, [r4, #0]
 8008106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	0800a391 	.word	0x0800a391
 8008110:	0800a411 	.word	0x0800a411

08008114 <__multadd>:
 8008114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	690d      	ldr	r5, [r1, #16]
 800811a:	4607      	mov	r7, r0
 800811c:	460c      	mov	r4, r1
 800811e:	461e      	mov	r6, r3
 8008120:	f101 0c14 	add.w	ip, r1, #20
 8008124:	2000      	movs	r0, #0
 8008126:	f8dc 3000 	ldr.w	r3, [ip]
 800812a:	b299      	uxth	r1, r3
 800812c:	fb02 6101 	mla	r1, r2, r1, r6
 8008130:	0c1e      	lsrs	r6, r3, #16
 8008132:	0c0b      	lsrs	r3, r1, #16
 8008134:	fb02 3306 	mla	r3, r2, r6, r3
 8008138:	b289      	uxth	r1, r1
 800813a:	3001      	adds	r0, #1
 800813c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008140:	4285      	cmp	r5, r0
 8008142:	f84c 1b04 	str.w	r1, [ip], #4
 8008146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800814a:	dcec      	bgt.n	8008126 <__multadd+0x12>
 800814c:	b30e      	cbz	r6, 8008192 <__multadd+0x7e>
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	42ab      	cmp	r3, r5
 8008152:	dc19      	bgt.n	8008188 <__multadd+0x74>
 8008154:	6861      	ldr	r1, [r4, #4]
 8008156:	4638      	mov	r0, r7
 8008158:	3101      	adds	r1, #1
 800815a:	f7ff ff79 	bl	8008050 <_Balloc>
 800815e:	4680      	mov	r8, r0
 8008160:	b928      	cbnz	r0, 800816e <__multadd+0x5a>
 8008162:	4602      	mov	r2, r0
 8008164:	4b0c      	ldr	r3, [pc, #48]	@ (8008198 <__multadd+0x84>)
 8008166:	480d      	ldr	r0, [pc, #52]	@ (800819c <__multadd+0x88>)
 8008168:	21ba      	movs	r1, #186	@ 0xba
 800816a:	f000 fd27 	bl	8008bbc <__assert_func>
 800816e:	6922      	ldr	r2, [r4, #16]
 8008170:	3202      	adds	r2, #2
 8008172:	f104 010c 	add.w	r1, r4, #12
 8008176:	0092      	lsls	r2, r2, #2
 8008178:	300c      	adds	r0, #12
 800817a:	f000 fd11 	bl	8008ba0 <memcpy>
 800817e:	4621      	mov	r1, r4
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ffa5 	bl	80080d0 <_Bfree>
 8008186:	4644      	mov	r4, r8
 8008188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800818c:	3501      	adds	r5, #1
 800818e:	615e      	str	r6, [r3, #20]
 8008190:	6125      	str	r5, [r4, #16]
 8008192:	4620      	mov	r0, r4
 8008194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008198:	0800a400 	.word	0x0800a400
 800819c:	0800a411 	.word	0x0800a411

080081a0 <__hi0bits>:
 80081a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081a4:	4603      	mov	r3, r0
 80081a6:	bf36      	itet	cc
 80081a8:	0403      	lslcc	r3, r0, #16
 80081aa:	2000      	movcs	r0, #0
 80081ac:	2010      	movcc	r0, #16
 80081ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081b2:	bf3c      	itt	cc
 80081b4:	021b      	lslcc	r3, r3, #8
 80081b6:	3008      	addcc	r0, #8
 80081b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081bc:	bf3c      	itt	cc
 80081be:	011b      	lslcc	r3, r3, #4
 80081c0:	3004      	addcc	r0, #4
 80081c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c6:	bf3c      	itt	cc
 80081c8:	009b      	lslcc	r3, r3, #2
 80081ca:	3002      	addcc	r0, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	db05      	blt.n	80081dc <__hi0bits+0x3c>
 80081d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081d4:	f100 0001 	add.w	r0, r0, #1
 80081d8:	bf08      	it	eq
 80081da:	2020      	moveq	r0, #32
 80081dc:	4770      	bx	lr

080081de <__lo0bits>:
 80081de:	6803      	ldr	r3, [r0, #0]
 80081e0:	4602      	mov	r2, r0
 80081e2:	f013 0007 	ands.w	r0, r3, #7
 80081e6:	d00b      	beq.n	8008200 <__lo0bits+0x22>
 80081e8:	07d9      	lsls	r1, r3, #31
 80081ea:	d421      	bmi.n	8008230 <__lo0bits+0x52>
 80081ec:	0798      	lsls	r0, r3, #30
 80081ee:	bf49      	itett	mi
 80081f0:	085b      	lsrmi	r3, r3, #1
 80081f2:	089b      	lsrpl	r3, r3, #2
 80081f4:	2001      	movmi	r0, #1
 80081f6:	6013      	strmi	r3, [r2, #0]
 80081f8:	bf5c      	itt	pl
 80081fa:	6013      	strpl	r3, [r2, #0]
 80081fc:	2002      	movpl	r0, #2
 80081fe:	4770      	bx	lr
 8008200:	b299      	uxth	r1, r3
 8008202:	b909      	cbnz	r1, 8008208 <__lo0bits+0x2a>
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	2010      	movs	r0, #16
 8008208:	b2d9      	uxtb	r1, r3
 800820a:	b909      	cbnz	r1, 8008210 <__lo0bits+0x32>
 800820c:	3008      	adds	r0, #8
 800820e:	0a1b      	lsrs	r3, r3, #8
 8008210:	0719      	lsls	r1, r3, #28
 8008212:	bf04      	itt	eq
 8008214:	091b      	lsreq	r3, r3, #4
 8008216:	3004      	addeq	r0, #4
 8008218:	0799      	lsls	r1, r3, #30
 800821a:	bf04      	itt	eq
 800821c:	089b      	lsreq	r3, r3, #2
 800821e:	3002      	addeq	r0, #2
 8008220:	07d9      	lsls	r1, r3, #31
 8008222:	d403      	bmi.n	800822c <__lo0bits+0x4e>
 8008224:	085b      	lsrs	r3, r3, #1
 8008226:	f100 0001 	add.w	r0, r0, #1
 800822a:	d003      	beq.n	8008234 <__lo0bits+0x56>
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	4770      	bx	lr
 8008230:	2000      	movs	r0, #0
 8008232:	4770      	bx	lr
 8008234:	2020      	movs	r0, #32
 8008236:	4770      	bx	lr

08008238 <__i2b>:
 8008238:	b510      	push	{r4, lr}
 800823a:	460c      	mov	r4, r1
 800823c:	2101      	movs	r1, #1
 800823e:	f7ff ff07 	bl	8008050 <_Balloc>
 8008242:	4602      	mov	r2, r0
 8008244:	b928      	cbnz	r0, 8008252 <__i2b+0x1a>
 8008246:	4b05      	ldr	r3, [pc, #20]	@ (800825c <__i2b+0x24>)
 8008248:	4805      	ldr	r0, [pc, #20]	@ (8008260 <__i2b+0x28>)
 800824a:	f240 1145 	movw	r1, #325	@ 0x145
 800824e:	f000 fcb5 	bl	8008bbc <__assert_func>
 8008252:	2301      	movs	r3, #1
 8008254:	6144      	str	r4, [r0, #20]
 8008256:	6103      	str	r3, [r0, #16]
 8008258:	bd10      	pop	{r4, pc}
 800825a:	bf00      	nop
 800825c:	0800a400 	.word	0x0800a400
 8008260:	0800a411 	.word	0x0800a411

08008264 <__multiply>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	4617      	mov	r7, r2
 800826a:	690a      	ldr	r2, [r1, #16]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	429a      	cmp	r2, r3
 8008270:	bfa8      	it	ge
 8008272:	463b      	movge	r3, r7
 8008274:	4689      	mov	r9, r1
 8008276:	bfa4      	itt	ge
 8008278:	460f      	movge	r7, r1
 800827a:	4699      	movge	r9, r3
 800827c:	693d      	ldr	r5, [r7, #16]
 800827e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	eb05 060a 	add.w	r6, r5, sl
 800828a:	42b3      	cmp	r3, r6
 800828c:	b085      	sub	sp, #20
 800828e:	bfb8      	it	lt
 8008290:	3101      	addlt	r1, #1
 8008292:	f7ff fedd 	bl	8008050 <_Balloc>
 8008296:	b930      	cbnz	r0, 80082a6 <__multiply+0x42>
 8008298:	4602      	mov	r2, r0
 800829a:	4b41      	ldr	r3, [pc, #260]	@ (80083a0 <__multiply+0x13c>)
 800829c:	4841      	ldr	r0, [pc, #260]	@ (80083a4 <__multiply+0x140>)
 800829e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082a2:	f000 fc8b 	bl	8008bbc <__assert_func>
 80082a6:	f100 0414 	add.w	r4, r0, #20
 80082aa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80082ae:	4623      	mov	r3, r4
 80082b0:	2200      	movs	r2, #0
 80082b2:	4573      	cmp	r3, lr
 80082b4:	d320      	bcc.n	80082f8 <__multiply+0x94>
 80082b6:	f107 0814 	add.w	r8, r7, #20
 80082ba:	f109 0114 	add.w	r1, r9, #20
 80082be:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80082c2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80082c6:	9302      	str	r3, [sp, #8]
 80082c8:	1beb      	subs	r3, r5, r7
 80082ca:	3b15      	subs	r3, #21
 80082cc:	f023 0303 	bic.w	r3, r3, #3
 80082d0:	3304      	adds	r3, #4
 80082d2:	3715      	adds	r7, #21
 80082d4:	42bd      	cmp	r5, r7
 80082d6:	bf38      	it	cc
 80082d8:	2304      	movcc	r3, #4
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	9b02      	ldr	r3, [sp, #8]
 80082de:	9103      	str	r1, [sp, #12]
 80082e0:	428b      	cmp	r3, r1
 80082e2:	d80c      	bhi.n	80082fe <__multiply+0x9a>
 80082e4:	2e00      	cmp	r6, #0
 80082e6:	dd03      	ble.n	80082f0 <__multiply+0x8c>
 80082e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d055      	beq.n	800839c <__multiply+0x138>
 80082f0:	6106      	str	r6, [r0, #16]
 80082f2:	b005      	add	sp, #20
 80082f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f8:	f843 2b04 	str.w	r2, [r3], #4
 80082fc:	e7d9      	b.n	80082b2 <__multiply+0x4e>
 80082fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008302:	f1ba 0f00 	cmp.w	sl, #0
 8008306:	d01f      	beq.n	8008348 <__multiply+0xe4>
 8008308:	46c4      	mov	ip, r8
 800830a:	46a1      	mov	r9, r4
 800830c:	2700      	movs	r7, #0
 800830e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008312:	f8d9 3000 	ldr.w	r3, [r9]
 8008316:	fa1f fb82 	uxth.w	fp, r2
 800831a:	b29b      	uxth	r3, r3
 800831c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008320:	443b      	add	r3, r7
 8008322:	f8d9 7000 	ldr.w	r7, [r9]
 8008326:	0c12      	lsrs	r2, r2, #16
 8008328:	0c3f      	lsrs	r7, r7, #16
 800832a:	fb0a 7202 	mla	r2, sl, r2, r7
 800832e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008332:	b29b      	uxth	r3, r3
 8008334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008338:	4565      	cmp	r5, ip
 800833a:	f849 3b04 	str.w	r3, [r9], #4
 800833e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008342:	d8e4      	bhi.n	800830e <__multiply+0xaa>
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	50e7      	str	r7, [r4, r3]
 8008348:	9b03      	ldr	r3, [sp, #12]
 800834a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800834e:	3104      	adds	r1, #4
 8008350:	f1b9 0f00 	cmp.w	r9, #0
 8008354:	d020      	beq.n	8008398 <__multiply+0x134>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	4647      	mov	r7, r8
 800835a:	46a4      	mov	ip, r4
 800835c:	f04f 0a00 	mov.w	sl, #0
 8008360:	f8b7 b000 	ldrh.w	fp, [r7]
 8008364:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008368:	fb09 220b 	mla	r2, r9, fp, r2
 800836c:	4452      	add	r2, sl
 800836e:	b29b      	uxth	r3, r3
 8008370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008374:	f84c 3b04 	str.w	r3, [ip], #4
 8008378:	f857 3b04 	ldr.w	r3, [r7], #4
 800837c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008380:	f8bc 3000 	ldrh.w	r3, [ip]
 8008384:	fb09 330a 	mla	r3, r9, sl, r3
 8008388:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800838c:	42bd      	cmp	r5, r7
 800838e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008392:	d8e5      	bhi.n	8008360 <__multiply+0xfc>
 8008394:	9a01      	ldr	r2, [sp, #4]
 8008396:	50a3      	str	r3, [r4, r2]
 8008398:	3404      	adds	r4, #4
 800839a:	e79f      	b.n	80082dc <__multiply+0x78>
 800839c:	3e01      	subs	r6, #1
 800839e:	e7a1      	b.n	80082e4 <__multiply+0x80>
 80083a0:	0800a400 	.word	0x0800a400
 80083a4:	0800a411 	.word	0x0800a411

080083a8 <__pow5mult>:
 80083a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ac:	4615      	mov	r5, r2
 80083ae:	f012 0203 	ands.w	r2, r2, #3
 80083b2:	4607      	mov	r7, r0
 80083b4:	460e      	mov	r6, r1
 80083b6:	d007      	beq.n	80083c8 <__pow5mult+0x20>
 80083b8:	4c25      	ldr	r4, [pc, #148]	@ (8008450 <__pow5mult+0xa8>)
 80083ba:	3a01      	subs	r2, #1
 80083bc:	2300      	movs	r3, #0
 80083be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083c2:	f7ff fea7 	bl	8008114 <__multadd>
 80083c6:	4606      	mov	r6, r0
 80083c8:	10ad      	asrs	r5, r5, #2
 80083ca:	d03d      	beq.n	8008448 <__pow5mult+0xa0>
 80083cc:	69fc      	ldr	r4, [r7, #28]
 80083ce:	b97c      	cbnz	r4, 80083f0 <__pow5mult+0x48>
 80083d0:	2010      	movs	r0, #16
 80083d2:	f7ff fd87 	bl	8007ee4 <malloc>
 80083d6:	4602      	mov	r2, r0
 80083d8:	61f8      	str	r0, [r7, #28]
 80083da:	b928      	cbnz	r0, 80083e8 <__pow5mult+0x40>
 80083dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008454 <__pow5mult+0xac>)
 80083de:	481e      	ldr	r0, [pc, #120]	@ (8008458 <__pow5mult+0xb0>)
 80083e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083e4:	f000 fbea 	bl	8008bbc <__assert_func>
 80083e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083ec:	6004      	str	r4, [r0, #0]
 80083ee:	60c4      	str	r4, [r0, #12]
 80083f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083f8:	b94c      	cbnz	r4, 800840e <__pow5mult+0x66>
 80083fa:	f240 2171 	movw	r1, #625	@ 0x271
 80083fe:	4638      	mov	r0, r7
 8008400:	f7ff ff1a 	bl	8008238 <__i2b>
 8008404:	2300      	movs	r3, #0
 8008406:	f8c8 0008 	str.w	r0, [r8, #8]
 800840a:	4604      	mov	r4, r0
 800840c:	6003      	str	r3, [r0, #0]
 800840e:	f04f 0900 	mov.w	r9, #0
 8008412:	07eb      	lsls	r3, r5, #31
 8008414:	d50a      	bpl.n	800842c <__pow5mult+0x84>
 8008416:	4631      	mov	r1, r6
 8008418:	4622      	mov	r2, r4
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff ff22 	bl	8008264 <__multiply>
 8008420:	4631      	mov	r1, r6
 8008422:	4680      	mov	r8, r0
 8008424:	4638      	mov	r0, r7
 8008426:	f7ff fe53 	bl	80080d0 <_Bfree>
 800842a:	4646      	mov	r6, r8
 800842c:	106d      	asrs	r5, r5, #1
 800842e:	d00b      	beq.n	8008448 <__pow5mult+0xa0>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	b938      	cbnz	r0, 8008444 <__pow5mult+0x9c>
 8008434:	4622      	mov	r2, r4
 8008436:	4621      	mov	r1, r4
 8008438:	4638      	mov	r0, r7
 800843a:	f7ff ff13 	bl	8008264 <__multiply>
 800843e:	6020      	str	r0, [r4, #0]
 8008440:	f8c0 9000 	str.w	r9, [r0]
 8008444:	4604      	mov	r4, r0
 8008446:	e7e4      	b.n	8008412 <__pow5mult+0x6a>
 8008448:	4630      	mov	r0, r6
 800844a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844e:	bf00      	nop
 8008450:	0800a4c4 	.word	0x0800a4c4
 8008454:	0800a391 	.word	0x0800a391
 8008458:	0800a411 	.word	0x0800a411

0800845c <__lshift>:
 800845c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	460c      	mov	r4, r1
 8008462:	6849      	ldr	r1, [r1, #4]
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800846a:	68a3      	ldr	r3, [r4, #8]
 800846c:	4607      	mov	r7, r0
 800846e:	4691      	mov	r9, r2
 8008470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008474:	f108 0601 	add.w	r6, r8, #1
 8008478:	42b3      	cmp	r3, r6
 800847a:	db0b      	blt.n	8008494 <__lshift+0x38>
 800847c:	4638      	mov	r0, r7
 800847e:	f7ff fde7 	bl	8008050 <_Balloc>
 8008482:	4605      	mov	r5, r0
 8008484:	b948      	cbnz	r0, 800849a <__lshift+0x3e>
 8008486:	4602      	mov	r2, r0
 8008488:	4b28      	ldr	r3, [pc, #160]	@ (800852c <__lshift+0xd0>)
 800848a:	4829      	ldr	r0, [pc, #164]	@ (8008530 <__lshift+0xd4>)
 800848c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008490:	f000 fb94 	bl	8008bbc <__assert_func>
 8008494:	3101      	adds	r1, #1
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	e7ee      	b.n	8008478 <__lshift+0x1c>
 800849a:	2300      	movs	r3, #0
 800849c:	f100 0114 	add.w	r1, r0, #20
 80084a0:	f100 0210 	add.w	r2, r0, #16
 80084a4:	4618      	mov	r0, r3
 80084a6:	4553      	cmp	r3, sl
 80084a8:	db33      	blt.n	8008512 <__lshift+0xb6>
 80084aa:	6920      	ldr	r0, [r4, #16]
 80084ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084b0:	f104 0314 	add.w	r3, r4, #20
 80084b4:	f019 091f 	ands.w	r9, r9, #31
 80084b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084c0:	d02b      	beq.n	800851a <__lshift+0xbe>
 80084c2:	f1c9 0e20 	rsb	lr, r9, #32
 80084c6:	468a      	mov	sl, r1
 80084c8:	2200      	movs	r2, #0
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	fa00 f009 	lsl.w	r0, r0, r9
 80084d0:	4310      	orrs	r0, r2
 80084d2:	f84a 0b04 	str.w	r0, [sl], #4
 80084d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084da:	459c      	cmp	ip, r3
 80084dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80084e0:	d8f3      	bhi.n	80084ca <__lshift+0x6e>
 80084e2:	ebac 0304 	sub.w	r3, ip, r4
 80084e6:	3b15      	subs	r3, #21
 80084e8:	f023 0303 	bic.w	r3, r3, #3
 80084ec:	3304      	adds	r3, #4
 80084ee:	f104 0015 	add.w	r0, r4, #21
 80084f2:	4560      	cmp	r0, ip
 80084f4:	bf88      	it	hi
 80084f6:	2304      	movhi	r3, #4
 80084f8:	50ca      	str	r2, [r1, r3]
 80084fa:	b10a      	cbz	r2, 8008500 <__lshift+0xa4>
 80084fc:	f108 0602 	add.w	r6, r8, #2
 8008500:	3e01      	subs	r6, #1
 8008502:	4638      	mov	r0, r7
 8008504:	612e      	str	r6, [r5, #16]
 8008506:	4621      	mov	r1, r4
 8008508:	f7ff fde2 	bl	80080d0 <_Bfree>
 800850c:	4628      	mov	r0, r5
 800850e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008512:	f842 0f04 	str.w	r0, [r2, #4]!
 8008516:	3301      	adds	r3, #1
 8008518:	e7c5      	b.n	80084a6 <__lshift+0x4a>
 800851a:	3904      	subs	r1, #4
 800851c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008520:	f841 2f04 	str.w	r2, [r1, #4]!
 8008524:	459c      	cmp	ip, r3
 8008526:	d8f9      	bhi.n	800851c <__lshift+0xc0>
 8008528:	e7ea      	b.n	8008500 <__lshift+0xa4>
 800852a:	bf00      	nop
 800852c:	0800a400 	.word	0x0800a400
 8008530:	0800a411 	.word	0x0800a411

08008534 <__mcmp>:
 8008534:	690a      	ldr	r2, [r1, #16]
 8008536:	4603      	mov	r3, r0
 8008538:	6900      	ldr	r0, [r0, #16]
 800853a:	1a80      	subs	r0, r0, r2
 800853c:	b530      	push	{r4, r5, lr}
 800853e:	d10e      	bne.n	800855e <__mcmp+0x2a>
 8008540:	3314      	adds	r3, #20
 8008542:	3114      	adds	r1, #20
 8008544:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008548:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800854c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008550:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008554:	4295      	cmp	r5, r2
 8008556:	d003      	beq.n	8008560 <__mcmp+0x2c>
 8008558:	d205      	bcs.n	8008566 <__mcmp+0x32>
 800855a:	f04f 30ff 	mov.w	r0, #4294967295
 800855e:	bd30      	pop	{r4, r5, pc}
 8008560:	42a3      	cmp	r3, r4
 8008562:	d3f3      	bcc.n	800854c <__mcmp+0x18>
 8008564:	e7fb      	b.n	800855e <__mcmp+0x2a>
 8008566:	2001      	movs	r0, #1
 8008568:	e7f9      	b.n	800855e <__mcmp+0x2a>
	...

0800856c <__mdiff>:
 800856c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	4689      	mov	r9, r1
 8008572:	4606      	mov	r6, r0
 8008574:	4611      	mov	r1, r2
 8008576:	4648      	mov	r0, r9
 8008578:	4614      	mov	r4, r2
 800857a:	f7ff ffdb 	bl	8008534 <__mcmp>
 800857e:	1e05      	subs	r5, r0, #0
 8008580:	d112      	bne.n	80085a8 <__mdiff+0x3c>
 8008582:	4629      	mov	r1, r5
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff fd63 	bl	8008050 <_Balloc>
 800858a:	4602      	mov	r2, r0
 800858c:	b928      	cbnz	r0, 800859a <__mdiff+0x2e>
 800858e:	4b3f      	ldr	r3, [pc, #252]	@ (800868c <__mdiff+0x120>)
 8008590:	f240 2137 	movw	r1, #567	@ 0x237
 8008594:	483e      	ldr	r0, [pc, #248]	@ (8008690 <__mdiff+0x124>)
 8008596:	f000 fb11 	bl	8008bbc <__assert_func>
 800859a:	2301      	movs	r3, #1
 800859c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085a0:	4610      	mov	r0, r2
 80085a2:	b003      	add	sp, #12
 80085a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a8:	bfbc      	itt	lt
 80085aa:	464b      	movlt	r3, r9
 80085ac:	46a1      	movlt	r9, r4
 80085ae:	4630      	mov	r0, r6
 80085b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085b4:	bfba      	itte	lt
 80085b6:	461c      	movlt	r4, r3
 80085b8:	2501      	movlt	r5, #1
 80085ba:	2500      	movge	r5, #0
 80085bc:	f7ff fd48 	bl	8008050 <_Balloc>
 80085c0:	4602      	mov	r2, r0
 80085c2:	b918      	cbnz	r0, 80085cc <__mdiff+0x60>
 80085c4:	4b31      	ldr	r3, [pc, #196]	@ (800868c <__mdiff+0x120>)
 80085c6:	f240 2145 	movw	r1, #581	@ 0x245
 80085ca:	e7e3      	b.n	8008594 <__mdiff+0x28>
 80085cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085d0:	6926      	ldr	r6, [r4, #16]
 80085d2:	60c5      	str	r5, [r0, #12]
 80085d4:	f109 0310 	add.w	r3, r9, #16
 80085d8:	f109 0514 	add.w	r5, r9, #20
 80085dc:	f104 0e14 	add.w	lr, r4, #20
 80085e0:	f100 0b14 	add.w	fp, r0, #20
 80085e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	46d9      	mov	r9, fp
 80085f0:	f04f 0c00 	mov.w	ip, #0
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	fa1f f38a 	uxth.w	r3, sl
 8008604:	4619      	mov	r1, r3
 8008606:	b283      	uxth	r3, r0
 8008608:	1acb      	subs	r3, r1, r3
 800860a:	0c00      	lsrs	r0, r0, #16
 800860c:	4463      	add	r3, ip
 800860e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008612:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008616:	b29b      	uxth	r3, r3
 8008618:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800861c:	4576      	cmp	r6, lr
 800861e:	f849 3b04 	str.w	r3, [r9], #4
 8008622:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008626:	d8e5      	bhi.n	80085f4 <__mdiff+0x88>
 8008628:	1b33      	subs	r3, r6, r4
 800862a:	3b15      	subs	r3, #21
 800862c:	f023 0303 	bic.w	r3, r3, #3
 8008630:	3415      	adds	r4, #21
 8008632:	3304      	adds	r3, #4
 8008634:	42a6      	cmp	r6, r4
 8008636:	bf38      	it	cc
 8008638:	2304      	movcc	r3, #4
 800863a:	441d      	add	r5, r3
 800863c:	445b      	add	r3, fp
 800863e:	461e      	mov	r6, r3
 8008640:	462c      	mov	r4, r5
 8008642:	4544      	cmp	r4, r8
 8008644:	d30e      	bcc.n	8008664 <__mdiff+0xf8>
 8008646:	f108 0103 	add.w	r1, r8, #3
 800864a:	1b49      	subs	r1, r1, r5
 800864c:	f021 0103 	bic.w	r1, r1, #3
 8008650:	3d03      	subs	r5, #3
 8008652:	45a8      	cmp	r8, r5
 8008654:	bf38      	it	cc
 8008656:	2100      	movcc	r1, #0
 8008658:	440b      	add	r3, r1
 800865a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800865e:	b191      	cbz	r1, 8008686 <__mdiff+0x11a>
 8008660:	6117      	str	r7, [r2, #16]
 8008662:	e79d      	b.n	80085a0 <__mdiff+0x34>
 8008664:	f854 1b04 	ldr.w	r1, [r4], #4
 8008668:	46e6      	mov	lr, ip
 800866a:	0c08      	lsrs	r0, r1, #16
 800866c:	fa1c fc81 	uxtah	ip, ip, r1
 8008670:	4471      	add	r1, lr
 8008672:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008676:	b289      	uxth	r1, r1
 8008678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800867c:	f846 1b04 	str.w	r1, [r6], #4
 8008680:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008684:	e7dd      	b.n	8008642 <__mdiff+0xd6>
 8008686:	3f01      	subs	r7, #1
 8008688:	e7e7      	b.n	800865a <__mdiff+0xee>
 800868a:	bf00      	nop
 800868c:	0800a400 	.word	0x0800a400
 8008690:	0800a411 	.word	0x0800a411

08008694 <__d2b>:
 8008694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008698:	460f      	mov	r7, r1
 800869a:	2101      	movs	r1, #1
 800869c:	ec59 8b10 	vmov	r8, r9, d0
 80086a0:	4616      	mov	r6, r2
 80086a2:	f7ff fcd5 	bl	8008050 <_Balloc>
 80086a6:	4604      	mov	r4, r0
 80086a8:	b930      	cbnz	r0, 80086b8 <__d2b+0x24>
 80086aa:	4602      	mov	r2, r0
 80086ac:	4b23      	ldr	r3, [pc, #140]	@ (800873c <__d2b+0xa8>)
 80086ae:	4824      	ldr	r0, [pc, #144]	@ (8008740 <__d2b+0xac>)
 80086b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80086b4:	f000 fa82 	bl	8008bbc <__assert_func>
 80086b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086c0:	b10d      	cbz	r5, 80086c6 <__d2b+0x32>
 80086c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	f1b8 0300 	subs.w	r3, r8, #0
 80086cc:	d023      	beq.n	8008716 <__d2b+0x82>
 80086ce:	4668      	mov	r0, sp
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	f7ff fd84 	bl	80081de <__lo0bits>
 80086d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086da:	b1d0      	cbz	r0, 8008712 <__d2b+0x7e>
 80086dc:	f1c0 0320 	rsb	r3, r0, #32
 80086e0:	fa02 f303 	lsl.w	r3, r2, r3
 80086e4:	430b      	orrs	r3, r1
 80086e6:	40c2      	lsrs	r2, r0
 80086e8:	6163      	str	r3, [r4, #20]
 80086ea:	9201      	str	r2, [sp, #4]
 80086ec:	9b01      	ldr	r3, [sp, #4]
 80086ee:	61a3      	str	r3, [r4, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bf0c      	ite	eq
 80086f4:	2201      	moveq	r2, #1
 80086f6:	2202      	movne	r2, #2
 80086f8:	6122      	str	r2, [r4, #16]
 80086fa:	b1a5      	cbz	r5, 8008726 <__d2b+0x92>
 80086fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008700:	4405      	add	r5, r0
 8008702:	603d      	str	r5, [r7, #0]
 8008704:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008708:	6030      	str	r0, [r6, #0]
 800870a:	4620      	mov	r0, r4
 800870c:	b003      	add	sp, #12
 800870e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008712:	6161      	str	r1, [r4, #20]
 8008714:	e7ea      	b.n	80086ec <__d2b+0x58>
 8008716:	a801      	add	r0, sp, #4
 8008718:	f7ff fd61 	bl	80081de <__lo0bits>
 800871c:	9b01      	ldr	r3, [sp, #4]
 800871e:	6163      	str	r3, [r4, #20]
 8008720:	3020      	adds	r0, #32
 8008722:	2201      	movs	r2, #1
 8008724:	e7e8      	b.n	80086f8 <__d2b+0x64>
 8008726:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800872a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800872e:	6038      	str	r0, [r7, #0]
 8008730:	6918      	ldr	r0, [r3, #16]
 8008732:	f7ff fd35 	bl	80081a0 <__hi0bits>
 8008736:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800873a:	e7e5      	b.n	8008708 <__d2b+0x74>
 800873c:	0800a400 	.word	0x0800a400
 8008740:	0800a411 	.word	0x0800a411

08008744 <__ssputs_r>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	688e      	ldr	r6, [r1, #8]
 800874a:	461f      	mov	r7, r3
 800874c:	42be      	cmp	r6, r7
 800874e:	680b      	ldr	r3, [r1, #0]
 8008750:	4682      	mov	sl, r0
 8008752:	460c      	mov	r4, r1
 8008754:	4690      	mov	r8, r2
 8008756:	d82d      	bhi.n	80087b4 <__ssputs_r+0x70>
 8008758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800875c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008760:	d026      	beq.n	80087b0 <__ssputs_r+0x6c>
 8008762:	6965      	ldr	r5, [r4, #20]
 8008764:	6909      	ldr	r1, [r1, #16]
 8008766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800876a:	eba3 0901 	sub.w	r9, r3, r1
 800876e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008772:	1c7b      	adds	r3, r7, #1
 8008774:	444b      	add	r3, r9
 8008776:	106d      	asrs	r5, r5, #1
 8008778:	429d      	cmp	r5, r3
 800877a:	bf38      	it	cc
 800877c:	461d      	movcc	r5, r3
 800877e:	0553      	lsls	r3, r2, #21
 8008780:	d527      	bpl.n	80087d2 <__ssputs_r+0x8e>
 8008782:	4629      	mov	r1, r5
 8008784:	f7ff fbd8 	bl	8007f38 <_malloc_r>
 8008788:	4606      	mov	r6, r0
 800878a:	b360      	cbz	r0, 80087e6 <__ssputs_r+0xa2>
 800878c:	6921      	ldr	r1, [r4, #16]
 800878e:	464a      	mov	r2, r9
 8008790:	f000 fa06 	bl	8008ba0 <memcpy>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800879a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	6126      	str	r6, [r4, #16]
 80087a2:	6165      	str	r5, [r4, #20]
 80087a4:	444e      	add	r6, r9
 80087a6:	eba5 0509 	sub.w	r5, r5, r9
 80087aa:	6026      	str	r6, [r4, #0]
 80087ac:	60a5      	str	r5, [r4, #8]
 80087ae:	463e      	mov	r6, r7
 80087b0:	42be      	cmp	r6, r7
 80087b2:	d900      	bls.n	80087b6 <__ssputs_r+0x72>
 80087b4:	463e      	mov	r6, r7
 80087b6:	6820      	ldr	r0, [r4, #0]
 80087b8:	4632      	mov	r2, r6
 80087ba:	4641      	mov	r1, r8
 80087bc:	f000 f9c6 	bl	8008b4c <memmove>
 80087c0:	68a3      	ldr	r3, [r4, #8]
 80087c2:	1b9b      	subs	r3, r3, r6
 80087c4:	60a3      	str	r3, [r4, #8]
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	4433      	add	r3, r6
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	2000      	movs	r0, #0
 80087ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d2:	462a      	mov	r2, r5
 80087d4:	f000 fa36 	bl	8008c44 <_realloc_r>
 80087d8:	4606      	mov	r6, r0
 80087da:	2800      	cmp	r0, #0
 80087dc:	d1e0      	bne.n	80087a0 <__ssputs_r+0x5c>
 80087de:	6921      	ldr	r1, [r4, #16]
 80087e0:	4650      	mov	r0, sl
 80087e2:	f7ff fb35 	bl	8007e50 <_free_r>
 80087e6:	230c      	movs	r3, #12
 80087e8:	f8ca 3000 	str.w	r3, [sl]
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	e7e9      	b.n	80087ce <__ssputs_r+0x8a>
	...

080087fc <_svfiprintf_r>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	4698      	mov	r8, r3
 8008802:	898b      	ldrh	r3, [r1, #12]
 8008804:	061b      	lsls	r3, r3, #24
 8008806:	b09d      	sub	sp, #116	@ 0x74
 8008808:	4607      	mov	r7, r0
 800880a:	460d      	mov	r5, r1
 800880c:	4614      	mov	r4, r2
 800880e:	d510      	bpl.n	8008832 <_svfiprintf_r+0x36>
 8008810:	690b      	ldr	r3, [r1, #16]
 8008812:	b973      	cbnz	r3, 8008832 <_svfiprintf_r+0x36>
 8008814:	2140      	movs	r1, #64	@ 0x40
 8008816:	f7ff fb8f 	bl	8007f38 <_malloc_r>
 800881a:	6028      	str	r0, [r5, #0]
 800881c:	6128      	str	r0, [r5, #16]
 800881e:	b930      	cbnz	r0, 800882e <_svfiprintf_r+0x32>
 8008820:	230c      	movs	r3, #12
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	b01d      	add	sp, #116	@ 0x74
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882e:	2340      	movs	r3, #64	@ 0x40
 8008830:	616b      	str	r3, [r5, #20]
 8008832:	2300      	movs	r3, #0
 8008834:	9309      	str	r3, [sp, #36]	@ 0x24
 8008836:	2320      	movs	r3, #32
 8008838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800883c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008840:	2330      	movs	r3, #48	@ 0x30
 8008842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089e0 <_svfiprintf_r+0x1e4>
 8008846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800884a:	f04f 0901 	mov.w	r9, #1
 800884e:	4623      	mov	r3, r4
 8008850:	469a      	mov	sl, r3
 8008852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008856:	b10a      	cbz	r2, 800885c <_svfiprintf_r+0x60>
 8008858:	2a25      	cmp	r2, #37	@ 0x25
 800885a:	d1f9      	bne.n	8008850 <_svfiprintf_r+0x54>
 800885c:	ebba 0b04 	subs.w	fp, sl, r4
 8008860:	d00b      	beq.n	800887a <_svfiprintf_r+0x7e>
 8008862:	465b      	mov	r3, fp
 8008864:	4622      	mov	r2, r4
 8008866:	4629      	mov	r1, r5
 8008868:	4638      	mov	r0, r7
 800886a:	f7ff ff6b 	bl	8008744 <__ssputs_r>
 800886e:	3001      	adds	r0, #1
 8008870:	f000 80a7 	beq.w	80089c2 <_svfiprintf_r+0x1c6>
 8008874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008876:	445a      	add	r2, fp
 8008878:	9209      	str	r2, [sp, #36]	@ 0x24
 800887a:	f89a 3000 	ldrb.w	r3, [sl]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 809f 	beq.w	80089c2 <_svfiprintf_r+0x1c6>
 8008884:	2300      	movs	r3, #0
 8008886:	f04f 32ff 	mov.w	r2, #4294967295
 800888a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888e:	f10a 0a01 	add.w	sl, sl, #1
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	9307      	str	r3, [sp, #28]
 8008896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800889a:	931a      	str	r3, [sp, #104]	@ 0x68
 800889c:	4654      	mov	r4, sl
 800889e:	2205      	movs	r2, #5
 80088a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a4:	484e      	ldr	r0, [pc, #312]	@ (80089e0 <_svfiprintf_r+0x1e4>)
 80088a6:	f7f7 fcb3 	bl	8000210 <memchr>
 80088aa:	9a04      	ldr	r2, [sp, #16]
 80088ac:	b9d8      	cbnz	r0, 80088e6 <_svfiprintf_r+0xea>
 80088ae:	06d0      	lsls	r0, r2, #27
 80088b0:	bf44      	itt	mi
 80088b2:	2320      	movmi	r3, #32
 80088b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088b8:	0711      	lsls	r1, r2, #28
 80088ba:	bf44      	itt	mi
 80088bc:	232b      	movmi	r3, #43	@ 0x2b
 80088be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088c2:	f89a 3000 	ldrb.w	r3, [sl]
 80088c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c8:	d015      	beq.n	80088f6 <_svfiprintf_r+0xfa>
 80088ca:	9a07      	ldr	r2, [sp, #28]
 80088cc:	4654      	mov	r4, sl
 80088ce:	2000      	movs	r0, #0
 80088d0:	f04f 0c0a 	mov.w	ip, #10
 80088d4:	4621      	mov	r1, r4
 80088d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088da:	3b30      	subs	r3, #48	@ 0x30
 80088dc:	2b09      	cmp	r3, #9
 80088de:	d94b      	bls.n	8008978 <_svfiprintf_r+0x17c>
 80088e0:	b1b0      	cbz	r0, 8008910 <_svfiprintf_r+0x114>
 80088e2:	9207      	str	r2, [sp, #28]
 80088e4:	e014      	b.n	8008910 <_svfiprintf_r+0x114>
 80088e6:	eba0 0308 	sub.w	r3, r0, r8
 80088ea:	fa09 f303 	lsl.w	r3, r9, r3
 80088ee:	4313      	orrs	r3, r2
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	46a2      	mov	sl, r4
 80088f4:	e7d2      	b.n	800889c <_svfiprintf_r+0xa0>
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	1d19      	adds	r1, r3, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	9103      	str	r1, [sp, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bfbb      	ittet	lt
 8008902:	425b      	neglt	r3, r3
 8008904:	f042 0202 	orrlt.w	r2, r2, #2
 8008908:	9307      	strge	r3, [sp, #28]
 800890a:	9307      	strlt	r3, [sp, #28]
 800890c:	bfb8      	it	lt
 800890e:	9204      	strlt	r2, [sp, #16]
 8008910:	7823      	ldrb	r3, [r4, #0]
 8008912:	2b2e      	cmp	r3, #46	@ 0x2e
 8008914:	d10a      	bne.n	800892c <_svfiprintf_r+0x130>
 8008916:	7863      	ldrb	r3, [r4, #1]
 8008918:	2b2a      	cmp	r3, #42	@ 0x2a
 800891a:	d132      	bne.n	8008982 <_svfiprintf_r+0x186>
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	9203      	str	r2, [sp, #12]
 8008924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008928:	3402      	adds	r4, #2
 800892a:	9305      	str	r3, [sp, #20]
 800892c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089f0 <_svfiprintf_r+0x1f4>
 8008930:	7821      	ldrb	r1, [r4, #0]
 8008932:	2203      	movs	r2, #3
 8008934:	4650      	mov	r0, sl
 8008936:	f7f7 fc6b 	bl	8000210 <memchr>
 800893a:	b138      	cbz	r0, 800894c <_svfiprintf_r+0x150>
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	eba0 000a 	sub.w	r0, r0, sl
 8008942:	2240      	movs	r2, #64	@ 0x40
 8008944:	4082      	lsls	r2, r0
 8008946:	4313      	orrs	r3, r2
 8008948:	3401      	adds	r4, #1
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008950:	4824      	ldr	r0, [pc, #144]	@ (80089e4 <_svfiprintf_r+0x1e8>)
 8008952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008956:	2206      	movs	r2, #6
 8008958:	f7f7 fc5a 	bl	8000210 <memchr>
 800895c:	2800      	cmp	r0, #0
 800895e:	d036      	beq.n	80089ce <_svfiprintf_r+0x1d2>
 8008960:	4b21      	ldr	r3, [pc, #132]	@ (80089e8 <_svfiprintf_r+0x1ec>)
 8008962:	bb1b      	cbnz	r3, 80089ac <_svfiprintf_r+0x1b0>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	3307      	adds	r3, #7
 8008968:	f023 0307 	bic.w	r3, r3, #7
 800896c:	3308      	adds	r3, #8
 800896e:	9303      	str	r3, [sp, #12]
 8008970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008972:	4433      	add	r3, r6
 8008974:	9309      	str	r3, [sp, #36]	@ 0x24
 8008976:	e76a      	b.n	800884e <_svfiprintf_r+0x52>
 8008978:	fb0c 3202 	mla	r2, ip, r2, r3
 800897c:	460c      	mov	r4, r1
 800897e:	2001      	movs	r0, #1
 8008980:	e7a8      	b.n	80088d4 <_svfiprintf_r+0xd8>
 8008982:	2300      	movs	r3, #0
 8008984:	3401      	adds	r4, #1
 8008986:	9305      	str	r3, [sp, #20]
 8008988:	4619      	mov	r1, r3
 800898a:	f04f 0c0a 	mov.w	ip, #10
 800898e:	4620      	mov	r0, r4
 8008990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008994:	3a30      	subs	r2, #48	@ 0x30
 8008996:	2a09      	cmp	r2, #9
 8008998:	d903      	bls.n	80089a2 <_svfiprintf_r+0x1a6>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0c6      	beq.n	800892c <_svfiprintf_r+0x130>
 800899e:	9105      	str	r1, [sp, #20]
 80089a0:	e7c4      	b.n	800892c <_svfiprintf_r+0x130>
 80089a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a6:	4604      	mov	r4, r0
 80089a8:	2301      	movs	r3, #1
 80089aa:	e7f0      	b.n	800898e <_svfiprintf_r+0x192>
 80089ac:	ab03      	add	r3, sp, #12
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	462a      	mov	r2, r5
 80089b2:	4b0e      	ldr	r3, [pc, #56]	@ (80089ec <_svfiprintf_r+0x1f0>)
 80089b4:	a904      	add	r1, sp, #16
 80089b6:	4638      	mov	r0, r7
 80089b8:	f7fd fe92 	bl	80066e0 <_printf_float>
 80089bc:	1c42      	adds	r2, r0, #1
 80089be:	4606      	mov	r6, r0
 80089c0:	d1d6      	bne.n	8008970 <_svfiprintf_r+0x174>
 80089c2:	89ab      	ldrh	r3, [r5, #12]
 80089c4:	065b      	lsls	r3, r3, #25
 80089c6:	f53f af2d 	bmi.w	8008824 <_svfiprintf_r+0x28>
 80089ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089cc:	e72c      	b.n	8008828 <_svfiprintf_r+0x2c>
 80089ce:	ab03      	add	r3, sp, #12
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	462a      	mov	r2, r5
 80089d4:	4b05      	ldr	r3, [pc, #20]	@ (80089ec <_svfiprintf_r+0x1f0>)
 80089d6:	a904      	add	r1, sp, #16
 80089d8:	4638      	mov	r0, r7
 80089da:	f7fe f919 	bl	8006c10 <_printf_i>
 80089de:	e7ed      	b.n	80089bc <_svfiprintf_r+0x1c0>
 80089e0:	0800a46a 	.word	0x0800a46a
 80089e4:	0800a474 	.word	0x0800a474
 80089e8:	080066e1 	.word	0x080066e1
 80089ec:	08008745 	.word	0x08008745
 80089f0:	0800a470 	.word	0x0800a470

080089f4 <__sflush_r>:
 80089f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fc:	0716      	lsls	r6, r2, #28
 80089fe:	4605      	mov	r5, r0
 8008a00:	460c      	mov	r4, r1
 8008a02:	d454      	bmi.n	8008aae <__sflush_r+0xba>
 8008a04:	684b      	ldr	r3, [r1, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dc02      	bgt.n	8008a10 <__sflush_r+0x1c>
 8008a0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dd48      	ble.n	8008aa2 <__sflush_r+0xae>
 8008a10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a12:	2e00      	cmp	r6, #0
 8008a14:	d045      	beq.n	8008aa2 <__sflush_r+0xae>
 8008a16:	2300      	movs	r3, #0
 8008a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a1c:	682f      	ldr	r7, [r5, #0]
 8008a1e:	6a21      	ldr	r1, [r4, #32]
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	d030      	beq.n	8008a86 <__sflush_r+0x92>
 8008a24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	0759      	lsls	r1, r3, #29
 8008a2a:	d505      	bpl.n	8008a38 <__sflush_r+0x44>
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	1ad2      	subs	r2, r2, r3
 8008a30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a32:	b10b      	cbz	r3, 8008a38 <__sflush_r+0x44>
 8008a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a36:	1ad2      	subs	r2, r2, r3
 8008a38:	2300      	movs	r3, #0
 8008a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a3c:	6a21      	ldr	r1, [r4, #32]
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b0      	blx	r6
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	d106      	bne.n	8008a56 <__sflush_r+0x62>
 8008a48:	6829      	ldr	r1, [r5, #0]
 8008a4a:	291d      	cmp	r1, #29
 8008a4c:	d82b      	bhi.n	8008aa6 <__sflush_r+0xb2>
 8008a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8008af8 <__sflush_r+0x104>)
 8008a50:	40ca      	lsrs	r2, r1
 8008a52:	07d6      	lsls	r6, r2, #31
 8008a54:	d527      	bpl.n	8008aa6 <__sflush_r+0xb2>
 8008a56:	2200      	movs	r2, #0
 8008a58:	6062      	str	r2, [r4, #4]
 8008a5a:	04d9      	lsls	r1, r3, #19
 8008a5c:	6922      	ldr	r2, [r4, #16]
 8008a5e:	6022      	str	r2, [r4, #0]
 8008a60:	d504      	bpl.n	8008a6c <__sflush_r+0x78>
 8008a62:	1c42      	adds	r2, r0, #1
 8008a64:	d101      	bne.n	8008a6a <__sflush_r+0x76>
 8008a66:	682b      	ldr	r3, [r5, #0]
 8008a68:	b903      	cbnz	r3, 8008a6c <__sflush_r+0x78>
 8008a6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a6e:	602f      	str	r7, [r5, #0]
 8008a70:	b1b9      	cbz	r1, 8008aa2 <__sflush_r+0xae>
 8008a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a76:	4299      	cmp	r1, r3
 8008a78:	d002      	beq.n	8008a80 <__sflush_r+0x8c>
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f7ff f9e8 	bl	8007e50 <_free_r>
 8008a80:	2300      	movs	r3, #0
 8008a82:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a84:	e00d      	b.n	8008aa2 <__sflush_r+0xae>
 8008a86:	2301      	movs	r3, #1
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b0      	blx	r6
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	1c50      	adds	r0, r2, #1
 8008a90:	d1c9      	bne.n	8008a26 <__sflush_r+0x32>
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0c6      	beq.n	8008a26 <__sflush_r+0x32>
 8008a98:	2b1d      	cmp	r3, #29
 8008a9a:	d001      	beq.n	8008aa0 <__sflush_r+0xac>
 8008a9c:	2b16      	cmp	r3, #22
 8008a9e:	d11e      	bne.n	8008ade <__sflush_r+0xea>
 8008aa0:	602f      	str	r7, [r5, #0]
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e022      	b.n	8008aec <__sflush_r+0xf8>
 8008aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aaa:	b21b      	sxth	r3, r3
 8008aac:	e01b      	b.n	8008ae6 <__sflush_r+0xf2>
 8008aae:	690f      	ldr	r7, [r1, #16]
 8008ab0:	2f00      	cmp	r7, #0
 8008ab2:	d0f6      	beq.n	8008aa2 <__sflush_r+0xae>
 8008ab4:	0793      	lsls	r3, r2, #30
 8008ab6:	680e      	ldr	r6, [r1, #0]
 8008ab8:	bf08      	it	eq
 8008aba:	694b      	ldreq	r3, [r1, #20]
 8008abc:	600f      	str	r7, [r1, #0]
 8008abe:	bf18      	it	ne
 8008ac0:	2300      	movne	r3, #0
 8008ac2:	eba6 0807 	sub.w	r8, r6, r7
 8008ac6:	608b      	str	r3, [r1, #8]
 8008ac8:	f1b8 0f00 	cmp.w	r8, #0
 8008acc:	dde9      	ble.n	8008aa2 <__sflush_r+0xae>
 8008ace:	6a21      	ldr	r1, [r4, #32]
 8008ad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ad2:	4643      	mov	r3, r8
 8008ad4:	463a      	mov	r2, r7
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b0      	blx	r6
 8008ada:	2800      	cmp	r0, #0
 8008adc:	dc08      	bgt.n	8008af0 <__sflush_r+0xfc>
 8008ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af0:	4407      	add	r7, r0
 8008af2:	eba8 0800 	sub.w	r8, r8, r0
 8008af6:	e7e7      	b.n	8008ac8 <__sflush_r+0xd4>
 8008af8:	20400001 	.word	0x20400001

08008afc <_fflush_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	690b      	ldr	r3, [r1, #16]
 8008b00:	4605      	mov	r5, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	b913      	cbnz	r3, 8008b0c <_fflush_r+0x10>
 8008b06:	2500      	movs	r5, #0
 8008b08:	4628      	mov	r0, r5
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	b118      	cbz	r0, 8008b16 <_fflush_r+0x1a>
 8008b0e:	6a03      	ldr	r3, [r0, #32]
 8008b10:	b90b      	cbnz	r3, 8008b16 <_fflush_r+0x1a>
 8008b12:	f7fe fa27 	bl	8006f64 <__sinit>
 8008b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0f3      	beq.n	8008b06 <_fflush_r+0xa>
 8008b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b20:	07d0      	lsls	r0, r2, #31
 8008b22:	d404      	bmi.n	8008b2e <_fflush_r+0x32>
 8008b24:	0599      	lsls	r1, r3, #22
 8008b26:	d402      	bmi.n	8008b2e <_fflush_r+0x32>
 8008b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b2a:	f7fe fb34 	bl	8007196 <__retarget_lock_acquire_recursive>
 8008b2e:	4628      	mov	r0, r5
 8008b30:	4621      	mov	r1, r4
 8008b32:	f7ff ff5f 	bl	80089f4 <__sflush_r>
 8008b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b38:	07da      	lsls	r2, r3, #31
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	d4e4      	bmi.n	8008b08 <_fflush_r+0xc>
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	059b      	lsls	r3, r3, #22
 8008b42:	d4e1      	bmi.n	8008b08 <_fflush_r+0xc>
 8008b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b46:	f7fe fb27 	bl	8007198 <__retarget_lock_release_recursive>
 8008b4a:	e7dd      	b.n	8008b08 <_fflush_r+0xc>

08008b4c <memmove>:
 8008b4c:	4288      	cmp	r0, r1
 8008b4e:	b510      	push	{r4, lr}
 8008b50:	eb01 0402 	add.w	r4, r1, r2
 8008b54:	d902      	bls.n	8008b5c <memmove+0x10>
 8008b56:	4284      	cmp	r4, r0
 8008b58:	4623      	mov	r3, r4
 8008b5a:	d807      	bhi.n	8008b6c <memmove+0x20>
 8008b5c:	1e43      	subs	r3, r0, #1
 8008b5e:	42a1      	cmp	r1, r4
 8008b60:	d008      	beq.n	8008b74 <memmove+0x28>
 8008b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b6a:	e7f8      	b.n	8008b5e <memmove+0x12>
 8008b6c:	4402      	add	r2, r0
 8008b6e:	4601      	mov	r1, r0
 8008b70:	428a      	cmp	r2, r1
 8008b72:	d100      	bne.n	8008b76 <memmove+0x2a>
 8008b74:	bd10      	pop	{r4, pc}
 8008b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b7e:	e7f7      	b.n	8008b70 <memmove+0x24>

08008b80 <_sbrk_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d06      	ldr	r5, [pc, #24]	@ (8008b9c <_sbrk_r+0x1c>)
 8008b84:	2300      	movs	r3, #0
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	f7fa fa2a 	bl	8002fe4 <_sbrk>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_sbrk_r+0x1a>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_sbrk_r+0x1a>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	20014930 	.word	0x20014930

08008ba0 <memcpy>:
 8008ba0:	440a      	add	r2, r1
 8008ba2:	4291      	cmp	r1, r2
 8008ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba8:	d100      	bne.n	8008bac <memcpy+0xc>
 8008baa:	4770      	bx	lr
 8008bac:	b510      	push	{r4, lr}
 8008bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bb6:	4291      	cmp	r1, r2
 8008bb8:	d1f9      	bne.n	8008bae <memcpy+0xe>
 8008bba:	bd10      	pop	{r4, pc}

08008bbc <__assert_func>:
 8008bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bbe:	4614      	mov	r4, r2
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4b09      	ldr	r3, [pc, #36]	@ (8008be8 <__assert_func+0x2c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	68d8      	ldr	r0, [r3, #12]
 8008bca:	b14c      	cbz	r4, 8008be0 <__assert_func+0x24>
 8008bcc:	4b07      	ldr	r3, [pc, #28]	@ (8008bec <__assert_func+0x30>)
 8008bce:	9100      	str	r1, [sp, #0]
 8008bd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bd4:	4906      	ldr	r1, [pc, #24]	@ (8008bf0 <__assert_func+0x34>)
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	f000 f870 	bl	8008cbc <fiprintf>
 8008bdc:	f000 f880 	bl	8008ce0 <abort>
 8008be0:	4b04      	ldr	r3, [pc, #16]	@ (8008bf4 <__assert_func+0x38>)
 8008be2:	461c      	mov	r4, r3
 8008be4:	e7f3      	b.n	8008bce <__assert_func+0x12>
 8008be6:	bf00      	nop
 8008be8:	20000018 	.word	0x20000018
 8008bec:	0800a485 	.word	0x0800a485
 8008bf0:	0800a492 	.word	0x0800a492
 8008bf4:	0800a4c0 	.word	0x0800a4c0

08008bf8 <_calloc_r>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	fba1 5402 	umull	r5, r4, r1, r2
 8008bfe:	b934      	cbnz	r4, 8008c0e <_calloc_r+0x16>
 8008c00:	4629      	mov	r1, r5
 8008c02:	f7ff f999 	bl	8007f38 <_malloc_r>
 8008c06:	4606      	mov	r6, r0
 8008c08:	b928      	cbnz	r0, 8008c16 <_calloc_r+0x1e>
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	bd70      	pop	{r4, r5, r6, pc}
 8008c0e:	220c      	movs	r2, #12
 8008c10:	6002      	str	r2, [r0, #0]
 8008c12:	2600      	movs	r6, #0
 8008c14:	e7f9      	b.n	8008c0a <_calloc_r+0x12>
 8008c16:	462a      	mov	r2, r5
 8008c18:	4621      	mov	r1, r4
 8008c1a:	f7fe fa3e 	bl	800709a <memset>
 8008c1e:	e7f4      	b.n	8008c0a <_calloc_r+0x12>

08008c20 <__ascii_mbtowc>:
 8008c20:	b082      	sub	sp, #8
 8008c22:	b901      	cbnz	r1, 8008c26 <__ascii_mbtowc+0x6>
 8008c24:	a901      	add	r1, sp, #4
 8008c26:	b142      	cbz	r2, 8008c3a <__ascii_mbtowc+0x1a>
 8008c28:	b14b      	cbz	r3, 8008c3e <__ascii_mbtowc+0x1e>
 8008c2a:	7813      	ldrb	r3, [r2, #0]
 8008c2c:	600b      	str	r3, [r1, #0]
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	1e10      	subs	r0, r2, #0
 8008c32:	bf18      	it	ne
 8008c34:	2001      	movne	r0, #1
 8008c36:	b002      	add	sp, #8
 8008c38:	4770      	bx	lr
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	e7fb      	b.n	8008c36 <__ascii_mbtowc+0x16>
 8008c3e:	f06f 0001 	mvn.w	r0, #1
 8008c42:	e7f8      	b.n	8008c36 <__ascii_mbtowc+0x16>

08008c44 <_realloc_r>:
 8008c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c48:	4607      	mov	r7, r0
 8008c4a:	4614      	mov	r4, r2
 8008c4c:	460d      	mov	r5, r1
 8008c4e:	b921      	cbnz	r1, 8008c5a <_realloc_r+0x16>
 8008c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c54:	4611      	mov	r1, r2
 8008c56:	f7ff b96f 	b.w	8007f38 <_malloc_r>
 8008c5a:	b92a      	cbnz	r2, 8008c68 <_realloc_r+0x24>
 8008c5c:	f7ff f8f8 	bl	8007e50 <_free_r>
 8008c60:	4625      	mov	r5, r4
 8008c62:	4628      	mov	r0, r5
 8008c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c68:	f000 f841 	bl	8008cee <_malloc_usable_size_r>
 8008c6c:	4284      	cmp	r4, r0
 8008c6e:	4606      	mov	r6, r0
 8008c70:	d802      	bhi.n	8008c78 <_realloc_r+0x34>
 8008c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c76:	d8f4      	bhi.n	8008c62 <_realloc_r+0x1e>
 8008c78:	4621      	mov	r1, r4
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	f7ff f95c 	bl	8007f38 <_malloc_r>
 8008c80:	4680      	mov	r8, r0
 8008c82:	b908      	cbnz	r0, 8008c88 <_realloc_r+0x44>
 8008c84:	4645      	mov	r5, r8
 8008c86:	e7ec      	b.n	8008c62 <_realloc_r+0x1e>
 8008c88:	42b4      	cmp	r4, r6
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	bf28      	it	cs
 8008c90:	4632      	movcs	r2, r6
 8008c92:	f7ff ff85 	bl	8008ba0 <memcpy>
 8008c96:	4629      	mov	r1, r5
 8008c98:	4638      	mov	r0, r7
 8008c9a:	f7ff f8d9 	bl	8007e50 <_free_r>
 8008c9e:	e7f1      	b.n	8008c84 <_realloc_r+0x40>

08008ca0 <__ascii_wctomb>:
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	4608      	mov	r0, r1
 8008ca4:	b141      	cbz	r1, 8008cb8 <__ascii_wctomb+0x18>
 8008ca6:	2aff      	cmp	r2, #255	@ 0xff
 8008ca8:	d904      	bls.n	8008cb4 <__ascii_wctomb+0x14>
 8008caa:	228a      	movs	r2, #138	@ 0x8a
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	4770      	bx	lr
 8008cb4:	700a      	strb	r2, [r1, #0]
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	4770      	bx	lr
	...

08008cbc <fiprintf>:
 8008cbc:	b40e      	push	{r1, r2, r3}
 8008cbe:	b503      	push	{r0, r1, lr}
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	ab03      	add	r3, sp, #12
 8008cc4:	4805      	ldr	r0, [pc, #20]	@ (8008cdc <fiprintf+0x20>)
 8008cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cca:	6800      	ldr	r0, [r0, #0]
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	f000 f83f 	bl	8008d50 <_vfiprintf_r>
 8008cd2:	b002      	add	sp, #8
 8008cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cd8:	b003      	add	sp, #12
 8008cda:	4770      	bx	lr
 8008cdc:	20000018 	.word	0x20000018

08008ce0 <abort>:
 8008ce0:	b508      	push	{r3, lr}
 8008ce2:	2006      	movs	r0, #6
 8008ce4:	f000 fa08 	bl	80090f8 <raise>
 8008ce8:	2001      	movs	r0, #1
 8008cea:	f7fa f94b 	bl	8002f84 <_exit>

08008cee <_malloc_usable_size_r>:
 8008cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf2:	1f18      	subs	r0, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bfbc      	itt	lt
 8008cf8:	580b      	ldrlt	r3, [r1, r0]
 8008cfa:	18c0      	addlt	r0, r0, r3
 8008cfc:	4770      	bx	lr

08008cfe <__sfputc_r>:
 8008cfe:	6893      	ldr	r3, [r2, #8]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	b410      	push	{r4}
 8008d06:	6093      	str	r3, [r2, #8]
 8008d08:	da08      	bge.n	8008d1c <__sfputc_r+0x1e>
 8008d0a:	6994      	ldr	r4, [r2, #24]
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	db01      	blt.n	8008d14 <__sfputc_r+0x16>
 8008d10:	290a      	cmp	r1, #10
 8008d12:	d103      	bne.n	8008d1c <__sfputc_r+0x1e>
 8008d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d18:	f000 b932 	b.w	8008f80 <__swbuf_r>
 8008d1c:	6813      	ldr	r3, [r2, #0]
 8008d1e:	1c58      	adds	r0, r3, #1
 8008d20:	6010      	str	r0, [r2, #0]
 8008d22:	7019      	strb	r1, [r3, #0]
 8008d24:	4608      	mov	r0, r1
 8008d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <__sfputs_r>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	4606      	mov	r6, r0
 8008d30:	460f      	mov	r7, r1
 8008d32:	4614      	mov	r4, r2
 8008d34:	18d5      	adds	r5, r2, r3
 8008d36:	42ac      	cmp	r4, r5
 8008d38:	d101      	bne.n	8008d3e <__sfputs_r+0x12>
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	e007      	b.n	8008d4e <__sfputs_r+0x22>
 8008d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d42:	463a      	mov	r2, r7
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7ff ffda 	bl	8008cfe <__sfputc_r>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	d1f3      	bne.n	8008d36 <__sfputs_r+0xa>
 8008d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d50 <_vfiprintf_r>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	460d      	mov	r5, r1
 8008d56:	b09d      	sub	sp, #116	@ 0x74
 8008d58:	4614      	mov	r4, r2
 8008d5a:	4698      	mov	r8, r3
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	b118      	cbz	r0, 8008d68 <_vfiprintf_r+0x18>
 8008d60:	6a03      	ldr	r3, [r0, #32]
 8008d62:	b90b      	cbnz	r3, 8008d68 <_vfiprintf_r+0x18>
 8008d64:	f7fe f8fe 	bl	8006f64 <__sinit>
 8008d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d6a:	07d9      	lsls	r1, r3, #31
 8008d6c:	d405      	bmi.n	8008d7a <_vfiprintf_r+0x2a>
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	059a      	lsls	r2, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_vfiprintf_r+0x2a>
 8008d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d76:	f7fe fa0e 	bl	8007196 <__retarget_lock_acquire_recursive>
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	071b      	lsls	r3, r3, #28
 8008d7e:	d501      	bpl.n	8008d84 <_vfiprintf_r+0x34>
 8008d80:	692b      	ldr	r3, [r5, #16]
 8008d82:	b99b      	cbnz	r3, 8008dac <_vfiprintf_r+0x5c>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4630      	mov	r0, r6
 8008d88:	f000 f938 	bl	8008ffc <__swsetup_r>
 8008d8c:	b170      	cbz	r0, 8008dac <_vfiprintf_r+0x5c>
 8008d8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d90:	07dc      	lsls	r4, r3, #31
 8008d92:	d504      	bpl.n	8008d9e <_vfiprintf_r+0x4e>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	b01d      	add	sp, #116	@ 0x74
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	89ab      	ldrh	r3, [r5, #12]
 8008da0:	0598      	lsls	r0, r3, #22
 8008da2:	d4f7      	bmi.n	8008d94 <_vfiprintf_r+0x44>
 8008da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008da6:	f7fe f9f7 	bl	8007198 <__retarget_lock_release_recursive>
 8008daa:	e7f3      	b.n	8008d94 <_vfiprintf_r+0x44>
 8008dac:	2300      	movs	r3, #0
 8008dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db0:	2320      	movs	r3, #32
 8008db2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dba:	2330      	movs	r3, #48	@ 0x30
 8008dbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f6c <_vfiprintf_r+0x21c>
 8008dc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dc4:	f04f 0901 	mov.w	r9, #1
 8008dc8:	4623      	mov	r3, r4
 8008dca:	469a      	mov	sl, r3
 8008dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dd0:	b10a      	cbz	r2, 8008dd6 <_vfiprintf_r+0x86>
 8008dd2:	2a25      	cmp	r2, #37	@ 0x25
 8008dd4:	d1f9      	bne.n	8008dca <_vfiprintf_r+0x7a>
 8008dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8008dda:	d00b      	beq.n	8008df4 <_vfiprintf_r+0xa4>
 8008ddc:	465b      	mov	r3, fp
 8008dde:	4622      	mov	r2, r4
 8008de0:	4629      	mov	r1, r5
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7ff ffa2 	bl	8008d2c <__sfputs_r>
 8008de8:	3001      	adds	r0, #1
 8008dea:	f000 80a7 	beq.w	8008f3c <_vfiprintf_r+0x1ec>
 8008dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df0:	445a      	add	r2, fp
 8008df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008df4:	f89a 3000 	ldrb.w	r3, [sl]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 809f 	beq.w	8008f3c <_vfiprintf_r+0x1ec>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f04f 32ff 	mov.w	r2, #4294967295
 8008e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e08:	f10a 0a01 	add.w	sl, sl, #1
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	9307      	str	r3, [sp, #28]
 8008e10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e14:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e16:	4654      	mov	r4, sl
 8008e18:	2205      	movs	r2, #5
 8008e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1e:	4853      	ldr	r0, [pc, #332]	@ (8008f6c <_vfiprintf_r+0x21c>)
 8008e20:	f7f7 f9f6 	bl	8000210 <memchr>
 8008e24:	9a04      	ldr	r2, [sp, #16]
 8008e26:	b9d8      	cbnz	r0, 8008e60 <_vfiprintf_r+0x110>
 8008e28:	06d1      	lsls	r1, r2, #27
 8008e2a:	bf44      	itt	mi
 8008e2c:	2320      	movmi	r3, #32
 8008e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e32:	0713      	lsls	r3, r2, #28
 8008e34:	bf44      	itt	mi
 8008e36:	232b      	movmi	r3, #43	@ 0x2b
 8008e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e42:	d015      	beq.n	8008e70 <_vfiprintf_r+0x120>
 8008e44:	9a07      	ldr	r2, [sp, #28]
 8008e46:	4654      	mov	r4, sl
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f04f 0c0a 	mov.w	ip, #10
 8008e4e:	4621      	mov	r1, r4
 8008e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e54:	3b30      	subs	r3, #48	@ 0x30
 8008e56:	2b09      	cmp	r3, #9
 8008e58:	d94b      	bls.n	8008ef2 <_vfiprintf_r+0x1a2>
 8008e5a:	b1b0      	cbz	r0, 8008e8a <_vfiprintf_r+0x13a>
 8008e5c:	9207      	str	r2, [sp, #28]
 8008e5e:	e014      	b.n	8008e8a <_vfiprintf_r+0x13a>
 8008e60:	eba0 0308 	sub.w	r3, r0, r8
 8008e64:	fa09 f303 	lsl.w	r3, r9, r3
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	9304      	str	r3, [sp, #16]
 8008e6c:	46a2      	mov	sl, r4
 8008e6e:	e7d2      	b.n	8008e16 <_vfiprintf_r+0xc6>
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	1d19      	adds	r1, r3, #4
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	9103      	str	r1, [sp, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	bfbb      	ittet	lt
 8008e7c:	425b      	neglt	r3, r3
 8008e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e82:	9307      	strge	r3, [sp, #28]
 8008e84:	9307      	strlt	r3, [sp, #28]
 8008e86:	bfb8      	it	lt
 8008e88:	9204      	strlt	r2, [sp, #16]
 8008e8a:	7823      	ldrb	r3, [r4, #0]
 8008e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e8e:	d10a      	bne.n	8008ea6 <_vfiprintf_r+0x156>
 8008e90:	7863      	ldrb	r3, [r4, #1]
 8008e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e94:	d132      	bne.n	8008efc <_vfiprintf_r+0x1ac>
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	1d1a      	adds	r2, r3, #4
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	9203      	str	r2, [sp, #12]
 8008e9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ea2:	3402      	adds	r4, #2
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f7c <_vfiprintf_r+0x22c>
 8008eaa:	7821      	ldrb	r1, [r4, #0]
 8008eac:	2203      	movs	r2, #3
 8008eae:	4650      	mov	r0, sl
 8008eb0:	f7f7 f9ae 	bl	8000210 <memchr>
 8008eb4:	b138      	cbz	r0, 8008ec6 <_vfiprintf_r+0x176>
 8008eb6:	9b04      	ldr	r3, [sp, #16]
 8008eb8:	eba0 000a 	sub.w	r0, r0, sl
 8008ebc:	2240      	movs	r2, #64	@ 0x40
 8008ebe:	4082      	lsls	r2, r0
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	3401      	adds	r4, #1
 8008ec4:	9304      	str	r3, [sp, #16]
 8008ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eca:	4829      	ldr	r0, [pc, #164]	@ (8008f70 <_vfiprintf_r+0x220>)
 8008ecc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ed0:	2206      	movs	r2, #6
 8008ed2:	f7f7 f99d 	bl	8000210 <memchr>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d03f      	beq.n	8008f5a <_vfiprintf_r+0x20a>
 8008eda:	4b26      	ldr	r3, [pc, #152]	@ (8008f74 <_vfiprintf_r+0x224>)
 8008edc:	bb1b      	cbnz	r3, 8008f26 <_vfiprintf_r+0x1d6>
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	f023 0307 	bic.w	r3, r3, #7
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	9303      	str	r3, [sp, #12]
 8008eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eec:	443b      	add	r3, r7
 8008eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ef0:	e76a      	b.n	8008dc8 <_vfiprintf_r+0x78>
 8008ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef6:	460c      	mov	r4, r1
 8008ef8:	2001      	movs	r0, #1
 8008efa:	e7a8      	b.n	8008e4e <_vfiprintf_r+0xfe>
 8008efc:	2300      	movs	r3, #0
 8008efe:	3401      	adds	r4, #1
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	4619      	mov	r1, r3
 8008f04:	f04f 0c0a 	mov.w	ip, #10
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f0e:	3a30      	subs	r2, #48	@ 0x30
 8008f10:	2a09      	cmp	r2, #9
 8008f12:	d903      	bls.n	8008f1c <_vfiprintf_r+0x1cc>
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d0c6      	beq.n	8008ea6 <_vfiprintf_r+0x156>
 8008f18:	9105      	str	r1, [sp, #20]
 8008f1a:	e7c4      	b.n	8008ea6 <_vfiprintf_r+0x156>
 8008f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f20:	4604      	mov	r4, r0
 8008f22:	2301      	movs	r3, #1
 8008f24:	e7f0      	b.n	8008f08 <_vfiprintf_r+0x1b8>
 8008f26:	ab03      	add	r3, sp, #12
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	462a      	mov	r2, r5
 8008f2c:	4b12      	ldr	r3, [pc, #72]	@ (8008f78 <_vfiprintf_r+0x228>)
 8008f2e:	a904      	add	r1, sp, #16
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7fd fbd5 	bl	80066e0 <_printf_float>
 8008f36:	4607      	mov	r7, r0
 8008f38:	1c78      	adds	r0, r7, #1
 8008f3a:	d1d6      	bne.n	8008eea <_vfiprintf_r+0x19a>
 8008f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f3e:	07d9      	lsls	r1, r3, #31
 8008f40:	d405      	bmi.n	8008f4e <_vfiprintf_r+0x1fe>
 8008f42:	89ab      	ldrh	r3, [r5, #12]
 8008f44:	059a      	lsls	r2, r3, #22
 8008f46:	d402      	bmi.n	8008f4e <_vfiprintf_r+0x1fe>
 8008f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f4a:	f7fe f925 	bl	8007198 <__retarget_lock_release_recursive>
 8008f4e:	89ab      	ldrh	r3, [r5, #12]
 8008f50:	065b      	lsls	r3, r3, #25
 8008f52:	f53f af1f 	bmi.w	8008d94 <_vfiprintf_r+0x44>
 8008f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f58:	e71e      	b.n	8008d98 <_vfiprintf_r+0x48>
 8008f5a:	ab03      	add	r3, sp, #12
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4b05      	ldr	r3, [pc, #20]	@ (8008f78 <_vfiprintf_r+0x228>)
 8008f62:	a904      	add	r1, sp, #16
 8008f64:	4630      	mov	r0, r6
 8008f66:	f7fd fe53 	bl	8006c10 <_printf_i>
 8008f6a:	e7e4      	b.n	8008f36 <_vfiprintf_r+0x1e6>
 8008f6c:	0800a46a 	.word	0x0800a46a
 8008f70:	0800a474 	.word	0x0800a474
 8008f74:	080066e1 	.word	0x080066e1
 8008f78:	08008d2d 	.word	0x08008d2d
 8008f7c:	0800a470 	.word	0x0800a470

08008f80 <__swbuf_r>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	460e      	mov	r6, r1
 8008f84:	4614      	mov	r4, r2
 8008f86:	4605      	mov	r5, r0
 8008f88:	b118      	cbz	r0, 8008f92 <__swbuf_r+0x12>
 8008f8a:	6a03      	ldr	r3, [r0, #32]
 8008f8c:	b90b      	cbnz	r3, 8008f92 <__swbuf_r+0x12>
 8008f8e:	f7fd ffe9 	bl	8006f64 <__sinit>
 8008f92:	69a3      	ldr	r3, [r4, #24]
 8008f94:	60a3      	str	r3, [r4, #8]
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	071a      	lsls	r2, r3, #28
 8008f9a:	d501      	bpl.n	8008fa0 <__swbuf_r+0x20>
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	b943      	cbnz	r3, 8008fb2 <__swbuf_r+0x32>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 f82a 	bl	8008ffc <__swsetup_r>
 8008fa8:	b118      	cbz	r0, 8008fb2 <__swbuf_r+0x32>
 8008faa:	f04f 37ff 	mov.w	r7, #4294967295
 8008fae:	4638      	mov	r0, r7
 8008fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	6922      	ldr	r2, [r4, #16]
 8008fb6:	1a98      	subs	r0, r3, r2
 8008fb8:	6963      	ldr	r3, [r4, #20]
 8008fba:	b2f6      	uxtb	r6, r6
 8008fbc:	4283      	cmp	r3, r0
 8008fbe:	4637      	mov	r7, r6
 8008fc0:	dc05      	bgt.n	8008fce <__swbuf_r+0x4e>
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f7ff fd99 	bl	8008afc <_fflush_r>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d1ed      	bne.n	8008faa <__swbuf_r+0x2a>
 8008fce:	68a3      	ldr	r3, [r4, #8]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	60a3      	str	r3, [r4, #8]
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	6022      	str	r2, [r4, #0]
 8008fda:	701e      	strb	r6, [r3, #0]
 8008fdc:	6962      	ldr	r2, [r4, #20]
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d004      	beq.n	8008fee <__swbuf_r+0x6e>
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	07db      	lsls	r3, r3, #31
 8008fe8:	d5e1      	bpl.n	8008fae <__swbuf_r+0x2e>
 8008fea:	2e0a      	cmp	r6, #10
 8008fec:	d1df      	bne.n	8008fae <__swbuf_r+0x2e>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f7ff fd83 	bl	8008afc <_fflush_r>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d0d9      	beq.n	8008fae <__swbuf_r+0x2e>
 8008ffa:	e7d6      	b.n	8008faa <__swbuf_r+0x2a>

08008ffc <__swsetup_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4b29      	ldr	r3, [pc, #164]	@ (80090a4 <__swsetup_r+0xa8>)
 8009000:	4605      	mov	r5, r0
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	460c      	mov	r4, r1
 8009006:	b118      	cbz	r0, 8009010 <__swsetup_r+0x14>
 8009008:	6a03      	ldr	r3, [r0, #32]
 800900a:	b90b      	cbnz	r3, 8009010 <__swsetup_r+0x14>
 800900c:	f7fd ffaa 	bl	8006f64 <__sinit>
 8009010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009014:	0719      	lsls	r1, r3, #28
 8009016:	d422      	bmi.n	800905e <__swsetup_r+0x62>
 8009018:	06da      	lsls	r2, r3, #27
 800901a:	d407      	bmi.n	800902c <__swsetup_r+0x30>
 800901c:	2209      	movs	r2, #9
 800901e:	602a      	str	r2, [r5, #0]
 8009020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009024:	81a3      	strh	r3, [r4, #12]
 8009026:	f04f 30ff 	mov.w	r0, #4294967295
 800902a:	e033      	b.n	8009094 <__swsetup_r+0x98>
 800902c:	0758      	lsls	r0, r3, #29
 800902e:	d512      	bpl.n	8009056 <__swsetup_r+0x5a>
 8009030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009032:	b141      	cbz	r1, 8009046 <__swsetup_r+0x4a>
 8009034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009038:	4299      	cmp	r1, r3
 800903a:	d002      	beq.n	8009042 <__swsetup_r+0x46>
 800903c:	4628      	mov	r0, r5
 800903e:	f7fe ff07 	bl	8007e50 <_free_r>
 8009042:	2300      	movs	r3, #0
 8009044:	6363      	str	r3, [r4, #52]	@ 0x34
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	2300      	movs	r3, #0
 8009050:	6063      	str	r3, [r4, #4]
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f043 0308 	orr.w	r3, r3, #8
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	6923      	ldr	r3, [r4, #16]
 8009060:	b94b      	cbnz	r3, 8009076 <__swsetup_r+0x7a>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800906c:	d003      	beq.n	8009076 <__swsetup_r+0x7a>
 800906e:	4621      	mov	r1, r4
 8009070:	4628      	mov	r0, r5
 8009072:	f000 f883 	bl	800917c <__smakebuf_r>
 8009076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907a:	f013 0201 	ands.w	r2, r3, #1
 800907e:	d00a      	beq.n	8009096 <__swsetup_r+0x9a>
 8009080:	2200      	movs	r2, #0
 8009082:	60a2      	str	r2, [r4, #8]
 8009084:	6962      	ldr	r2, [r4, #20]
 8009086:	4252      	negs	r2, r2
 8009088:	61a2      	str	r2, [r4, #24]
 800908a:	6922      	ldr	r2, [r4, #16]
 800908c:	b942      	cbnz	r2, 80090a0 <__swsetup_r+0xa4>
 800908e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009092:	d1c5      	bne.n	8009020 <__swsetup_r+0x24>
 8009094:	bd38      	pop	{r3, r4, r5, pc}
 8009096:	0799      	lsls	r1, r3, #30
 8009098:	bf58      	it	pl
 800909a:	6962      	ldrpl	r2, [r4, #20]
 800909c:	60a2      	str	r2, [r4, #8]
 800909e:	e7f4      	b.n	800908a <__swsetup_r+0x8e>
 80090a0:	2000      	movs	r0, #0
 80090a2:	e7f7      	b.n	8009094 <__swsetup_r+0x98>
 80090a4:	20000018 	.word	0x20000018

080090a8 <_raise_r>:
 80090a8:	291f      	cmp	r1, #31
 80090aa:	b538      	push	{r3, r4, r5, lr}
 80090ac:	4605      	mov	r5, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	d904      	bls.n	80090bc <_raise_r+0x14>
 80090b2:	2316      	movs	r3, #22
 80090b4:	6003      	str	r3, [r0, #0]
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090be:	b112      	cbz	r2, 80090c6 <_raise_r+0x1e>
 80090c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090c4:	b94b      	cbnz	r3, 80090da <_raise_r+0x32>
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 f830 	bl	800912c <_getpid_r>
 80090cc:	4622      	mov	r2, r4
 80090ce:	4601      	mov	r1, r0
 80090d0:	4628      	mov	r0, r5
 80090d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d6:	f000 b817 	b.w	8009108 <_kill_r>
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d00a      	beq.n	80090f4 <_raise_r+0x4c>
 80090de:	1c59      	adds	r1, r3, #1
 80090e0:	d103      	bne.n	80090ea <_raise_r+0x42>
 80090e2:	2316      	movs	r3, #22
 80090e4:	6003      	str	r3, [r0, #0]
 80090e6:	2001      	movs	r0, #1
 80090e8:	e7e7      	b.n	80090ba <_raise_r+0x12>
 80090ea:	2100      	movs	r1, #0
 80090ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090f0:	4620      	mov	r0, r4
 80090f2:	4798      	blx	r3
 80090f4:	2000      	movs	r0, #0
 80090f6:	e7e0      	b.n	80090ba <_raise_r+0x12>

080090f8 <raise>:
 80090f8:	4b02      	ldr	r3, [pc, #8]	@ (8009104 <raise+0xc>)
 80090fa:	4601      	mov	r1, r0
 80090fc:	6818      	ldr	r0, [r3, #0]
 80090fe:	f7ff bfd3 	b.w	80090a8 <_raise_r>
 8009102:	bf00      	nop
 8009104:	20000018 	.word	0x20000018

08009108 <_kill_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d07      	ldr	r5, [pc, #28]	@ (8009128 <_kill_r+0x20>)
 800910c:	2300      	movs	r3, #0
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	4611      	mov	r1, r2
 8009114:	602b      	str	r3, [r5, #0]
 8009116:	f7f9 ff2b 	bl	8002f70 <_kill>
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	d102      	bne.n	8009124 <_kill_r+0x1c>
 800911e:	682b      	ldr	r3, [r5, #0]
 8009120:	b103      	cbz	r3, 8009124 <_kill_r+0x1c>
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	bd38      	pop	{r3, r4, r5, pc}
 8009126:	bf00      	nop
 8009128:	20014930 	.word	0x20014930

0800912c <_getpid_r>:
 800912c:	f7f9 bf1e 	b.w	8002f6c <_getpid>

08009130 <__swhatbuf_r>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	460c      	mov	r4, r1
 8009134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009138:	2900      	cmp	r1, #0
 800913a:	b096      	sub	sp, #88	@ 0x58
 800913c:	4615      	mov	r5, r2
 800913e:	461e      	mov	r6, r3
 8009140:	da0d      	bge.n	800915e <__swhatbuf_r+0x2e>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009148:	f04f 0100 	mov.w	r1, #0
 800914c:	bf14      	ite	ne
 800914e:	2340      	movne	r3, #64	@ 0x40
 8009150:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009154:	2000      	movs	r0, #0
 8009156:	6031      	str	r1, [r6, #0]
 8009158:	602b      	str	r3, [r5, #0]
 800915a:	b016      	add	sp, #88	@ 0x58
 800915c:	bd70      	pop	{r4, r5, r6, pc}
 800915e:	466a      	mov	r2, sp
 8009160:	f000 f848 	bl	80091f4 <_fstat_r>
 8009164:	2800      	cmp	r0, #0
 8009166:	dbec      	blt.n	8009142 <__swhatbuf_r+0x12>
 8009168:	9901      	ldr	r1, [sp, #4]
 800916a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800916e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009172:	4259      	negs	r1, r3
 8009174:	4159      	adcs	r1, r3
 8009176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800917a:	e7eb      	b.n	8009154 <__swhatbuf_r+0x24>

0800917c <__smakebuf_r>:
 800917c:	898b      	ldrh	r3, [r1, #12]
 800917e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009180:	079d      	lsls	r5, r3, #30
 8009182:	4606      	mov	r6, r0
 8009184:	460c      	mov	r4, r1
 8009186:	d507      	bpl.n	8009198 <__smakebuf_r+0x1c>
 8009188:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	6123      	str	r3, [r4, #16]
 8009190:	2301      	movs	r3, #1
 8009192:	6163      	str	r3, [r4, #20]
 8009194:	b003      	add	sp, #12
 8009196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009198:	ab01      	add	r3, sp, #4
 800919a:	466a      	mov	r2, sp
 800919c:	f7ff ffc8 	bl	8009130 <__swhatbuf_r>
 80091a0:	9f00      	ldr	r7, [sp, #0]
 80091a2:	4605      	mov	r5, r0
 80091a4:	4639      	mov	r1, r7
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7fe fec6 	bl	8007f38 <_malloc_r>
 80091ac:	b948      	cbnz	r0, 80091c2 <__smakebuf_r+0x46>
 80091ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b2:	059a      	lsls	r2, r3, #22
 80091b4:	d4ee      	bmi.n	8009194 <__smakebuf_r+0x18>
 80091b6:	f023 0303 	bic.w	r3, r3, #3
 80091ba:	f043 0302 	orr.w	r3, r3, #2
 80091be:	81a3      	strh	r3, [r4, #12]
 80091c0:	e7e2      	b.n	8009188 <__smakebuf_r+0xc>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	6020      	str	r0, [r4, #0]
 80091c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	9b01      	ldr	r3, [sp, #4]
 80091ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091d2:	b15b      	cbz	r3, 80091ec <__smakebuf_r+0x70>
 80091d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091d8:	4630      	mov	r0, r6
 80091da:	f000 f81d 	bl	8009218 <_isatty_r>
 80091de:	b128      	cbz	r0, 80091ec <__smakebuf_r+0x70>
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	f023 0303 	bic.w	r3, r3, #3
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	431d      	orrs	r5, r3
 80091f0:	81a5      	strh	r5, [r4, #12]
 80091f2:	e7cf      	b.n	8009194 <__smakebuf_r+0x18>

080091f4 <_fstat_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	@ (8009214 <_fstat_r+0x20>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	f7f9 fee5 	bl	8002fd0 <_fstat>
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	d102      	bne.n	8009210 <_fstat_r+0x1c>
 800920a:	682b      	ldr	r3, [r5, #0]
 800920c:	b103      	cbz	r3, 8009210 <_fstat_r+0x1c>
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	bd38      	pop	{r3, r4, r5, pc}
 8009212:	bf00      	nop
 8009214:	20014930 	.word	0x20014930

08009218 <_isatty_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d06      	ldr	r5, [pc, #24]	@ (8009234 <_isatty_r+0x1c>)
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	f7f9 feda 	bl	8002fdc <_isatty>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_isatty_r+0x1a>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_isatty_r+0x1a>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	20014930 	.word	0x20014930

08009238 <sin>:
 8009238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800923a:	ec53 2b10 	vmov	r2, r3, d0
 800923e:	4826      	ldr	r0, [pc, #152]	@ (80092d8 <sin+0xa0>)
 8009240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009244:	4281      	cmp	r1, r0
 8009246:	d807      	bhi.n	8009258 <sin+0x20>
 8009248:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80092d0 <sin+0x98>
 800924c:	2000      	movs	r0, #0
 800924e:	b005      	add	sp, #20
 8009250:	f85d eb04 	ldr.w	lr, [sp], #4
 8009254:	f000 b90c 	b.w	8009470 <__kernel_sin>
 8009258:	4820      	ldr	r0, [pc, #128]	@ (80092dc <sin+0xa4>)
 800925a:	4281      	cmp	r1, r0
 800925c:	d908      	bls.n	8009270 <sin+0x38>
 800925e:	4610      	mov	r0, r2
 8009260:	4619      	mov	r1, r3
 8009262:	f7f7 f831 	bl	80002c8 <__aeabi_dsub>
 8009266:	ec41 0b10 	vmov	d0, r0, r1
 800926a:	b005      	add	sp, #20
 800926c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009270:	4668      	mov	r0, sp
 8009272:	f000 f9b9 	bl	80095e8 <__ieee754_rem_pio2>
 8009276:	f000 0003 	and.w	r0, r0, #3
 800927a:	2801      	cmp	r0, #1
 800927c:	d00c      	beq.n	8009298 <sin+0x60>
 800927e:	2802      	cmp	r0, #2
 8009280:	d011      	beq.n	80092a6 <sin+0x6e>
 8009282:	b9e8      	cbnz	r0, 80092c0 <sin+0x88>
 8009284:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009288:	ed9d 0b00 	vldr	d0, [sp]
 800928c:	2001      	movs	r0, #1
 800928e:	f000 f8ef 	bl	8009470 <__kernel_sin>
 8009292:	ec51 0b10 	vmov	r0, r1, d0
 8009296:	e7e6      	b.n	8009266 <sin+0x2e>
 8009298:	ed9d 1b02 	vldr	d1, [sp, #8]
 800929c:	ed9d 0b00 	vldr	d0, [sp]
 80092a0:	f000 f81e 	bl	80092e0 <__kernel_cos>
 80092a4:	e7f5      	b.n	8009292 <sin+0x5a>
 80092a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092aa:	ed9d 0b00 	vldr	d0, [sp]
 80092ae:	2001      	movs	r0, #1
 80092b0:	f000 f8de 	bl	8009470 <__kernel_sin>
 80092b4:	ec53 2b10 	vmov	r2, r3, d0
 80092b8:	4610      	mov	r0, r2
 80092ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80092be:	e7d2      	b.n	8009266 <sin+0x2e>
 80092c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092c4:	ed9d 0b00 	vldr	d0, [sp]
 80092c8:	f000 f80a 	bl	80092e0 <__kernel_cos>
 80092cc:	e7f2      	b.n	80092b4 <sin+0x7c>
 80092ce:	bf00      	nop
	...
 80092d8:	3fe921fb 	.word	0x3fe921fb
 80092dc:	7fefffff 	.word	0x7fefffff

080092e0 <__kernel_cos>:
 80092e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	ec57 6b10 	vmov	r6, r7, d0
 80092e8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80092ec:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80092f0:	ed8d 1b00 	vstr	d1, [sp]
 80092f4:	d206      	bcs.n	8009304 <__kernel_cos+0x24>
 80092f6:	4630      	mov	r0, r6
 80092f8:	4639      	mov	r1, r7
 80092fa:	f7f7 fc4d 	bl	8000b98 <__aeabi_d2iz>
 80092fe:	2800      	cmp	r0, #0
 8009300:	f000 8088 	beq.w	8009414 <__kernel_cos+0x134>
 8009304:	4632      	mov	r2, r6
 8009306:	463b      	mov	r3, r7
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f7 f994 	bl	8000638 <__aeabi_dmul>
 8009310:	4b51      	ldr	r3, [pc, #324]	@ (8009458 <__kernel_cos+0x178>)
 8009312:	2200      	movs	r2, #0
 8009314:	4604      	mov	r4, r0
 8009316:	460d      	mov	r5, r1
 8009318:	f7f7 f98e 	bl	8000638 <__aeabi_dmul>
 800931c:	a340      	add	r3, pc, #256	@ (adr r3, 8009420 <__kernel_cos+0x140>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	4682      	mov	sl, r0
 8009324:	468b      	mov	fp, r1
 8009326:	4620      	mov	r0, r4
 8009328:	4629      	mov	r1, r5
 800932a:	f7f7 f985 	bl	8000638 <__aeabi_dmul>
 800932e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009428 <__kernel_cos+0x148>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f6 ffca 	bl	80002cc <__adddf3>
 8009338:	4622      	mov	r2, r4
 800933a:	462b      	mov	r3, r5
 800933c:	f7f7 f97c 	bl	8000638 <__aeabi_dmul>
 8009340:	a33b      	add	r3, pc, #236	@ (adr r3, 8009430 <__kernel_cos+0x150>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f7f6 ffbf 	bl	80002c8 <__aeabi_dsub>
 800934a:	4622      	mov	r2, r4
 800934c:	462b      	mov	r3, r5
 800934e:	f7f7 f973 	bl	8000638 <__aeabi_dmul>
 8009352:	a339      	add	r3, pc, #228	@ (adr r3, 8009438 <__kernel_cos+0x158>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f7f6 ffb8 	bl	80002cc <__adddf3>
 800935c:	4622      	mov	r2, r4
 800935e:	462b      	mov	r3, r5
 8009360:	f7f7 f96a 	bl	8000638 <__aeabi_dmul>
 8009364:	a336      	add	r3, pc, #216	@ (adr r3, 8009440 <__kernel_cos+0x160>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	f7f6 ffad 	bl	80002c8 <__aeabi_dsub>
 800936e:	4622      	mov	r2, r4
 8009370:	462b      	mov	r3, r5
 8009372:	f7f7 f961 	bl	8000638 <__aeabi_dmul>
 8009376:	a334      	add	r3, pc, #208	@ (adr r3, 8009448 <__kernel_cos+0x168>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	f7f6 ffa6 	bl	80002cc <__adddf3>
 8009380:	4622      	mov	r2, r4
 8009382:	462b      	mov	r3, r5
 8009384:	f7f7 f958 	bl	8000638 <__aeabi_dmul>
 8009388:	4622      	mov	r2, r4
 800938a:	462b      	mov	r3, r5
 800938c:	f7f7 f954 	bl	8000638 <__aeabi_dmul>
 8009390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009394:	4604      	mov	r4, r0
 8009396:	460d      	mov	r5, r1
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f7 f94c 	bl	8000638 <__aeabi_dmul>
 80093a0:	460b      	mov	r3, r1
 80093a2:	4602      	mov	r2, r0
 80093a4:	4629      	mov	r1, r5
 80093a6:	4620      	mov	r0, r4
 80093a8:	f7f6 ff8e 	bl	80002c8 <__aeabi_dsub>
 80093ac:	4b2b      	ldr	r3, [pc, #172]	@ (800945c <__kernel_cos+0x17c>)
 80093ae:	4598      	cmp	r8, r3
 80093b0:	4606      	mov	r6, r0
 80093b2:	460f      	mov	r7, r1
 80093b4:	d810      	bhi.n	80093d8 <__kernel_cos+0xf8>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4650      	mov	r0, sl
 80093bc:	4659      	mov	r1, fp
 80093be:	f7f6 ff83 	bl	80002c8 <__aeabi_dsub>
 80093c2:	460b      	mov	r3, r1
 80093c4:	4926      	ldr	r1, [pc, #152]	@ (8009460 <__kernel_cos+0x180>)
 80093c6:	4602      	mov	r2, r0
 80093c8:	2000      	movs	r0, #0
 80093ca:	f7f6 ff7d 	bl	80002c8 <__aeabi_dsub>
 80093ce:	ec41 0b10 	vmov	d0, r0, r1
 80093d2:	b003      	add	sp, #12
 80093d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d8:	4b22      	ldr	r3, [pc, #136]	@ (8009464 <__kernel_cos+0x184>)
 80093da:	4921      	ldr	r1, [pc, #132]	@ (8009460 <__kernel_cos+0x180>)
 80093dc:	4598      	cmp	r8, r3
 80093de:	bf8c      	ite	hi
 80093e0:	4d21      	ldrhi	r5, [pc, #132]	@ (8009468 <__kernel_cos+0x188>)
 80093e2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80093e6:	2400      	movs	r4, #0
 80093e8:	4622      	mov	r2, r4
 80093ea:	462b      	mov	r3, r5
 80093ec:	2000      	movs	r0, #0
 80093ee:	f7f6 ff6b 	bl	80002c8 <__aeabi_dsub>
 80093f2:	4622      	mov	r2, r4
 80093f4:	4680      	mov	r8, r0
 80093f6:	4689      	mov	r9, r1
 80093f8:	462b      	mov	r3, r5
 80093fa:	4650      	mov	r0, sl
 80093fc:	4659      	mov	r1, fp
 80093fe:	f7f6 ff63 	bl	80002c8 <__aeabi_dsub>
 8009402:	4632      	mov	r2, r6
 8009404:	463b      	mov	r3, r7
 8009406:	f7f6 ff5f 	bl	80002c8 <__aeabi_dsub>
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	4640      	mov	r0, r8
 8009410:	4649      	mov	r1, r9
 8009412:	e7da      	b.n	80093ca <__kernel_cos+0xea>
 8009414:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009450 <__kernel_cos+0x170>
 8009418:	e7db      	b.n	80093d2 <__kernel_cos+0xf2>
 800941a:	bf00      	nop
 800941c:	f3af 8000 	nop.w
 8009420:	be8838d4 	.word	0xbe8838d4
 8009424:	bda8fae9 	.word	0xbda8fae9
 8009428:	bdb4b1c4 	.word	0xbdb4b1c4
 800942c:	3e21ee9e 	.word	0x3e21ee9e
 8009430:	809c52ad 	.word	0x809c52ad
 8009434:	3e927e4f 	.word	0x3e927e4f
 8009438:	19cb1590 	.word	0x19cb1590
 800943c:	3efa01a0 	.word	0x3efa01a0
 8009440:	16c15177 	.word	0x16c15177
 8009444:	3f56c16c 	.word	0x3f56c16c
 8009448:	5555554c 	.word	0x5555554c
 800944c:	3fa55555 	.word	0x3fa55555
 8009450:	00000000 	.word	0x00000000
 8009454:	3ff00000 	.word	0x3ff00000
 8009458:	3fe00000 	.word	0x3fe00000
 800945c:	3fd33332 	.word	0x3fd33332
 8009460:	3ff00000 	.word	0x3ff00000
 8009464:	3fe90000 	.word	0x3fe90000
 8009468:	3fd20000 	.word	0x3fd20000
 800946c:	00000000 	.word	0x00000000

08009470 <__kernel_sin>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	ec55 4b10 	vmov	r4, r5, d0
 8009478:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800947c:	b085      	sub	sp, #20
 800947e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009482:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009486:	4680      	mov	r8, r0
 8009488:	d205      	bcs.n	8009496 <__kernel_sin+0x26>
 800948a:	4620      	mov	r0, r4
 800948c:	4629      	mov	r1, r5
 800948e:	f7f7 fb83 	bl	8000b98 <__aeabi_d2iz>
 8009492:	2800      	cmp	r0, #0
 8009494:	d052      	beq.n	800953c <__kernel_sin+0xcc>
 8009496:	4622      	mov	r2, r4
 8009498:	462b      	mov	r3, r5
 800949a:	4620      	mov	r0, r4
 800949c:	4629      	mov	r1, r5
 800949e:	f7f7 f8cb 	bl	8000638 <__aeabi_dmul>
 80094a2:	4682      	mov	sl, r0
 80094a4:	468b      	mov	fp, r1
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4620      	mov	r0, r4
 80094ac:	4629      	mov	r1, r5
 80094ae:	f7f7 f8c3 	bl	8000638 <__aeabi_dmul>
 80094b2:	a342      	add	r3, pc, #264	@ (adr r3, 80095bc <__kernel_sin+0x14c>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	e9cd 0100 	strd	r0, r1, [sp]
 80094bc:	4650      	mov	r0, sl
 80094be:	4659      	mov	r1, fp
 80094c0:	f7f7 f8ba 	bl	8000638 <__aeabi_dmul>
 80094c4:	a33f      	add	r3, pc, #252	@ (adr r3, 80095c4 <__kernel_sin+0x154>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f7f6 fefd 	bl	80002c8 <__aeabi_dsub>
 80094ce:	4652      	mov	r2, sl
 80094d0:	465b      	mov	r3, fp
 80094d2:	f7f7 f8b1 	bl	8000638 <__aeabi_dmul>
 80094d6:	a33d      	add	r3, pc, #244	@ (adr r3, 80095cc <__kernel_sin+0x15c>)
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	f7f6 fef6 	bl	80002cc <__adddf3>
 80094e0:	4652      	mov	r2, sl
 80094e2:	465b      	mov	r3, fp
 80094e4:	f7f7 f8a8 	bl	8000638 <__aeabi_dmul>
 80094e8:	a33a      	add	r3, pc, #232	@ (adr r3, 80095d4 <__kernel_sin+0x164>)
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f7f6 feeb 	bl	80002c8 <__aeabi_dsub>
 80094f2:	4652      	mov	r2, sl
 80094f4:	465b      	mov	r3, fp
 80094f6:	f7f7 f89f 	bl	8000638 <__aeabi_dmul>
 80094fa:	a338      	add	r3, pc, #224	@ (adr r3, 80095dc <__kernel_sin+0x16c>)
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f7f6 fee4 	bl	80002cc <__adddf3>
 8009504:	4606      	mov	r6, r0
 8009506:	460f      	mov	r7, r1
 8009508:	f1b8 0f00 	cmp.w	r8, #0
 800950c:	d11b      	bne.n	8009546 <__kernel_sin+0xd6>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4650      	mov	r0, sl
 8009514:	4659      	mov	r1, fp
 8009516:	f7f7 f88f 	bl	8000638 <__aeabi_dmul>
 800951a:	a325      	add	r3, pc, #148	@ (adr r3, 80095b0 <__kernel_sin+0x140>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f7f6 fed2 	bl	80002c8 <__aeabi_dsub>
 8009524:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009528:	f7f7 f886 	bl	8000638 <__aeabi_dmul>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4620      	mov	r0, r4
 8009532:	4629      	mov	r1, r5
 8009534:	f7f6 feca 	bl	80002cc <__adddf3>
 8009538:	4604      	mov	r4, r0
 800953a:	460d      	mov	r5, r1
 800953c:	ec45 4b10 	vmov	d0, r4, r5
 8009540:	b005      	add	sp, #20
 8009542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800954a:	4b1b      	ldr	r3, [pc, #108]	@ (80095b8 <__kernel_sin+0x148>)
 800954c:	2200      	movs	r2, #0
 800954e:	f7f7 f873 	bl	8000638 <__aeabi_dmul>
 8009552:	4632      	mov	r2, r6
 8009554:	4680      	mov	r8, r0
 8009556:	4689      	mov	r9, r1
 8009558:	463b      	mov	r3, r7
 800955a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800955e:	f7f7 f86b 	bl	8000638 <__aeabi_dmul>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4640      	mov	r0, r8
 8009568:	4649      	mov	r1, r9
 800956a:	f7f6 fead 	bl	80002c8 <__aeabi_dsub>
 800956e:	4652      	mov	r2, sl
 8009570:	465b      	mov	r3, fp
 8009572:	f7f7 f861 	bl	8000638 <__aeabi_dmul>
 8009576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800957a:	f7f6 fea5 	bl	80002c8 <__aeabi_dsub>
 800957e:	a30c      	add	r3, pc, #48	@ (adr r3, 80095b0 <__kernel_sin+0x140>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	4606      	mov	r6, r0
 8009586:	460f      	mov	r7, r1
 8009588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800958c:	f7f7 f854 	bl	8000638 <__aeabi_dmul>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	4630      	mov	r0, r6
 8009596:	4639      	mov	r1, r7
 8009598:	f7f6 fe98 	bl	80002cc <__adddf3>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4620      	mov	r0, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7f6 fe90 	bl	80002c8 <__aeabi_dsub>
 80095a8:	e7c6      	b.n	8009538 <__kernel_sin+0xc8>
 80095aa:	bf00      	nop
 80095ac:	f3af 8000 	nop.w
 80095b0:	55555549 	.word	0x55555549
 80095b4:	3fc55555 	.word	0x3fc55555
 80095b8:	3fe00000 	.word	0x3fe00000
 80095bc:	5acfd57c 	.word	0x5acfd57c
 80095c0:	3de5d93a 	.word	0x3de5d93a
 80095c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80095c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80095cc:	57b1fe7d 	.word	0x57b1fe7d
 80095d0:	3ec71de3 	.word	0x3ec71de3
 80095d4:	19c161d5 	.word	0x19c161d5
 80095d8:	3f2a01a0 	.word	0x3f2a01a0
 80095dc:	1110f8a6 	.word	0x1110f8a6
 80095e0:	3f811111 	.word	0x3f811111
 80095e4:	00000000 	.word	0x00000000

080095e8 <__ieee754_rem_pio2>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	ec57 6b10 	vmov	r6, r7, d0
 80095f0:	4bc5      	ldr	r3, [pc, #788]	@ (8009908 <__ieee754_rem_pio2+0x320>)
 80095f2:	b08d      	sub	sp, #52	@ 0x34
 80095f4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80095f8:	4598      	cmp	r8, r3
 80095fa:	4604      	mov	r4, r0
 80095fc:	9704      	str	r7, [sp, #16]
 80095fe:	d807      	bhi.n	8009610 <__ieee754_rem_pio2+0x28>
 8009600:	2200      	movs	r2, #0
 8009602:	2300      	movs	r3, #0
 8009604:	ed80 0b00 	vstr	d0, [r0]
 8009608:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800960c:	2500      	movs	r5, #0
 800960e:	e028      	b.n	8009662 <__ieee754_rem_pio2+0x7a>
 8009610:	4bbe      	ldr	r3, [pc, #760]	@ (800990c <__ieee754_rem_pio2+0x324>)
 8009612:	4598      	cmp	r8, r3
 8009614:	d878      	bhi.n	8009708 <__ieee754_rem_pio2+0x120>
 8009616:	9b04      	ldr	r3, [sp, #16]
 8009618:	4dbd      	ldr	r5, [pc, #756]	@ (8009910 <__ieee754_rem_pio2+0x328>)
 800961a:	2b00      	cmp	r3, #0
 800961c:	4630      	mov	r0, r6
 800961e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80098d0 <__ieee754_rem_pio2+0x2e8>)
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	4639      	mov	r1, r7
 8009626:	dd38      	ble.n	800969a <__ieee754_rem_pio2+0xb2>
 8009628:	f7f6 fe4e 	bl	80002c8 <__aeabi_dsub>
 800962c:	45a8      	cmp	r8, r5
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	d01a      	beq.n	800966a <__ieee754_rem_pio2+0x82>
 8009634:	a3a8      	add	r3, pc, #672	@ (adr r3, 80098d8 <__ieee754_rem_pio2+0x2f0>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	f7f6 fe45 	bl	80002c8 <__aeabi_dsub>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4680      	mov	r8, r0
 8009644:	4689      	mov	r9, r1
 8009646:	4630      	mov	r0, r6
 8009648:	4639      	mov	r1, r7
 800964a:	f7f6 fe3d 	bl	80002c8 <__aeabi_dsub>
 800964e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80098d8 <__ieee754_rem_pio2+0x2f0>)
 8009650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009654:	f7f6 fe38 	bl	80002c8 <__aeabi_dsub>
 8009658:	e9c4 8900 	strd	r8, r9, [r4]
 800965c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009660:	2501      	movs	r5, #1
 8009662:	4628      	mov	r0, r5
 8009664:	b00d      	add	sp, #52	@ 0x34
 8009666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966a:	a39d      	add	r3, pc, #628	@ (adr r3, 80098e0 <__ieee754_rem_pio2+0x2f8>)
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	f7f6 fe2a 	bl	80002c8 <__aeabi_dsub>
 8009674:	a39c      	add	r3, pc, #624	@ (adr r3, 80098e8 <__ieee754_rem_pio2+0x300>)
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	4606      	mov	r6, r0
 800967c:	460f      	mov	r7, r1
 800967e:	f7f6 fe23 	bl	80002c8 <__aeabi_dsub>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4680      	mov	r8, r0
 8009688:	4689      	mov	r9, r1
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 fe1b 	bl	80002c8 <__aeabi_dsub>
 8009692:	a395      	add	r3, pc, #596	@ (adr r3, 80098e8 <__ieee754_rem_pio2+0x300>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	e7dc      	b.n	8009654 <__ieee754_rem_pio2+0x6c>
 800969a:	f7f6 fe17 	bl	80002cc <__adddf3>
 800969e:	45a8      	cmp	r8, r5
 80096a0:	4606      	mov	r6, r0
 80096a2:	460f      	mov	r7, r1
 80096a4:	d018      	beq.n	80096d8 <__ieee754_rem_pio2+0xf0>
 80096a6:	a38c      	add	r3, pc, #560	@ (adr r3, 80098d8 <__ieee754_rem_pio2+0x2f0>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f6 fe0e 	bl	80002cc <__adddf3>
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	4680      	mov	r8, r0
 80096b6:	4689      	mov	r9, r1
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f6 fe04 	bl	80002c8 <__aeabi_dsub>
 80096c0:	a385      	add	r3, pc, #532	@ (adr r3, 80098d8 <__ieee754_rem_pio2+0x2f0>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	f7f6 fe01 	bl	80002cc <__adddf3>
 80096ca:	f04f 35ff 	mov.w	r5, #4294967295
 80096ce:	e9c4 8900 	strd	r8, r9, [r4]
 80096d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80096d6:	e7c4      	b.n	8009662 <__ieee754_rem_pio2+0x7a>
 80096d8:	a381      	add	r3, pc, #516	@ (adr r3, 80098e0 <__ieee754_rem_pio2+0x2f8>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f7f6 fdf5 	bl	80002cc <__adddf3>
 80096e2:	a381      	add	r3, pc, #516	@ (adr r3, 80098e8 <__ieee754_rem_pio2+0x300>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	4606      	mov	r6, r0
 80096ea:	460f      	mov	r7, r1
 80096ec:	f7f6 fdee 	bl	80002cc <__adddf3>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4680      	mov	r8, r0
 80096f6:	4689      	mov	r9, r1
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f6 fde4 	bl	80002c8 <__aeabi_dsub>
 8009700:	a379      	add	r3, pc, #484	@ (adr r3, 80098e8 <__ieee754_rem_pio2+0x300>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	e7de      	b.n	80096c6 <__ieee754_rem_pio2+0xde>
 8009708:	4b82      	ldr	r3, [pc, #520]	@ (8009914 <__ieee754_rem_pio2+0x32c>)
 800970a:	4598      	cmp	r8, r3
 800970c:	f200 80d1 	bhi.w	80098b2 <__ieee754_rem_pio2+0x2ca>
 8009710:	f000 f966 	bl	80099e0 <fabs>
 8009714:	ec57 6b10 	vmov	r6, r7, d0
 8009718:	a375      	add	r3, pc, #468	@ (adr r3, 80098f0 <__ieee754_rem_pio2+0x308>)
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	4630      	mov	r0, r6
 8009720:	4639      	mov	r1, r7
 8009722:	f7f6 ff89 	bl	8000638 <__aeabi_dmul>
 8009726:	4b7c      	ldr	r3, [pc, #496]	@ (8009918 <__ieee754_rem_pio2+0x330>)
 8009728:	2200      	movs	r2, #0
 800972a:	f7f6 fdcf 	bl	80002cc <__adddf3>
 800972e:	f7f7 fa33 	bl	8000b98 <__aeabi_d2iz>
 8009732:	4605      	mov	r5, r0
 8009734:	f7f6 ff16 	bl	8000564 <__aeabi_i2d>
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009740:	a363      	add	r3, pc, #396	@ (adr r3, 80098d0 <__ieee754_rem_pio2+0x2e8>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 ff77 	bl	8000638 <__aeabi_dmul>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4630      	mov	r0, r6
 8009750:	4639      	mov	r1, r7
 8009752:	f7f6 fdb9 	bl	80002c8 <__aeabi_dsub>
 8009756:	a360      	add	r3, pc, #384	@ (adr r3, 80098d8 <__ieee754_rem_pio2+0x2f0>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	4682      	mov	sl, r0
 800975e:	468b      	mov	fp, r1
 8009760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009764:	f7f6 ff68 	bl	8000638 <__aeabi_dmul>
 8009768:	2d1f      	cmp	r5, #31
 800976a:	4606      	mov	r6, r0
 800976c:	460f      	mov	r7, r1
 800976e:	dc0c      	bgt.n	800978a <__ieee754_rem_pio2+0x1a2>
 8009770:	4b6a      	ldr	r3, [pc, #424]	@ (800991c <__ieee754_rem_pio2+0x334>)
 8009772:	1e6a      	subs	r2, r5, #1
 8009774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009778:	4543      	cmp	r3, r8
 800977a:	d006      	beq.n	800978a <__ieee754_rem_pio2+0x1a2>
 800977c:	4632      	mov	r2, r6
 800977e:	463b      	mov	r3, r7
 8009780:	4650      	mov	r0, sl
 8009782:	4659      	mov	r1, fp
 8009784:	f7f6 fda0 	bl	80002c8 <__aeabi_dsub>
 8009788:	e00e      	b.n	80097a8 <__ieee754_rem_pio2+0x1c0>
 800978a:	463b      	mov	r3, r7
 800978c:	4632      	mov	r2, r6
 800978e:	4650      	mov	r0, sl
 8009790:	4659      	mov	r1, fp
 8009792:	f7f6 fd99 	bl	80002c8 <__aeabi_dsub>
 8009796:	ea4f 5328 	mov.w	r3, r8, asr #20
 800979a:	9305      	str	r3, [sp, #20]
 800979c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80097a0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80097a4:	2b10      	cmp	r3, #16
 80097a6:	dc02      	bgt.n	80097ae <__ieee754_rem_pio2+0x1c6>
 80097a8:	e9c4 0100 	strd	r0, r1, [r4]
 80097ac:	e039      	b.n	8009822 <__ieee754_rem_pio2+0x23a>
 80097ae:	a34c      	add	r3, pc, #304	@ (adr r3, 80098e0 <__ieee754_rem_pio2+0x2f8>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b8:	f7f6 ff3e 	bl	8000638 <__aeabi_dmul>
 80097bc:	4606      	mov	r6, r0
 80097be:	460f      	mov	r7, r1
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4650      	mov	r0, sl
 80097c6:	4659      	mov	r1, fp
 80097c8:	f7f6 fd7e 	bl	80002c8 <__aeabi_dsub>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4680      	mov	r8, r0
 80097d2:	4689      	mov	r9, r1
 80097d4:	4650      	mov	r0, sl
 80097d6:	4659      	mov	r1, fp
 80097d8:	f7f6 fd76 	bl	80002c8 <__aeabi_dsub>
 80097dc:	4632      	mov	r2, r6
 80097de:	463b      	mov	r3, r7
 80097e0:	f7f6 fd72 	bl	80002c8 <__aeabi_dsub>
 80097e4:	a340      	add	r3, pc, #256	@ (adr r3, 80098e8 <__ieee754_rem_pio2+0x300>)
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	4606      	mov	r6, r0
 80097ec:	460f      	mov	r7, r1
 80097ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f2:	f7f6 ff21 	bl	8000638 <__aeabi_dmul>
 80097f6:	4632      	mov	r2, r6
 80097f8:	463b      	mov	r3, r7
 80097fa:	f7f6 fd65 	bl	80002c8 <__aeabi_dsub>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4606      	mov	r6, r0
 8009804:	460f      	mov	r7, r1
 8009806:	4640      	mov	r0, r8
 8009808:	4649      	mov	r1, r9
 800980a:	f7f6 fd5d 	bl	80002c8 <__aeabi_dsub>
 800980e:	9a05      	ldr	r2, [sp, #20]
 8009810:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	2b31      	cmp	r3, #49	@ 0x31
 8009818:	dc20      	bgt.n	800985c <__ieee754_rem_pio2+0x274>
 800981a:	e9c4 0100 	strd	r0, r1, [r4]
 800981e:	46c2      	mov	sl, r8
 8009820:	46cb      	mov	fp, r9
 8009822:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009826:	4650      	mov	r0, sl
 8009828:	4642      	mov	r2, r8
 800982a:	464b      	mov	r3, r9
 800982c:	4659      	mov	r1, fp
 800982e:	f7f6 fd4b 	bl	80002c8 <__aeabi_dsub>
 8009832:	463b      	mov	r3, r7
 8009834:	4632      	mov	r2, r6
 8009836:	f7f6 fd47 	bl	80002c8 <__aeabi_dsub>
 800983a:	9b04      	ldr	r3, [sp, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009842:	f6bf af0e 	bge.w	8009662 <__ieee754_rem_pio2+0x7a>
 8009846:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800984a:	6063      	str	r3, [r4, #4]
 800984c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009850:	f8c4 8000 	str.w	r8, [r4]
 8009854:	60a0      	str	r0, [r4, #8]
 8009856:	60e3      	str	r3, [r4, #12]
 8009858:	426d      	negs	r5, r5
 800985a:	e702      	b.n	8009662 <__ieee754_rem_pio2+0x7a>
 800985c:	a326      	add	r3, pc, #152	@ (adr r3, 80098f8 <__ieee754_rem_pio2+0x310>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009866:	f7f6 fee7 	bl	8000638 <__aeabi_dmul>
 800986a:	4606      	mov	r6, r0
 800986c:	460f      	mov	r7, r1
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4640      	mov	r0, r8
 8009874:	4649      	mov	r1, r9
 8009876:	f7f6 fd27 	bl	80002c8 <__aeabi_dsub>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4682      	mov	sl, r0
 8009880:	468b      	mov	fp, r1
 8009882:	4640      	mov	r0, r8
 8009884:	4649      	mov	r1, r9
 8009886:	f7f6 fd1f 	bl	80002c8 <__aeabi_dsub>
 800988a:	4632      	mov	r2, r6
 800988c:	463b      	mov	r3, r7
 800988e:	f7f6 fd1b 	bl	80002c8 <__aeabi_dsub>
 8009892:	a31b      	add	r3, pc, #108	@ (adr r3, 8009900 <__ieee754_rem_pio2+0x318>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	4606      	mov	r6, r0
 800989a:	460f      	mov	r7, r1
 800989c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a0:	f7f6 feca 	bl	8000638 <__aeabi_dmul>
 80098a4:	4632      	mov	r2, r6
 80098a6:	463b      	mov	r3, r7
 80098a8:	f7f6 fd0e 	bl	80002c8 <__aeabi_dsub>
 80098ac:	4606      	mov	r6, r0
 80098ae:	460f      	mov	r7, r1
 80098b0:	e764      	b.n	800977c <__ieee754_rem_pio2+0x194>
 80098b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009920 <__ieee754_rem_pio2+0x338>)
 80098b4:	4598      	cmp	r8, r3
 80098b6:	d935      	bls.n	8009924 <__ieee754_rem_pio2+0x33c>
 80098b8:	4632      	mov	r2, r6
 80098ba:	463b      	mov	r3, r7
 80098bc:	4630      	mov	r0, r6
 80098be:	4639      	mov	r1, r7
 80098c0:	f7f6 fd02 	bl	80002c8 <__aeabi_dsub>
 80098c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80098c8:	e9c4 0100 	strd	r0, r1, [r4]
 80098cc:	e69e      	b.n	800960c <__ieee754_rem_pio2+0x24>
 80098ce:	bf00      	nop
 80098d0:	54400000 	.word	0x54400000
 80098d4:	3ff921fb 	.word	0x3ff921fb
 80098d8:	1a626331 	.word	0x1a626331
 80098dc:	3dd0b461 	.word	0x3dd0b461
 80098e0:	1a600000 	.word	0x1a600000
 80098e4:	3dd0b461 	.word	0x3dd0b461
 80098e8:	2e037073 	.word	0x2e037073
 80098ec:	3ba3198a 	.word	0x3ba3198a
 80098f0:	6dc9c883 	.word	0x6dc9c883
 80098f4:	3fe45f30 	.word	0x3fe45f30
 80098f8:	2e000000 	.word	0x2e000000
 80098fc:	3ba3198a 	.word	0x3ba3198a
 8009900:	252049c1 	.word	0x252049c1
 8009904:	397b839a 	.word	0x397b839a
 8009908:	3fe921fb 	.word	0x3fe921fb
 800990c:	4002d97b 	.word	0x4002d97b
 8009910:	3ff921fb 	.word	0x3ff921fb
 8009914:	413921fb 	.word	0x413921fb
 8009918:	3fe00000 	.word	0x3fe00000
 800991c:	0800a6c4 	.word	0x0800a6c4
 8009920:	7fefffff 	.word	0x7fefffff
 8009924:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009928:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800992c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009930:	4630      	mov	r0, r6
 8009932:	460f      	mov	r7, r1
 8009934:	f7f7 f930 	bl	8000b98 <__aeabi_d2iz>
 8009938:	f7f6 fe14 	bl	8000564 <__aeabi_i2d>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	4630      	mov	r0, r6
 8009942:	4639      	mov	r1, r7
 8009944:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009948:	f7f6 fcbe 	bl	80002c8 <__aeabi_dsub>
 800994c:	4b22      	ldr	r3, [pc, #136]	@ (80099d8 <__ieee754_rem_pio2+0x3f0>)
 800994e:	2200      	movs	r2, #0
 8009950:	f7f6 fe72 	bl	8000638 <__aeabi_dmul>
 8009954:	460f      	mov	r7, r1
 8009956:	4606      	mov	r6, r0
 8009958:	f7f7 f91e 	bl	8000b98 <__aeabi_d2iz>
 800995c:	f7f6 fe02 	bl	8000564 <__aeabi_i2d>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4630      	mov	r0, r6
 8009966:	4639      	mov	r1, r7
 8009968:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800996c:	f7f6 fcac 	bl	80002c8 <__aeabi_dsub>
 8009970:	4b19      	ldr	r3, [pc, #100]	@ (80099d8 <__ieee754_rem_pio2+0x3f0>)
 8009972:	2200      	movs	r2, #0
 8009974:	f7f6 fe60 	bl	8000638 <__aeabi_dmul>
 8009978:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800997c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009980:	f04f 0803 	mov.w	r8, #3
 8009984:	2600      	movs	r6, #0
 8009986:	2700      	movs	r7, #0
 8009988:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800998c:	4632      	mov	r2, r6
 800998e:	463b      	mov	r3, r7
 8009990:	46c2      	mov	sl, r8
 8009992:	f108 38ff 	add.w	r8, r8, #4294967295
 8009996:	f7f7 f8b7 	bl	8000b08 <__aeabi_dcmpeq>
 800999a:	2800      	cmp	r0, #0
 800999c:	d1f4      	bne.n	8009988 <__ieee754_rem_pio2+0x3a0>
 800999e:	4b0f      	ldr	r3, [pc, #60]	@ (80099dc <__ieee754_rem_pio2+0x3f4>)
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	2302      	movs	r3, #2
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	462a      	mov	r2, r5
 80099a8:	4653      	mov	r3, sl
 80099aa:	4621      	mov	r1, r4
 80099ac:	a806      	add	r0, sp, #24
 80099ae:	f000 f81f 	bl	80099f0 <__kernel_rem_pio2>
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	4605      	mov	r5, r0
 80099b8:	f6bf ae53 	bge.w	8009662 <__ieee754_rem_pio2+0x7a>
 80099bc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80099c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099c4:	e9c4 2300 	strd	r2, r3, [r4]
 80099c8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80099cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099d0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80099d4:	e740      	b.n	8009858 <__ieee754_rem_pio2+0x270>
 80099d6:	bf00      	nop
 80099d8:	41700000 	.word	0x41700000
 80099dc:	0800a744 	.word	0x0800a744

080099e0 <fabs>:
 80099e0:	ec51 0b10 	vmov	r0, r1, d0
 80099e4:	4602      	mov	r2, r0
 80099e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80099ea:	ec43 2b10 	vmov	d0, r2, r3
 80099ee:	4770      	bx	lr

080099f0 <__kernel_rem_pio2>:
 80099f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	ed2d 8b02 	vpush	{d8}
 80099f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80099fc:	f112 0f14 	cmn.w	r2, #20
 8009a00:	9306      	str	r3, [sp, #24]
 8009a02:	9104      	str	r1, [sp, #16]
 8009a04:	4bc2      	ldr	r3, [pc, #776]	@ (8009d10 <__kernel_rem_pio2+0x320>)
 8009a06:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009a08:	9008      	str	r0, [sp, #32]
 8009a0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	9b06      	ldr	r3, [sp, #24]
 8009a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a16:	bfa8      	it	ge
 8009a18:	1ed4      	subge	r4, r2, #3
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	bfb2      	itee	lt
 8009a1e:	2400      	movlt	r4, #0
 8009a20:	2318      	movge	r3, #24
 8009a22:	fb94 f4f3 	sdivge	r4, r4, r3
 8009a26:	f06f 0317 	mvn.w	r3, #23
 8009a2a:	fb04 3303 	mla	r3, r4, r3, r3
 8009a2e:	eb03 0b02 	add.w	fp, r3, r2
 8009a32:	9b00      	ldr	r3, [sp, #0]
 8009a34:	9a05      	ldr	r2, [sp, #20]
 8009a36:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8009d00 <__kernel_rem_pio2+0x310>
 8009a3a:	eb03 0802 	add.w	r8, r3, r2
 8009a3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009a40:	1aa7      	subs	r7, r4, r2
 8009a42:	ae20      	add	r6, sp, #128	@ 0x80
 8009a44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009a48:	2500      	movs	r5, #0
 8009a4a:	4545      	cmp	r5, r8
 8009a4c:	dd12      	ble.n	8009a74 <__kernel_rem_pio2+0x84>
 8009a4e:	9b06      	ldr	r3, [sp, #24]
 8009a50:	aa20      	add	r2, sp, #128	@ 0x80
 8009a52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009a56:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009a5a:	2700      	movs	r7, #0
 8009a5c:	9b00      	ldr	r3, [sp, #0]
 8009a5e:	429f      	cmp	r7, r3
 8009a60:	dc2e      	bgt.n	8009ac0 <__kernel_rem_pio2+0xd0>
 8009a62:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8009d00 <__kernel_rem_pio2+0x310>
 8009a66:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a6e:	46a8      	mov	r8, r5
 8009a70:	2600      	movs	r6, #0
 8009a72:	e01b      	b.n	8009aac <__kernel_rem_pio2+0xbc>
 8009a74:	42ef      	cmn	r7, r5
 8009a76:	d407      	bmi.n	8009a88 <__kernel_rem_pio2+0x98>
 8009a78:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009a7c:	f7f6 fd72 	bl	8000564 <__aeabi_i2d>
 8009a80:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009a84:	3501      	adds	r5, #1
 8009a86:	e7e0      	b.n	8009a4a <__kernel_rem_pio2+0x5a>
 8009a88:	ec51 0b18 	vmov	r0, r1, d8
 8009a8c:	e7f8      	b.n	8009a80 <__kernel_rem_pio2+0x90>
 8009a8e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8009a92:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009a96:	f7f6 fdcf 	bl	8000638 <__aeabi_dmul>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aa2:	f7f6 fc13 	bl	80002cc <__adddf3>
 8009aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aaa:	3601      	adds	r6, #1
 8009aac:	9b05      	ldr	r3, [sp, #20]
 8009aae:	429e      	cmp	r6, r3
 8009ab0:	dded      	ble.n	8009a8e <__kernel_rem_pio2+0x9e>
 8009ab2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ab6:	3701      	adds	r7, #1
 8009ab8:	ecaa 7b02 	vstmia	sl!, {d7}
 8009abc:	3508      	adds	r5, #8
 8009abe:	e7cd      	b.n	8009a5c <__kernel_rem_pio2+0x6c>
 8009ac0:	9b00      	ldr	r3, [sp, #0]
 8009ac2:	f8dd 8000 	ldr.w	r8, [sp]
 8009ac6:	aa0c      	add	r2, sp, #48	@ 0x30
 8009ac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ace:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009ad0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009ada:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009adc:	ab98      	add	r3, sp, #608	@ 0x260
 8009ade:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ae2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009ae6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009aea:	ac0c      	add	r4, sp, #48	@ 0x30
 8009aec:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009aee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009af2:	46a1      	mov	r9, r4
 8009af4:	46c2      	mov	sl, r8
 8009af6:	f1ba 0f00 	cmp.w	sl, #0
 8009afa:	dc77      	bgt.n	8009bec <__kernel_rem_pio2+0x1fc>
 8009afc:	4658      	mov	r0, fp
 8009afe:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009b02:	f000 fac5 	bl	800a090 <scalbn>
 8009b06:	ec57 6b10 	vmov	r6, r7, d0
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009b10:	4630      	mov	r0, r6
 8009b12:	4639      	mov	r1, r7
 8009b14:	f7f6 fd90 	bl	8000638 <__aeabi_dmul>
 8009b18:	ec41 0b10 	vmov	d0, r0, r1
 8009b1c:	f000 fb34 	bl	800a188 <floor>
 8009b20:	4b7c      	ldr	r3, [pc, #496]	@ (8009d14 <__kernel_rem_pio2+0x324>)
 8009b22:	ec51 0b10 	vmov	r0, r1, d0
 8009b26:	2200      	movs	r2, #0
 8009b28:	f7f6 fd86 	bl	8000638 <__aeabi_dmul>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f6 fbc8 	bl	80002c8 <__aeabi_dsub>
 8009b38:	460f      	mov	r7, r1
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	f7f7 f82c 	bl	8000b98 <__aeabi_d2iz>
 8009b40:	9002      	str	r0, [sp, #8]
 8009b42:	f7f6 fd0f 	bl	8000564 <__aeabi_i2d>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	f7f6 fbbb 	bl	80002c8 <__aeabi_dsub>
 8009b52:	f1bb 0f00 	cmp.w	fp, #0
 8009b56:	4606      	mov	r6, r0
 8009b58:	460f      	mov	r7, r1
 8009b5a:	dd6c      	ble.n	8009c36 <__kernel_rem_pio2+0x246>
 8009b5c:	f108 31ff 	add.w	r1, r8, #4294967295
 8009b60:	ab0c      	add	r3, sp, #48	@ 0x30
 8009b62:	9d02      	ldr	r5, [sp, #8]
 8009b64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b68:	f1cb 0018 	rsb	r0, fp, #24
 8009b6c:	fa43 f200 	asr.w	r2, r3, r0
 8009b70:	4415      	add	r5, r2
 8009b72:	4082      	lsls	r2, r0
 8009b74:	1a9b      	subs	r3, r3, r2
 8009b76:	aa0c      	add	r2, sp, #48	@ 0x30
 8009b78:	9502      	str	r5, [sp, #8]
 8009b7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009b7e:	f1cb 0217 	rsb	r2, fp, #23
 8009b82:	fa43 f902 	asr.w	r9, r3, r2
 8009b86:	f1b9 0f00 	cmp.w	r9, #0
 8009b8a:	dd64      	ble.n	8009c56 <__kernel_rem_pio2+0x266>
 8009b8c:	9b02      	ldr	r3, [sp, #8]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	3301      	adds	r3, #1
 8009b92:	9302      	str	r3, [sp, #8]
 8009b94:	4615      	mov	r5, r2
 8009b96:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009b9a:	4590      	cmp	r8, r2
 8009b9c:	f300 80a1 	bgt.w	8009ce2 <__kernel_rem_pio2+0x2f2>
 8009ba0:	f1bb 0f00 	cmp.w	fp, #0
 8009ba4:	dd07      	ble.n	8009bb6 <__kernel_rem_pio2+0x1c6>
 8009ba6:	f1bb 0f01 	cmp.w	fp, #1
 8009baa:	f000 80c1 	beq.w	8009d30 <__kernel_rem_pio2+0x340>
 8009bae:	f1bb 0f02 	cmp.w	fp, #2
 8009bb2:	f000 80c8 	beq.w	8009d46 <__kernel_rem_pio2+0x356>
 8009bb6:	f1b9 0f02 	cmp.w	r9, #2
 8009bba:	d14c      	bne.n	8009c56 <__kernel_rem_pio2+0x266>
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	463b      	mov	r3, r7
 8009bc0:	4955      	ldr	r1, [pc, #340]	@ (8009d18 <__kernel_rem_pio2+0x328>)
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	f7f6 fb80 	bl	80002c8 <__aeabi_dsub>
 8009bc8:	4606      	mov	r6, r0
 8009bca:	460f      	mov	r7, r1
 8009bcc:	2d00      	cmp	r5, #0
 8009bce:	d042      	beq.n	8009c56 <__kernel_rem_pio2+0x266>
 8009bd0:	4658      	mov	r0, fp
 8009bd2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8009d08 <__kernel_rem_pio2+0x318>
 8009bd6:	f000 fa5b 	bl	800a090 <scalbn>
 8009bda:	4630      	mov	r0, r6
 8009bdc:	4639      	mov	r1, r7
 8009bde:	ec53 2b10 	vmov	r2, r3, d0
 8009be2:	f7f6 fb71 	bl	80002c8 <__aeabi_dsub>
 8009be6:	4606      	mov	r6, r0
 8009be8:	460f      	mov	r7, r1
 8009bea:	e034      	b.n	8009c56 <__kernel_rem_pio2+0x266>
 8009bec:	4b4b      	ldr	r3, [pc, #300]	@ (8009d1c <__kernel_rem_pio2+0x32c>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bf4:	f7f6 fd20 	bl	8000638 <__aeabi_dmul>
 8009bf8:	f7f6 ffce 	bl	8000b98 <__aeabi_d2iz>
 8009bfc:	f7f6 fcb2 	bl	8000564 <__aeabi_i2d>
 8009c00:	4b47      	ldr	r3, [pc, #284]	@ (8009d20 <__kernel_rem_pio2+0x330>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	4606      	mov	r6, r0
 8009c06:	460f      	mov	r7, r1
 8009c08:	f7f6 fd16 	bl	8000638 <__aeabi_dmul>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c14:	f7f6 fb58 	bl	80002c8 <__aeabi_dsub>
 8009c18:	f7f6 ffbe 	bl	8000b98 <__aeabi_d2iz>
 8009c1c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009c20:	f849 0b04 	str.w	r0, [r9], #4
 8009c24:	4639      	mov	r1, r7
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7f6 fb50 	bl	80002cc <__adddf3>
 8009c2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c34:	e75f      	b.n	8009af6 <__kernel_rem_pio2+0x106>
 8009c36:	d107      	bne.n	8009c48 <__kernel_rem_pio2+0x258>
 8009c38:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c3c:	aa0c      	add	r2, sp, #48	@ 0x30
 8009c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c42:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009c46:	e79e      	b.n	8009b86 <__kernel_rem_pio2+0x196>
 8009c48:	4b36      	ldr	r3, [pc, #216]	@ (8009d24 <__kernel_rem_pio2+0x334>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f7f6 ff7a 	bl	8000b44 <__aeabi_dcmpge>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d143      	bne.n	8009cdc <__kernel_rem_pio2+0x2ec>
 8009c54:	4681      	mov	r9, r0
 8009c56:	2200      	movs	r2, #0
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	4639      	mov	r1, r7
 8009c5e:	f7f6 ff53 	bl	8000b08 <__aeabi_dcmpeq>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	f000 80c1 	beq.w	8009dea <__kernel_rem_pio2+0x3fa>
 8009c68:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	9900      	ldr	r1, [sp, #0]
 8009c70:	428b      	cmp	r3, r1
 8009c72:	da70      	bge.n	8009d56 <__kernel_rem_pio2+0x366>
 8009c74:	2a00      	cmp	r2, #0
 8009c76:	f000 808b 	beq.w	8009d90 <__kernel_rem_pio2+0x3a0>
 8009c7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c7e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c80:	f1ab 0b18 	sub.w	fp, fp, #24
 8009c84:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d0f6      	beq.n	8009c7a <__kernel_rem_pio2+0x28a>
 8009c8c:	4658      	mov	r0, fp
 8009c8e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8009d08 <__kernel_rem_pio2+0x318>
 8009c92:	f000 f9fd 	bl	800a090 <scalbn>
 8009c96:	f108 0301 	add.w	r3, r8, #1
 8009c9a:	00da      	lsls	r2, r3, #3
 8009c9c:	9205      	str	r2, [sp, #20]
 8009c9e:	ec55 4b10 	vmov	r4, r5, d0
 8009ca2:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009ca4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8009d1c <__kernel_rem_pio2+0x32c>
 8009ca8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009cac:	4646      	mov	r6, r8
 8009cae:	f04f 0a00 	mov.w	sl, #0
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	f280 80d1 	bge.w	8009e5a <__kernel_rem_pio2+0x46a>
 8009cb8:	4644      	mov	r4, r8
 8009cba:	2c00      	cmp	r4, #0
 8009cbc:	f2c0 80ff 	blt.w	8009ebe <__kernel_rem_pio2+0x4ce>
 8009cc0:	4b19      	ldr	r3, [pc, #100]	@ (8009d28 <__kernel_rem_pio2+0x338>)
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009cc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cca:	9306      	str	r3, [sp, #24]
 8009ccc:	f04f 0a00 	mov.w	sl, #0
 8009cd0:	f04f 0b00 	mov.w	fp, #0
 8009cd4:	2600      	movs	r6, #0
 8009cd6:	eba8 0504 	sub.w	r5, r8, r4
 8009cda:	e0e4      	b.n	8009ea6 <__kernel_rem_pio2+0x4b6>
 8009cdc:	f04f 0902 	mov.w	r9, #2
 8009ce0:	e754      	b.n	8009b8c <__kernel_rem_pio2+0x19c>
 8009ce2:	f854 3b04 	ldr.w	r3, [r4], #4
 8009ce6:	bb0d      	cbnz	r5, 8009d2c <__kernel_rem_pio2+0x33c>
 8009ce8:	b123      	cbz	r3, 8009cf4 <__kernel_rem_pio2+0x304>
 8009cea:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009cee:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	3201      	adds	r2, #1
 8009cf6:	461d      	mov	r5, r3
 8009cf8:	e74f      	b.n	8009b9a <__kernel_rem_pio2+0x1aa>
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w
	...
 8009d0c:	3ff00000 	.word	0x3ff00000
 8009d10:	0800a890 	.word	0x0800a890
 8009d14:	40200000 	.word	0x40200000
 8009d18:	3ff00000 	.word	0x3ff00000
 8009d1c:	3e700000 	.word	0x3e700000
 8009d20:	41700000 	.word	0x41700000
 8009d24:	3fe00000 	.word	0x3fe00000
 8009d28:	0800a850 	.word	0x0800a850
 8009d2c:	1acb      	subs	r3, r1, r3
 8009d2e:	e7de      	b.n	8009cee <__kernel_rem_pio2+0x2fe>
 8009d30:	f108 32ff 	add.w	r2, r8, #4294967295
 8009d34:	ab0c      	add	r3, sp, #48	@ 0x30
 8009d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009d3e:	a90c      	add	r1, sp, #48	@ 0x30
 8009d40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009d44:	e737      	b.n	8009bb6 <__kernel_rem_pio2+0x1c6>
 8009d46:	f108 32ff 	add.w	r2, r8, #4294967295
 8009d4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d54:	e7f3      	b.n	8009d3e <__kernel_rem_pio2+0x34e>
 8009d56:	a90c      	add	r1, sp, #48	@ 0x30
 8009d58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	e785      	b.n	8009c6e <__kernel_rem_pio2+0x27e>
 8009d62:	3401      	adds	r4, #1
 8009d64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	d0fa      	beq.n	8009d62 <__kernel_rem_pio2+0x372>
 8009d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d72:	eb0d 0503 	add.w	r5, sp, r3
 8009d76:	9b06      	ldr	r3, [sp, #24]
 8009d78:	aa20      	add	r2, sp, #128	@ 0x80
 8009d7a:	4443      	add	r3, r8
 8009d7c:	f108 0701 	add.w	r7, r8, #1
 8009d80:	3d98      	subs	r5, #152	@ 0x98
 8009d82:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009d86:	4444      	add	r4, r8
 8009d88:	42bc      	cmp	r4, r7
 8009d8a:	da04      	bge.n	8009d96 <__kernel_rem_pio2+0x3a6>
 8009d8c:	46a0      	mov	r8, r4
 8009d8e:	e6a2      	b.n	8009ad6 <__kernel_rem_pio2+0xe6>
 8009d90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d92:	2401      	movs	r4, #1
 8009d94:	e7e6      	b.n	8009d64 <__kernel_rem_pio2+0x374>
 8009d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009d9c:	f7f6 fbe2 	bl	8000564 <__aeabi_i2d>
 8009da0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800a060 <__kernel_rem_pio2+0x670>
 8009da4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009da8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009dac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009db0:	46b2      	mov	sl, r6
 8009db2:	f04f 0800 	mov.w	r8, #0
 8009db6:	9b05      	ldr	r3, [sp, #20]
 8009db8:	4598      	cmp	r8, r3
 8009dba:	dd05      	ble.n	8009dc8 <__kernel_rem_pio2+0x3d8>
 8009dbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dc0:	3701      	adds	r7, #1
 8009dc2:	eca5 7b02 	vstmia	r5!, {d7}
 8009dc6:	e7df      	b.n	8009d88 <__kernel_rem_pio2+0x398>
 8009dc8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009dcc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009dd0:	f7f6 fc32 	bl	8000638 <__aeabi_dmul>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ddc:	f7f6 fa76 	bl	80002cc <__adddf3>
 8009de0:	f108 0801 	add.w	r8, r8, #1
 8009de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009de8:	e7e5      	b.n	8009db6 <__kernel_rem_pio2+0x3c6>
 8009dea:	f1cb 0000 	rsb	r0, fp, #0
 8009dee:	ec47 6b10 	vmov	d0, r6, r7
 8009df2:	f000 f94d 	bl	800a090 <scalbn>
 8009df6:	ec55 4b10 	vmov	r4, r5, d0
 8009dfa:	4b9b      	ldr	r3, [pc, #620]	@ (800a068 <__kernel_rem_pio2+0x678>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	4620      	mov	r0, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	f7f6 fe9f 	bl	8000b44 <__aeabi_dcmpge>
 8009e06:	b300      	cbz	r0, 8009e4a <__kernel_rem_pio2+0x45a>
 8009e08:	4b98      	ldr	r3, [pc, #608]	@ (800a06c <__kernel_rem_pio2+0x67c>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	4629      	mov	r1, r5
 8009e10:	f7f6 fc12 	bl	8000638 <__aeabi_dmul>
 8009e14:	f7f6 fec0 	bl	8000b98 <__aeabi_d2iz>
 8009e18:	4606      	mov	r6, r0
 8009e1a:	f7f6 fba3 	bl	8000564 <__aeabi_i2d>
 8009e1e:	4b92      	ldr	r3, [pc, #584]	@ (800a068 <__kernel_rem_pio2+0x678>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	f7f6 fc09 	bl	8000638 <__aeabi_dmul>
 8009e26:	460b      	mov	r3, r1
 8009e28:	4602      	mov	r2, r0
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f7f6 fa4b 	bl	80002c8 <__aeabi_dsub>
 8009e32:	f7f6 feb1 	bl	8000b98 <__aeabi_d2iz>
 8009e36:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e38:	f10b 0b18 	add.w	fp, fp, #24
 8009e3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009e40:	f108 0801 	add.w	r8, r8, #1
 8009e44:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009e48:	e720      	b.n	8009c8c <__kernel_rem_pio2+0x29c>
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f7f6 fea3 	bl	8000b98 <__aeabi_d2iz>
 8009e52:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009e58:	e718      	b.n	8009c8c <__kernel_rem_pio2+0x29c>
 8009e5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e60:	f7f6 fb80 	bl	8000564 <__aeabi_i2d>
 8009e64:	4622      	mov	r2, r4
 8009e66:	462b      	mov	r3, r5
 8009e68:	f7f6 fbe6 	bl	8000638 <__aeabi_dmul>
 8009e6c:	4652      	mov	r2, sl
 8009e6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009e72:	465b      	mov	r3, fp
 8009e74:	4620      	mov	r0, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	f7f6 fbde 	bl	8000638 <__aeabi_dmul>
 8009e7c:	3e01      	subs	r6, #1
 8009e7e:	4604      	mov	r4, r0
 8009e80:	460d      	mov	r5, r1
 8009e82:	e716      	b.n	8009cb2 <__kernel_rem_pio2+0x2c2>
 8009e84:	9906      	ldr	r1, [sp, #24]
 8009e86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009e8a:	9106      	str	r1, [sp, #24]
 8009e8c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009e90:	f7f6 fbd2 	bl	8000638 <__aeabi_dmul>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4650      	mov	r0, sl
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	f7f6 fa16 	bl	80002cc <__adddf3>
 8009ea0:	3601      	adds	r6, #1
 8009ea2:	4682      	mov	sl, r0
 8009ea4:	468b      	mov	fp, r1
 8009ea6:	9b00      	ldr	r3, [sp, #0]
 8009ea8:	429e      	cmp	r6, r3
 8009eaa:	dc01      	bgt.n	8009eb0 <__kernel_rem_pio2+0x4c0>
 8009eac:	42ae      	cmp	r6, r5
 8009eae:	dde9      	ble.n	8009e84 <__kernel_rem_pio2+0x494>
 8009eb0:	ab48      	add	r3, sp, #288	@ 0x120
 8009eb2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009eb6:	e9c5 ab00 	strd	sl, fp, [r5]
 8009eba:	3c01      	subs	r4, #1
 8009ebc:	e6fd      	b.n	8009cba <__kernel_rem_pio2+0x2ca>
 8009ebe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	dc0b      	bgt.n	8009edc <__kernel_rem_pio2+0x4ec>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	dc35      	bgt.n	8009f34 <__kernel_rem_pio2+0x544>
 8009ec8:	d059      	beq.n	8009f7e <__kernel_rem_pio2+0x58e>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	f003 0007 	and.w	r0, r3, #7
 8009ed0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009ed4:	ecbd 8b02 	vpop	{d8}
 8009ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009edc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	d1f3      	bne.n	8009eca <__kernel_rem_pio2+0x4da>
 8009ee2:	9b05      	ldr	r3, [sp, #20]
 8009ee4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009ee8:	eb0d 0403 	add.w	r4, sp, r3
 8009eec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009ef0:	4625      	mov	r5, r4
 8009ef2:	46c2      	mov	sl, r8
 8009ef4:	f1ba 0f00 	cmp.w	sl, #0
 8009ef8:	dc69      	bgt.n	8009fce <__kernel_rem_pio2+0x5de>
 8009efa:	4645      	mov	r5, r8
 8009efc:	2d01      	cmp	r5, #1
 8009efe:	f300 8087 	bgt.w	800a010 <__kernel_rem_pio2+0x620>
 8009f02:	9c05      	ldr	r4, [sp, #20]
 8009f04:	ab48      	add	r3, sp, #288	@ 0x120
 8009f06:	441c      	add	r4, r3
 8009f08:	2000      	movs	r0, #0
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	f1b8 0f01 	cmp.w	r8, #1
 8009f10:	f300 809c 	bgt.w	800a04c <__kernel_rem_pio2+0x65c>
 8009f14:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8009f18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8009f1c:	f1b9 0f00 	cmp.w	r9, #0
 8009f20:	f040 80a6 	bne.w	800a070 <__kernel_rem_pio2+0x680>
 8009f24:	9b04      	ldr	r3, [sp, #16]
 8009f26:	e9c3 5600 	strd	r5, r6, [r3]
 8009f2a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009f2e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009f32:	e7ca      	b.n	8009eca <__kernel_rem_pio2+0x4da>
 8009f34:	9d05      	ldr	r5, [sp, #20]
 8009f36:	ab48      	add	r3, sp, #288	@ 0x120
 8009f38:	441d      	add	r5, r3
 8009f3a:	4644      	mov	r4, r8
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	2100      	movs	r1, #0
 8009f40:	2c00      	cmp	r4, #0
 8009f42:	da35      	bge.n	8009fb0 <__kernel_rem_pio2+0x5c0>
 8009f44:	f1b9 0f00 	cmp.w	r9, #0
 8009f48:	d038      	beq.n	8009fbc <__kernel_rem_pio2+0x5cc>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f50:	9c04      	ldr	r4, [sp, #16]
 8009f52:	e9c4 2300 	strd	r2, r3, [r4]
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009f5e:	f7f6 f9b3 	bl	80002c8 <__aeabi_dsub>
 8009f62:	ad4a      	add	r5, sp, #296	@ 0x128
 8009f64:	2401      	movs	r4, #1
 8009f66:	45a0      	cmp	r8, r4
 8009f68:	da2b      	bge.n	8009fc2 <__kernel_rem_pio2+0x5d2>
 8009f6a:	f1b9 0f00 	cmp.w	r9, #0
 8009f6e:	d002      	beq.n	8009f76 <__kernel_rem_pio2+0x586>
 8009f70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f74:	4619      	mov	r1, r3
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009f7c:	e7a5      	b.n	8009eca <__kernel_rem_pio2+0x4da>
 8009f7e:	9c05      	ldr	r4, [sp, #20]
 8009f80:	ab48      	add	r3, sp, #288	@ 0x120
 8009f82:	441c      	add	r4, r3
 8009f84:	2000      	movs	r0, #0
 8009f86:	2100      	movs	r1, #0
 8009f88:	f1b8 0f00 	cmp.w	r8, #0
 8009f8c:	da09      	bge.n	8009fa2 <__kernel_rem_pio2+0x5b2>
 8009f8e:	f1b9 0f00 	cmp.w	r9, #0
 8009f92:	d002      	beq.n	8009f9a <__kernel_rem_pio2+0x5aa>
 8009f94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f98:	4619      	mov	r1, r3
 8009f9a:	9b04      	ldr	r3, [sp, #16]
 8009f9c:	e9c3 0100 	strd	r0, r1, [r3]
 8009fa0:	e793      	b.n	8009eca <__kernel_rem_pio2+0x4da>
 8009fa2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009fa6:	f7f6 f991 	bl	80002cc <__adddf3>
 8009faa:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fae:	e7eb      	b.n	8009f88 <__kernel_rem_pio2+0x598>
 8009fb0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009fb4:	f7f6 f98a 	bl	80002cc <__adddf3>
 8009fb8:	3c01      	subs	r4, #1
 8009fba:	e7c1      	b.n	8009f40 <__kernel_rem_pio2+0x550>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	e7c6      	b.n	8009f50 <__kernel_rem_pio2+0x560>
 8009fc2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009fc6:	f7f6 f981 	bl	80002cc <__adddf3>
 8009fca:	3401      	adds	r4, #1
 8009fcc:	e7cb      	b.n	8009f66 <__kernel_rem_pio2+0x576>
 8009fce:	ed35 7b02 	vldmdb	r5!, {d7}
 8009fd2:	ed8d 7b00 	vstr	d7, [sp]
 8009fd6:	ed95 7b02 	vldr	d7, [r5, #8]
 8009fda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fde:	ec53 2b17 	vmov	r2, r3, d7
 8009fe2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fe6:	f7f6 f971 	bl	80002cc <__adddf3>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4606      	mov	r6, r0
 8009ff0:	460f      	mov	r7, r1
 8009ff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ff6:	f7f6 f967 	bl	80002c8 <__aeabi_dsub>
 8009ffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ffe:	f7f6 f965 	bl	80002cc <__adddf3>
 800a002:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a006:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a00a:	e9c5 6700 	strd	r6, r7, [r5]
 800a00e:	e771      	b.n	8009ef4 <__kernel_rem_pio2+0x504>
 800a010:	ed34 7b02 	vldmdb	r4!, {d7}
 800a014:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a018:	ec51 0b17 	vmov	r0, r1, d7
 800a01c:	4652      	mov	r2, sl
 800a01e:	465b      	mov	r3, fp
 800a020:	ed8d 7b00 	vstr	d7, [sp]
 800a024:	f7f6 f952 	bl	80002cc <__adddf3>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4606      	mov	r6, r0
 800a02e:	460f      	mov	r7, r1
 800a030:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a034:	f7f6 f948 	bl	80002c8 <__aeabi_dsub>
 800a038:	4652      	mov	r2, sl
 800a03a:	465b      	mov	r3, fp
 800a03c:	f7f6 f946 	bl	80002cc <__adddf3>
 800a040:	3d01      	subs	r5, #1
 800a042:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a046:	e9c4 6700 	strd	r6, r7, [r4]
 800a04a:	e757      	b.n	8009efc <__kernel_rem_pio2+0x50c>
 800a04c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a050:	f7f6 f93c 	bl	80002cc <__adddf3>
 800a054:	f108 38ff 	add.w	r8, r8, #4294967295
 800a058:	e758      	b.n	8009f0c <__kernel_rem_pio2+0x51c>
 800a05a:	bf00      	nop
 800a05c:	f3af 8000 	nop.w
	...
 800a068:	41700000 	.word	0x41700000
 800a06c:	3e700000 	.word	0x3e700000
 800a070:	9b04      	ldr	r3, [sp, #16]
 800a072:	9a04      	ldr	r2, [sp, #16]
 800a074:	601d      	str	r5, [r3, #0]
 800a076:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800a07a:	605c      	str	r4, [r3, #4]
 800a07c:	609f      	str	r7, [r3, #8]
 800a07e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800a082:	60d3      	str	r3, [r2, #12]
 800a084:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a088:	6110      	str	r0, [r2, #16]
 800a08a:	6153      	str	r3, [r2, #20]
 800a08c:	e71d      	b.n	8009eca <__kernel_rem_pio2+0x4da>
 800a08e:	bf00      	nop

0800a090 <scalbn>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	ec55 4b10 	vmov	r4, r5, d0
 800a096:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a09a:	4606      	mov	r6, r0
 800a09c:	462b      	mov	r3, r5
 800a09e:	b991      	cbnz	r1, 800a0c6 <scalbn+0x36>
 800a0a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a0a4:	4323      	orrs	r3, r4
 800a0a6:	d03b      	beq.n	800a120 <scalbn+0x90>
 800a0a8:	4b33      	ldr	r3, [pc, #204]	@ (800a178 <scalbn+0xe8>)
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f7f6 fac2 	bl	8000638 <__aeabi_dmul>
 800a0b4:	4b31      	ldr	r3, [pc, #196]	@ (800a17c <scalbn+0xec>)
 800a0b6:	429e      	cmp	r6, r3
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	460d      	mov	r5, r1
 800a0bc:	da0f      	bge.n	800a0de <scalbn+0x4e>
 800a0be:	a326      	add	r3, pc, #152	@ (adr r3, 800a158 <scalbn+0xc8>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	e01e      	b.n	800a104 <scalbn+0x74>
 800a0c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a0ca:	4291      	cmp	r1, r2
 800a0cc:	d10b      	bne.n	800a0e6 <scalbn+0x56>
 800a0ce:	4622      	mov	r2, r4
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	f7f6 f8fa 	bl	80002cc <__adddf3>
 800a0d8:	4604      	mov	r4, r0
 800a0da:	460d      	mov	r5, r1
 800a0dc:	e020      	b.n	800a120 <scalbn+0x90>
 800a0de:	460b      	mov	r3, r1
 800a0e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a0e4:	3936      	subs	r1, #54	@ 0x36
 800a0e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a0ea:	4296      	cmp	r6, r2
 800a0ec:	dd0d      	ble.n	800a10a <scalbn+0x7a>
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	a11b      	add	r1, pc, #108	@ (adr r1, 800a160 <scalbn+0xd0>)
 800a0f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0f6:	da02      	bge.n	800a0fe <scalbn+0x6e>
 800a0f8:	a11b      	add	r1, pc, #108	@ (adr r1, 800a168 <scalbn+0xd8>)
 800a0fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0fe:	a318      	add	r3, pc, #96	@ (adr r3, 800a160 <scalbn+0xd0>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f7f6 fa98 	bl	8000638 <__aeabi_dmul>
 800a108:	e7e6      	b.n	800a0d8 <scalbn+0x48>
 800a10a:	1872      	adds	r2, r6, r1
 800a10c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a110:	428a      	cmp	r2, r1
 800a112:	dcec      	bgt.n	800a0ee <scalbn+0x5e>
 800a114:	2a00      	cmp	r2, #0
 800a116:	dd06      	ble.n	800a126 <scalbn+0x96>
 800a118:	f36f 531e 	bfc	r3, #20, #11
 800a11c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a120:	ec45 4b10 	vmov	d0, r4, r5
 800a124:	bd70      	pop	{r4, r5, r6, pc}
 800a126:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a12a:	da08      	bge.n	800a13e <scalbn+0xae>
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	a10a      	add	r1, pc, #40	@ (adr r1, 800a158 <scalbn+0xc8>)
 800a130:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a134:	dac3      	bge.n	800a0be <scalbn+0x2e>
 800a136:	a10e      	add	r1, pc, #56	@ (adr r1, 800a170 <scalbn+0xe0>)
 800a138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a13c:	e7bf      	b.n	800a0be <scalbn+0x2e>
 800a13e:	3236      	adds	r2, #54	@ 0x36
 800a140:	f36f 531e 	bfc	r3, #20, #11
 800a144:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a148:	4620      	mov	r0, r4
 800a14a:	4b0d      	ldr	r3, [pc, #52]	@ (800a180 <scalbn+0xf0>)
 800a14c:	4629      	mov	r1, r5
 800a14e:	2200      	movs	r2, #0
 800a150:	e7d8      	b.n	800a104 <scalbn+0x74>
 800a152:	bf00      	nop
 800a154:	f3af 8000 	nop.w
 800a158:	c2f8f359 	.word	0xc2f8f359
 800a15c:	01a56e1f 	.word	0x01a56e1f
 800a160:	8800759c 	.word	0x8800759c
 800a164:	7e37e43c 	.word	0x7e37e43c
 800a168:	8800759c 	.word	0x8800759c
 800a16c:	fe37e43c 	.word	0xfe37e43c
 800a170:	c2f8f359 	.word	0xc2f8f359
 800a174:	81a56e1f 	.word	0x81a56e1f
 800a178:	43500000 	.word	0x43500000
 800a17c:	ffff3cb0 	.word	0xffff3cb0
 800a180:	3c900000 	.word	0x3c900000
 800a184:	00000000 	.word	0x00000000

0800a188 <floor>:
 800a188:	ec51 0b10 	vmov	r0, r1, d0
 800a18c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a194:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a198:	2e13      	cmp	r6, #19
 800a19a:	460c      	mov	r4, r1
 800a19c:	4605      	mov	r5, r0
 800a19e:	4680      	mov	r8, r0
 800a1a0:	dc34      	bgt.n	800a20c <floor+0x84>
 800a1a2:	2e00      	cmp	r6, #0
 800a1a4:	da17      	bge.n	800a1d6 <floor+0x4e>
 800a1a6:	a332      	add	r3, pc, #200	@ (adr r3, 800a270 <floor+0xe8>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f7f6 f88e 	bl	80002cc <__adddf3>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f7f6 fcd0 	bl	8000b58 <__aeabi_dcmpgt>
 800a1b8:	b150      	cbz	r0, 800a1d0 <floor+0x48>
 800a1ba:	2c00      	cmp	r4, #0
 800a1bc:	da55      	bge.n	800a26a <floor+0xe2>
 800a1be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a1c2:	432c      	orrs	r4, r5
 800a1c4:	2500      	movs	r5, #0
 800a1c6:	42ac      	cmp	r4, r5
 800a1c8:	4c2b      	ldr	r4, [pc, #172]	@ (800a278 <floor+0xf0>)
 800a1ca:	bf08      	it	eq
 800a1cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	e023      	b.n	800a21e <floor+0x96>
 800a1d6:	4f29      	ldr	r7, [pc, #164]	@ (800a27c <floor+0xf4>)
 800a1d8:	4137      	asrs	r7, r6
 800a1da:	ea01 0307 	and.w	r3, r1, r7
 800a1de:	4303      	orrs	r3, r0
 800a1e0:	d01d      	beq.n	800a21e <floor+0x96>
 800a1e2:	a323      	add	r3, pc, #140	@ (adr r3, 800a270 <floor+0xe8>)
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f7f6 f870 	bl	80002cc <__adddf3>
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f7f6 fcb2 	bl	8000b58 <__aeabi_dcmpgt>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d0eb      	beq.n	800a1d0 <floor+0x48>
 800a1f8:	2c00      	cmp	r4, #0
 800a1fa:	bfbe      	ittt	lt
 800a1fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a200:	4133      	asrlt	r3, r6
 800a202:	18e4      	addlt	r4, r4, r3
 800a204:	ea24 0407 	bic.w	r4, r4, r7
 800a208:	2500      	movs	r5, #0
 800a20a:	e7e1      	b.n	800a1d0 <floor+0x48>
 800a20c:	2e33      	cmp	r6, #51	@ 0x33
 800a20e:	dd0a      	ble.n	800a226 <floor+0x9e>
 800a210:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a214:	d103      	bne.n	800a21e <floor+0x96>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	f7f6 f857 	bl	80002cc <__adddf3>
 800a21e:	ec41 0b10 	vmov	d0, r0, r1
 800a222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a226:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a22a:	f04f 37ff 	mov.w	r7, #4294967295
 800a22e:	40df      	lsrs	r7, r3
 800a230:	4207      	tst	r7, r0
 800a232:	d0f4      	beq.n	800a21e <floor+0x96>
 800a234:	a30e      	add	r3, pc, #56	@ (adr r3, 800a270 <floor+0xe8>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	f7f6 f847 	bl	80002cc <__adddf3>
 800a23e:	2200      	movs	r2, #0
 800a240:	2300      	movs	r3, #0
 800a242:	f7f6 fc89 	bl	8000b58 <__aeabi_dcmpgt>
 800a246:	2800      	cmp	r0, #0
 800a248:	d0c2      	beq.n	800a1d0 <floor+0x48>
 800a24a:	2c00      	cmp	r4, #0
 800a24c:	da0a      	bge.n	800a264 <floor+0xdc>
 800a24e:	2e14      	cmp	r6, #20
 800a250:	d101      	bne.n	800a256 <floor+0xce>
 800a252:	3401      	adds	r4, #1
 800a254:	e006      	b.n	800a264 <floor+0xdc>
 800a256:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a25a:	2301      	movs	r3, #1
 800a25c:	40b3      	lsls	r3, r6
 800a25e:	441d      	add	r5, r3
 800a260:	4545      	cmp	r5, r8
 800a262:	d3f6      	bcc.n	800a252 <floor+0xca>
 800a264:	ea25 0507 	bic.w	r5, r5, r7
 800a268:	e7b2      	b.n	800a1d0 <floor+0x48>
 800a26a:	2500      	movs	r5, #0
 800a26c:	462c      	mov	r4, r5
 800a26e:	e7af      	b.n	800a1d0 <floor+0x48>
 800a270:	8800759c 	.word	0x8800759c
 800a274:	7e37e43c 	.word	0x7e37e43c
 800a278:	bff00000 	.word	0xbff00000
 800a27c:	000fffff 	.word	0x000fffff

0800a280 <_init>:
 800a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a282:	bf00      	nop
 800a284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a286:	bc08      	pop	{r3}
 800a288:	469e      	mov	lr, r3
 800a28a:	4770      	bx	lr

0800a28c <_fini>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	bf00      	nop
 800a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a292:	bc08      	pop	{r3}
 800a294:	469e      	mov	lr, r3
 800a296:	4770      	bx	lr
