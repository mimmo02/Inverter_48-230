
Inverter_48-230_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800a0f8  0800a0f8  0000b0f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a700  0800a700  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a700  0800a700  0000b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a708  0800a708  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a708  0800a708  0000b708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a70c  0800a70c  0000b70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a710  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e14  200001d8  0800a8e4  0000c1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000fec  0800a8e4  0000cfec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000256f4  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004513  00000000  00000000  000318f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001255b  00000000  00000000  00035e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  00048368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e2b  00000000  00000000  00049850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b2d  00000000  00000000  0004b67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002842c  00000000  00000000  000751a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdec8  00000000  00000000  0009d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019b49c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e94  00000000  00000000  0019b4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  001a0374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a0e0 	.word	0x0800a0e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a0e0 	.word	0x0800a0e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <compute_duty_cycle>:

/*************************************************************************/
//  PRIVATE FUNCTIONS
/*************************************************************************/
// duty cycle computation based on control strategy
void compute_duty_cycle(myInverterCtrlStruct *INV, int idx, float sineAmplitude, float udc){
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 8000ff6:	4e70      	ldr	r6, [pc, #448]	@ (80011b8 <compute_duty_cycle+0x1c4>)
void compute_duty_cycle(myInverterCtrlStruct *INV, int idx, float sineAmplitude, float udc){
 8000ff8:	4604      	mov	r4, r0
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 8000ffa:	ee10 0a10 	vmov	r0, s0
void compute_duty_cycle(myInverterCtrlStruct *INV, int idx, float sineAmplitude, float udc){
 8000ffe:	ee10 5a90 	vmov	r5, s1
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 8001002:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
void compute_duty_cycle(myInverterCtrlStruct *INV, int idx, float sineAmplitude, float udc){
 8001006:	ed2d 8b02 	vpush	{d8}
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 800100a:	f7ff fabd 	bl	8000588 <__aeabi_f2d>
 800100e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001012:	f7ff fb11 	bl	8000638 <__aeabi_dmul>
 8001016:	4606      	mov	r6, r0
 8001018:	460f      	mov	r7, r1
 800101a:	4628      	mov	r0, r5
 800101c:	f7ff fab4 	bl	8000588 <__aeabi_f2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4630      	mov	r0, r6
 8001026:	4639      	mov	r1, r7
 8001028:	f7ff fc30 	bl	800088c <__aeabi_ddiv>
 800102c:	f7ff fdfc 	bl	8000c28 <__aeabi_d2f>
	if(INV->system_ctrl_strategy == SYM){								// symmetrical control strategy
 8001030:	7862      	ldrb	r2, [r4, #1]
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 8001032:	78e3      	ldrb	r3, [r4, #3]
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 8001034:	ee08 0a10 	vmov	s16, r0
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 8001038:	7921      	ldrb	r1, [r4, #4]
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 800103a:	60a0      	str	r0, [r4, #8]
	if(INV->system_ctrl_strategy == SYM){								// symmetrical control strategy
 800103c:	b9ea      	cbnz	r2, 800107a <compute_duty_cycle+0x86>
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 800103e:	2b00      	cmp	r3, #0
 8001040:	d152      	bne.n	80010e8 <compute_duty_cycle+0xf4>
			INV->d_a = 0.5 + 0.5*INV->delta_d;
			INV->d_b = 0.5 - 05*INV->delta_d;
			INV->d_c = 0.0;
		}
		else if(INV->Leg_B == false && INV->Leg_C == true){				// leg A and leg C switching
 8001042:	2900      	cmp	r1, #0
 8001044:	d041      	beq.n	80010ca <compute_duty_cycle+0xd6>
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 8001046:	f7ff fa9f 	bl	8000588 <__aeabi_f2d>
 800104a:	2200      	movs	r2, #0
 800104c:	4b5b      	ldr	r3, [pc, #364]	@ (80011bc <compute_duty_cycle+0x1c8>)
 800104e:	f7ff faf3 	bl	8000638 <__aeabi_dmul>
 8001052:	4b5a      	ldr	r3, [pc, #360]	@ (80011bc <compute_duty_cycle+0x1c8>)
 8001054:	2200      	movs	r2, #0
 8001056:	f7ff f939 	bl	80002cc <__adddf3>
 800105a:	f7ff fde5 	bl	8000c28 <__aeabi_d2f>
			INV->d_c = 0.5 - 05*INV->delta_d;
 800105e:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001062:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
			INV->d_b = 0.0;
 8001066:	2300      	movs	r3, #0
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 8001068:	ee07 0a90 	vmov	s15, r0
 800106c:	60e0      	str	r0, [r4, #12]
			INV->d_b = 0.0;
 800106e:	6123      	str	r3, [r4, #16]
			INV->d_c = 0.5 - 05*INV->delta_d;
 8001070:	eea8 7a66 	vfms.f32	s14, s16, s13
 8001074:	ed84 7a05 	vstr	s14, [r4, #20]
			INV->d_b = 0.0;
 8001078:	e029      	b.n	80010ce <compute_duty_cycle+0xda>
		}
	}
	else{																// totem pole control strategy
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 800107a:	bb23      	cbnz	r3, 80010c6 <compute_duty_cycle+0xd2>
				INV->d_a = 1 + INV->delta_d;
				INV->d_b = 1.0;
				INV->d_c = 0.0;
			}
		}
		else if(INV->Leg_B == false && INV->Leg_C == true){				// leg A and leg C switching
 800107c:	b329      	cbz	r1, 80010ca <compute_duty_cycle+0xd6>
			if(INV->delta_d > 0){										// positive half-wave
 800107e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001082:	2300      	movs	r3, #0
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	f340 808c 	ble.w	80011a4 <compute_duty_cycle+0x1b0>
				INV->d_a = INV->delta_d;
 800108c:	60e0      	str	r0, [r4, #12]
				INV->d_c = 0.0;
 800108e:	6163      	str	r3, [r4, #20]
				INV->d_b = 0.0;
 8001090:	6123      	str	r3, [r4, #16]
			}
		}
	}

	// duty cycle value saturation
	if(INV->d_a > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_b > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_c > DUTY_CYCLE_MAX_VALUE || INV->d_c < DUTY_CYCLE_MIN_VALUE){
 8001092:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001096:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	dc1d      	bgt.n	80010dc <compute_duty_cycle+0xe8>
 80010a0:	ed94 7a04 	vldr	s14, [r4, #16]
 80010a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010a8:	edd4 7a05 	vldr	s15, [r4, #20]
 80010ac:	eef4 7ae6 	vcmpe.f32	s15, s13
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	dd69      	ble.n	800118a <compute_duty_cycle+0x196>
			INV->d_a = DUTY_CYCLE_MAX_VALUE;
		else if(INV->d_a < DUTY_CYCLE_MIN_VALUE)
			INV->d_a = DUTY_CYCLE_MIN_VALUE;
		else if(INV->d_b > DUTY_CYCLE_MAX_VALUE)
			INV->d_b = DUTY_CYCLE_MAX_VALUE;
		else if(INV->d_b < DUTY_CYCLE_MIN_VALUE)
 80010b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	d461      	bmi.n	8001184 <compute_duty_cycle+0x190>
			INV->d_b = DUTY_CYCLE_MIN_VALUE;
		else if(INV->d_c > DUTY_CYCLE_MAX_VALUE)
			INV->d_c = DUTY_CYCLE_MAX_VALUE;
 80010c0:	edc4 6a05 	vstr	s13, [r4, #20]
 80010c4:	e00d      	b.n	80010e2 <compute_duty_cycle+0xee>
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 80010c6:	2900      	cmp	r1, #0
 80010c8:	d048      	beq.n	800115c <compute_duty_cycle+0x168>
	if(INV->d_a > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_b > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_c > DUTY_CYCLE_MAX_VALUE || INV->d_c < DUTY_CYCLE_MIN_VALUE){
 80010ca:	edd4 7a03 	vldr	s15, [r4, #12]
 80010ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	dd27      	ble.n	800112c <compute_duty_cycle+0x138>
			INV->d_a = DUTY_CYCLE_MAX_VALUE;
 80010dc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010e0:	60e3      	str	r3, [r4, #12]
		else if(INV->d_c < DUTY_CYCLE_MIN_VALUE)
			INV->d_c = DUTY_CYCLE_MIN_VALUE;
	}
}
 80010e2:	ecbd 8b02 	vpop	{d8}
 80010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 80010e8:	2900      	cmp	r1, #0
 80010ea:	d1ee      	bne.n	80010ca <compute_duty_cycle+0xd6>
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 80010ec:	f7ff fa4c 	bl	8000588 <__aeabi_f2d>
 80010f0:	2200      	movs	r2, #0
 80010f2:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <compute_duty_cycle+0x1c8>)
 80010f4:	f7ff faa0 	bl	8000638 <__aeabi_dmul>
 80010f8:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <compute_duty_cycle+0x1c8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f7ff f8e6 	bl	80002cc <__adddf3>
 8001100:	f7ff fd92 	bl	8000c28 <__aeabi_d2f>
			INV->d_b = 0.5 - 05*INV->delta_d;
 8001104:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001108:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 800110c:	ee07 0a90 	vmov	s15, r0
			INV->d_c = 0.0;
 8001110:	2300      	movs	r3, #0
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 8001112:	60e0      	str	r0, [r4, #12]
			INV->d_b = 0.5 - 05*INV->delta_d;
 8001114:	eea8 7a66 	vfms.f32	s14, s16, s13
			INV->d_c = 0.0;
 8001118:	6163      	str	r3, [r4, #20]
			INV->d_b = 0.5 - 05*INV->delta_d;
 800111a:	ed84 7a04 	vstr	s14, [r4, #16]
	if(INV->d_a > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_b > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_c > DUTY_CYCLE_MAX_VALUE || INV->d_c < DUTY_CYCLE_MIN_VALUE){
 800111e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	dcd7      	bgt.n	80010dc <compute_duty_cycle+0xe8>
 800112c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001130:	2300      	movs	r3, #0
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d40d      	bmi.n	8001154 <compute_duty_cycle+0x160>
 8001138:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800113c:	ed94 7a04 	vldr	s14, [r4, #16]
 8001140:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	ddac      	ble.n	80010a4 <compute_duty_cycle+0xb0>
			INV->d_b = DUTY_CYCLE_MAX_VALUE;
 800114a:	edc4 7a04 	vstr	s15, [r4, #16]
}
 800114e:	ecbd 8b02 	vpop	{d8}
 8001152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001154:	ecbd 8b02 	vpop	{d8}
			INV->d_a = DUTY_CYCLE_MIN_VALUE;
 8001158:	60e3      	str	r3, [r4, #12]
}
 800115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(INV->delta_d > 0){										// positive half-wave
 800115c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001160:	2300      	movs	r3, #0
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	dd03      	ble.n	8001170 <compute_duty_cycle+0x17c>
				INV->d_a = INV->delta_d;
 8001168:	60e0      	str	r0, [r4, #12]
				INV->d_b = 0.0;
 800116a:	6123      	str	r3, [r4, #16]
				INV->d_c = 0.0;
 800116c:	6163      	str	r3, [r4, #20]
 800116e:	e790      	b.n	8001092 <compute_duty_cycle+0x9e>
				INV->d_a = 1 + INV->delta_d;
 8001170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
				INV->d_c = 0.0;
 8001174:	6163      	str	r3, [r4, #20]
				INV->d_a = 1 + INV->delta_d;
 8001176:	ee78 7a07 	vadd.f32	s15, s16, s14
				INV->d_b = 1.0;
 800117a:	ed84 7a04 	vstr	s14, [r4, #16]
				INV->d_a = 1 + INV->delta_d;
 800117e:	edc4 7a03 	vstr	s15, [r4, #12]
				INV->d_c = 0.0;
 8001182:	e7d3      	b.n	800112c <compute_duty_cycle+0x138>
			INV->d_b = DUTY_CYCLE_MIN_VALUE;
 8001184:	2300      	movs	r3, #0
 8001186:	6123      	str	r3, [r4, #16]
 8001188:	e7ab      	b.n	80010e2 <compute_duty_cycle+0xee>
	if(INV->d_a > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_b > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_c > DUTY_CYCLE_MAX_VALUE || INV->d_c < DUTY_CYCLE_MIN_VALUE){
 800118a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800118e:	2300      	movs	r3, #0
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d5a5      	bpl.n	80010e2 <compute_duty_cycle+0xee>
		else if(INV->d_b < DUTY_CYCLE_MIN_VALUE)
 8001196:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	d4f1      	bmi.n	8001184 <compute_duty_cycle+0x190>
			INV->d_c = DUTY_CYCLE_MIN_VALUE;
 80011a0:	6163      	str	r3, [r4, #20]
}
 80011a2:	e79e      	b.n	80010e2 <compute_duty_cycle+0xee>
				INV->d_a = 1 + INV->delta_d;
 80011a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
				INV->d_b = 0.0;
 80011a8:	6123      	str	r3, [r4, #16]
				INV->d_a = 1 + INV->delta_d;
 80011aa:	ee78 7a07 	vadd.f32	s15, s16, s14
				INV->d_c = 1.0;
 80011ae:	ed84 7a05 	vstr	s14, [r4, #20]
				INV->d_a = 1 + INV->delta_d;
 80011b2:	edc4 7a03 	vstr	s15, [r4, #12]
				INV->d_b = 0.0;
 80011b6:	e7b9      	b.n	800112c <compute_duty_cycle+0x138>
 80011b8:	20000218 	.word	0x20000218
 80011bc:	3fe00000 	.word	0x3fe00000

080011c0 <initInverterManagementStructure>:
	myInverter.system_fault = NO_ERROR;
	myInverter.delta_d = 0.0;
	myInverter.d_a = 0.0;
	myInverter.d_b = 0.0;
	myInverter.d_c = 0.0;
	if(config == CONFIG_A){
 80011c0:	b190      	cbz	r0, 80011e8 <initInverterManagementStructure+0x28>
 80011c2:	2001      	movs	r0, #1
 80011c4:	f04f 0c00 	mov.w	ip, #0
 80011c8:	4601      	mov	r1, r0
	myInverter.system_fault = NO_ERROR;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <initInverterManagementStructure+0x30>)
 80011cc:	2200      	movs	r2, #0
		myInverter.system_ctrl_strategy = SYM;
 80011ce:	7058      	strb	r0, [r3, #1]
		myInverter.Leg_A = true;
 80011d0:	2001      	movs	r0, #1
	myInverter.system_fault = NO_ERROR;
 80011d2:	701a      	strb	r2, [r3, #0]
	myInverter.delta_d = 0.0;
 80011d4:	2200      	movs	r2, #0
		myInverter.Leg_A = true;
 80011d6:	7098      	strb	r0, [r3, #2]
		myInverter.Leg_B = true;
 80011d8:	f883 c003 	strb.w	ip, [r3, #3]
	myInverter.delta_d = 0.0;
 80011dc:	609a      	str	r2, [r3, #8]
	myInverter.d_a = 0.0;
 80011de:	60da      	str	r2, [r3, #12]
	myInverter.d_b = 0.0;
 80011e0:	611a      	str	r2, [r3, #16]
	myInverter.d_c = 0.0;
 80011e2:	615a      	str	r2, [r3, #20]
		myInverter.Leg_C = false;
 80011e4:	7119      	strb	r1, [r3, #4]
		myInverter.system_ctrl_strategy = ASYM;
		myInverter.Leg_A = true;
		myInverter.Leg_B = false;
		myInverter.Leg_C = true;
	}
}
 80011e6:	4770      	bx	lr
 80011e8:	f04f 0c01 	mov.w	ip, #1
 80011ec:	4601      	mov	r1, r0
 80011ee:	e7ec      	b.n	80011ca <initInverterManagementStructure+0xa>
 80011f0:	200001fc 	.word	0x200001fc
 80011f4:	00000000 	.word	0x00000000

080011f8 <initSineLookupTable>:

// Lookup table init function
void initSineLookupTable(){
 80011f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int i = 0; i < N; i++) {
		sine_wave[i] = sin(2.0 * M_PI * (double)i / ((double)N));
 80011fc:	2200      	movs	r2, #0
 80011fe:	2300      	movs	r3, #0
 8001200:	4d11      	ldr	r5, [pc, #68]	@ (8001248 <initSineLookupTable+0x50>)
	for (int i = 0; i < N; i++) {
 8001202:	2401      	movs	r4, #1
		sine_wave[i] = sin(2.0 * M_PI * (double)i / ((double)N));
 8001204:	2600      	movs	r6, #0
 8001206:	4f11      	ldr	r7, [pc, #68]	@ (800124c <initSineLookupTable+0x54>)
 8001208:	f20f 0934 	addw	r9, pc, #52	@ 0x34
 800120c:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001210:	e8e5 2302 	strd	r2, r3, [r5], #8
 8001214:	4620      	mov	r0, r4
	for (int i = 0; i < N; i++) {
 8001216:	3401      	adds	r4, #1
		sine_wave[i] = sin(2.0 * M_PI * (double)i / ((double)N));
 8001218:	f7ff f9a4 	bl	8000564 <__aeabi_i2d>
 800121c:	4642      	mov	r2, r8
 800121e:	464b      	mov	r3, r9
 8001220:	f7ff fa0a 	bl	8000638 <__aeabi_dmul>
 8001224:	4632      	mov	r2, r6
 8001226:	463b      	mov	r3, r7
 8001228:	f7ff fb30 	bl	800088c <__aeabi_ddiv>
 800122c:	ec41 0b10 	vmov	d0, r0, r1
 8001230:	f007 ff32 	bl	8009098 <sin>
	for (int i = 0; i < N; i++) {
 8001234:	2cc8      	cmp	r4, #200	@ 0xc8
		sine_wave[i] = sin(2.0 * M_PI * (double)i / ((double)N));
 8001236:	eca5 0b02 	vstmia	r5!, {d0}
	for (int i = 0; i < N; i++) {
 800123a:	d1eb      	bne.n	8001214 <initSineLookupTable+0x1c>
	}
}
 800123c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001240:	54442d18 	.word	0x54442d18
 8001244:	401921fb 	.word	0x401921fb
 8001248:	20000218 	.word	0x20000218
 800124c:	40690000 	.word	0x40690000

08001250 <functionalTestRoutine>:

// functional test execution function
void functionalTestRoutine(TmyconvVSI *converter){
 8001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static int period_counter = 0;

	float udc = U_DC;		// fixed DC voltage value
	//float udc = u_dc_ref;	// measured DC voltage value

	compute_duty_cycle(&myInverter, i, (float)SINE_AMPL, udc);
 8001252:	4f0f      	ldr	r7, [pc, #60]	@ (8001290 <functionalTestRoutine+0x40>)
void functionalTestRoutine(TmyconvVSI *converter){
 8001254:	4604      	mov	r4, r0
	compute_duty_cycle(&myInverter, i, (float)SINE_AMPL, udc);
 8001256:	4d0f      	ldr	r5, [pc, #60]	@ (8001294 <functionalTestRoutine+0x44>)
 8001258:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800125c:	683e      	ldr	r6, [r7, #0]
 800125e:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001262:	4628      	mov	r0, r5
 8001264:	4631      	mov	r1, r6
 8001266:	f7ff fec5 	bl	8000ff4 <compute_duty_cycle>

	// converter.da used for higher semiconductors
	// converter.db used for lower semiconductors	- complementary (it is sufficient to control da)

	converter->da[0] = myInverter.d_a;  // Update leg A
 800126a:	68eb      	ldr	r3, [r5, #12]
	converter->da[1] = myInverter.d_b;  // Update leg B
 800126c:	692a      	ldr	r2, [r5, #16]
	converter->da[2] = myInverter.d_c;  // Update leg C

	// index and periods counter management
	i++;
	if(i==N){
 800126e:	2ec7      	cmp	r6, #199	@ 0xc7
	converter->da[0] = myInverter.d_a;  // Update leg A
 8001270:	64a3      	str	r3, [r4, #72]	@ 0x48
	converter->da[2] = myInverter.d_c;  // Update leg C
 8001272:	696b      	ldr	r3, [r5, #20]
	converter->da[1] = myInverter.d_b;  // Update leg B
 8001274:	64e2      	str	r2, [r4, #76]	@ 0x4c
	converter->da[2] = myInverter.d_c;  // Update leg C
 8001276:	6523      	str	r3, [r4, #80]	@ 0x50
	if(i==N){
 8001278:	d002      	beq.n	8001280 <functionalTestRoutine+0x30>
 800127a:	1c72      	adds	r2, r6, #1
	i++;
 800127c:	603a      	str	r2, [r7, #0]
		i=0;
		period_counter++;
	}
}
 800127e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		period_counter++;
 8001280:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <functionalTestRoutine+0x48>)
		i=0;
 8001282:	2100      	movs	r1, #0
		period_counter++;
 8001284:	6813      	ldr	r3, [r2, #0]
		i=0;
 8001286:	6039      	str	r1, [r7, #0]
		period_counter++;
 8001288:	3301      	adds	r3, #1
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800128e:	bf00      	nop
 8001290:	200001f8 	.word	0x200001f8
 8001294:	200001fc 	.word	0x200001fc
 8001298:	200001f4 	.word	0x200001f4

0800129c <huart3TxCpltCallback>:
static TCBStatus huart3Txstatus, huart3Rxstatus;


void huart3TxCpltCallback(struct __UART_HandleTypeDef *huart)
{
	huart3Txstatus.cnt++;
 800129c:	4a02      	ldr	r2, [pc, #8]	@ (80012a8 <huart3TxCpltCallback+0xc>)
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000878 	.word	0x20000878
 80012ac:	00000000 	.word	0x00000000

080012b0 <huart3RxCpltCallback>:
{
	huart3Rxstatus.cnt++;

	// process the character coming from uart

	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 80012b0:	4881      	ldr	r0, [pc, #516]	@ (80014b8 <huart3RxCpltCallback+0x208>)
 80012b2:	4a82      	ldr	r2, [pc, #520]	@ (80014bc <huart3RxCpltCallback+0x20c>)
 80012b4:	8803      	ldrh	r3, [r0, #0]
{
 80012b6:	b570      	push	{r4, r5, r6, lr}
	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 80012b8:	4d81      	ldr	r5, [pc, #516]	@ (80014c0 <huart3RxCpltCallback+0x210>)
 80012ba:	7812      	ldrb	r2, [r2, #0]
	huart3Rxstatus.cnt++;
 80012bc:	4c81      	ldr	r4, [pc, #516]	@ (80014c4 <huart3RxCpltCallback+0x214>)
	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 80012be:	54ea      	strb	r2, [r5, r3]
 80012c0:	3301      	adds	r3, #1
	huart3Rxstatus.cnt++;
 80012c2:	6821      	ldr	r1, [r4, #0]
	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 80012c4:	b29b      	uxth	r3, r3
	huart3Rxstatus.cnt++;
 80012c6:	3101      	adds	r1, #1
	if( db_cnt_buffer_uart3 >= LENGTH_DB_BUFFER_UART3)
 80012c8:	2b13      	cmp	r3, #19
	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 80012ca:	8003      	strh	r3, [r0, #0]
	huart3Rxstatus.cnt++;
 80012cc:	6021      	str	r1, [r4, #0]
	if( db_cnt_buffer_uart3 >= LENGTH_DB_BUFFER_UART3)
 80012ce:	d901      	bls.n	80012d4 <huart3RxCpltCallback+0x24>
		db_cnt_buffer_uart3 = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	8003      	strh	r3, [r0, #0]

	switch( uart3rxbuffer[0]) {
 80012d4:	f1a2 032b 	sub.w	r3, r2, #43	@ 0x2b
 80012d8:	2b48      	cmp	r3, #72	@ 0x48
 80012da:	d82a      	bhi.n	8001332 <huart3RxCpltCallback+0x82>
 80012dc:	e8df f003 	tbb	[pc, r3]
 80012e0:	29302945 	.word	0x29302945
 80012e4:	30452929 	.word	0x30452929
 80012e8:	835d2929 	.word	0x835d2929
 80012ec:	29292929 	.word	0x29292929
 80012f0:	29292929 	.word	0x29292929
 80012f4:	29292929 	.word	0x29292929
 80012f8:	29292929 	.word	0x29292929
 80012fc:	29292929 	.word	0x29292929
 8001300:	29292929 	.word	0x29292929
 8001304:	29292929 	.word	0x29292929
 8001308:	29292929 	.word	0x29292929
 800130c:	29292929 	.word	0x29292929
 8001310:	29292929 	.word	0x29292929
 8001314:	29292929 	.word	0x29292929
 8001318:	8c292929 	.word	0x8c292929
 800131c:	292929a6 	.word	0x292929a6
 8001320:	29c12929 	.word	0x29c12929
 8001324:	25296b29 	.word	0x25296b29
 8001328:	66          	.byte	0x66
 8001329:	00          	.byte	0x00
	case 'r':
		myconvvsi.signal_run = true;
 800132a:	4b67      	ldr	r3, [pc, #412]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
			myconvvsi.mode--;
		break;
	default:
		;
	}
	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 8001332:	2201      	movs	r2, #1
 8001334:	4961      	ldr	r1, [pc, #388]	@ (80014bc <huart3RxCpltCallback+0x20c>)
 8001336:	4865      	ldr	r0, [pc, #404]	@ (80014cc <huart3RxCpltCallback+0x21c>)
}
 8001338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 800133c:	f005 b844 	b.w	80063c8 <HAL_UART_Receive_IT>
		if( myconvvsi.ref>0.0)
 8001340:	4c61      	ldr	r4, [pc, #388]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 8001342:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
 8001346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	ddf0      	ble.n	8001332 <huart3RxCpltCallback+0x82>
			myconvvsi.ref -= 0.01;
 8001350:	ee17 0a90 	vmov	r0, s15
 8001354:	f7ff f918 	bl	8000588 <__aeabi_f2d>
 8001358:	a34d      	add	r3, pc, #308	@ (adr r3, 8001490 <huart3RxCpltCallback+0x1e0>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7fe ffb3 	bl	80002c8 <__aeabi_dsub>
 8001362:	f7ff fc61 	bl	8000c28 <__aeabi_d2f>
 8001366:	67a0      	str	r0, [r4, #120]	@ 0x78
 8001368:	e7e3      	b.n	8001332 <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref<0.95)
 800136a:	4e57      	ldr	r6, [pc, #348]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 800136c:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 800136e:	f7ff f90b 	bl	8000588 <__aeabi_f2d>
 8001372:	4604      	mov	r4, r0
 8001374:	460d      	mov	r5, r1
 8001376:	a348      	add	r3, pc, #288	@ (adr r3, 8001498 <huart3RxCpltCallback+0x1e8>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff fbce 	bl	8000b1c <__aeabi_dcmplt>
 8001380:	2800      	cmp	r0, #0
 8001382:	d0d6      	beq.n	8001332 <huart3RxCpltCallback+0x82>
			myconvvsi.ref += 0.01;
 8001384:	4620      	mov	r0, r4
 8001386:	4629      	mov	r1, r5
 8001388:	a341      	add	r3, pc, #260	@ (adr r3, 8001490 <huart3RxCpltCallback+0x1e0>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7fe ff9d 	bl	80002cc <__adddf3>
 8001392:	f7ff fc49 	bl	8000c28 <__aeabi_d2f>
 8001396:	67b0      	str	r0, [r6, #120]	@ 0x78
 8001398:	e7cb      	b.n	8001332 <huart3RxCpltCallback+0x82>
		if( myconvvsi.mode<2)
 800139a:	4a4b      	ldr	r2, [pc, #300]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 800139c:	f8b2 308c 	ldrh.w	r3, [r2, #140]	@ 0x8c
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d8c6      	bhi.n	8001332 <huart3RxCpltCallback+0x82>
			myconvvsi.mode++;
 80013a4:	3301      	adds	r3, #1
 80013a6:	f8a2 308c 	strh.w	r3, [r2, #140]	@ 0x8c
 80013aa:	e7c2      	b.n	8001332 <huart3RxCpltCallback+0x82>
		myconvvsi.signal_stop = true;
 80013ac:	4b46      	ldr	r3, [pc, #280]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
		break;
 80013b4:	e7bd      	b.n	8001332 <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref0<0.45)
 80013b6:	4e44      	ldr	r6, [pc, #272]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 80013b8:	6ff0      	ldr	r0, [r6, #124]	@ 0x7c
 80013ba:	f7ff f8e5 	bl	8000588 <__aeabi_f2d>
 80013be:	4604      	mov	r4, r0
 80013c0:	460d      	mov	r5, r1
 80013c2:	a337      	add	r3, pc, #220	@ (adr r3, 80014a0 <huart3RxCpltCallback+0x1f0>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff fba8 	bl	8000b1c <__aeabi_dcmplt>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d0b0      	beq.n	8001332 <huart3RxCpltCallback+0x82>
			myconvvsi.ref0 += 0.01;
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	a32e      	add	r3, pc, #184	@ (adr r3, 8001490 <huart3RxCpltCallback+0x1e0>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7fe ff77 	bl	80002cc <__adddf3>
 80013de:	f7ff fc23 	bl	8000c28 <__aeabi_d2f>
 80013e2:	67f0      	str	r0, [r6, #124]	@ 0x7c
 80013e4:	e7a5      	b.n	8001332 <huart3RxCpltCallback+0x82>
		if( myconvvsi.mode>0)
 80013e6:	4a38      	ldr	r2, [pc, #224]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 80013e8:	f8b2 308c 	ldrh.w	r3, [r2, #140]	@ 0x8c
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0a0      	beq.n	8001332 <huart3RxCpltCallback+0x82>
			myconvvsi.mode--;
 80013f0:	3b01      	subs	r3, #1
 80013f2:	f8a2 308c 	strh.w	r3, [r2, #140]	@ 0x8c
 80013f6:	e79c      	b.n	8001332 <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref1<0.1)
 80013f8:	4e33      	ldr	r6, [pc, #204]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 80013fa:	f8d6 0080 	ldr.w	r0, [r6, #128]	@ 0x80
 80013fe:	f7ff f8c3 	bl	8000588 <__aeabi_f2d>
 8001402:	4604      	mov	r4, r0
 8001404:	460d      	mov	r5, r1
 8001406:	a328      	add	r3, pc, #160	@ (adr r3, 80014a8 <huart3RxCpltCallback+0x1f8>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff fb86 	bl	8000b1c <__aeabi_dcmplt>
 8001410:	2800      	cmp	r0, #0
 8001412:	d08e      	beq.n	8001332 <huart3RxCpltCallback+0x82>
			myconvvsi.ref1 += 0.01;
 8001414:	4620      	mov	r0, r4
 8001416:	4629      	mov	r1, r5
 8001418:	a31d      	add	r3, pc, #116	@ (adr r3, 8001490 <huart3RxCpltCallback+0x1e0>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7fe ff55 	bl	80002cc <__adddf3>
 8001422:	f7ff fc01 	bl	8000c28 <__aeabi_d2f>
 8001426:	f8c6 0080 	str.w	r0, [r6, #128]	@ 0x80
 800142a:	e782      	b.n	8001332 <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref1>-0.1)
 800142c:	4e26      	ldr	r6, [pc, #152]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 800142e:	f8d6 0080 	ldr.w	r0, [r6, #128]	@ 0x80
 8001432:	f7ff f8a9 	bl	8000588 <__aeabi_f2d>
 8001436:	4604      	mov	r4, r0
 8001438:	460d      	mov	r5, r1
 800143a:	a31d      	add	r3, pc, #116	@ (adr r3, 80014b0 <huart3RxCpltCallback+0x200>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff fb8a 	bl	8000b58 <__aeabi_dcmpgt>
 8001444:	2800      	cmp	r0, #0
 8001446:	f43f af74 	beq.w	8001332 <huart3RxCpltCallback+0x82>
			myconvvsi.ref1 -= 0.01;
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	a310      	add	r3, pc, #64	@ (adr r3, 8001490 <huart3RxCpltCallback+0x1e0>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7fe ff38 	bl	80002c8 <__aeabi_dsub>
 8001458:	f7ff fbe6 	bl	8000c28 <__aeabi_d2f>
 800145c:	f8c6 0080 	str.w	r0, [r6, #128]	@ 0x80
 8001460:	e767      	b.n	8001332 <huart3RxCpltCallback+0x82>
		if( myconvvsi.ref0>0.0)
 8001462:	4c19      	ldr	r4, [pc, #100]	@ (80014c8 <huart3RxCpltCallback+0x218>)
 8001464:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8001468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	f77f af5f 	ble.w	8001332 <huart3RxCpltCallback+0x82>
			myconvvsi.ref0 -= 0.01;
 8001474:	ee17 0a90 	vmov	r0, s15
 8001478:	f7ff f886 	bl	8000588 <__aeabi_f2d>
 800147c:	a304      	add	r3, pc, #16	@ (adr r3, 8001490 <huart3RxCpltCallback+0x1e0>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7fe ff21 	bl	80002c8 <__aeabi_dsub>
 8001486:	f7ff fbcf 	bl	8000c28 <__aeabi_d2f>
 800148a:	67e0      	str	r0, [r4, #124]	@ 0x7c
 800148c:	e751      	b.n	8001332 <huart3RxCpltCallback+0x82>
 800148e:	bf00      	nop
 8001490:	47ae147b 	.word	0x47ae147b
 8001494:	3f847ae1 	.word	0x3f847ae1
 8001498:	66666666 	.word	0x66666666
 800149c:	3fee6666 	.word	0x3fee6666
 80014a0:	cccccccd 	.word	0xcccccccd
 80014a4:	3fdccccc 	.word	0x3fdccccc
 80014a8:	9999999a 	.word	0x9999999a
 80014ac:	3fb99999 	.word	0x3fb99999
 80014b0:	9999999a 	.word	0x9999999a
 80014b4:	bfb99999 	.word	0xbfb99999
 80014b8:	20000858 	.word	0x20000858
 80014bc:	200008e0 	.word	0x200008e0
 80014c0:	2000085c 	.word	0x2000085c
 80014c4:	20000874 	.word	0x20000874
 80014c8:	20000d70 	.word	0x20000d70
 80014cc:	20000954 	.word	0x20000954

080014d0 <DisplayMessageMeas>:
{
 80014d0:	b570      	push	{r4, r5, r6, lr}
	if( myconvvsi.sm == SMRun) {
 80014d2:	4c2d      	ldr	r4, [pc, #180]	@ (8001588 <DisplayMessageMeas+0xb8>)
{
 80014d4:	b092      	sub	sp, #72	@ 0x48
	if( myconvvsi.sm == SMRun) {
 80014d6:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d001      	beq.n	80014e2 <DisplayMessageMeas+0x12>
}
 80014de:	b012      	add	sp, #72	@ 0x48
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 80014e2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80014e4:	f7ff f850 	bl	8000588 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80014ee:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
 80014f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80014f6:	f7ff f847 	bl	8000588 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001500:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8001504:	f7ff f840 	bl	8000588 <__aeabi_f2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800150e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001512:	f7ff f839 	bl	8000588 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800151c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001520:	f7ff f832 	bl	8000588 <__aeabi_f2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800152a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800152e:	f7ff f82b 	bl	8000588 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	6960      	ldr	r0, [r4, #20]
 8001538:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800153c:	f7ff f824 	bl	8000588 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	6920      	ldr	r0, [r4, #16]
 8001546:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800154a:	f7ff f81d 	bl	8000588 <__aeabi_f2d>
 800154e:	460b      	mov	r3, r1
 8001550:	4602      	mov	r2, r0
 8001552:	68e0      	ldr	r0, [r4, #12]
 8001554:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001558:	f7ff f816 	bl	8000588 <__aeabi_f2d>
 800155c:	4604      	mov	r4, r0
 800155e:	460d      	mov	r5, r1
 8001560:	4632      	mov	r2, r6
 8001562:	490a      	ldr	r1, [pc, #40]	@ (800158c <DisplayMessageMeas+0xbc>)
 8001564:	480a      	ldr	r0, [pc, #40]	@ (8001590 <DisplayMessageMeas+0xc0>)
 8001566:	e9cd 4500 	strd	r4, r5, [sp]
 800156a:	f005 fc63 	bl	8006e34 <siprintf>
		HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)strlen( (char *)uart3txbuffer));
 800156e:	4808      	ldr	r0, [pc, #32]	@ (8001590 <DisplayMessageMeas+0xc0>)
 8001570:	f7fe fe9e 	bl	80002b0 <strlen>
 8001574:	4602      	mov	r2, r0
 8001576:	4906      	ldr	r1, [pc, #24]	@ (8001590 <DisplayMessageMeas+0xc0>)
 8001578:	4806      	ldr	r0, [pc, #24]	@ (8001594 <DisplayMessageMeas+0xc4>)
 800157a:	b292      	uxth	r2, r2
}
 800157c:	b012      	add	sp, #72	@ 0x48
 800157e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)strlen( (char *)uart3txbuffer));
 8001582:	f004 ba67 	b.w	8005a54 <HAL_UART_Transmit_DMA>
 8001586:	bf00      	nop
 8001588:	20000d70 	.word	0x20000d70
 800158c:	0800a0f8 	.word	0x0800a0f8
 8001590:	2000087c 	.word	0x2000087c
 8001594:	20000954 	.word	0x20000954

08001598 <DisplayMessageInit>:
{
 8001598:	b430      	push	{r4, r5}
	sprintf( (char *)uart3txbuffer, start_str);
 800159a:	4d09      	ldr	r5, [pc, #36]	@ (80015c0 <DisplayMessageInit+0x28>)
 800159c:	4c09      	ldr	r4, [pc, #36]	@ (80015c4 <DisplayMessageInit+0x2c>)
 800159e:	46ac      	mov	ip, r5
 80015a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80015a6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80015aa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_str)-1);
 80015ae:	4629      	mov	r1, r5
	sprintf( (char *)uart3txbuffer, start_str);
 80015b0:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_str)-1);
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <DisplayMessageInit+0x30>)
 80015b6:	2218      	movs	r2, #24
}
 80015b8:	bc30      	pop	{r4, r5}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_str)-1);
 80015ba:	f004 ba4b 	b.w	8005a54 <HAL_UART_Transmit_DMA>
 80015be:	bf00      	nop
 80015c0:	2000087c 	.word	0x2000087c
 80015c4:	0800a134 	.word	0x0800a134
 80015c8:	20000954 	.word	0x20000954

080015cc <DisplayMessageRun>:
	sprintf( (char *)uart3txbuffer, start_pwm_str);
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <DisplayMessageRun+0x28>)
{
 80015ce:	b510      	push	{r4, lr}
	sprintf( (char *)uart3txbuffer, start_pwm_str);
 80015d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d2:	4c09      	ldr	r4, [pc, #36]	@ (80015f8 <DisplayMessageRun+0x2c>)
 80015d4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80015d8:	46a4      	mov	ip, r4
 80015da:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_pwm_str)-1);
 80015de:	4621      	mov	r1, r4
	sprintf( (char *)uart3txbuffer, start_pwm_str);
 80015e0:	f82c 3b02 	strh.w	r3, [ip], #2
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_pwm_str)-1);
 80015e4:	220e      	movs	r2, #14
	sprintf( (char *)uart3txbuffer, start_pwm_str);
 80015e6:	f88c e000 	strb.w	lr, [ip]
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_pwm_str)-1);
 80015ea:	4804      	ldr	r0, [pc, #16]	@ (80015fc <DisplayMessageRun+0x30>)
}
 80015ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_pwm_str)-1);
 80015f0:	f004 ba30 	b.w	8005a54 <HAL_UART_Transmit_DMA>
 80015f4:	0800a150 	.word	0x0800a150
 80015f8:	2000087c 	.word	0x2000087c
 80015fc:	20000954 	.word	0x20000954

08001600 <DisplayMessageFault>:
{
 8001600:	b430      	push	{r4, r5}
	sprintf( (char *)uart3txbuffer, fault_str);
 8001602:	4d09      	ldr	r5, [pc, #36]	@ (8001628 <DisplayMessageFault+0x28>)
 8001604:	4c09      	ldr	r4, [pc, #36]	@ (800162c <DisplayMessageFault+0x2c>)
 8001606:	46ac      	mov	ip, r5
 8001608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800160e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(fault_str)-1);
 8001610:	4629      	mov	r1, r5
 8001612:	2212      	movs	r2, #18
 8001614:	4806      	ldr	r0, [pc, #24]	@ (8001630 <DisplayMessageFault+0x30>)
	sprintf( (char *)uart3txbuffer, fault_str);
 8001616:	0c1c      	lsrs	r4, r3, #16
 8001618:	f82c 3b02 	strh.w	r3, [ip], #2
 800161c:	f88c 4000 	strb.w	r4, [ip]
}
 8001620:	bc30      	pop	{r4, r5}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(fault_str)-1);
 8001622:	f004 ba17 	b.w	8005a54 <HAL_UART_Transmit_DMA>
 8001626:	bf00      	nop
 8001628:	2000087c 	.word	0x2000087c
 800162c:	0800a160 	.word	0x0800a160
 8001630:	20000954 	.word	0x20000954

08001634 <DisplayMessageStop>:
{
 8001634:	b430      	push	{r4, r5}
	sprintf( (char *)uart3txbuffer, stop_str);
 8001636:	4d09      	ldr	r5, [pc, #36]	@ (800165c <DisplayMessageStop+0x28>)
 8001638:	4c09      	ldr	r4, [pc, #36]	@ (8001660 <DisplayMessageStop+0x2c>)
 800163a:	46ac      	mov	ip, r5
 800163c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001642:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001646:	e8ac 0003 	stmia.w	ip!, {r0, r1}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(stop_str)-1);
 800164a:	4629      	mov	r1, r5
	sprintf( (char *)uart3txbuffer, stop_str);
 800164c:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(stop_str)-1);
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <DisplayMessageStop+0x30>)
 8001652:	2218      	movs	r2, #24
}
 8001654:	bc30      	pop	{r4, r5}
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(stop_str)-1);
 8001656:	f004 b9fd 	b.w	8005a54 <HAL_UART_Transmit_DMA>
 800165a:	bf00      	nop
 800165c:	2000087c 	.word	0x2000087c
 8001660:	0800a174 	.word	0x0800a174
 8001664:	20000954 	.word	0x20000954

08001668 <InitDisplayUartConsole>:


void InitDisplayUartConsole()
{
 8001668:	b410      	push	{r4}
	huart3.TxCpltCallback = huart3TxCpltCallback;
 800166a:	4806      	ldr	r0, [pc, #24]	@ (8001684 <InitDisplayUartConsole+0x1c>)
	huart3.RxCpltCallback = huart3RxCpltCallback;

	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 800166c:	2201      	movs	r2, #1
	huart3.TxCpltCallback = huart3TxCpltCallback;
 800166e:	4c06      	ldr	r4, [pc, #24]	@ (8001688 <InitDisplayUartConsole+0x20>)
	huart3.RxCpltCallback = huart3RxCpltCallback;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <InitDisplayUartConsole+0x24>)
	huart3.TxCpltCallback = huart3TxCpltCallback;
 8001672:	f8c0 408c 	str.w	r4, [r0, #140]	@ 0x8c
	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 8001676:	4906      	ldr	r1, [pc, #24]	@ (8001690 <InitDisplayUartConsole+0x28>)
}
 8001678:	f85d 4b04 	ldr.w	r4, [sp], #4
	huart3.RxCpltCallback = huart3RxCpltCallback;
 800167c:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 8001680:	f004 bea2 	b.w	80063c8 <HAL_UART_Receive_IT>
 8001684:	20000954 	.word	0x20000954
 8001688:	0800129d 	.word	0x0800129d
 800168c:	080012b1 	.word	0x080012b1
 8001690:	200008e0 	.word	0x200008e0

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	2300      	movs	r3, #0
{
 8001698:	b095      	sub	sp, #84	@ 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4927      	ldr	r1, [pc, #156]	@ (8001738 <SystemClock_Config+0xa4>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a0:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a2:	9303      	str	r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a4:	930d      	str	r3, [sp, #52]	@ 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a6:	4a25      	ldr	r2, [pc, #148]	@ (800173c <SystemClock_Config+0xa8>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a8:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80016b0:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	640b      	str	r3, [r1, #64]	@ 0x40
 80016bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d0:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016d6:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016dc:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016de:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e2:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80016ea:	f44f 73c8 	mov.w	r3, #400	@ 0x190
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ee:	e9cd 420e 	strd	r4, r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 400;
 80016f2:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f4:	2202      	movs	r2, #2
 80016f6:	2302      	movs	r3, #2
 80016f8:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	f002 fc58 	bl	8003fb0 <HAL_RCC_OscConfig>
 8001700:	b108      	cbz	r0, 8001706 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001702:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	e7fe      	b.n	8001704 <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001706:	f002 fc19 	bl	8003f3c <HAL_PWREx_EnableOverDrive>
 800170a:	4603      	mov	r3, r0
 800170c:	b108      	cbz	r0, 8001712 <SystemClock_Config+0x7e>
 800170e:	b672      	cpsid	i
  while (1)
 8001710:	e7fe      	b.n	8001710 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001714:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001718:	a803      	add	r0, sp, #12
 800171a:	2106      	movs	r1, #6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001720:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001724:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001728:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800172a:	f002 fe63 	bl	80043f4 <HAL_RCC_ClockConfig>
 800172e:	b108      	cbz	r0, 8001734 <SystemClock_Config+0xa0>
 8001730:	b672      	cpsid	i
  while (1)
 8001732:	e7fe      	b.n	8001732 <SystemClock_Config+0x9e>
}
 8001734:	b015      	add	sp, #84	@ 0x54
 8001736:	bd30      	pop	{r4, r5, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000

08001740 <main>:
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0a4      	sub	sp, #144	@ 0x90
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001744:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001748:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800174c:	4bb4      	ldr	r3, [pc, #720]	@ (8001a20 <main+0x2e0>)
 800174e:	2400      	movs	r4, #0
 8001750:	f8c3 4250 	str.w	r4, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001758:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001762:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001764:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001768:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800176c:	f001 fbee 	bl	8002f4c <HAL_Init>
  DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM1_STOP|DBGMCU_APB2_FZ_DBG_TIM8_STOP;
 8001770:	4aac      	ldr	r2, [pc, #688]	@ (8001a24 <main+0x2e4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001772:	4dad      	ldr	r5, [pc, #692]	@ (8001a28 <main+0x2e8>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001774:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
  DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM1_STOP|DBGMCU_APB2_FZ_DBG_TIM8_STOP;
 8001778:	68d3      	ldr	r3, [r2, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2701      	movs	r7, #1
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800177c:	f04f 0803 	mov.w	r8, #3
 8001780:	f04f 090b 	mov.w	r9, #11
  DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM1_STOP|DBGMCU_APB2_FZ_DBG_TIM8_STOP;
 8001784:	f043 0303 	orr.w	r3, r3, #3
 8001788:	60d3      	str	r3, [r2, #12]
  SystemClock_Config();
 800178a:	f7ff ff83 	bl	8001694 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	941d      	str	r4, [sp, #116]	@ 0x74
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001790:	4622      	mov	r2, r4
 8001792:	2181      	movs	r1, #129	@ 0x81
 8001794:	48a5      	ldr	r0, [pc, #660]	@ (8001a2c <main+0x2ec>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
 800179a:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017a0:	f043 0310 	orr.w	r3, r3, #16
 80017a4:	632b      	str	r3, [r5, #48]	@ 0x30
 80017a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	632b      	str	r3, [r5, #48]	@ 0x30
 80017b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	9303      	str	r3, [sp, #12]
 80017c0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017c4:	f043 0320 	orr.w	r3, r3, #32
 80017c8:	632b      	str	r3, [r5, #48]	@ 0x30
 80017ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	9304      	str	r3, [sp, #16]
 80017d2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017da:	632b      	str	r3, [r5, #48]	@ 0x30
 80017dc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e2:	9305      	str	r3, [sp, #20]
 80017e4:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	632b      	str	r3, [r5, #48]	@ 0x30
 80017ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	9306      	str	r3, [sp, #24]
 80017f6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	632b      	str	r3, [r5, #48]	@ 0x30
 8001800:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	9307      	str	r3, [sp, #28]
 8001808:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800180a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800180c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001810:	632b      	str	r3, [r5, #48]	@ 0x30
 8001812:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001818:	9308      	str	r3, [sp, #32]
 800181a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	632b      	str	r3, [r5, #48]	@ 0x30
 8001824:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	9309      	str	r3, [sp, #36]	@ 0x24
 800182c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800182e:	f002 fad5 	bl	8003ddc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001832:	4622      	mov	r2, r4
 8001834:	f64c 4118 	movw	r1, #52248	@ 0xcc18
 8001838:	487d      	ldr	r0, [pc, #500]	@ (8001a30 <main+0x2f0>)
 800183a:	f002 facf 	bl	8003ddc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_15|GPIO_PIN_0
 800183e:	f248 038b 	movw	r3, #32907	@ 0x808b
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001842:	a919      	add	r1, sp, #100	@ 0x64
 8001844:	487b      	ldr	r0, [pc, #492]	@ (8001a34 <main+0x2f4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	941b      	str	r4, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_15|GPIO_PIN_0
 8001848:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184c:	f002 f98c 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001850:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001854:	a919      	add	r1, sp, #100	@ 0x64
 8001856:	4878      	ldr	r0, [pc, #480]	@ (8001a38 <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	941b      	str	r4, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185a:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800185e:	f002 f983 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001862:	f64f 0304 	movw	r3, #63492	@ 0xf804
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001866:	a919      	add	r1, sp, #100	@ 0x64
 8001868:	4874      	ldr	r0, [pc, #464]	@ (8001a3c <main+0x2fc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800186a:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001870:	f002 f97a 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8001874:	2381      	movs	r3, #129	@ 0x81
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	a919      	add	r1, sp, #100	@ 0x64
 8001878:	486c      	ldr	r0, [pc, #432]	@ (8001a2c <main+0x2ec>)
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 800187a:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	971a      	str	r7, [sp, #104]	@ 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f002 f971 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001886:	f24d 73ff 	movw	r3, #55295	@ 0xd7ff
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188a:	a919      	add	r1, sp, #100	@ 0x64
 800188c:	486c      	ldr	r0, [pc, #432]	@ (8001a40 <main+0x300>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800188e:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001894:	f002 f968 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001898:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	a919      	add	r1, sp, #100	@ 0x64
 800189e:	4863      	ldr	r0, [pc, #396]	@ (8001a2c <main+0x2ec>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80018a0:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f002 f95f 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018aa:	9619      	str	r6, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2602      	movs	r6, #2
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018ae:	a919      	add	r1, sp, #100	@ 0x64
 80018b0:	485e      	ldr	r0, [pc, #376]	@ (8001a2c <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	e9cd 641a 	strd	r6, r4, [sp, #104]	@ 0x68
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018b6:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f002 f955 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 80018be:	f64c 4318 	movw	r3, #52248	@ 0xcc18
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c2:	a919      	add	r1, sp, #100	@ 0x64
 80018c4:	485a      	ldr	r0, [pc, #360]	@ (8001a30 <main+0x2f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	941c      	str	r4, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 80018c8:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	e9cd 741a 	strd	r7, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ce:	f002 f94b 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018d2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	a919      	add	r1, sp, #100	@ 0x64
 80018d8:	485a      	ldr	r0, [pc, #360]	@ (8001a44 <main+0x304>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018da:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018dc:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018e2:	931d      	str	r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	e9cd 641a 	strd	r6, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f002 f93e 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018f0:	a919      	add	r1, sp, #100	@ 0x64
 80018f2:	4854      	ldr	r0, [pc, #336]	@ (8001a44 <main+0x304>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018f4:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f002 f935 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001902:	a919      	add	r1, sp, #100	@ 0x64
 8001904:	484c      	ldr	r0, [pc, #304]	@ (8001a38 <main+0x2f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001906:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190c:	f002 f92c 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001910:	23e4      	movs	r3, #228	@ 0xe4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001912:	a919      	add	r1, sp, #100	@ 0x64
 8001914:	4846      	ldr	r0, [pc, #280]	@ (8001a30 <main+0x2f0>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001916:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191c:	f002 f924 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001920:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001924:	a919      	add	r1, sp, #100	@ 0x64
 8001926:	4846      	ldr	r0, [pc, #280]	@ (8001a40 <main+0x300>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001928:	f8cd 9074 	str.w	r9, [sp, #116]	@ 0x74
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 800192c:	f04f 5980 	mov.w	r9, #268435456	@ 0x10000000
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001930:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	e9cd 641a 	strd	r6, r4, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800193a:	f002 f915 	bl	8003b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800193e:	2330      	movs	r3, #48	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	a919      	add	r1, sp, #100	@ 0x64
 8001942:	483a      	ldr	r0, [pc, #232]	@ (8001a2c <main+0x2ec>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001944:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	e9cd 641a 	strd	r6, r4, [sp, #104]	@ 0x68
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800194a:	e9cd 461c 	strd	r4, r6, [sp, #112]	@ 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f002 f90b 	bl	8003b68 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001952:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001954:	4622      	mov	r2, r4
 8001956:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001958:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800195c:	200f      	movs	r0, #15
  __HAL_RCC_DMA2_CLK_ENABLE();
 800195e:	632b      	str	r3, [r5, #48]	@ 0x30
 8001960:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800196a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800196c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001970:	632b      	str	r3, [r5, #48]	@ 0x30
 8001972:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  hadc1.Instance = ADC1;
 8001974:	4d34      	ldr	r5, [pc, #208]	@ (8001a48 <main+0x308>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800197e:	f001 fe17 	bl	80035b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001982:	200f      	movs	r0, #15
 8001984:	f001 fe50 	bl	8003628 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001988:	4622      	mov	r2, r4
 800198a:	4621      	mov	r1, r4
 800198c:	203c      	movs	r0, #60	@ 0x3c
 800198e:	f001 fe0f 	bl	80035b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001992:	203c      	movs	r0, #60	@ 0x3c
 8001994:	f001 fe48 	bl	8003628 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001998:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800199c:	f8df e0ac 	ldr.w	lr, [pc, #172]	@ 8001a4c <main+0x30c>
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a0:	4628      	mov	r0, r5
  ADC_MultiModeTypeDef multimode = {0};
 80019a2:	9412      	str	r4, [sp, #72]	@ 0x48
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019a4:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a6:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a8:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ac:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80019ae:	616c      	str	r4, [r5, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019b0:	612f      	str	r7, [r5, #16]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019b2:	f885 7030 	strb.w	r7, [r5, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80019b6:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
 80019ba:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  ADC_MultiModeTypeDef multimode = {0};
 80019be:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80019c2:	e9c5 e300 	strd	lr, r3, [r5]
  hadc1.Init.NbrOfConversion = 6;
 80019c6:	2406      	movs	r4, #6
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 80019c8:	f04f 6320 	mov.w	r3, #167772160	@ 0xa000000
  hadc1.Init.NbrOfConversion = 6;
 80019cc:	61ec      	str	r4, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 80019ce:	e9c5 390a 	strd	r3, r9, [r5, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d2:	f001 fadd 	bl	8002f90 <HAL_ADC_Init>
 80019d6:	b108      	cbz	r0, 80019dc <main+0x29c>
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
  while (1)
 80019da:	e7fe      	b.n	80019da <main+0x29a>
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 80019dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80019e0:	9014      	str	r0, [sp, #80]	@ 0x50
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 80019e2:	2016      	movs	r0, #22
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019e4:	a912      	add	r1, sp, #72	@ 0x48
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 80019e6:	e9cd 0312 	strd	r0, r3, [sp, #72]	@ 0x48
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019ea:	4628      	mov	r0, r5
 80019ec:	f001 fd22 	bl	8003434 <HAL_ADCEx_MultiModeConfigChannel>
 80019f0:	b108      	cbz	r0, 80019f6 <main+0x2b6>
 80019f2:	b672      	cpsid	i
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <main+0x2b4>
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80019f6:	e9cd 771a 	strd	r7, r7, [sp, #104]	@ 0x68
  sConfig.Channel = ADC_CHANNEL_5;
 80019fa:	2705      	movs	r7, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fc:	a919      	add	r1, sp, #100	@ 0x64
 80019fe:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8001a00:	9719      	str	r7, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a02:	f001 fb91 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001a06:	b108      	cbz	r0, 8001a0c <main+0x2cc>
 8001a08:	b672      	cpsid	i
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <main+0x2ca>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0c:	a919      	add	r1, sp, #100	@ 0x64
 8001a0e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_6;
 8001a10:	e9cd 4619 	strd	r4, r6, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a14:	f001 fb88 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001a18:	b1d0      	cbz	r0, 8001a50 <main+0x310>
 8001a1a:	b672      	cpsid	i
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <main+0x2dc>
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00
 8001a24:	e0042000 	.word	0xe0042000
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40021400 	.word	0x40021400
 8001a40:	40021800 	.word	0x40021800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	20000cf8 	.word	0x20000cf8
 8001a4c:	40012000 	.word	0x40012000
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a50:	a919      	add	r1, sp, #100	@ 0x64
 8001a52:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a54:	e9cd 8819 	strd	r8, r8, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a58:	f001 fb66 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001a5c:	b108      	cbz	r0, 8001a62 <main+0x322>
 8001a5e:	b672      	cpsid	i
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <main+0x320>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a62:	210d      	movs	r1, #13
 8001a64:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a66:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a68:	e9cd 1319 	strd	r1, r3, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6c:	a919      	add	r1, sp, #100	@ 0x64
 8001a6e:	f001 fb5b 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001a72:	b108      	cbz	r0, 8001a78 <main+0x338>
 8001a74:	b672      	cpsid	i
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <main+0x336>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001a78:	e9cd 0719 	strd	r0, r7, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7c:	a919      	add	r1, sp, #100	@ 0x64
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f001 fb52 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001a84:	b108      	cbz	r0, 8001a8a <main+0x34a>
 8001a86:	b672      	cpsid	i
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <main+0x348>
  sConfig.Channel = ADC_CHANNEL_15;
 8001a8a:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	a919      	add	r1, sp, #100	@ 0x64
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001a90:	941a      	str	r4, [sp, #104]	@ 0x68
  sConfig.Channel = ADC_CHANNEL_15;
 8001a92:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a94:	f001 fb48 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	b108      	cbz	r0, 8001aa0 <main+0x360>
 8001a9c:	b672      	cpsid	i
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <main+0x35e>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aa0:	222c      	movs	r2, #44	@ 0x2c
 8001aa2:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	900d      	str	r0, [sp, #52]	@ 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa6:	9018      	str	r0, [sp, #96]	@ 0x60
  htim1.Instance = TIM1;
 8001aa8:	4da2      	ldr	r5, [pc, #648]	@ (8001d34 <main+0x5f4>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aaa:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 8001aae:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
 8001ab2:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab6:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aba:	a819      	add	r0, sp, #100	@ 0x64
 8001abc:	f005 fa1f 	bl	8006efe <memset>
  htim1.Instance = TIM1;
 8001ac0:	4b9d      	ldr	r3, [pc, #628]	@ (8001d38 <main+0x5f8>)
  htim1.Init.Period = 10000;
 8001ac2:	2220      	movs	r2, #32
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ac4:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 8001ac6:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 10000;
 8001ac8:	f242 7310 	movw	r3, #10000	@ 0x2710
  htim1.Init.Prescaler = 0;
 8001acc:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = 0;
 8001ad0:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 10000;
 8001ad4:	e9c5 2302 	strd	r2, r3, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ad8:	f003 fc18 	bl	800530c <HAL_TIM_PWM_Init>
 8001adc:	b108      	cbz	r0, 8001ae2 <main+0x3a2>
 8001ade:	b672      	cpsid	i
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <main+0x3a0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001ae2:	2310      	movs	r3, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ae4:	f44f 1900 	mov.w	r9, #2097152	@ 0x200000
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ae8:	4628      	mov	r0, r5
 8001aea:	a90d      	add	r1, sp, #52	@ 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001aec:	930d      	str	r3, [sp, #52]	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	e9cd 930e 	strd	r9, r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001af4:	f003 fdbe 	bl	8005674 <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	b108      	cbz	r0, 8001afe <main+0x3be>
 8001afa:	b672      	cpsid	i
  while (1)
 8001afc:	e7fe      	b.n	8001afc <main+0x3bc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afe:	2200      	movs	r2, #0
 8001b00:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b02:	a912      	add	r1, sp, #72	@ 0x48
 8001b04:	488b      	ldr	r0, [pc, #556]	@ (8001d34 <main+0x5f4>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b06:	9218      	str	r2, [sp, #96]	@ 0x60
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b08:	e9cd 3212 	strd	r3, r2, [sp, #72]	@ 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b0c:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b10:	e9cd 2216 	strd	r2, r2, [sp, #88]	@ 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b14:	f003 fc60 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001b18:	b108      	cbz	r0, 8001b1e <main+0x3de>
 8001b1a:	b672      	cpsid	i
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <main+0x3dc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b1e:	2204      	movs	r2, #4
 8001b20:	a912      	add	r1, sp, #72	@ 0x48
 8001b22:	4884      	ldr	r0, [pc, #528]	@ (8001d34 <main+0x5f4>)
 8001b24:	f003 fc58 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001b28:	b108      	cbz	r0, 8001b2e <main+0x3ee>
 8001b2a:	b672      	cpsid	i
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <main+0x3ec>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b2e:	2208      	movs	r2, #8
 8001b30:	a912      	add	r1, sp, #72	@ 0x48
 8001b32:	4880      	ldr	r0, [pc, #512]	@ (8001d34 <main+0x5f4>)
 8001b34:	f003 fc50 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001b38:	b108      	cbz	r0, 8001b3e <main+0x3fe>
 8001b3a:	b672      	cpsid	i
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <main+0x3fc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	a912      	add	r1, sp, #72	@ 0x48
 8001b42:	487c      	ldr	r0, [pc, #496]	@ (8001d34 <main+0x5f4>)
 8001b44:	f003 fc48 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001b48:	b108      	cbz	r0, 8001b4e <main+0x40e>
 8001b4a:	b672      	cpsid	i
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <main+0x40c>
  sBreakDeadTimeConfig.DeadTime = 200;
 8001b4e:	22c8      	movs	r2, #200	@ 0xc8
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 1;
 8001b54:	2501      	movs	r5, #1
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b56:	901d      	str	r0, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b58:	9020      	str	r0, [sp, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b5a:	a919      	add	r1, sp, #100	@ 0x64
  sBreakDeadTimeConfig.BreakFilter = 1;
 8001b5c:	951f      	str	r5, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b5e:	9321      	str	r3, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.DeadTime = 200;
 8001b60:	e9cd 021b 	strd	r0, r2, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b68:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b6c:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b70:	4870      	ldr	r0, [pc, #448]	@ (8001d34 <main+0x5f4>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b72:	921e      	str	r2, [sp, #120]	@ 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b74:	f003 fdd8 	bl	8005728 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	b108      	cbz	r0, 8001b80 <main+0x440>
 8001b7c:	b672      	cpsid	i
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <main+0x43e>
  HAL_TIM_MspPostInit(&htim1);
 8001b80:	486c      	ldr	r0, [pc, #432]	@ (8001d34 <main+0x5f4>)
 8001b82:	f000 fff1 	bl	8002b68 <HAL_TIM_MspPostInit>
  huart3.Init.BaudRate = 115200;
 8001b86:	f8df 81c0 	ldr.w	r8, [pc, #448]	@ 8001d48 <main+0x608>
  huart3.Instance = USART3;
 8001b8a:	486c      	ldr	r0, [pc, #432]	@ (8001d3c <main+0x5fc>)
  huart3.Init.BaudRate = 115200;
 8001b8c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001b90:	e9c0 8300 	strd	r8, r3, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b94:	230c      	movs	r3, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b96:	6104      	str	r4, [r0, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b98:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba0:	e9c0 4408 	strd	r4, r4, [r0, #32]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ba6:	f004 fb47 	bl	8006238 <HAL_UART_Init>
 8001baa:	b108      	cbz	r0, 8001bb0 <main+0x470>
 8001bac:	b672      	cpsid	i
  while (1)
 8001bae:	e7fe      	b.n	8001bae <main+0x46e>
  hadc2.Instance = ADC2;
 8001bb0:	4c63      	ldr	r4, [pc, #396]	@ (8001d40 <main+0x600>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001bb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb6:	f8df e194 	ldr.w	lr, [pc, #404]	@ 8001d4c <main+0x60c>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001bba:	60a0      	str	r0, [r4, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bbc:	61a0      	str	r0, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bbe:	f884 0020 	strb.w	r0, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc2:	60e0      	str	r0, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001bc4:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bc8:	6125      	str	r5, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bca:	6165      	str	r5, [r4, #20]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001bcc:	e9c4 e300 	strd	lr, r3, [r4]
  hadc2.Init.NbrOfConversion = 6;
 8001bd0:	2306      	movs	r3, #6
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bd2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
 8001bd6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bda:	4620      	mov	r0, r4
  hadc2.Init.NbrOfConversion = 6;
 8001bdc:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bde:	f001 f9d7 	bl	8002f90 <HAL_ADC_Init>
 8001be2:	b108      	cbz	r0, 8001be8 <main+0x4a8>
 8001be4:	b672      	cpsid	i
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <main+0x4a6>
  sConfig.Channel = ADC_CHANNEL_9;
 8001be8:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001bea:	a919      	add	r1, sp, #100	@ 0x64
 8001bec:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8001bee:	9319      	str	r3, [sp, #100]	@ 0x64
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001bf0:	e9cd 551a 	strd	r5, r5, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001bf4:	f001 fa98 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001bf8:	b108      	cbz	r0, 8001bfe <main+0x4be>
 8001bfa:	b672      	cpsid	i
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <main+0x4bc>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001bfe:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c00:	a919      	add	r1, sp, #100	@ 0x64
 8001c02:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c04:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c06:	f001 fa8f 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001c0a:	b108      	cbz	r0, 8001c10 <main+0x4d0>
 8001c0c:	b672      	cpsid	i
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <main+0x4ce>
  sConfig.Channel = ADC_CHANNEL_10;
 8001c10:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c12:	4620      	mov	r0, r4
 8001c14:	a919      	add	r1, sp, #100	@ 0x64
  sConfig.Channel = ADC_CHANNEL_10;
 8001c16:	9319      	str	r3, [sp, #100]	@ 0x64
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c1c:	f001 fa84 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001c20:	b108      	cbz	r0, 8001c26 <main+0x4e6>
 8001c22:	b672      	cpsid	i
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <main+0x4e4>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c26:	230b      	movs	r3, #11
 8001c28:	f04f 0804 	mov.w	r8, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c2c:	a919      	add	r1, sp, #100	@ 0x64
 8001c2e:	4844      	ldr	r0, [pc, #272]	@ (8001d40 <main+0x600>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c30:	e9cd 3819 	strd	r3, r8, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c34:	f001 fa78 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001c38:	b108      	cbz	r0, 8001c3e <main+0x4fe>
 8001c3a:	b672      	cpsid	i
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <main+0x4fc>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001c3e:	2705      	movs	r7, #5
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c40:	a919      	add	r1, sp, #100	@ 0x64
 8001c42:	483f      	ldr	r0, [pc, #252]	@ (8001d40 <main+0x600>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001c44:	971a      	str	r7, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c46:	f001 fa6f 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001c4a:	b108      	cbz	r0, 8001c50 <main+0x510>
 8001c4c:	b672      	cpsid	i
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <main+0x50e>
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001c50:	f04f 0902 	mov.w	r9, #2
 8001c54:	2606      	movs	r6, #6
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c56:	a919      	add	r1, sp, #100	@ 0x64
 8001c58:	4839      	ldr	r0, [pc, #228]	@ (8001d40 <main+0x600>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001c5a:	e9cd 9619 	strd	r9, r6, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c5e:	f001 fa63 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001c62:	b108      	cbz	r0, 8001c68 <main+0x528>
 8001c64:	b672      	cpsid	i
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <main+0x526>
  hadc3.Instance = ADC3;
 8001c68:	4c36      	ldr	r4, [pc, #216]	@ (8001d44 <main+0x604>)
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c6a:	2501      	movs	r5, #1
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001c6c:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8001d50 <main+0x610>
 8001c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
  hadc3.Init.NbrOfConversion = 9;
 8001c74:	f04f 0a09 	mov.w	sl, #9
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c78:	60a0      	str	r0, [r4, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001c7a:	61a0      	str	r0, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c7c:	f884 0020 	strb.w	r0, [r4, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c80:	60e0      	str	r0, [r4, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001c82:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
  hadc3.Init.NbrOfConversion = 9;
 8001c86:	f8c4 a01c 	str.w	sl, [r4, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c8a:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
 8001c8e:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001c92:	4620      	mov	r0, r4
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001c98:	e9c4 c300 	strd	ip, r3, [r4]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001c9c:	f001 f978 	bl	8002f90 <HAL_ADC_Init>
 8001ca0:	b108      	cbz	r0, 8001ca6 <main+0x566>
 8001ca2:	b672      	cpsid	i
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <main+0x564>
  sConfig.Channel = ADC_CHANNEL_8;
 8001ca6:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ca8:	a919      	add	r1, sp, #100	@ 0x64
 8001caa:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_8;
 8001cac:	9319      	str	r3, [sp, #100]	@ 0x64
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001cae:	e9cd 551a 	strd	r5, r5, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cb2:	f001 fa39 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001cb6:	b108      	cbz	r0, 8001cbc <main+0x57c>
 8001cb8:	b672      	cpsid	i
  while (1)
 8001cba:	e7fe      	b.n	8001cba <main+0x57a>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cbc:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
  sConfig.Channel = ADC_CHANNEL_3;
 8001cc0:	f04f 0903 	mov.w	r9, #3
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cc4:	a919      	add	r1, sp, #100	@ 0x64
 8001cc6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001cc8:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ccc:	f001 fa2c 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001cd0:	b108      	cbz	r0, 8001cd6 <main+0x596>
 8001cd2:	b672      	cpsid	i
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <main+0x594>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cd6:	a919      	add	r1, sp, #100	@ 0x64
 8001cd8:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cda:	e9cd a919 	strd	sl, r9, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cde:	f001 fa23 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001ce2:	b108      	cbz	r0, 8001ce8 <main+0x5a8>
 8001ce4:	b672      	cpsid	i
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <main+0x5a6>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ce8:	a919      	add	r1, sp, #100	@ 0x64
 8001cea:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cec:	e9cd 5819 	strd	r5, r8, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cf0:	f001 fa1a 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001cf4:	b108      	cbz	r0, 8001cfa <main+0x5ba>
 8001cf6:	b672      	cpsid	i
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <main+0x5b8>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001cfa:	e9cd 0719 	strd	r0, r7, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cfe:	a919      	add	r1, sp, #100	@ 0x64
 8001d00:	4620      	mov	r0, r4
 8001d02:	f001 fa11 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001d06:	b108      	cbz	r0, 8001d0c <main+0x5cc>
 8001d08:	b672      	cpsid	i
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <main+0x5ca>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	a919      	add	r1, sp, #100	@ 0x64
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001d10:	e9cd 6619 	strd	r6, r6, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d14:	f001 fa08 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001d18:	b108      	cbz	r0, 8001d1e <main+0x5de>
 8001d1a:	b672      	cpsid	i
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <main+0x5dc>
  sConfig.Channel = ADC_CHANNEL_7;
 8001d1e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d20:	a919      	add	r1, sp, #100	@ 0x64
 8001d22:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <main+0x604>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001d24:	e9cd 3319 	strd	r3, r3, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d28:	f001 f9fe 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001d2c:	b190      	cbz	r0, 8001d54 <main+0x614>
 8001d2e:	b672      	cpsid	i
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <main+0x5f0>
 8001d32:	bf00      	nop
 8001d34:	20000aa0 	.word	0x20000aa0
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	20000954 	.word	0x20000954
 8001d40:	20000c94 	.word	0x20000c94
 8001d44:	20000c30 	.word	0x20000c30
 8001d48:	40004800 	.word	0x40004800
 8001d4c:	40012100 	.word	0x40012100
 8001d50:	40012200 	.word	0x40012200
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001d54:	2302      	movs	r3, #2
 8001d56:	2608      	movs	r6, #8
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d58:	a919      	add	r1, sp, #100	@ 0x64
 8001d5a:	489c      	ldr	r0, [pc, #624]	@ (8001fcc <main+0x88c>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001d5c:	e9cd 3619 	strd	r3, r6, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d60:	f001 f9e2 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001d64:	b108      	cbz	r0, 8001d6a <main+0x62a>
 8001d66:	b672      	cpsid	i
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <main+0x628>
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001d6a:	2309      	movs	r3, #9
 8001d6c:	2704      	movs	r7, #4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d6e:	a919      	add	r1, sp, #100	@ 0x64
 8001d70:	4896      	ldr	r0, [pc, #600]	@ (8001fcc <main+0x88c>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001d72:	e9cd 7319 	strd	r7, r3, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d76:	f001 f9d7 	bl	8003128 <HAL_ADC_ConfigChannel>
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	b108      	cbz	r0, 8001d82 <main+0x642>
 8001d7e:	b672      	cpsid	i
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <main+0x640>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d82:	4601      	mov	r1, r0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d84:	9011      	str	r0, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d86:	900a      	str	r0, [sp, #40]	@ 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d88:	222c      	movs	r2, #44	@ 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8a:	9018      	str	r0, [sp, #96]	@ 0x60
  htim8.Instance = TIM8;
 8001d8c:	4d90      	ldr	r5, [pc, #576]	@ (8001fd0 <main+0x890>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d8e:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8001d92:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d96:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 8001d9a:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
 8001d9e:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da2:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da6:	a819      	add	r0, sp, #100	@ 0x64
 8001da8:	f005 f8a9 	bl	8006efe <memset>
  htim8.Instance = TIM8;
 8001dac:	4b89      	ldr	r3, [pc, #548]	@ (8001fd4 <main+0x894>)
  htim8.Init.Period = 10000;
 8001dae:	2020      	movs	r0, #32
  htim8.Init.Prescaler = 0;
 8001db0:	606c      	str	r4, [r5, #4]
  htim8.Instance = TIM8;
 8001db2:	602b      	str	r3, [r5, #0]
  htim8.Init.Period = 10000;
 8001db4:	f242 7310 	movw	r3, #10000	@ 0x2710
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db8:	61ac      	str	r4, [r5, #24]
  htim8.Init.Period = 10000;
 8001dba:	e9c5 0302 	strd	r0, r3, [r5, #8]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001dbe:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 8001dc0:	e9c5 4404 	strd	r4, r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001dc4:	f003 fa70 	bl	80052a8 <HAL_TIM_Base_Init>
 8001dc8:	b108      	cbz	r0, 8001dce <main+0x68e>
 8001dca:	b672      	cpsid	i
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <main+0x68c>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001dce:	4628      	mov	r0, r5
 8001dd0:	f003 fa9c 	bl	800530c <HAL_TIM_PWM_Init>
 8001dd4:	b108      	cbz	r0, 8001dda <main+0x69a>
 8001dd6:	b672      	cpsid	i
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <main+0x698>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001dda:	2306      	movs	r3, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001ddc:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001dde:	a90d      	add	r1, sp, #52	@ 0x34
 8001de0:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001de2:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001de4:	f003 f908 	bl	8004ff8 <HAL_TIM_SlaveConfigSynchro>
 8001de8:	b108      	cbz	r0, 8001dee <main+0x6ae>
 8001dea:	b672      	cpsid	i
  while (1)
 8001dec:	e7fe      	b.n	8001dec <main+0x6ac>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001dee:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001df0:	a90a      	add	r1, sp, #40	@ 0x28
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001df2:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001df6:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001df8:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dfa:	f003 fc3b 	bl	8005674 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	b108      	cbz	r0, 8001e06 <main+0x6c6>
 8001e02:	b672      	cpsid	i
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <main+0x6c4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e06:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e08:	a912      	add	r1, sp, #72	@ 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0a:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0e:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e12:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e16:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e18:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1a:	f003 fadd 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	b108      	cbz	r0, 8001e24 <main+0x6e4>
 8001e20:	b672      	cpsid	i
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <main+0x6e2>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e24:	463a      	mov	r2, r7
 8001e26:	a912      	add	r1, sp, #72	@ 0x48
 8001e28:	4628      	mov	r0, r5
 8001e2a:	f003 fad5 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	b108      	cbz	r0, 8001e34 <main+0x6f4>
 8001e30:	b672      	cpsid	i
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <main+0x6f2>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e34:	4632      	mov	r2, r6
 8001e36:	a912      	add	r1, sp, #72	@ 0x48
 8001e38:	4628      	mov	r0, r5
 8001e3a:	f003 facd 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001e3e:	b108      	cbz	r0, 8001e44 <main+0x704>
 8001e40:	b672      	cpsid	i
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <main+0x702>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e44:	220c      	movs	r2, #12
 8001e46:	a912      	add	r1, sp, #72	@ 0x48
 8001e48:	4861      	ldr	r0, [pc, #388]	@ (8001fd0 <main+0x890>)
 8001e4a:	f003 fac5 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	b108      	cbz	r0, 8001e54 <main+0x714>
 8001e50:	b672      	cpsid	i
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <main+0x712>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakFilter = 1;
 8001e58:	2601      	movs	r6, #1
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e5e:	a919      	add	r1, sp, #100	@ 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e60:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e64:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e68:	e9cd 021d 	strd	r0, r2, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e6c:	e9cd 601f 	strd	r6, r0, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e70:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e74:	4856      	ldr	r0, [pc, #344]	@ (8001fd0 <main+0x890>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e76:	9321      	str	r3, [sp, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e78:	f003 fc56 	bl	8005728 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e7c:	4605      	mov	r5, r0
 8001e7e:	b108      	cbz	r0, 8001e84 <main+0x744>
 8001e80:	b672      	cpsid	i
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <main+0x742>
  hi2c1.Instance = I2C1;
 8001e84:	4c54      	ldr	r4, [pc, #336]	@ (8001fd8 <main+0x898>)
  HAL_TIM_MspPostInit(&htim8);
 8001e86:	4852      	ldr	r0, [pc, #328]	@ (8001fd0 <main+0x890>)
 8001e88:	f000 fe6e 	bl	8002b68 <HAL_TIM_MspPostInit>
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001e8c:	4b53      	ldr	r3, [pc, #332]	@ (8001fdc <main+0x89c>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e8e:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e90:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e92:	e9c4 5602 	strd	r5, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001e96:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e9a:	e9c4 5506 	strd	r5, r5, [r4, #24]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001e9e:	4d50      	ldr	r5, [pc, #320]	@ (8001fe0 <main+0x8a0>)
 8001ea0:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea4:	f001 ff9e 	bl	8003de4 <HAL_I2C_Init>
 8001ea8:	4601      	mov	r1, r0
 8001eaa:	b108      	cbz	r0, 8001eb0 <main+0x770>
 8001eac:	b672      	cpsid	i
  while (1)
 8001eae:	e7fe      	b.n	8001eae <main+0x76e>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f001 ffed 	bl	8003e90 <HAL_I2CEx_ConfigAnalogFilter>
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	b108      	cbz	r0, 8001ebe <main+0x77e>
 8001eba:	b672      	cpsid	i
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <main+0x77c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f002 f810 	bl	8003ee4 <HAL_I2CEx_ConfigDigitalFilter>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b108      	cbz	r0, 8001ecc <main+0x78c>
 8001ec8:	b672      	cpsid	i
  while (1)
 8001eca:	e7fe      	b.n	8001eca <main+0x78a>
  hcan1.Instance = CAN1;
 8001ecc:	4845      	ldr	r0, [pc, #276]	@ (8001fe4 <main+0x8a4>)
  hcan1.Init.Prescaler = 16;
 8001ece:	4a46      	ldr	r2, [pc, #280]	@ (8001fe8 <main+0x8a8>)
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ed0:	8383      	strh	r3, [r0, #28]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ed2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ed6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcan1.Init.Prescaler = 16;
 8001eda:	2310      	movs	r3, #16
 8001edc:	e9c0 2300 	strd	r2, r3, [r0]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001ee0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ee4:	6103      	str	r3, [r0, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ee6:	f001 fad1 	bl	800348c <HAL_CAN_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b108      	cbz	r0, 8001ef2 <main+0x7b2>
 8001eee:	b672      	cpsid	i
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <main+0x7b0>
  hi2c2.Instance = I2C2;
 8001ef2:	4c3e      	ldr	r4, [pc, #248]	@ (8001fec <main+0x8ac>)
  hi2c2.Init.OwnAddress2 = 0;
 8001ef4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef8:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001efc:	6223      	str	r3, [r4, #32]
  hi2c2.Instance = I2C2;
 8001efe:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff0 <main+0x8b0>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	60e6      	str	r6, [r4, #12]
  hi2c2.Instance = I2C2;
 8001f02:	6023      	str	r3, [r4, #0]
  hi2c2.Init.OwnAddress1 = 0;
 8001f04:	e9c4 5001 	strd	r5, r0, [r4, #4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f001 ff6b 	bl	8003de4 <HAL_I2C_Init>
 8001f0e:	4601      	mov	r1, r0
 8001f10:	b108      	cbz	r0, 8001f16 <main+0x7d6>
 8001f12:	b672      	cpsid	i
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <main+0x7d4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f16:	4620      	mov	r0, r4
 8001f18:	f001 ffba 	bl	8003e90 <HAL_I2CEx_ConfigAnalogFilter>
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	b108      	cbz	r0, 8001f24 <main+0x7e4>
 8001f20:	b672      	cpsid	i
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <main+0x7e2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f24:	4620      	mov	r0, r4
 8001f26:	f001 ffdd 	bl	8003ee4 <HAL_I2CEx_ConfigDigitalFilter>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b108      	cbz	r0, 8001f32 <main+0x7f2>
 8001f2e:	b672      	cpsid	i
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <main+0x7f0>
  htim2.Instance = TIM2;
 8001f32:	4830      	ldr	r0, [pc, #192]	@ (8001ff4 <main+0x8b4>)
 8001f34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	9314      	str	r3, [sp, #80]	@ 0x50
  htim2.Instance = TIM2;
 8001f3a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 99;
 8001f3c:	2263      	movs	r2, #99	@ 0x63
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3e:	931f      	str	r3, [sp, #124]	@ 0x7c
  htim2.Init.Prescaler = 99;
 8001f40:	6042      	str	r2, [r0, #4]
  htim2.Init.Period = 199;
 8001f42:	22c7      	movs	r2, #199	@ 0xc7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f46:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	6183      	str	r3, [r0, #24]
  htim2.Init.Period = 199;
 8001f4a:	60c2      	str	r2, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f50:	e9cd 3319 	strd	r3, r3, [sp, #100]	@ 0x64
 8001f54:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
 8001f58:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f5c:	f003 f9d6 	bl	800530c <HAL_TIM_PWM_Init>
 8001f60:	b108      	cbz	r0, 8001f66 <main+0x826>
 8001f62:	b672      	cpsid	i
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <main+0x824>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f66:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f68:	a912      	add	r1, sp, #72	@ 0x48
 8001f6a:	4822      	ldr	r0, [pc, #136]	@ (8001ff4 <main+0x8b4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	9312      	str	r3, [sp, #72]	@ 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6e:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f70:	f003 fb80 	bl	8005674 <HAL_TIMEx_MasterConfigSynchronization>
 8001f74:	4603      	mov	r3, r0
 8001f76:	b108      	cbz	r0, 8001f7c <main+0x83c>
 8001f78:	b672      	cpsid	i
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <main+0x83a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7c:	2060      	movs	r0, #96	@ 0x60
  sConfigOC.Pulse = 100;
 8001f7e:	2164      	movs	r1, #100	@ 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f80:	2208      	movs	r2, #8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f82:	931b      	str	r3, [sp, #108]	@ 0x6c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f84:	931d      	str	r3, [sp, #116]	@ 0x74
  sConfigOC.Pulse = 100;
 8001f86:	e9cd 0119 	strd	r0, r1, [sp, #100]	@ 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f8a:	4469      	add	r1, sp
 8001f8c:	4819      	ldr	r0, [pc, #100]	@ (8001ff4 <main+0x8b4>)
 8001f8e:	f003 fa23 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b108      	cbz	r0, 8001f9a <main+0x85a>
 8001f96:	b672      	cpsid	i
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <main+0x858>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	a919      	add	r1, sp, #100	@ 0x64
 8001f9e:	4815      	ldr	r0, [pc, #84]	@ (8001ff4 <main+0x8b4>)
  sConfigOC.Pulse = 0;
 8001fa0:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fa2:	f003 fa19 	bl	80053d8 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	b108      	cbz	r0, 8001fae <main+0x86e>
 8001faa:	b672      	cpsid	i
  while (1)
 8001fac:	e7fe      	b.n	8001fac <main+0x86c>
  HAL_TIM_MspPostInit(&htim2);
 8001fae:	4811      	ldr	r0, [pc, #68]	@ (8001ff4 <main+0x8b4>)
  hdac.Instance = DAC;
 8001fb0:	4d11      	ldr	r5, [pc, #68]	@ (8001ff8 <main+0x8b8>)
  HAL_TIM_MspPostInit(&htim2);
 8001fb2:	f000 fdd9 	bl	8002b68 <HAL_TIM_MspPostInit>
  hdac.Instance = DAC;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <main+0x8bc>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fb8:	4628      	mov	r0, r5
  DAC_ChannelConfTypeDef sConfig = {0};
 8001fba:	9419      	str	r4, [sp, #100]	@ 0x64
 8001fbc:	941a      	str	r4, [sp, #104]	@ 0x68
  hdac.Instance = DAC;
 8001fbe:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fc0:	f001 fb56 	bl	8003670 <HAL_DAC_Init>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	b1d8      	cbz	r0, 8002000 <main+0x8c0>
 8001fc8:	b672      	cpsid	i
  while (1)
 8001fca:	e7fe      	b.n	8001fca <main+0x88a>
 8001fcc:	20000c30 	.word	0x20000c30
 8001fd0:	20000a08 	.word	0x20000a08
 8001fd4:	40010400 	.word	0x40010400
 8001fd8:	20000b40 	.word	0x20000b40
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	00c0eaff 	.word	0x00c0eaff
 8001fe4:	20000ba8 	.word	0x20000ba8
 8001fe8:	40006400 	.word	0x40006400
 8001fec:	20000aec 	.word	0x20000aec
 8001ff0:	40005800 	.word	0x40005800
 8001ff4:	20000a54 	.word	0x20000a54
 8001ff8:	20000b94 	.word	0x20000b94
 8001ffc:	40007400 	.word	0x40007400
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002000:	a919      	add	r1, sp, #100	@ 0x64
 8002002:	4628      	mov	r0, r5
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002004:	e9cd 2219 	strd	r2, r2, [sp, #100]	@ 0x64
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002008:	f001 fb7a 	bl	8003700 <HAL_DAC_ConfigChannel>
 800200c:	b108      	cbz	r0, 8002012 <main+0x8d2>
 800200e:	b672      	cpsid	i
  while (1)
 8002010:	e7fe      	b.n	8002010 <main+0x8d0>
  InitConverterControlSystemPeripherals();
 8002012:	f000 fa8f 	bl	8002534 <InitConverterControlSystemPeripherals>
	IdleProcess();
 8002016:	f000 fb2f 	bl	8002678 <IdleProcess>
  while (1)
 800201a:	e7fc      	b.n	8002016 <main+0x8d6>

0800201c <Error_Handler>:
 800201c:	b672      	cpsid	i
  while (1)
 800201e:	e7fe      	b.n	800201e <Error_Handler+0x2>

08002020 <RunControlAtEachSamplingPeriodEx1>:

int counter = 0;

void RunControlAtEachSamplingPeriodEx1()
{
	counter = counter + 1;
 8002020:	4a02      	ldr	r2, [pc, #8]	@ (800202c <RunControlAtEachSamplingPeriodEx1+0xc>)
 8002022:	6813      	ldr	r3, [r2, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000d5c 	.word	0x20000d5c

08002030 <ADCErrorCallback>:

uint32_t db_ADCErrorCallback = 0;

void ADCErrorCallback(ADC_HandleTypeDef* hadc)
{
	db_ADCErrorCallback++;
 8002030:	4a02      	ldr	r2, [pc, #8]	@ (800203c <ADCErrorCallback+0xc>)
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000d68 	.word	0x20000d68

08002040 <ADCHalfCompleteCallback>:

uint32_t db_ADCHalfCompleteCallback = 0;

void ADCHalfCompleteCallback(ADC_HandleTypeDef* hadc)
{
	db_ADCHalfCompleteCallback++;
 8002040:	4a02      	ldr	r2, [pc, #8]	@ (800204c <ADCHalfCompleteCallback+0xc>)
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000d64 	.word	0x20000d64

08002050 <StartPWMFan>:
{
 8002050:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002052:	4c13      	ldr	r4, [pc, #76]	@ (80020a0 <StartPWMFan+0x50>)
 8002054:	2108      	movs	r1, #8
 8002056:	4620      	mov	r0, r4
 8002058:	f002 ffca 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800205c:	4620      	mov	r0, r4
	TIM2->CCR3 = TIM2->ARR*0.01;
 800205e:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002062:	210c      	movs	r1, #12
 8002064:	f002 ffc4 	bl	8004ff0 <HAL_TIM_PWM_Start>
	TIM2->CCR3 = TIM2->ARR*0.01;
 8002068:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800206a:	f7fe fa6b 	bl	8000544 <__aeabi_ui2d>
 800206e:	a30a      	add	r3, pc, #40	@ (adr r3, 8002098 <StartPWMFan+0x48>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fae0 	bl	8000638 <__aeabi_dmul>
 8002078:	f7fe fdb6 	bl	8000be8 <__aeabi_d2uiz>
 800207c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	TIM2->CCR3 = TIM2->ARR*0.01;
 800207e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002080:	f7fe fa60 	bl	8000544 <__aeabi_ui2d>
 8002084:	a304      	add	r3, pc, #16	@ (adr r3, 8002098 <StartPWMFan+0x48>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe fad5 	bl	8000638 <__aeabi_dmul>
 800208e:	f7fe fdab 	bl	8000be8 <__aeabi_d2uiz>
 8002092:	63e0      	str	r0, [r4, #60]	@ 0x3c
}
 8002094:	bd10      	pop	{r4, pc}
 8002096:	bf00      	nop
 8002098:	47ae147b 	.word	0x47ae147b
 800209c:	3f847ae1 	.word	0x3f847ae1
 80020a0:	20000a54 	.word	0x20000a54

080020a4 <StartPWM>:
{
 80020a4:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80020a6:	4c24      	ldr	r4, [pc, #144]	@ (8002138 <StartPWM+0x94>)
 80020a8:	2100      	movs	r1, #0
 80020aa:	4620      	mov	r0, r4
 80020ac:	f002 ffa0 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80020b0:	2104      	movs	r1, #4
 80020b2:	4620      	mov	r0, r4
 80020b4:	f002 ff9c 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80020b8:	2108      	movs	r1, #8
 80020ba:	4620      	mov	r0, r4
 80020bc:	f002 ff98 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80020c0:	210c      	movs	r1, #12
 80020c2:	4620      	mov	r0, r4
 80020c4:	f002 ff94 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80020c8:	2100      	movs	r1, #0
 80020ca:	4620      	mov	r0, r4
 80020cc:	f003 face 	bl	800566c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80020d0:	2104      	movs	r1, #4
 80020d2:	4620      	mov	r0, r4
 80020d4:	f003 faca 	bl	800566c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80020d8:	2108      	movs	r1, #8
 80020da:	4620      	mov	r0, r4
 80020dc:	f003 fac6 	bl	800566c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 80020e0:	210c      	movs	r1, #12
 80020e2:	4620      	mov	r0, r4
 80020e4:	f003 fac2 	bl	800566c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_5);
 80020e8:	4620      	mov	r0, r4
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80020ea:	4c14      	ldr	r4, [pc, #80]	@ (800213c <StartPWM+0x98>)
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_5);
 80020ec:	2110      	movs	r1, #16
 80020ee:	f002 ff7f 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80020f2:	2100      	movs	r1, #0
 80020f4:	4620      	mov	r0, r4
 80020f6:	f002 ff7b 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80020fa:	2104      	movs	r1, #4
 80020fc:	4620      	mov	r0, r4
 80020fe:	f002 ff77 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002102:	2108      	movs	r1, #8
 8002104:	4620      	mov	r0, r4
 8002106:	f002 ff73 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800210a:	210c      	movs	r1, #12
 800210c:	4620      	mov	r0, r4
 800210e:	f002 ff6f 	bl	8004ff0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002112:	2100      	movs	r1, #0
 8002114:	4620      	mov	r0, r4
 8002116:	f003 faa9 	bl	800566c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800211a:	2104      	movs	r1, #4
 800211c:	4620      	mov	r0, r4
 800211e:	f003 faa5 	bl	800566c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002122:	2108      	movs	r1, #8
 8002124:	4620      	mov	r0, r4
 8002126:	f003 faa1 	bl	800566c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 800212a:	4620      	mov	r0, r4
 800212c:	2110      	movs	r1, #16
}
 800212e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 8002132:	f002 bf5d 	b.w	8004ff0 <HAL_TIM_PWM_Start>
 8002136:	bf00      	nop
 8002138:	20000a08 	.word	0x20000a08
 800213c:	20000aa0 	.word	0x20000aa0

08002140 <StopPWM>:
{
 8002140:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002142:	4c22      	ldr	r4, [pc, #136]	@ (80021cc <StopPWM+0x8c>)
 8002144:	2100      	movs	r1, #0
 8002146:	4620      	mov	r0, r4
 8002148:	f002 ff54 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800214c:	2104      	movs	r1, #4
 800214e:	4620      	mov	r0, r4
 8002150:	f002 ff50 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8002154:	2108      	movs	r1, #8
 8002156:	4620      	mov	r0, r4
 8002158:	f002 ff4c 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
 800215c:	210c      	movs	r1, #12
 800215e:	4620      	mov	r0, r4
 8002160:	f002 ff48 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8002164:	2100      	movs	r1, #0
 8002166:	4620      	mov	r0, r4
 8002168:	f003 fa82 	bl	8005670 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 800216c:	2104      	movs	r1, #4
 800216e:	4620      	mov	r0, r4
 8002170:	f003 fa7e 	bl	8005670 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8002174:	2108      	movs	r1, #8
 8002176:	4620      	mov	r0, r4
 8002178:	f003 fa7a 	bl	8005670 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_4);
 800217c:	4620      	mov	r0, r4
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800217e:	4c14      	ldr	r4, [pc, #80]	@ (80021d0 <StopPWM+0x90>)
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_4);
 8002180:	210c      	movs	r1, #12
 8002182:	f003 fa75 	bl	8005670 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002186:	2100      	movs	r1, #0
 8002188:	4620      	mov	r0, r4
 800218a:	f002 ff33 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800218e:	2104      	movs	r1, #4
 8002190:	4620      	mov	r0, r4
 8002192:	f002 ff2f 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002196:	2108      	movs	r1, #8
 8002198:	4620      	mov	r0, r4
 800219a:	f002 ff2b 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 800219e:	210c      	movs	r1, #12
 80021a0:	4620      	mov	r0, r4
 80021a2:	f002 ff27 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80021a6:	2100      	movs	r1, #0
 80021a8:	4620      	mov	r0, r4
 80021aa:	f003 fa61 	bl	8005670 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80021ae:	2104      	movs	r1, #4
 80021b0:	4620      	mov	r0, r4
 80021b2:	f003 fa5d 	bl	8005670 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80021b6:	2108      	movs	r1, #8
 80021b8:	4620      	mov	r0, r4
 80021ba:	f003 fa59 	bl	8005670 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 80021be:	4620      	mov	r0, r4
 80021c0:	210c      	movs	r1, #12
}
 80021c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 80021c6:	f003 ba53 	b.w	8005670 <HAL_TIMEx_PWMN_Stop>
 80021ca:	bf00      	nop
 80021cc:	20000a08 	.word	0x20000a08
 80021d0:	20000aa0 	.word	0x20000aa0
 80021d4:	00000000 	.word	0x00000000

080021d8 <ADCCompleteCallback>:
	db_ADCCompleteCallback++;
 80021d8:	4acd      	ldr	r2, [pc, #820]	@ (8002510 <ADCCompleteCallback+0x338>)
{
 80021da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	db_ADCCompleteCallback++;
 80021de:	6813      	ldr	r3, [r2, #0]
 80021e0:	4ccc      	ldr	r4, [pc, #816]	@ (8002514 <ADCCompleteCallback+0x33c>)
 80021e2:	3301      	adds	r3, #1
 80021e4:	4dcc      	ldr	r5, [pc, #816]	@ (8002518 <ADCCompleteCallback+0x340>)
 80021e6:	f104 0824 	add.w	r8, r4, #36	@ 0x24
		ad_volt_float[k_tmp] = 3.3/4096.0*(float)ad_dma_buffer[k_tmp];
 80021ea:	a7c5      	add	r7, pc, #788	@ (adr r7, 8002500 <ADCCompleteCallback+0x328>)
 80021ec:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 80021f0:	ed2d 8b02 	vpush	{d8}
	db_ADCCompleteCallback++;
 80021f4:	6013      	str	r3, [r2, #0]
		ad_volt_float[k_tmp] = 3.3/4096.0*(float)ad_dma_buffer[k_tmp];
 80021f6:	f834 0f02 	ldrh.w	r0, [r4, #2]!
 80021fa:	ee07 0a90 	vmov	s15, r0
 80021fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002202:	ee17 0a90 	vmov	r0, s15
 8002206:	f7fe f9bf 	bl	8000588 <__aeabi_f2d>
 800220a:	4632      	mov	r2, r6
 800220c:	463b      	mov	r3, r7
 800220e:	f7fe fa13 	bl	8000638 <__aeabi_dmul>
 8002212:	f7fe fd09 	bl	8000c28 <__aeabi_d2f>
	for( uint16_t k_tmp=0; k_tmp<3*AD_RANK; k_tmp++) {
 8002216:	45a0      	cmp	r8, r4
		ad_volt_float[k_tmp] = 3.3/4096.0*(float)ad_dma_buffer[k_tmp];
 8002218:	f845 0b04 	str.w	r0, [r5], #4
	for( uint16_t k_tmp=0; k_tmp<3*AD_RANK; k_tmp++) {
 800221c:	d1eb      	bne.n	80021f6 <ADCCompleteCallback+0x1e>
	switch(myconvvsi.sm) {
 800221e:	4cbf      	ldr	r4, [pc, #764]	@ (800251c <ADCCompleteCallback+0x344>)
 8002220:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 8002224:	2b08      	cmp	r3, #8
 8002226:	d80f      	bhi.n	8002248 <ADCCompleteCallback+0x70>
 8002228:	e8df f013 	tbh	[pc, r3, lsl #1]
 800222c:	00c800a7 	.word	0x00c800a7
 8002230:	00e600db 	.word	0x00e600db
 8002234:	011c00fa 	.word	0x011c00fa
 8002238:	0127000e 	.word	0x0127000e
 800223c:	0009      	.short	0x0009
		if( myconvvsi.signal_run) {
 800223e:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 80c4 	bne.w	80023d0 <ADCCompleteCallback+0x1f8>
	myconvvsi.k++;
 8002248:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 800224c:	3701      	adds	r7, #1
	float arr = TIM1->ARR+1;
 800224e:	4db4      	ldr	r5, [pc, #720]	@ (8002520 <ADCCompleteCallback+0x348>)
	TIM1->CCR1 = arr * myconvvsi.da[0]+0.5;
 8002250:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
	float arr = TIM1->ARR+1;
 8002254:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002256:	3301      	adds	r3, #1
 8002258:	ee07 3a10 	vmov	s14, r3
 800225c:	eeb8 8a47 	vcvt.f32.u32	s16, s14
	TIM1->CCR1 = arr * myconvvsi.da[0]+0.5;
 8002260:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002264:	ee17 0a90 	vmov	r0, s15
 8002268:	f7fe f98e 	bl	8000588 <__aeabi_f2d>
 800226c:	2200      	movs	r2, #0
 800226e:	4bad      	ldr	r3, [pc, #692]	@ (8002524 <ADCCompleteCallback+0x34c>)
 8002270:	f7fe f82c 	bl	80002cc <__adddf3>
 8002274:	f7fe fcb8 	bl	8000be8 <__aeabi_d2uiz>
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 8002278:	edd4 7a13 	vldr	s15, [r4, #76]	@ 0x4c
	TIM1->CCR1 = arr * myconvvsi.da[0]+0.5;
 800227c:	4603      	mov	r3, r0
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 800227e:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM1->CCR1 = arr * myconvvsi.da[0]+0.5;
 8002282:	636b      	str	r3, [r5, #52]	@ 0x34
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 8002284:	ee17 0a90 	vmov	r0, s15
 8002288:	f7fe f97e 	bl	8000588 <__aeabi_f2d>
 800228c:	2200      	movs	r2, #0
 800228e:	4ba5      	ldr	r3, [pc, #660]	@ (8002524 <ADCCompleteCallback+0x34c>)
 8002290:	f7fe f81c 	bl	80002cc <__adddf3>
 8002294:	f7fe fca8 	bl	8000be8 <__aeabi_d2uiz>
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 8002298:	edd4 7a14 	vldr	s15, [r4, #80]	@ 0x50
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 800229c:	4603      	mov	r3, r0
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 800229e:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 80022a2:	63ab      	str	r3, [r5, #56]	@ 0x38
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 80022a4:	ee17 0a90 	vmov	r0, s15
 80022a8:	f7fe f96e 	bl	8000588 <__aeabi_f2d>
 80022ac:	2200      	movs	r2, #0
 80022ae:	4b9d      	ldr	r3, [pc, #628]	@ (8002524 <ADCCompleteCallback+0x34c>)
 80022b0:	f7fe f80c 	bl	80002cc <__adddf3>
 80022b4:	f7fe fc98 	bl	8000be8 <__aeabi_d2uiz>
	TIM1->CCR4 = arr * myconvvsi.da[3]+0.5;
 80022b8:	edd4 7a15 	vldr	s15, [r4, #84]	@ 0x54
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 80022bc:	4606      	mov	r6, r0
	TIM1->CCR4 = arr * myconvvsi.da[3]+0.5;
 80022be:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 80022c2:	63ee      	str	r6, [r5, #60]	@ 0x3c
	TIM1->CCR4 = arr * myconvvsi.da[3]+0.5;
 80022c4:	ee17 0a90 	vmov	r0, s15
 80022c8:	f7fe f95e 	bl	8000588 <__aeabi_f2d>
 80022cc:	2200      	movs	r2, #0
 80022ce:	4b95      	ldr	r3, [pc, #596]	@ (8002524 <ADCCompleteCallback+0x34c>)
 80022d0:	f7fd fffc 	bl	80002cc <__adddf3>
 80022d4:	f7fe fc88 	bl	8000be8 <__aeabi_d2uiz>
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 80022d8:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
	TIM1->CCR4 = arr * myconvvsi.da[3]+0.5;
 80022dc:	4603      	mov	r3, r0
 80022de:	6428      	str	r0, [r5, #64]	@ 0x40
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 80022e0:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM1->CCR5 = arr * myconvvsi.da[2]+0.5;
 80022e4:	65ae      	str	r6, [r5, #88]	@ 0x58
	TIM1->CCR6 = arr * myconvvsi.da[3]+0.5;
 80022e6:	65eb      	str	r3, [r5, #92]	@ 0x5c
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 80022e8:	ee17 0a90 	vmov	r0, s15
 80022ec:	f7fe f94c 	bl	8000588 <__aeabi_f2d>
 80022f0:	2200      	movs	r2, #0
 80022f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002524 <ADCCompleteCallback+0x34c>)
 80022f4:	f7fd ffea 	bl	80002cc <__adddf3>
 80022f8:	f7fe fc76 	bl	8000be8 <__aeabi_d2uiz>
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 80022fc:	edd4 7a17 	vldr	s15, [r4, #92]	@ 0x5c
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 8002300:	4603      	mov	r3, r0
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 8002302:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 8002306:	f8c5 3434 	str.w	r3, [r5, #1076]	@ 0x434
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 800230a:	ee17 0a90 	vmov	r0, s15
 800230e:	f7fe f93b 	bl	8000588 <__aeabi_f2d>
 8002312:	2200      	movs	r2, #0
 8002314:	4b83      	ldr	r3, [pc, #524]	@ (8002524 <ADCCompleteCallback+0x34c>)
 8002316:	f7fd ffd9 	bl	80002cc <__adddf3>
 800231a:	f7fe fc65 	bl	8000be8 <__aeabi_d2uiz>
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 800231e:	edd4 7a18 	vldr	s15, [r4, #96]	@ 0x60
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 8002322:	4603      	mov	r3, r0
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 8002324:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 8002328:	f8c5 3438 	str.w	r3, [r5, #1080]	@ 0x438
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 800232c:	ee17 0a90 	vmov	r0, s15
 8002330:	f7fe f92a 	bl	8000588 <__aeabi_f2d>
 8002334:	2200      	movs	r2, #0
 8002336:	4b7b      	ldr	r3, [pc, #492]	@ (8002524 <ADCCompleteCallback+0x34c>)
 8002338:	f7fd ffc8 	bl	80002cc <__adddf3>
 800233c:	f7fe fc54 	bl	8000be8 <__aeabi_d2uiz>
	TIM8->CCR4 = arr * myconvvsi.db[3]+0.5;
 8002340:	edd4 7a19 	vldr	s15, [r4, #100]	@ 0x64
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 8002344:	4606      	mov	r6, r0
	TIM8->CCR4 = arr * myconvvsi.db[3]+0.5;
 8002346:	ee68 7a27 	vmul.f32	s15, s16, s15
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 800234a:	f8c5 643c 	str.w	r6, [r5, #1084]	@ 0x43c
	TIM8->CCR4 = arr * myconvvsi.db[3]+0.5;
 800234e:	ee17 0a90 	vmov	r0, s15
 8002352:	f7fe f919 	bl	8000588 <__aeabi_f2d>
 8002356:	2200      	movs	r2, #0
 8002358:	4b72      	ldr	r3, [pc, #456]	@ (8002524 <ADCCompleteCallback+0x34c>)
 800235a:	f7fd ffb7 	bl	80002cc <__adddf3>
 800235e:	f7fe fc43 	bl	8000be8 <__aeabi_d2uiz>
	myconvvsi.k++;
 8002362:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
	TIM8->CCR4 = arr * myconvvsi.db[3]+0.5;
 8002366:	f8c5 0440 	str.w	r0, [r5, #1088]	@ 0x440
	TIM8->CCR5 = arr * myconvvsi.db[2]+0.5;
 800236a:	f8c5 6458 	str.w	r6, [r5, #1112]	@ 0x458
	TIM8->CCR6 = arr * myconvvsi.db[3]+0.5;
 800236e:	f8c5 045c 	str.w	r0, [r5, #1116]	@ 0x45c
}
 8002372:	ecbd 8b02 	vpop	{d8}
 8002376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		myconvvsi.da[k_tmp] = 0;
 800237a:	2300      	movs	r3, #0
		myconvvsi.k = 0;
 800237c:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800237e:	2108      	movs	r1, #8
 8002380:	4869      	ldr	r0, [pc, #420]	@ (8002528 <ADCCompleteCallback+0x350>)
		myconvvsi.k = 0;
 8002382:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
		myconvvsi.da[k_tmp] = 0;
 8002386:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002388:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800238a:	6523      	str	r3, [r4, #80]	@ 0x50
 800238c:	6563      	str	r3, [r4, #84]	@ 0x54
		myconvvsi.db[k_tmp] = 0;
 800238e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002390:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002392:	6623      	str	r3, [r4, #96]	@ 0x60
 8002394:	6663      	str	r3, [r4, #100]	@ 0x64
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8002396:	f001 fd21 	bl	8003ddc <HAL_GPIO_WritePin>
		DisplayMessageInit();
 800239a:	f7ff f8fd 	bl	8001598 <DisplayMessageInit>
		StartPWMFan();
 800239e:	f7ff fe57 	bl	8002050 <StartPWMFan>
		initInverterManagementStructure(inverterConfiguration);
 80023a2:	4b62      	ldr	r3, [pc, #392]	@ (800252c <ADCCompleteCallback+0x354>)
 80023a4:	7818      	ldrb	r0, [r3, #0]
 80023a6:	f7fe ff0b 	bl	80011c0 <initInverterManagementStructure>
		initSineLookupTable();
 80023aa:	f7fe ff25 	bl	80011f8 <initSineLookupTable>
		myconvvsi.sm = SMWaitForRun;
 80023ae:	2301      	movs	r3, #1
	myconvvsi.k++;
 80023b0:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
		myconvvsi.sm = SMWaitForRun;
 80023b4:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	myconvvsi.k++;
 80023b8:	441f      	add	r7, r3
		break;
 80023ba:	e748      	b.n	800224e <ADCCompleteCallback+0x76>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80023bc:	2201      	movs	r2, #1
 80023be:	2108      	movs	r1, #8
 80023c0:	4859      	ldr	r0, [pc, #356]	@ (8002528 <ADCCompleteCallback+0x350>)
 80023c2:	f001 fd0b 	bl	8003ddc <HAL_GPIO_WritePin>
		if( myconvvsi.signal_run) {
 80023c6:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f43f af3c 	beq.w	8002248 <ADCCompleteCallback+0x70>
			myconvvsi.k = 0;
 80023d0:	2200      	movs	r2, #0
			myconvvsi.sm = SMStartPWM;
 80023d2:	2302      	movs	r3, #2
			myconvvsi.k = 0;
 80023d4:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
			myconvvsi.sm = SMStartPWM;
 80023d8:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
			DisplayMessageRun();
 80023dc:	f7ff f8f6 	bl	80015cc <DisplayMessageRun>
 80023e0:	e732      	b.n	8002248 <ADCCompleteCallback+0x70>
		if( myconvvsi.k == 1) {
 80023e2:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 80023e6:	2f01      	cmp	r7, #1
 80023e8:	d072      	beq.n	80024d0 <ADCCompleteCallback+0x2f8>
		} else if( myconvvsi.k > 10) {
 80023ea:	2f0a      	cmp	r7, #10
 80023ec:	f67f af2e 	bls.w	800224c <ADCCompleteCallback+0x74>
			myconvvsi.sm = SMRun;
 80023f0:	2303      	movs	r3, #3
 80023f2:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 80023f6:	e033      	b.n	8002460 <ADCCompleteCallback+0x288>
		if( myconvvsi.signal_stop) {
 80023f8:	f894 308a 	ldrb.w	r3, [r4, #138]	@ 0x8a
 80023fc:	b13b      	cbz	r3, 800240e <ADCCompleteCallback+0x236>
			myconvvsi.k = 0;
 80023fe:	2300      	movs	r3, #0
			myconvvsi.sm = SMSoftStop;
 8002400:	2204      	movs	r2, #4
			myconvvsi.k = 0;
 8002402:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
			myconvvsi.sm = SMSoftStop;
 8002406:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
			myconvvsi.signal_stop = false;
 800240a:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
		functionalTestRoutine(&myconvvsi);
 800240e:	4843      	ldr	r0, [pc, #268]	@ (800251c <ADCCompleteCallback+0x344>)
 8002410:	f7fe ff1e 	bl	8001250 <functionalTestRoutine>
		RunControlAtEachSamplingPeriodEx1();
 8002414:	f7ff fe04 	bl	8002020 <RunControlAtEachSamplingPeriodEx1>
	myconvvsi.k++;
 8002418:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 800241c:	3701      	adds	r7, #1
		break;
 800241e:	e716      	b.n	800224e <ADCCompleteCallback+0x76>
		if( myconvvsi.ref0 > 0) {
 8002420:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8002424:	2500      	movs	r5, #0
 8002426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242e:	dd2f      	ble.n	8002490 <ADCCompleteCallback+0x2b8>
			myconvvsi.k = 0;
 8002430:	2300      	movs	r3, #0
			myconvvsi.ref0 -= 0.002;
 8002432:	ee17 0a90 	vmov	r0, s15
			myconvvsi.k = 0;
 8002436:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
			myconvvsi.ref0 -= 0.002;
 800243a:	f7fe f8a5 	bl	8000588 <__aeabi_f2d>
 800243e:	a332      	add	r3, pc, #200	@ (adr r3, 8002508 <ADCCompleteCallback+0x330>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fd ff40 	bl	80002c8 <__aeabi_dsub>
 8002448:	f7fe fbee 	bl	8000c28 <__aeabi_d2f>
 800244c:	ee07 0a90 	vmov	s15, r0
			if( myconvvsi.ref0 < 0) {
 8002450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			myconvvsi.ref0 -= 0.002;
 8002458:	bf54      	ite	pl
 800245a:	edc4 7a1f 	vstrpl	s15, [r4, #124]	@ 0x7c
				myconvvsi.ref0 = 0;
 800245e:	67e5      	strmi	r5, [r4, #124]	@ 0x7c
{
 8002460:	2701      	movs	r7, #1
 8002462:	e6f4      	b.n	800224e <ADCCompleteCallback+0x76>
		StopPWM();
 8002464:	f7ff fe6c 	bl	8002140 <StopPWM>
		DisplayMessageFault();
 8002468:	f7ff f8ca 	bl	8001600 <DisplayMessageFault>
		myconvvsi.sm = SMFaultSignal;
 800246c:	2306      	movs	r3, #6
	myconvvsi.k++;
 800246e:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
		myconvvsi.sm = SMFaultSignal;
 8002472:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	myconvvsi.k++;
 8002476:	3701      	adds	r7, #1
		break;
 8002478:	e6e9      	b.n	800224e <ADCCompleteCallback+0x76>
		StopPWM();
 800247a:	f7ff fe61 	bl	8002140 <StopPWM>
		DisplayMessageStop();
 800247e:	f7ff f8d9 	bl	8001634 <DisplayMessageStop>
		myconvvsi.sm = SMStopSignal;
 8002482:	2308      	movs	r3, #8
	myconvvsi.k++;
 8002484:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
		myconvvsi.sm = SMStopSignal;
 8002488:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	myconvvsi.k++;
 800248c:	3701      	adds	r7, #1
		break;
 800248e:	e6de      	b.n	800224e <ADCCompleteCallback+0x76>
		} else if( myconvvsi.ref>0) {
 8002490:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
 8002494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	dd1e      	ble.n	80024dc <ADCCompleteCallback+0x304>
			myconvvsi.k = 0;
 800249e:	2300      	movs	r3, #0
			myconvvsi.ref -= 0.002;
 80024a0:	ee17 0a90 	vmov	r0, s15
			myconvvsi.k = 0;
 80024a4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
			myconvvsi.ref -= 0.002;
 80024a8:	f7fe f86e 	bl	8000588 <__aeabi_f2d>
 80024ac:	a316      	add	r3, pc, #88	@ (adr r3, 8002508 <ADCCompleteCallback+0x330>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fd ff09 	bl	80002c8 <__aeabi_dsub>
 80024b6:	f7fe fbb7 	bl	8000c28 <__aeabi_d2f>
 80024ba:	ee07 0a90 	vmov	s15, r0
			if( myconvvsi.ref < 0) {
 80024be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			myconvvsi.ref -= 0.002;
 80024c6:	bf54      	ite	pl
 80024c8:	edc4 7a1e 	vstrpl	s15, [r4, #120]	@ 0x78
				myconvvsi.ref = 0;
 80024cc:	67a5      	strmi	r5, [r4, #120]	@ 0x78
 80024ce:	e7c7      	b.n	8002460 <ADCCompleteCallback+0x288>
			StartPWM();
 80024d0:	f7ff fde8 	bl	80020a4 <StartPWM>
	myconvvsi.k++;
 80024d4:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 80024d8:	3701      	adds	r7, #1
 80024da:	e6b8      	b.n	800224e <ADCCompleteCallback+0x76>
		} else if(myconvvsi.k>10){
 80024dc:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 80024e0:	2f0a      	cmp	r7, #10
 80024e2:	f67f aeb3 	bls.w	800224c <ADCCompleteCallback+0x74>
			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80024e6:	2100      	movs	r1, #0
 80024e8:	4811      	ldr	r0, [pc, #68]	@ (8002530 <ADCCompleteCallback+0x358>)
 80024ea:	f002 fd83 	bl	8004ff4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 80024ee:	2108      	movs	r1, #8
 80024f0:	480f      	ldr	r0, [pc, #60]	@ (8002530 <ADCCompleteCallback+0x358>)
 80024f2:	f002 fd7f 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	myconvvsi.k++;
 80024f6:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 80024fa:	3701      	adds	r7, #1
 80024fc:	e6a7      	b.n	800224e <ADCCompleteCallback+0x76>
 80024fe:	bf00      	nop
 8002500:	66666666 	.word	0x66666666
 8002504:	3f4a6666 	.word	0x3f4a6666
 8002508:	d2f1a9fc 	.word	0xd2f1a9fc
 800250c:	3f60624d 	.word	0x3f60624d
 8002510:	20000d6c 	.word	0x20000d6c
 8002514:	20000e56 	.word	0x20000e56
 8002518:	20000e00 	.word	0x20000e00
 800251c:	20000d70 	.word	0x20000d70
 8002520:	40010000 	.word	0x40010000
 8002524:	3fe00000 	.word	0x3fe00000
 8002528:	40020c00 	.word	0x40020c00
 800252c:	20000e84 	.word	0x20000e84
 8002530:	20000a08 	.word	0x20000a08

08002534 <InitConverterControlSystemPeripherals>:
	__HAL_ADC_ENABLE(&hadc2);
 8002534:	4a1d      	ldr	r2, [pc, #116]	@ (80025ac <InitConverterControlSystemPeripherals+0x78>)
	__HAL_ADC_ENABLE(&hadc3);
 8002536:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <InitConverterControlSystemPeripherals+0x7c>)
	__HAL_ADC_ENABLE(&hadc2);
 8002538:	6811      	ldr	r1, [r2, #0]
	__HAL_ADC_ENABLE(&hadc3);
 800253a:	681b      	ldr	r3, [r3, #0]
	hadc1.ConvCpltCallback = ADCCompleteCallback;
 800253c:	481d      	ldr	r0, [pc, #116]	@ (80025b4 <InitConverterControlSystemPeripherals+0x80>)
	hadc1.ConvHalfCpltCallback = ADCHalfCompleteCallback;
 800253e:	4a1e      	ldr	r2, [pc, #120]	@ (80025b8 <InitConverterControlSystemPeripherals+0x84>)
{
 8002540:	b510      	push	{r4, lr}
	hadc1.ConvCpltCallback = ADCCompleteCallback;
 8002542:	4c1e      	ldr	r4, [pc, #120]	@ (80025bc <InitConverterControlSystemPeripherals+0x88>)
	hadc1.ConvHalfCpltCallback = ADCHalfCompleteCallback;
 8002544:	e9c0 4212 	strd	r4, r2, [r0, #72]	@ 0x48
	__HAL_ADC_ENABLE(&hadc3);
 8002548:	689a      	ldr	r2, [r3, #8]
	hadc1.ErrorCallback = ADCErrorCallback;
 800254a:	4c1d      	ldr	r4, [pc, #116]	@ (80025c0 <InitConverterControlSystemPeripherals+0x8c>)
	__HAL_ADC_ENABLE(&hadc3);
 800254c:	f042 0201 	orr.w	r2, r2, #1
	hadc1.ErrorCallback = ADCErrorCallback;
 8002550:	6544      	str	r4, [r0, #84]	@ 0x54
	__HAL_ADC_ENABLE(&hadc3);
 8002552:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc2);
 8002554:	688c      	ldr	r4, [r1, #8]
	__HAL_ADC_ENABLE(&hadc1);
 8002556:	6802      	ldr	r2, [r0, #0]
	__HAL_ADC_ENABLE(&hadc2);
 8002558:	f044 0401 	orr.w	r4, r4, #1
 800255c:	608c      	str	r4, [r1, #8]
	__HAL_ADC_ENABLE(&hadc1);
 800255e:	6894      	ldr	r4, [r2, #8]
 8002560:	f044 0401 	orr.w	r4, r4, #1
 8002564:	6094      	str	r4, [r2, #8]
	__HAL_ADC_ENABLE_IT(&hadc1, ( ADC_IT_OVR));
 8002566:	6854      	ldr	r4, [r2, #4]
 8002568:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
 800256c:	6054      	str	r4, [r2, #4]
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)&ad_dma_buffer[0], NB_AD_VALUES);
 800256e:	2215      	movs	r2, #21
	__HAL_ADC_ENABLE_IT(&hadc2, ( ADC_IT_OVR));
 8002570:	684c      	ldr	r4, [r1, #4]
 8002572:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
 8002576:	604c      	str	r4, [r1, #4]
	__HAL_ADC_ENABLE_IT(&hadc3, ( ADC_IT_OVR));
 8002578:	6859      	ldr	r1, [r3, #4]
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800257a:	4c12      	ldr	r4, [pc, #72]	@ (80025c4 <InitConverterControlSystemPeripherals+0x90>)
	__HAL_ADC_ENABLE_IT(&hadc3, ( ADC_IT_OVR));
 800257c:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8002580:	6059      	str	r1, [r3, #4]
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)&ad_dma_buffer[0], NB_AD_VALUES);
 8002582:	4911      	ldr	r1, [pc, #68]	@ (80025c8 <InitConverterControlSystemPeripherals+0x94>)
 8002584:	f000 fec8 	bl	8003318 <HAL_ADCEx_MultiModeStart_DMA>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002588:	2100      	movs	r1, #0
 800258a:	4620      	mov	r0, r4
 800258c:	f001 f886 	bl	800369c <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002590:	2110      	movs	r1, #16
 8002592:	4620      	mov	r0, r4
 8002594:	f001 f882 	bl	800369c <HAL_DAC_Start>
	HAL_TIM_Base_Start(&htim8);
 8002598:	480c      	ldr	r0, [pc, #48]	@ (80025cc <InitConverterControlSystemPeripherals+0x98>)
 800259a:	f002 fbd3 	bl	8004d44 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1);
 800259e:	480c      	ldr	r0, [pc, #48]	@ (80025d0 <InitConverterControlSystemPeripherals+0x9c>)
 80025a0:	f002 fbd0 	bl	8004d44 <HAL_TIM_Base_Start>
}
 80025a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	InitDisplayUartConsole();
 80025a8:	f7ff b85e 	b.w	8001668 <InitDisplayUartConsole>
 80025ac:	20000c94 	.word	0x20000c94
 80025b0:	20000c30 	.word	0x20000c30
 80025b4:	20000cf8 	.word	0x20000cf8
 80025b8:	08002041 	.word	0x08002041
 80025bc:	080021d9 	.word	0x080021d9
 80025c0:	08002031 	.word	0x08002031
 80025c4:	20000b94 	.word	0x20000b94
 80025c8:	20000e58 	.word	0x20000e58
 80025cc:	20000a08 	.word	0x20000a08
 80025d0:	20000aa0 	.word	0x20000aa0

080025d4 <HAL_ADC_ConvCpltCallback>:

// Required because Ex do not use the callback

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	db_HAL_ADC_ConvCpltCallback++;
 80025d4:	4a02      	ldr	r2, [pc, #8]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0xc>)
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	6013      	str	r3, [r2, #0]
	ADCCompleteCallback( hadc);
 80025dc:	f7ff bdfc 	b.w	80021d8 <ADCCompleteCallback>
 80025e0:	20000d60 	.word	0x20000d60

080025e4 <HAL_IncTick>:
int db_HAL_IncTick = 0;
int blink = 0;


void HAL_IncTick()
{
 80025e4:	b538      	push	{r3, r4, r5, lr}
	uwTick += uwTickFreq;
 80025e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002664 <HAL_IncTick+0x80>)
 80025e8:	4d1f      	ldr	r5, [pc, #124]	@ (8002668 <HAL_IncTick+0x84>)
	db_HAL_IncTick++;
 80025ea:	4c20      	ldr	r4, [pc, #128]	@ (800266c <HAL_IncTick+0x88>)
	uwTick += uwTickFreq;
 80025ec:	682b      	ldr	r3, [r5, #0]
 80025ee:	7811      	ldrb	r1, [r2, #0]
	blink++;
 80025f0:	481f      	ldr	r0, [pc, #124]	@ (8002670 <HAL_IncTick+0x8c>)
	uwTick += uwTickFreq;
 80025f2:	4419      	add	r1, r3
	db_HAL_IncTick++;
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	1c5a      	adds	r2, r3, #1
	blink++;
 80025f8:	6803      	ldr	r3, [r0, #0]
	uwTick += uwTickFreq;
 80025fa:	6029      	str	r1, [r5, #0]
	blink++;
 80025fc:	3301      	adds	r3, #1
	db_HAL_IncTick++;
 80025fe:	6022      	str	r2, [r4, #0]
	if(blink>1000) {
 8002600:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
	blink++;
 8002604:	6003      	str	r3, [r0, #0]
	if(blink>1000) {
 8002606:	dc26      	bgt.n	8002656 <HAL_IncTick+0x72>
		blink = 0;
		DisplayMessageMeas();
	} else if( blink>500) {
 8002608:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800260c:	dd11      	ble.n	8002632 <HAL_IncTick+0x4e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800260e:	2201      	movs	r2, #1
 8002610:	4818      	ldr	r0, [pc, #96]	@ (8002674 <HAL_IncTick+0x90>)
 8002612:	4611      	mov	r1, r2
 8002614:	f001 fbe2 	bl	8003ddc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002618:	2201      	movs	r2, #1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	4815      	ldr	r0, [pc, #84]	@ (8002674 <HAL_IncTick+0x90>)
 800261e:	f001 fbdd 	bl	8003ddc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002628:	4812      	ldr	r0, [pc, #72]	@ (8002674 <HAL_IncTick+0x90>)
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
	}

}
 800262a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800262e:	f001 bbd5 	b.w	8003ddc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002632:	2200      	movs	r2, #0
 8002634:	2101      	movs	r1, #1
 8002636:	480f      	ldr	r0, [pc, #60]	@ (8002674 <HAL_IncTick+0x90>)
 8002638:	f001 fbd0 	bl	8003ddc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800263c:	2200      	movs	r2, #0
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	480c      	ldr	r0, [pc, #48]	@ (8002674 <HAL_IncTick+0x90>)
 8002642:	f001 fbcb 	bl	8003ddc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002646:	2200      	movs	r2, #0
 8002648:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800264c:	4809      	ldr	r0, [pc, #36]	@ (8002674 <HAL_IncTick+0x90>)
}
 800264e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002652:	f001 bbc3 	b.w	8003ddc <HAL_GPIO_WritePin>
		blink = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	6003      	str	r3, [r0, #0]
}
 800265a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		DisplayMessageMeas();
 800265e:	f7fe bf37 	b.w	80014d0 <DisplayMessageMeas>
 8002662:	bf00      	nop
 8002664:	20000004 	.word	0x20000004
 8002668:	20000e9c 	.word	0x20000e9c
 800266c:	20000e90 	.word	0x20000e90
 8002670:	20000e8c 	.word	0x20000e8c
 8002674:	40020400 	.word	0x40020400

08002678 <IdleProcess>:

uint32_t db_IdleProcess;

void IdleProcess()
{
	db_IdleProcess++;
 8002678:	4a02      	ldr	r2, [pc, #8]	@ (8002684 <IdleProcess+0xc>)
 800267a:	6813      	ldr	r3, [r2, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000e88 	.word	0x20000e88

08002688 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002688:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_MspInit+0x2c>)
{
 800268a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800268e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002692:	641a      	str	r2, [r3, #64]	@ 0x40
 8002694:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002696:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800269a:	9200      	str	r2, [sp, #0]
 800269c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b0:	b002      	add	sp, #8
 80026b2:	4770      	bx	lr
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80026b8:	4a7b      	ldr	r2, [pc, #492]	@ (80028a8 <HAL_ADC_MspInit+0x1f0>)
 80026ba:	6803      	ldr	r3, [r0, #0]
{
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 80026be:	4293      	cmp	r3, r2
{
 80026c0:	b093      	sub	sp, #76	@ 0x4c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c2:	f04f 0400 	mov.w	r4, #0
 80026c6:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 80026ca:	940e      	str	r4, [sp, #56]	@ 0x38
 80026cc:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  if(hadc->Instance==ADC1)
 80026d0:	d008      	beq.n	80026e4 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80026d2:	4a76      	ldr	r2, [pc, #472]	@ (80028ac <HAL_ADC_MspInit+0x1f4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d063      	beq.n	80027a0 <HAL_ADC_MspInit+0xe8>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80026d8:	4a75      	ldr	r2, [pc, #468]	@ (80028b0 <HAL_ADC_MspInit+0x1f8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	f000 80a1 	beq.w	8002822 <HAL_ADC_MspInit+0x16a>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80026e0:	b013      	add	sp, #76	@ 0x4c
 80026e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026e4:	4b73      	ldr	r3, [pc, #460]	@ (80028b4 <HAL_ADC_MspInit+0x1fc>)
 80026e6:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e8:	4873      	ldr	r0, [pc, #460]	@ (80028b8 <HAL_ADC_MspInit+0x200>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_adc1.Instance = DMA2_Stream4;
 80026ec:	4e73      	ldr	r6, [pc, #460]	@ (80028bc <HAL_ADC_MspInit+0x204>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80026f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026f6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80026fa:	9200      	str	r2, [sp, #0]
 80026fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002700:	f042 0204 	orr.w	r2, r2, #4
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30
 8002706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002708:	f002 0204 	and.w	r2, r2, #4
 800270c:	9201      	str	r2, [sp, #4]
 800270e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	631a      	str	r2, [r3, #48]	@ 0x30
 8002718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800271a:	f002 0201 	and.w	r2, r2, #1
 800271e:	9202      	str	r2, [sp, #8]
 8002720:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002724:	f042 0202 	orr.w	r2, r2, #2
 8002728:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800272a:	222f      	movs	r2, #47	@ 0x2f
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002734:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002736:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002738:	a90c      	add	r1, sp, #48	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800273a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273e:	f001 fa13 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002742:	226f      	movs	r2, #111	@ 0x6f
 8002744:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002746:	a90c      	add	r1, sp, #48	@ 0x30
 8002748:	485d      	ldr	r0, [pc, #372]	@ (80028c0 <HAL_ADC_MspInit+0x208>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800274c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	f001 fa0a 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002754:	2202      	movs	r2, #2
 8002756:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	485a      	ldr	r0, [pc, #360]	@ (80028c4 <HAL_ADC_MspInit+0x20c>)
 800275a:	a90c      	add	r1, sp, #48	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800275e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	f001 fa01 	bl	8003b68 <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_adc1.Instance = DMA2_Stream4;
 800276a:	4a57      	ldr	r2, [pc, #348]	@ (80028c8 <HAL_ADC_MspInit+0x210>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800276c:	4630      	mov	r0, r6
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800276e:	6234      	str	r4, [r6, #32]
    hdma_adc1.Instance = DMA2_Stream4;
 8002770:	6032      	str	r2, [r6, #0]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002772:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002776:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002778:	6172      	str	r2, [r6, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800277a:	e9c6 4303 	strd	r4, r3, [r6, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800277e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002782:	61b3      	str	r3, [r6, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002784:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002788:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800278c:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800278e:	f000 ffe1 	bl	8003754 <HAL_DMA_Init>
 8002792:	2800      	cmp	r0, #0
 8002794:	f040 8085 	bne.w	80028a2 <HAL_ADC_MspInit+0x1ea>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002798:	63ae      	str	r6, [r5, #56]	@ 0x38
 800279a:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 800279c:	b013      	add	sp, #76	@ 0x4c
 800279e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027a0:	4b44      	ldr	r3, [pc, #272]	@ (80028b4 <HAL_ADC_MspInit+0x1fc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a2:	a90c      	add	r1, sp, #48	@ 0x30
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80027ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027ae:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80027b2:	9204      	str	r2, [sp, #16]
 80027b4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027b8:	f042 0204 	orr.w	r2, r2, #4
 80027bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80027be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027c0:	f002 0204 	and.w	r2, r2, #4
 80027c4:	9205      	str	r2, [sp, #20]
 80027c6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80027d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027d2:	f002 0201 	and.w	r2, r2, #1
 80027d6:	9206      	str	r2, [sp, #24]
 80027d8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027dc:	f042 0202 	orr.w	r2, r2, #2
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027e2:	223f      	movs	r2, #63	@ 0x3f
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027ec:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	9807      	ldr	r0, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f0:	4831      	ldr	r0, [pc, #196]	@ (80028b8 <HAL_ADC_MspInit+0x200>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f6:	f001 f9b7 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027fa:	224f      	movs	r2, #79	@ 0x4f
 80027fc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	a90c      	add	r1, sp, #48	@ 0x30
 8002800:	482f      	ldr	r0, [pc, #188]	@ (80028c0 <HAL_ADC_MspInit+0x208>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002804:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f001 f9ae 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800280c:	2202      	movs	r2, #2
 800280e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002810:	a90c      	add	r1, sp, #48	@ 0x30
 8002812:	482c      	ldr	r0, [pc, #176]	@ (80028c4 <HAL_ADC_MspInit+0x20c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002816:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281a:	f001 f9a5 	bl	8003b68 <HAL_GPIO_Init>
}
 800281e:	b013      	add	sp, #76	@ 0x4c
 8002820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002822:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <HAL_ADC_MspInit+0x1fc>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002824:	a90c      	add	r1, sp, #48	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002826:	260f      	movs	r6, #15
 8002828:	2703      	movs	r7, #3
    __HAL_RCC_ADC3_CLK_ENABLE();
 800282a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800282c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44
 8002832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002834:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8002838:	9208      	str	r2, [sp, #32]
 800283a:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800283c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
 8002844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002846:	f002 0220 	and.w	r2, r2, #32
 800284a:	9209      	str	r2, [sp, #36]	@ 0x24
 800284c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800284e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002850:	f042 0204 	orr.w	r2, r2, #4
 8002854:	631a      	str	r2, [r3, #48]	@ 0x30
 8002856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002858:	f002 0204 	and.w	r2, r2, #4
 800285c:	920a      	str	r2, [sp, #40]	@ 0x28
 800285e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002868:	f44f 62ff 	mov.w	r2, #2040	@ 0x7f8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002874:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002878:	4814      	ldr	r0, [pc, #80]	@ (80028cc <HAL_ADC_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800287a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800287e:	f001 f973 	bl	8003b68 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002882:	a90c      	add	r1, sp, #48	@ 0x30
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <HAL_ADC_MspInit+0x200>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002888:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288c:	f001 f96c 	bl	8003b68 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	480b      	ldr	r0, [pc, #44]	@ (80028c0 <HAL_ADC_MspInit+0x208>)
 8002892:	a90c      	add	r1, sp, #48	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	940e      	str	r4, [sp, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002896:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f001 f965 	bl	8003b68 <HAL_GPIO_Init>
}
 800289e:	b013      	add	sp, #76	@ 0x4c
 80028a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80028a2:	f7ff fbbb 	bl	800201c <Error_Handler>
 80028a6:	e777      	b.n	8002798 <HAL_ADC_MspInit+0xe0>
 80028a8:	40012000 	.word	0x40012000
 80028ac:	40012100 	.word	0x40012100
 80028b0:	40012200 	.word	0x40012200
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020800 	.word	0x40020800
 80028bc:	20000bd0 	.word	0x20000bd0
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40026470 	.word	0x40026470
 80028cc:	40021400 	.word	0x40021400

080028d0 <HAL_CAN_MspInit>:
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 80028d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <HAL_CAN_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d2:	2300      	movs	r3, #0
  if(hcan->Instance==CAN1)
 80028d4:	6801      	ldr	r1, [r0, #0]
{
 80028d6:	b500      	push	{lr}
  if(hcan->Instance==CAN1)
 80028d8:	4291      	cmp	r1, r2
{
 80028da:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80028e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80028e4:	9306      	str	r3, [sp, #24]
  if(hcan->Instance==CAN1)
 80028e6:	d002      	beq.n	80028ee <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80028e8:	b009      	add	sp, #36	@ 0x24
 80028ea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_CAN_MspInit+0x74>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2003      	movs	r0, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f2:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80028f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028f6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80028fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80028fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028fe:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8002902:	9200      	str	r2, [sp, #0]
 8002904:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002908:	f042 0208 	orr.w	r2, r2, #8
 800290c:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2209      	movs	r2, #9
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002914:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002918:	480b      	ldr	r0, [pc, #44]	@ (8002948 <HAL_CAN_MspInit+0x78>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002920:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8002938 <HAL_CAN_MspInit+0x68>
 8002924:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002928:	f001 f91e 	bl	8003b68 <HAL_GPIO_Init>
}
 800292c:	b009      	add	sp, #36	@ 0x24
 800292e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002932:	bf00      	nop
 8002934:	f3af 8000 	nop.w
 8002938:	00000003 	.word	0x00000003
 800293c:	00000002 	.word	0x00000002
 8002940:	40006400 	.word	0x40006400
 8002944:	40023800 	.word	0x40023800
 8002948:	40020c00 	.word	0x40020c00
 800294c:	00000000 	.word	0x00000000

08002950 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8002950:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <HAL_DAC_MspInit+0x68>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002952:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8002954:	6801      	ldr	r1, [r0, #0]
{
 8002956:	b500      	push	{lr}
  if(hdac->Instance==DAC)
 8002958:	4291      	cmp	r1, r2
{
 800295a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002960:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002964:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8002966:	d002      	beq.n	800296e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002968:	b009      	add	sp, #36	@ 0x24
 800296a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC_CLK_ENABLE();
 800296e:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <HAL_DAC_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	a902      	add	r1, sp, #8
 8002972:	4813      	ldr	r0, [pc, #76]	@ (80029c0 <HAL_DAC_MspInit+0x70>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8002974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002976:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40
 800297c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800297e:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8002982:	9200      	str	r2, [sp, #0]
 8002984:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	631a      	str	r2, [r3, #48]	@ 0x30
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002994:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 80029b0 <HAL_DAC_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800299c:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f001 f8e2 	bl	8003b68 <HAL_GPIO_Init>
}
 80029a4:	b009      	add	sp, #36	@ 0x24
 80029a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029aa:	bf00      	nop
 80029ac:	f3af 8000 	nop.w
 80029b0:	00000010 	.word	0x00000010
 80029b4:	00000003 	.word	0x00000003
 80029b8:	40007400 	.word	0x40007400
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	00000000 	.word	0x00000000

080029c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c8:	b510      	push	{r4, lr}
 80029ca:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	2100      	movs	r1, #0
{
 80029ce:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d0:	2284      	movs	r2, #132	@ 0x84
 80029d2:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	9108      	str	r1, [sp, #32]
 80029d6:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80029da:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029de:	f004 fa8e 	bl	8006efe <memset>
  if(hi2c->Instance==I2C1)
 80029e2:	4a37      	ldr	r2, [pc, #220]	@ (8002ac0 <HAL_I2C_MspInit+0xf8>)
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80029ea:	4a36      	ldr	r2, [pc, #216]	@ (8002ac4 <HAL_I2C_MspInit+0xfc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d02c      	beq.n	8002a4a <HAL_I2C_MspInit+0x82>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029f0:	b02a      	add	sp, #168	@ 0xa8
 80029f2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029f8:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029fa:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029fc:	f001 fdba 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	d14c      	bne.n	8002a9e <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a04:	4c30      	ldr	r4, [pc, #192]	@ (8002ac8 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a06:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	a904      	add	r1, sp, #16
 8002a0a:	4830      	ldr	r0, [pc, #192]	@ (8002acc <HAL_I2C_MspInit+0x104>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a16:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002a18:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002a1e:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8002ab0 <HAL_I2C_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002a26:	2303      	movs	r3, #3
 8002a28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	f001 f89a 	bl	8003b68 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a3a:	6423      	str	r3, [r4, #64]	@ 0x40
 8002a3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	9b01      	ldr	r3, [sp, #4]
}
 8002a46:	b02a      	add	sp, #168	@ 0xa8
 8002a48:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4e:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a50:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a52:	f001 fd8f 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 8002a56:	bb28      	cbnz	r0, 8002aa4 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a58:	4c1b      	ldr	r4, [pc, #108]	@ (8002ac8 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a5a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a5c:	a904      	add	r1, sp, #16
 8002a5e:	481c      	ldr	r0, [pc, #112]	@ (8002ad0 <HAL_I2C_MspInit+0x108>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002a62:	f043 0320 	orr.w	r3, r3, #32
 8002a66:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a6a:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a6c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a6e:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a72:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8002ab8 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a76:	9302      	str	r3, [sp, #8]
 8002a78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a80:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a84:	f001 f870 	bl	8003b68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a8e:	6423      	str	r3, [r4, #64]	@ 0x40
 8002a90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a96:	9303      	str	r3, [sp, #12]
 8002a98:	9b03      	ldr	r3, [sp, #12]
}
 8002a9a:	b02a      	add	sp, #168	@ 0xa8
 8002a9c:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002a9e:	f7ff fabd 	bl	800201c <Error_Handler>
 8002aa2:	e7af      	b.n	8002a04 <HAL_I2C_MspInit+0x3c>
      Error_Handler();
 8002aa4:	f7ff faba 	bl	800201c <Error_Handler>
 8002aa8:	e7d6      	b.n	8002a58 <HAL_I2C_MspInit+0x90>
 8002aaa:	bf00      	nop
 8002aac:	f3af 8000 	nop.w
 8002ab0:	00000240 	.word	0x00000240
 8002ab4:	00000012 	.word	0x00000012
 8002ab8:	00000003 	.word	0x00000003
 8002abc:	00000012 	.word	0x00000012
 8002ac0:	40005400 	.word	0x40005400
 8002ac4:	40005800 	.word	0x40005800
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020400 	.word	0x40020400
 8002ad0:	40021400 	.word	0x40021400

08002ad4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8002ad4:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <HAL_TIM_PWM_MspInit+0x48>)
{
 8002ad6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8002ad8:	6803      	ldr	r3, [r0, #0]
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d011      	beq.n	8002b02 <HAL_TIM_PWM_MspInit+0x2e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae2:	d001      	beq.n	8002ae8 <HAL_TIM_PWM_MspInit+0x14>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ae4:	b002      	add	sp, #8
 8002ae6:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae8:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8002aec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	9b01      	ldr	r3, [sp, #4]
}
 8002afe:	b002      	add	sp, #8
 8002b00:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b02:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x4c>)
 8002b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	9b00      	ldr	r3, [sp, #0]
}
 8002b16:	b002      	add	sp, #8
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 8002b24:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <HAL_TIM_Base_MspInit+0x3c>)
 8002b26:	6802      	ldr	r2, [r0, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d000      	beq.n	8002b2e <HAL_TIM_Base_MspInit+0xa>
 8002b2c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b2e:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 7, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2107      	movs	r1, #7
 8002b36:	202d      	movs	r0, #45	@ 0x2d
{
 8002b38:	b510      	push	{r4, lr}
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b3a:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
{
 8002b3c:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b3e:	f044 0402 	orr.w	r4, r4, #2
 8002b42:	645c      	str	r4, [r3, #68]	@ 0x44
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 7, 0);
 8002b4e:	f000 fd2f 	bl	80035b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002b52:	202d      	movs	r0, #45	@ 0x2d
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002b54:	b002      	add	sp, #8
 8002b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002b5a:	f000 bd65 	b.w	8003628 <HAL_NVIC_EnableIRQ>
 8002b5e:	bf00      	nop
 8002b60:	40010400 	.word	0x40010400
 8002b64:	00000000 	.word	0x00000000

08002b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002b68:	4a45      	ldr	r2, [pc, #276]	@ (8002c80 <HAL_TIM_MspPostInit+0x118>)
 8002b6a:	6803      	ldr	r3, [r0, #0]
{
 8002b6c:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8002b6e:	4293      	cmp	r3, r2
{
 8002b70:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b72:	f04f 0400 	mov.w	r4, #0
 8002b76:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002b7a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002b7e:	940a      	str	r4, [sp, #40]	@ 0x28
  if(htim->Instance==TIM1)
 8002b80:	d007      	beq.n	8002b92 <HAL_TIM_MspPostInit+0x2a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b86:	d01a      	beq.n	8002bbe <HAL_TIM_MspPostInit+0x56>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 8002b88:	4a3e      	ldr	r2, [pc, #248]	@ (8002c84 <HAL_TIM_MspPostInit+0x11c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02e      	beq.n	8002bec <HAL_TIM_MspPostInit+0x84>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b8e:	b00c      	add	sp, #48	@ 0x30
 8002b90:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b92:	4b3d      	ldr	r3, [pc, #244]	@ (8002c88 <HAL_TIM_MspPostInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b94:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b96:	a906      	add	r1, sp, #24
 8002b98:	483c      	ldr	r0, [pc, #240]	@ (8002c8c <HAL_TIM_MspPostInit+0x124>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b9c:	f042 0210 	orr.w	r2, r2, #16
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ba4:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ba6:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002baa:	ed9f 7b31 	vldr	d7, [pc, #196]	@ 8002c70 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002bb2:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb6:	f000 ffd7 	bl	8003b68 <HAL_GPIO_Init>
}
 8002bba:	b00c      	add	sp, #48	@ 0x30
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bc2:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc4:	a906      	add	r1, sp, #24
 8002bc6:	4832      	ldr	r0, [pc, #200]	@ (8002c90 <HAL_TIM_MspPostInit+0x128>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bca:	f042 0202 	orr.w	r2, r2, #2
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bd2:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd4:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bd8:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8002c78 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	9302      	str	r3, [sp, #8]
 8002bde:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002be0:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	f000 ffc0 	bl	8003b68 <HAL_GPIO_Init>
}
 8002be8:	b00c      	add	sp, #48	@ 0x30
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bec:	4b26      	ldr	r3, [pc, #152]	@ (8002c88 <HAL_TIM_MspPostInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bee:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	4828      	ldr	r0, [pc, #160]	@ (8002c94 <HAL_TIM_MspPostInit+0x12c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bfe:	f002 0201 	and.w	r2, r2, #1
 8002c02:	9203      	str	r2, [sp, #12]
 8002c04:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c08:	f042 0202 	orr.w	r2, r2, #2
 8002c0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c10:	f002 0202 	and.w	r2, r2, #2
 8002c14:	9204      	str	r2, [sp, #16]
 8002c16:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c1a:	f042 0204 	orr.w	r2, r2, #4
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c20:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c24:	950a      	str	r5, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c2c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c32:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f000 ff97 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3e:	a906      	add	r1, sp, #24
 8002c40:	4813      	ldr	r0, [pc, #76]	@ (8002c90 <HAL_TIM_MspPostInit+0x128>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c42:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c4a:	950a      	str	r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f000 ff8c 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c50:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c54:	a906      	add	r1, sp, #24
 8002c56:	4810      	ldr	r0, [pc, #64]	@ (8002c98 <HAL_TIM_MspPostInit+0x130>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c5a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c5c:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c62:	f000 ff81 	bl	8003b68 <HAL_GPIO_Init>
}
 8002c66:	b00c      	add	sp, #48	@ 0x30
 8002c68:	bd70      	pop	{r4, r5, r6, pc}
 8002c6a:	bf00      	nop
 8002c6c:	f3af 8000 	nop.w
 8002c70:	00007f00 	.word	0x00007f00
 8002c74:	00000002 	.word	0x00000002
 8002c78:	00000c00 	.word	0x00000c00
 8002c7c:	00000012 	.word	0x00000012
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40010400 	.word	0x40010400
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40020000 	.word	0x40020000
 8002c98:	40020800 	.word	0x40020800

08002c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c9c:	b530      	push	{r4, r5, lr}
 8002c9e:	b0a9      	sub	sp, #164	@ 0xa4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	2100      	movs	r1, #0
{
 8002ca2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca4:	2284      	movs	r2, #132	@ 0x84
 8002ca6:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	9106      	str	r1, [sp, #24]
 8002caa:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002cae:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb2:	f004 f924 	bl	8006efe <memset>
  if(huart->Instance==USART3)
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d68 <HAL_UART_MspInit+0xcc>)
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cbe:	b029      	add	sp, #164	@ 0xa4
 8002cc0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cc6:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002cc8:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cca:	f001 fc53 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d143      	bne.n	8002d5a <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cd2:	4b26      	ldr	r3, [pc, #152]	@ (8002d6c <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cd4:	2007      	movs	r0, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cda:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002cde:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ce0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ce2:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002ce6:	9200      	str	r2, [sp, #0]
 8002ce8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cec:	f042 0208 	orr.w	r2, r2, #8
 8002cf0:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002cf2:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cf8:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfa:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cfe:	481c      	ldr	r0, [pc, #112]	@ (8002d70 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d00:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d02:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d04:	9d01      	ldr	r5, [sp, #4]
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002d06:	4d1b      	ldr	r5, [pc, #108]	@ (8002d74 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d14:	f000 ff28 	bl	8003b68 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002d18:	4917      	ldr	r1, [pc, #92]	@ (8002d78 <HAL_UART_MspInit+0xdc>)
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8002d1a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002d1e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d20:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8002d22:	60eb      	str	r3, [r5, #12]
 8002d24:	616b      	str	r3, [r5, #20]
 8002d26:	e9c5 1200 	strd	r1, r2, [r5]
 8002d2a:	2140      	movs	r1, #64	@ 0x40
 8002d2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d30:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8002d34:	60a9      	str	r1, [r5, #8]
 8002d36:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d38:	e9c5 3308 	strd	r3, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d3c:	f000 fd0a 	bl	8003754 <HAL_DMA_Init>
 8002d40:	b970      	cbnz	r0, 8002d60 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d42:	2200      	movs	r2, #0
 8002d44:	2027      	movs	r0, #39	@ 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002d46:	6725      	str	r5, [r4, #112]	@ 0x70
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d48:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002d4a:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d4c:	f000 fc30 	bl	80035b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d50:	2027      	movs	r0, #39	@ 0x27
 8002d52:	f000 fc69 	bl	8003628 <HAL_NVIC_EnableIRQ>
}
 8002d56:	b029      	add	sp, #164	@ 0xa4
 8002d58:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8002d5a:	f7ff f95f 	bl	800201c <Error_Handler>
 8002d5e:	e7b8      	b.n	8002cd2 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002d60:	f7ff f95c 	bl	800201c <Error_Handler>
 8002d64:	e7ed      	b.n	8002d42 <HAL_UART_MspInit+0xa6>
 8002d66:	bf00      	nop
 8002d68:	40004800 	.word	0x40004800
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020c00 	.word	0x40020c00
 8002d74:	200008f4 	.word	0x200008f4
 8002d78:	40026070 	.word	0x40026070

08002d7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <NMI_Handler>
 8002d7e:	bf00      	nop

08002d80 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <HardFault_Handler>
 8002d82:	bf00      	nop

08002d84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <MemManage_Handler>
 8002d86:	bf00      	nop

08002d88 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d88:	e7fe      	b.n	8002d88 <BusFault_Handler>
 8002d8a:	bf00      	nop

08002d8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <UsageFault_Handler>
 8002d8e:	bf00      	nop

08002d90 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop

08002d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop

08002d98 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop

08002d9c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d9c:	f7ff bc22 	b.w	80025e4 <HAL_IncTick>

08002da0 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002da0:	4801      	ldr	r0, [pc, #4]	@ (8002da8 <DMA1_Stream4_IRQHandler+0x8>)
 8002da2:	f000 be0d 	b.w	80039c0 <HAL_DMA_IRQHandler>
 8002da6:	bf00      	nop
 8002da8:	200008f4 	.word	0x200008f4

08002dac <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dac:	4801      	ldr	r0, [pc, #4]	@ (8002db4 <USART3_IRQHandler+0x8>)
 8002dae:	f002 be93 	b.w	8005ad8 <HAL_UART_IRQHandler>
 8002db2:	bf00      	nop
 8002db4:	20000954 	.word	0x20000954

08002db8 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002db8:	4801      	ldr	r0, [pc, #4]	@ (8002dc0 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8002dba:	f002 b94d 	b.w	8005058 <HAL_TIM_IRQHandler>
 8002dbe:	bf00      	nop
 8002dc0:	20000a08 	.word	0x20000a08

08002dc4 <DMA2_Stream4_IRQHandler>:
  */
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	db_DMA2_Stream4_IRQHandler++;
 8002dc4:	4a03      	ldr	r2, [pc, #12]	@ (8002dd4 <DMA2_Stream4_IRQHandler+0x10>)

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dc6:	4804      	ldr	r0, [pc, #16]	@ (8002dd8 <DMA2_Stream4_IRQHandler+0x14>)
	db_DMA2_Stream4_IRQHandler++;
 8002dc8:	6813      	ldr	r3, [r2, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	6013      	str	r3, [r2, #0]
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dce:	f000 bdf7 	b.w	80039c0 <HAL_DMA_IRQHandler>
 8002dd2:	bf00      	nop
 8002dd4:	20000e94 	.word	0x20000e94
 8002dd8:	20000bd0 	.word	0x20000bd0

08002ddc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002ddc:	2001      	movs	r0, #1
 8002dde:	4770      	bx	lr

08002de0 <_kill>:

int _kill(int pid, int sig)
{
 8002de0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002de2:	f004 f8df 	bl	8006fa4 <__errno>
 8002de6:	2216      	movs	r2, #22
 8002de8:	4603      	mov	r3, r0
	return -1;
}
 8002dea:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8002dee:	601a      	str	r2, [r3, #0]
}
 8002df0:	bd08      	pop	{r3, pc}
 8002df2:	bf00      	nop

08002df4 <_exit>:

void _exit (int status)
{
 8002df4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002df6:	f004 f8d5 	bl	8006fa4 <__errno>
 8002dfa:	2316      	movs	r3, #22
 8002dfc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002dfe:	e7fe      	b.n	8002dfe <_exit+0xa>

08002e00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e00:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e02:	1e16      	subs	r6, r2, #0
 8002e04:	dd07      	ble.n	8002e16 <_read+0x16>
 8002e06:	460c      	mov	r4, r1
 8002e08:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002e0a:	f3af 8000 	nop.w
 8002e0e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e12:	42a5      	cmp	r5, r4
 8002e14:	d1f9      	bne.n	8002e0a <_read+0xa>
	}

return len;
}
 8002e16:	4630      	mov	r0, r6
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	bf00      	nop

08002e1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e1c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1e:	1e16      	subs	r6, r2, #0
 8002e20:	dd07      	ble.n	8002e32 <_write+0x16>
 8002e22:	460c      	mov	r4, r1
 8002e24:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002e26:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002e2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2e:	42a5      	cmp	r5, r4
 8002e30:	d1f9      	bne.n	8002e26 <_write+0xa>
	}
	return len;
}
 8002e32:	4630      	mov	r0, r6
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	bf00      	nop

08002e38 <_close>:

int _close(int file)
{
	return -1;
}
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop

08002e40 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002e40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8002e44:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002e46:	604b      	str	r3, [r1, #4]
}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop

08002e4c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	4770      	bx	lr

08002e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002e50:	2000      	movs	r0, #0
 8002e52:	4770      	bx	lr

08002e54 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e54:	490d      	ldr	r1, [pc, #52]	@ (8002e8c <_sbrk+0x38>)
{
 8002e56:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e58:	4a0d      	ldr	r2, [pc, #52]	@ (8002e90 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002e5a:	6808      	ldr	r0, [r1, #0]
{
 8002e5c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e5e:	4c0d      	ldr	r4, [pc, #52]	@ (8002e94 <_sbrk+0x40>)
 8002e60:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002e62:	b120      	cbz	r0, 8002e6e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e64:	4403      	add	r3, r0
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d807      	bhi.n	8002e7a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002e6a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002e6c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002e6e:	4c0a      	ldr	r4, [pc, #40]	@ (8002e98 <_sbrk+0x44>)
 8002e70:	4620      	mov	r0, r4
 8002e72:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002e74:	4403      	add	r3, r0
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d9f7      	bls.n	8002e6a <_sbrk+0x16>
    errno = ENOMEM;
 8002e7a:	f004 f893 	bl	8006fa4 <__errno>
 8002e7e:	220c      	movs	r2, #12
 8002e80:	4603      	mov	r3, r0
    return (void *)-1;
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	bd10      	pop	{r4, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000e98 	.word	0x20000e98
 8002e90:	20050000 	.word	0x20050000
 8002e94:	00000400 	.word	0x00000400
 8002e98:	20000ff0 	.word	0x20000ff0

08002e9c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e9c:	4a03      	ldr	r2, [pc, #12]	@ (8002eac <SystemInit+0x10>)
 8002e9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ea6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb4:	480d      	ldr	r0, [pc, #52]	@ (8002eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eb6:	490e      	ldr	r1, [pc, #56]	@ (8002ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a0b      	ldr	r2, [pc, #44]	@ (8002ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ecc:	4c0b      	ldr	r4, [pc, #44]	@ (8002efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eda:	f7ff ffdf 	bl	8002e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ede:	f004 f867 	bl	8006fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee2:	f7fe fc2d 	bl	8001740 <main>
  bx  lr    
 8002ee6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ee8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002ef4:	0800a710 	.word	0x0800a710
  ldr r2, =_sbss
 8002ef8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002efc:	20000fec 	.word	0x20000fec

08002f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC_IRQHandler>
	...

08002f04 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f04:	490e      	ldr	r1, [pc, #56]	@ (8002f40 <HAL_InitTick+0x3c>)
 8002f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f44 <HAL_InitTick+0x40>)
{
 8002f0c:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f0e:	7809      	ldrb	r1, [r1, #0]
{
 8002f10:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f18:	fbb2 f0f3 	udiv	r0, r2, r3
 8002f1c:	f000 fb92 	bl	8003644 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f20:	b908      	cbnz	r0, 8002f26 <HAL_InitTick+0x22>
 8002f22:	2c0f      	cmp	r4, #15
 8002f24:	d901      	bls.n	8002f2a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002f26:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002f28:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f32:	f000 fb3d 	bl	80035b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f36:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <HAL_InitTick+0x44>)
 8002f38:	2000      	movs	r0, #0
 8002f3a:	601c      	str	r4, [r3, #0]
}
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000004 	.word	0x20000004
 8002f44:	20000000 	.word	0x20000000
 8002f48:	20000008 	.word	0x20000008

08002f4c <HAL_Init>:
{
 8002f4c:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f50:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f58:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f60:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f62:	f000 fb13 	bl	800358c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f66:	2006      	movs	r0, #6
 8002f68:	f7ff ffcc 	bl	8002f04 <HAL_InitTick>
  HAL_MspInit();
 8002f6c:	f7ff fb8c 	bl	8002688 <HAL_MspInit>
}
 8002f70:	2000      	movs	r0, #0
 8002f72:	bd08      	pop	{r3, pc}
 8002f74:	40023c00 	.word	0x40023c00

08002f78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f78:	4b01      	ldr	r3, [pc, #4]	@ (8002f80 <HAL_GetTick+0x8>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000e9c 	.word	0x20000e9c

08002f84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop

08002f88 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop

08002f8c <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop

08002f90 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002f90:	2800      	cmp	r0, #0
 8002f92:	f000 80ac 	beq.w	80030ee <HAL_ADC_Init+0x15e>
{
 8002f96:	b538      	push	{r3, r4, r5, lr}
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f98:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	b13b      	cbz	r3, 8002fae <HAL_ADC_Init+0x1e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002fa0:	06db      	lsls	r3, r3, #27
 8002fa2:	d51b      	bpl.n	8002fdc <HAL_ADC_Init+0x4c>
  __HAL_UNLOCK(hadc);
 8002fa4:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8002fa6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002fa8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002fac:	bd38      	pop	{r3, r4, r5, pc}
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002fae:	4a55      	ldr	r2, [pc, #340]	@ (8003104 <HAL_ADC_Init+0x174>)
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002fb0:	4b55      	ldr	r3, [pc, #340]	@ (8003108 <HAL_ADC_Init+0x178>)
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8002fb2:	4856      	ldr	r0, [pc, #344]	@ (800310c <HAL_ADC_Init+0x17c>)
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002fb4:	4956      	ldr	r1, [pc, #344]	@ (8003110 <HAL_ADC_Init+0x180>)
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002fb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002fba:	4a56      	ldr	r2, [pc, #344]	@ (8003114 <HAL_ADC_Init+0x184>)
    if (hadc->MspInitCallback == NULL)
 8002fbc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002fbe:	65a2      	str	r2, [r4, #88]	@ 0x58
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002fc0:	e9c4 0114 	strd	r0, r1, [r4, #80]	@ 0x50
    if (hadc->MspInitCallback == NULL)
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8099 	beq.w	80030fc <HAL_ADC_Init+0x16c>
    hadc->MspInitCallback(hadc);
 8002fca:	4620      	mov	r0, r4
 8002fcc:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002fd2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002fd8:	06db      	lsls	r3, r3, #27
 8002fda:	d4e3      	bmi.n	8002fa4 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002fdc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002fde:	4b4e      	ldr	r3, [pc, #312]	@ (8003118 <HAL_ADC_Init+0x188>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fe0:	4a4e      	ldr	r2, [pc, #312]	@ (800311c <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6423      	str	r3, [r4, #64]	@ 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fea:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fec:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fee:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8002ff2:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ff4:	6850      	ldr	r0, [r2, #4]
 8002ff6:	6861      	ldr	r1, [r4, #4]
 8002ff8:	4308      	orrs	r0, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ffa:	4949      	ldr	r1, [pc, #292]	@ (8003120 <HAL_ADC_Init+0x190>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ffc:	6050      	str	r0, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ffe:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003000:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003002:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003006:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800300e:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4302      	orrs	r2, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800301e:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	4302      	orrs	r2, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800302e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003030:	4288      	cmp	r0, r1
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003032:	609a      	str	r2, [r3, #8]
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003034:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003036:	d052      	beq.n	80030de <HAL_ADC_Init+0x14e>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003038:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800303c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800303e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4310      	orrs	r0, r2
 8003044:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800304c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	430a      	orrs	r2, r1
 8003052:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003054:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003056:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003058:	f022 0202 	bic.w	r2, r2, #2
 800305c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003066:	f894 2020 	ldrb.w	r2, [r4, #32]
 800306a:	2a00      	cmp	r2, #0
 800306c:	d041      	beq.n	80030f2 <HAL_ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800306e:	6858      	ldr	r0, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003070:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003072:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003076:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003078:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003080:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003088:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800308a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800308c:	69e2      	ldr	r2, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800308e:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003092:	6960      	ldr	r0, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003094:	1e51      	subs	r1, r2, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003096:	62dd      	str	r5, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800309a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 80030ae:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
    ADC_CLEAR_ERRORCODE(hadc);
 80030b2:	2100      	movs	r1, #0
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	4608      	mov	r0, r1
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030c6:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80030c8:	6461      	str	r1, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80030ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80030cc:	f023 0303 	bic.w	r3, r3, #3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 80030d6:	2300      	movs	r3, #0
 80030d8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80030dc:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	e7b2      	b.n	8003054 <HAL_ADC_Init+0xc4>
    return HAL_ERROR;
 80030ee:	2001      	movs	r0, #1
}
 80030f0:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e7c6      	b.n	800308a <HAL_ADC_Init+0xfa>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80030fc:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <HAL_ADC_Init+0x194>)
 80030fe:	4613      	mov	r3, r2
 8003100:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8003102:	e762      	b.n	8002fca <HAL_ADC_Init+0x3a>
 8003104:	080025d5 	.word	0x080025d5
 8003108:	08002f89 	.word	0x08002f89
 800310c:	08002f8d 	.word	0x08002f8d
 8003110:	08002f85 	.word	0x08002f85
 8003114:	08003431 	.word	0x08003431
 8003118:	ffffeefd 	.word	0xffffeefd
 800311c:	40012300 	.word	0x40012300
 8003120:	0f000001 	.word	0x0f000001
 8003124:	080026b9 	.word	0x080026b9

08003128 <HAL_ADC_ConfigChannel>:
{
 8003128:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t counter = 0;
 800312a:	2300      	movs	r3, #0
{
 800312c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800312e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003130:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	f000 80a7 	beq.w	8003288 <HAL_ADC_ConfigChannel+0x160>
 800313a:	2201      	movs	r2, #1
 800313c:	4684      	mov	ip, r0
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800313e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8003140:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003144:	6808      	ldr	r0, [r1, #0]
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003146:	688c      	ldr	r4, [r1, #8]
 8003148:	b282      	uxth	r2, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800314a:	2809      	cmp	r0, #9
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800314c:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003150:	d92d      	bls.n	80031ae <HAL_ADC_ConfigChannel+0x86>
 8003152:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8003156:	d02a      	beq.n	80031ae <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003158:	f1ae 0e1e 	sub.w	lr, lr, #30
 800315c:	2607      	movs	r6, #7
 800315e:	68dd      	ldr	r5, [r3, #12]
 8003160:	fa06 f60e 	lsl.w	r6, r6, lr
 8003164:	ea25 0506 	bic.w	r5, r5, r6
 8003168:	60dd      	str	r5, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800316a:	4d49      	ldr	r5, [pc, #292]	@ (8003290 <HAL_ADC_ConfigChannel+0x168>)
 800316c:	42a8      	cmp	r0, r5
 800316e:	f000 8086 	beq.w	800327e <HAL_ADC_ConfigChannel+0x156>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003172:	68dd      	ldr	r5, [r3, #12]
 8003174:	fa04 f40e 	lsl.w	r4, r4, lr
 8003178:	432c      	orrs	r4, r5
 800317a:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 800317c:	684c      	ldr	r4, [r1, #4]
 800317e:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003180:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 8003184:	d824      	bhi.n	80031d0 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003186:	3905      	subs	r1, #5
 8003188:	241f      	movs	r4, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800318a:	408a      	lsls	r2, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800318c:	408c      	lsls	r4, r1
 800318e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003190:	ea21 0104 	bic.w	r1, r1, r4
 8003194:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003196:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003198:	430a      	orrs	r2, r1
 800319a:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800319c:	4a3d      	ldr	r2, [pc, #244]	@ (8003294 <HAL_ADC_ConfigChannel+0x16c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d026      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 80031a2:	2300      	movs	r3, #0
  return HAL_OK;
 80031a4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80031a6:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
}
 80031aa:	b002      	add	sp, #8
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031ae:	2507      	movs	r5, #7
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031b0:	fa04 f40e 	lsl.w	r4, r4, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031b4:	fa05 fe0e 	lsl.w	lr, r5, lr
 80031b8:	691d      	ldr	r5, [r3, #16]
 80031ba:	ea25 050e 	bic.w	r5, r5, lr
 80031be:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031c0:	691d      	ldr	r5, [r3, #16]
 80031c2:	432c      	orrs	r4, r5
 80031c4:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7)
 80031c6:	684c      	ldr	r4, [r1, #4]
 80031c8:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ca:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7)
 80031ce:	d9da      	bls.n	8003186 <HAL_ADC_ConfigChannel+0x5e>
  else if (sConfig->Rank < 13)
 80031d0:	2c0c      	cmp	r4, #12
 80031d2:	d837      	bhi.n	8003244 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031d4:	3923      	subs	r1, #35	@ 0x23
 80031d6:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031d8:	408a      	lsls	r2, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031da:	408c      	lsls	r4, r1
 80031dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031de:	ea21 0104 	bic.w	r1, r1, r4
 80031e2:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031e6:	430a      	orrs	r2, r1
 80031e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80031ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003294 <HAL_ADC_ConfigChannel+0x16c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d1d8      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x7a>
 80031f0:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80031f4:	d03c      	beq.n	8003270 <HAL_ADC_ConfigChannel+0x148>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031f6:	2812      	cmp	r0, #18
 80031f8:	d030      	beq.n	800325c <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031fa:	4b25      	ldr	r3, [pc, #148]	@ (8003290 <HAL_ADC_ConfigChannel+0x168>)
 80031fc:	4298      	cmp	r0, r3
 80031fe:	d001      	beq.n	8003204 <HAL_ADC_ConfigChannel+0xdc>
 8003200:	2811      	cmp	r0, #17
 8003202:	d1ce      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003204:	4b24      	ldr	r3, [pc, #144]	@ (8003298 <HAL_ADC_ConfigChannel+0x170>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003206:	4922      	ldr	r1, [pc, #136]	@ (8003290 <HAL_ADC_ConfigChannel+0x168>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003208:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800320a:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 800320c:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8003210:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003218:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800321a:	d1c2      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x7a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800321c:	4b1f      	ldr	r3, [pc, #124]	@ (800329c <HAL_ADC_ConfigChannel+0x174>)
 800321e:	4a20      	ldr	r2, [pc, #128]	@ (80032a0 <HAL_ADC_ConfigChannel+0x178>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0c9b      	lsrs	r3, r3, #18
 8003228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8003230:	9b01      	ldr	r3, [sp, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0b5      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x7a>
        counter--;
 8003236:	9b01      	ldr	r3, [sp, #4]
 8003238:	3b01      	subs	r3, #1
 800323a:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800323c:	9b01      	ldr	r3, [sp, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f9      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x10e>
 8003242:	e7ae      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003244:	3941      	subs	r1, #65	@ 0x41
 8003246:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003248:	408a      	lsls	r2, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800324a:	408c      	lsls	r4, r1
 800324c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800324e:	ea21 0104 	bic.w	r1, r1, r4
 8003252:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003254:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003256:	430a      	orrs	r2, r1
 8003258:	62da      	str	r2, [r3, #44]	@ 0x2c
 800325a:	e79f      	b.n	800319c <HAL_ADC_ConfigChannel+0x74>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <HAL_ADC_ConfigChannel+0x170>)
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8003264:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800326c:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800326e:	e798      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x7a>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003270:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8003274:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003278:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800327c:	e791      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800327e:	68dd      	ldr	r5, [r3, #12]
 8003280:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
 8003284:	60dc      	str	r4, [r3, #12]
 8003286:	e779      	b.n	800317c <HAL_ADC_ConfigChannel+0x54>
  __HAL_LOCK(hadc);
 8003288:	2002      	movs	r0, #2
}
 800328a:	b002      	add	sp, #8
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	bf00      	nop
 8003290:	10000012 	.word	0x10000012
 8003294:	40012000 	.word	0x40012000
 8003298:	40012300 	.word	0x40012300
 800329c:	20000000 	.word	0x20000000
 80032a0:	431bde83 	.word	0x431bde83

080032a4 <ADC_MultiModeDMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032a6:	2340      	movs	r3, #64	@ 0x40
 80032a8:	6403      	str	r3, [r0, #64]	@ 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032aa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6443      	str	r3, [r0, #68]	@ 0x44
    HAL_ADC_ErrorCallback(hadc); 
 80032b2:	f7ff be67 	b.w	8002f84 <HAL_ADC_ErrorCallback>
 80032b6:	bf00      	nop

080032b8 <ADC_MultiModeDMAHalfConvCplt>:
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 80032b8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80032ba:	f7ff be65 	b.w	8002f88 <HAL_ADC_ConvHalfCpltCallback>
 80032be:	bf00      	nop

080032c0 <ADC_MultiModeDMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032c0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032c4:	f012 0f50 	tst.w	r2, #80	@ 0x50
 80032c8:	d123      	bne.n	8003312 <ADC_MultiModeDMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032cc:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032d4:	688a      	ldr	r2, [r1, #8]
 80032d6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80032da:	d117      	bne.n	800330c <ADC_MultiModeDMAConvCplt+0x4c>
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	b9aa      	cbnz	r2, 800330c <ADC_MultiModeDMAConvCplt+0x4c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032e0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032e2:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80032e6:	d002      	beq.n	80032ee <ADC_MultiModeDMAConvCplt+0x2e>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032e8:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032ea:	0550      	lsls	r0, r2, #21
 80032ec:	d40e      	bmi.n	800330c <ADC_MultiModeDMAConvCplt+0x4c>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032ee:	684a      	ldr	r2, [r1, #4]
 80032f0:	f022 0220 	bic.w	r2, r2, #32
 80032f4:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032fc:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003300:	04d2      	lsls	r2, r2, #19
 8003302:	d403      	bmi.n	800330c <ADC_MultiModeDMAConvCplt+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff b961 	b.w	80025d4 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	4718      	bx	r3

08003318 <HAL_ADCEx_MultiModeStart_DMA>:
{
 8003318:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t counter = 0;
 800331a:	2300      	movs	r3, #0
{
 800331c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800331e:	9301      	str	r3, [sp, #4]
{
 8003320:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8003322:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003326:	2a01      	cmp	r2, #1
 8003328:	d06f      	beq.n	800340a <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 800332a:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800332c:	6806      	ldr	r6, [r0, #0]
 800332e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8003330:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003334:	68b2      	ldr	r2, [r6, #8]
 8003336:	07d4      	lsls	r4, r2, #31
 8003338:	d414      	bmi.n	8003364 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
    __HAL_ADC_ENABLE(hadc);
 800333a:	68b2      	ldr	r2, [r6, #8]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003342:	4a33      	ldr	r2, [pc, #204]	@ (8003410 <HAL_ADCEx_MultiModeStart_DMA+0xf8>)
 8003344:	6810      	ldr	r0, [r2, #0]
 8003346:	4a33      	ldr	r2, [pc, #204]	@ (8003414 <HAL_ADCEx_MultiModeStart_DMA+0xfc>)
 8003348:	fba2 2000 	umull	r2, r0, r2, r0
 800334c:	0c80      	lsrs	r0, r0, #18
 800334e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003352:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8003354:	9a01      	ldr	r2, [sp, #4]
 8003356:	b12a      	cbz	r2, 8003364 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
      counter--;
 8003358:	9c01      	ldr	r4, [sp, #4]
 800335a:	3c01      	subs	r4, #1
 800335c:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 800335e:	9801      	ldr	r0, [sp, #4]
 8003360:	2800      	cmp	r0, #0
 8003362:	d1f9      	bne.n	8003358 <HAL_ADCEx_MultiModeStart_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003364:	68b2      	ldr	r2, [r6, #8]
 8003366:	07d0      	lsls	r0, r2, #31
 8003368:	d53d      	bpl.n	80033e6 <HAL_ADCEx_MultiModeStart_DMA+0xce>
    ADC_STATE_CLR_SET(hadc->State,
 800336a:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 800336c:	4a2a      	ldr	r2, [pc, #168]	@ (8003418 <HAL_ADCEx_MultiModeStart_DMA+0x100>)
 800336e:	4002      	ands	r2, r0
 8003370:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003374:	642a      	str	r2, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003376:	6872      	ldr	r2, [r6, #4]
 8003378:	0552      	lsls	r2, r2, #21
 800337a:	d505      	bpl.n	8003388 <HAL_ADCEx_MultiModeStart_DMA+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800337c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800337e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003382:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003386:	642a      	str	r2, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003388:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800338a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800338e:	d03a      	beq.n	8003406 <HAL_ADCEx_MultiModeStart_DMA+0xee>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003390:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8003392:	f022 0206 	bic.w	r2, r2, #6
 8003396:	646a      	str	r2, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8003398:	2200      	movs	r2, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 800339a:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
      ADC->CCR |= ADC_CCR_DDS;
 800339c:	4c1f      	ldr	r4, [pc, #124]	@ (800341c <HAL_ADCEx_MultiModeStart_DMA+0x104>)
    __HAL_UNLOCK(hadc);
 800339e:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 80033a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003420 <HAL_ADCEx_MultiModeStart_DMA+0x108>)
 80033a4:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 80033a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003424 <HAL_ADCEx_MultiModeStart_DMA+0x10c>)
 80033a8:	6402      	str	r2, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 80033aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003428 <HAL_ADCEx_MultiModeStart_DMA+0x110>)
 80033ac:	64c2      	str	r2, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80033ae:	f06f 0202 	mvn.w	r2, #2
 80033b2:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033b4:	6872      	ldr	r2, [r6, #4]
 80033b6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80033ba:	6072      	str	r2, [r6, #4]
    if (hadc->Init.DMAContinuousRequests != DISABLE)
 80033bc:	f895 2030 	ldrb.w	r2, [r5, #48]	@ 0x30
 80033c0:	b1e2      	cbz	r2, 80033fc <HAL_ADCEx_MultiModeStart_DMA+0xe4>
      ADC->CCR |= ADC_CCR_DDS;
 80033c2:	6862      	ldr	r2, [r4, #4]
 80033c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033c8:	6062      	str	r2, [r4, #4]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
 80033ca:	460a      	mov	r2, r1
 80033cc:	4917      	ldr	r1, [pc, #92]	@ (800342c <HAL_ADCEx_MultiModeStart_DMA+0x114>)
 80033ce:	f000 fa59 	bl	8003884 <HAL_DMA_Start_IT>
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033d2:	682b      	ldr	r3, [r5, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80033da:	d10c      	bne.n	80033f6 <HAL_ADCEx_MultiModeStart_DMA+0xde>
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e007      	b.n	80033f6 <HAL_ADCEx_MultiModeStart_DMA+0xde>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80033e8:	f043 0310 	orr.w	r3, r3, #16
 80033ec:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ee:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 80033f6:	2000      	movs	r0, #0
}
 80033f8:	b002      	add	sp, #8
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
      ADC->CCR &= ~ADC_CCR_DDS;
 80033fc:	6862      	ldr	r2, [r4, #4]
 80033fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003402:	6062      	str	r2, [r4, #4]
 8003404:	e7e1      	b.n	80033ca <HAL_ADCEx_MultiModeStart_DMA+0xb2>
      ADC_CLEAR_ERRORCODE(hadc);
 8003406:	646a      	str	r2, [r5, #68]	@ 0x44
 8003408:	e7c6      	b.n	8003398 <HAL_ADCEx_MultiModeStart_DMA+0x80>
  __HAL_LOCK(hadc);
 800340a:	2002      	movs	r0, #2
}
 800340c:	b002      	add	sp, #8
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	20000000 	.word	0x20000000
 8003414:	431bde83 	.word	0x431bde83
 8003418:	fffff8fe 	.word	0xfffff8fe
 800341c:	40012300 	.word	0x40012300
 8003420:	080032c1 	.word	0x080032c1
 8003424:	080032b9 	.word	0x080032b9
 8003428:	080032a5 	.word	0x080032a5
 800342c:	40012308 	.word	0x40012308

08003430 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop

08003434 <HAL_ADCEx_MultiModeConfigChannel>:
  __HAL_LOCK(hadc);
 8003434:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d022      	beq.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
  ADC->CCR &= ~(ADC_CCR_MULTI);
 800343c:	4b12      	ldr	r3, [pc, #72]	@ (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x54>)
 800343e:	4602      	mov	r2, r0
  __HAL_UNLOCK(hadc);
 8003440:	f04f 0c00 	mov.w	ip, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8003444:	6858      	ldr	r0, [r3, #4]
 8003446:	f020 001f 	bic.w	r0, r0, #31
{
 800344a:	b410      	push	{r4}
  ADC->CCR &= ~(ADC_CCR_MULTI);
 800344c:	6058      	str	r0, [r3, #4]
  ADC->CCR |= multimode->Mode;
 800344e:	6858      	ldr	r0, [r3, #4]
 8003450:	680c      	ldr	r4, [r1, #0]
 8003452:	4320      	orrs	r0, r4
 8003454:	6058      	str	r0, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 8003456:	6858      	ldr	r0, [r3, #4]
 8003458:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 800345c:	6058      	str	r0, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 800345e:	6858      	ldr	r0, [r3, #4]
 8003460:	684c      	ldr	r4, [r1, #4]
 8003462:	4320      	orrs	r0, r4
 8003464:	6058      	str	r0, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8003466:	6858      	ldr	r0, [r3, #4]
 8003468:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
 800346c:	6058      	str	r0, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 800346e:	6858      	ldr	r0, [r3, #4]
 8003470:	6889      	ldr	r1, [r1, #8]
 8003472:	4301      	orrs	r1, r0
  return HAL_OK;
 8003474:	4660      	mov	r0, ip
  ADC->CCR |= multimode->TwoSamplingDelay;
 8003476:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(hadc);
 8003478:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c
}
 800347c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003480:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8003482:	2002      	movs	r0, #2
}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40012300 	.word	0x40012300

0800348c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800348c:	2800      	cmp	r0, #0
 800348e:	d07b      	beq.n	8003588 <HAL_CAN_Init+0xfc>
{
 8003490:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003492:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003496:	4604      	mov	r4, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d072      	beq.n	8003582 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800349c:	6822      	ldr	r2, [r4, #0]
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a6:	f7ff fd67 	bl	8002f78 <HAL_GetTick>
 80034aa:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ac:	e004      	b.n	80034b8 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034ae:	f7ff fd63 	bl	8002f78 <HAL_GetTick>
 80034b2:	1b40      	subs	r0, r0, r5
 80034b4:	280a      	cmp	r0, #10
 80034b6:	d85b      	bhi.n	8003570 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	07d1      	lsls	r1, r2, #31
 80034be:	d5f6      	bpl.n	80034ae <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	f022 0202 	bic.w	r2, r2, #2
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c8:	f7ff fd56 	bl	8002f78 <HAL_GetTick>
 80034cc:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034ce:	e004      	b.n	80034da <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034d0:	f7ff fd52 	bl	8002f78 <HAL_GetTick>
 80034d4:	1b40      	subs	r0, r0, r5
 80034d6:	280a      	cmp	r0, #10
 80034d8:	d84a      	bhi.n	8003570 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	0792      	lsls	r2, r2, #30
 80034e0:	d4f6      	bmi.n	80034d0 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034e2:	7e22      	ldrb	r2, [r4, #24]
 80034e4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	bf0c      	ite	eq
 80034ea:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034ee:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034f4:	7e62      	ldrb	r2, [r4, #25]
 80034f6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	bf0c      	ite	eq
 80034fc:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003500:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003506:	7ea2      	ldrb	r2, [r4, #26]
 8003508:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	bf0c      	ite	eq
 800350e:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003512:	f022 0220 	bicne.w	r2, r2, #32
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003518:	7ee2      	ldrb	r2, [r4, #27]
 800351a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	bf0c      	ite	eq
 8003520:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003524:	f042 0210 	orrne.w	r2, r2, #16
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800352a:	7f22      	ldrb	r2, [r4, #28]
 800352c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	bf0c      	ite	eq
 8003532:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003536:	f022 0208 	bicne.w	r2, r2, #8
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800353c:	7f62      	ldrb	r2, [r4, #29]
 800353e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	bf0c      	ite	eq
 8003544:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003548:	f022 0204 	bicne.w	r2, r2, #4
 800354c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800354e:	6921      	ldr	r1, [r4, #16]
 8003550:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8003554:	4302      	orrs	r2, r0
 8003556:	6960      	ldr	r0, [r4, #20]
 8003558:	430a      	orrs	r2, r1
 800355a:	6861      	ldr	r1, [r4, #4]
 800355c:	4302      	orrs	r2, r0
 800355e:	3901      	subs	r1, #1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003560:	2000      	movs	r0, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003562:	430a      	orrs	r2, r1

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003564:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003566:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003568:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800356a:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 800356e:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003570:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003572:	2205      	movs	r2, #5
    return HAL_ERROR;
 8003574:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357a:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800357c:	f884 2020 	strb.w	r2, [r4, #32]
}
 8003580:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8003582:	f7ff f9a5 	bl	80028d0 <HAL_CAN_MspInit>
 8003586:	e789      	b.n	800349c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8003588:	2001      	movs	r0, #1
}
 800358a:	4770      	bx	lr

0800358c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800358c:	4906      	ldr	r1, [pc, #24]	@ (80035a8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003592:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003594:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003596:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003598:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80035a2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80035a4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00
 80035ac:	05fa0000 	.word	0x05fa0000

080035b0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b0:	4b1a      	ldr	r3, [pc, #104]	@ (800361c <HAL_NVIC_SetPriority+0x6c>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035b8:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ba:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c2:	f1be 0f04 	cmp.w	lr, #4
 80035c6:	bf28      	it	cs
 80035c8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035cc:	f1bc 0f06 	cmp.w	ip, #6
 80035d0:	d91a      	bls.n	8003608 <HAL_NVIC_SetPriority+0x58>
 80035d2:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	fa03 f30c 	lsl.w	r3, r3, ip
 80035de:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80035e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	fa03 f30e 	lsl.w	r3, r3, lr
 80035ec:	ea21 0303 	bic.w	r3, r1, r3
 80035f0:	fa03 f30c 	lsl.w	r3, r3, ip
 80035f4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80035fc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80035fe:	db06      	blt.n	800360e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003600:	4a07      	ldr	r2, [pc, #28]	@ (8003620 <HAL_NVIC_SetPriority+0x70>)
 8003602:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003604:	f85d fb04 	ldr.w	pc, [sp], #4
 8003608:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360a:	4694      	mov	ip, r2
 800360c:	e7e9      	b.n	80035e2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360e:	f000 000f 	and.w	r0, r0, #15
 8003612:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <HAL_NVIC_SetPriority+0x74>)
 8003614:	5413      	strb	r3, [r2, r0]
 8003616:	f85d fb04 	ldr.w	pc, [sp], #4
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00
 8003620:	e000e400 	.word	0xe000e400
 8003624:	e000ed14 	.word	0xe000ed14

08003628 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003628:	2800      	cmp	r0, #0
 800362a:	db07      	blt.n	800363c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800362c:	f000 011f 	and.w	r1, r0, #31
 8003630:	2301      	movs	r3, #1
 8003632:	0940      	lsrs	r0, r0, #5
 8003634:	4a02      	ldr	r2, [pc, #8]	@ (8003640 <HAL_NVIC_EnableIRQ+0x18>)
 8003636:	408b      	lsls	r3, r1
 8003638:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e100 	.word	0xe000e100

08003644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003644:	1e43      	subs	r3, r0, #1
 8003646:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800364a:	d301      	bcc.n	8003650 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800364e:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003650:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003654:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003656:	4905      	ldr	r1, [pc, #20]	@ (800366c <HAL_SYSTICK_Config+0x28>)
 8003658:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800365e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003660:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003664:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003666:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003670:	b188      	cbz	r0, 8003696 <HAL_DAC_Init+0x26>
{
 8003672:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003674:	7903      	ldrb	r3, [r0, #4]
 8003676:	4604      	mov	r4, r0
 8003678:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800367c:	b13b      	cbz	r3, 800368e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800367e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003680:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003682:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003684:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8003686:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003688:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800368a:	7122      	strb	r2, [r4, #4]
}
 800368c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800368e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003690:	f7ff f95e 	bl	8002950 <HAL_DAC_MspInit>
 8003694:	e7f3      	b.n	800367e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8003696:	2001      	movs	r0, #1
}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop

0800369c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800369c:	7942      	ldrb	r2, [r0, #5]
 800369e:	2a01      	cmp	r2, #1
 80036a0:	d02b      	beq.n	80036fa <HAL_DAC_Start+0x5e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036a2:	4603      	mov	r3, r0
 80036a4:	2202      	movs	r2, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80036a6:	6800      	ldr	r0, [r0, #0]
 80036a8:	f001 0c10 	and.w	ip, r1, #16
{
 80036ac:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 80036ae:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80036b0:	2201      	movs	r2, #1
 80036b2:	6804      	ldr	r4, [r0, #0]
 80036b4:	fa02 f20c 	lsl.w	r2, r2, ip
 80036b8:	4322      	orrs	r2, r4
 80036ba:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 80036bc:	b981      	cbnz	r1, 80036e0 <HAL_DAC_Start+0x44>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80036be:	6802      	ldr	r2, [r0, #0]
 80036c0:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 80036c4:	2a3c      	cmp	r2, #60	@ 0x3c
 80036c6:	d103      	bne.n	80036d0 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80036c8:	6842      	ldr	r2, [r0, #4]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036d0:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80036d2:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 80036d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036d6:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80036d8:	7119      	strb	r1, [r3, #4]
}
 80036da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036de:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80036e0:	6801      	ldr	r1, [r0, #0]
 80036e2:	223c      	movs	r2, #60	@ 0x3c
 80036e4:	f401 1170 	and.w	r1, r1, #3932160	@ 0x3c0000
 80036e8:	fa02 f20c 	lsl.w	r2, r2, ip
 80036ec:	4291      	cmp	r1, r2
 80036ee:	d1ef      	bne.n	80036d0 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80036f0:	6842      	ldr	r2, [r0, #4]
 80036f2:	f042 0202 	orr.w	r2, r2, #2
 80036f6:	6042      	str	r2, [r0, #4]
 80036f8:	e7ea      	b.n	80036d0 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 80036fa:	2002      	movs	r0, #2
}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003700:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003702:	7940      	ldrb	r0, [r0, #5]
 8003704:	2801      	cmp	r0, #1
 8003706:	d023      	beq.n	8003750 <HAL_DAC_ConfigChannel+0x50>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003708:	2002      	movs	r0, #2

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800370a:	f002 0210 	and.w	r2, r2, #16
 800370e:	f640 7cfe 	movw	ip, #4094	@ 0xffe
{
 8003712:	b510      	push	{r4, lr}
  hdac->State = HAL_DAC_STATE_BUSY;
 8003714:	7118      	strb	r0, [r3, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003716:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 = hdac->Instance->CR;
 800371a:	681c      	ldr	r4, [r3, #0]
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800371c:	f04f 0e01 	mov.w	lr, #1
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003724:	4301      	orrs	r1, r0
  tmpreg1 = hdac->Instance->CR;
 8003726:	6820      	ldr	r0, [r4, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003728:	4091      	lsls	r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800372a:	ea20 000c 	bic.w	r0, r0, ip

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800372e:	f04f 0c00 	mov.w	ip, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003732:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003734:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 8003736:	6021      	str	r1, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003738:	fa00 f102 	lsl.w	r1, r0, r2
 800373c:	6822      	ldr	r2, [r4, #0]

  /* Return function status */
  return HAL_OK;
 800373e:	4660      	mov	r0, ip
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003740:	ea22 0201 	bic.w	r2, r2, r1
 8003744:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003746:	f883 e004 	strb.w	lr, [r3, #4]
  __HAL_UNLOCK(hdac);
 800374a:	f883 c005 	strb.w	ip, [r3, #5]
}
 800374e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8003750:	2002      	movs	r0, #2
}
 8003752:	4770      	bx	lr

08003754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7ff fc0e 	bl	8002f78 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800375c:	2c00      	cmp	r4, #0
 800375e:	d070      	beq.n	8003842 <HAL_DMA_Init+0xee>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003760:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003762:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8003764:	2102      	movs	r1, #2
 8003766:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8003768:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800376c:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_DMA_DISABLE(hdma);
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003778:	e005      	b.n	8003786 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800377a:	f7ff fbfd 	bl	8002f78 <HAL_GetTick>
 800377e:	1b43      	subs	r3, r0, r5
 8003780:	2b05      	cmp	r3, #5
 8003782:	d83c      	bhi.n	80037fe <HAL_DMA_Init+0xaa>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	07d1      	lsls	r1, r2, #31
 800378a:	d4f6      	bmi.n	800377a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800378c:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8003790:	68e1      	ldr	r1, [r4, #12]
 8003792:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003794:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8003796:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003798:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379a:	6921      	ldr	r1, [r4, #16]
 800379c:	430a      	orrs	r2, r1
 800379e:	6961      	ldr	r1, [r4, #20]
 80037a0:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a2:	69e1      	ldr	r1, [r4, #28]
 80037a4:	4302      	orrs	r2, r0
 80037a6:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037a8:	4933      	ldr	r1, [pc, #204]	@ (8003878 <HAL_DMA_Init+0x124>)
 80037aa:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ac:	6a25      	ldr	r5, [r4, #32]
 80037ae:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b0:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80037b4:	2904      	cmp	r1, #4
 80037b6:	d029      	beq.n	800380c <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037b8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037ba:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037bc:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037c0:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037c2:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 80037c4:	6159      	str	r1, [r3, #20]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037c6:	482d      	ldr	r0, [pc, #180]	@ (800387c <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037c8:	f36f 0309 	bfc	r3, #0, #10
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037cc:	f1a2 0110 	sub.w	r1, r2, #16
 80037d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003880 <HAL_DMA_Init+0x12c>)
 80037d2:	fba2 5201 	umull	r5, r2, r2, r1
  if (stream_number > 3U)
 80037d6:	295f      	cmp	r1, #95	@ 0x5f
  hdma->State = HAL_DMA_STATE_READY;
 80037d8:	f04f 0501 	mov.w	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037dc:	f04f 0100 	mov.w	r1, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037e0:	ea4f 1212 	mov.w	r2, r2, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037e4:	bf88      	it	hi
 80037e6:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037e8:	5c80      	ldrb	r0, [r0, r2]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ea:	223f      	movs	r2, #63	@ 0x3f
 80037ec:	65a3      	str	r3, [r4, #88]	@ 0x58
 80037ee:	4082      	lsls	r2, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037f0:	65e0      	str	r0, [r4, #92]	@ 0x5c
  return HAL_OK;
 80037f2:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f4:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f6:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80037f8:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 80037fc:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003800:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8003802:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003804:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003806:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 800380a:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800380c:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8003810:	4329      	orrs	r1, r5
 8003812:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8003814:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hdma->Instance->CR = tmp;  
 8003816:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003818:	6959      	ldr	r1, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800381a:	f021 0107 	bic.w	r1, r1, #7
 800381e:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8003820:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003824:	2d00      	cmp	r5, #0
 8003826:	d0cc      	beq.n	80037c2 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003828:	b968      	cbnz	r0, 8003846 <HAL_DMA_Init+0xf2>
  {
    switch (tmp)
 800382a:	2a01      	cmp	r2, #1
 800382c:	d020      	beq.n	8003870 <HAL_DMA_Init+0x11c>
 800382e:	f032 0202 	bics.w	r2, r2, #2
 8003832:	d1c6      	bne.n	80037c2 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003834:	01ea      	lsls	r2, r5, #7
 8003836:	d5c4      	bpl.n	80037c2 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003838:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800383a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800383c:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800383e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8003842:	2001      	movs	r0, #1
}
 8003844:	bd38      	pop	{r3, r4, r5, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003846:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800384a:	d004      	beq.n	8003856 <HAL_DMA_Init+0x102>
    switch (tmp)
 800384c:	2a02      	cmp	r2, #2
 800384e:	d9f3      	bls.n	8003838 <HAL_DMA_Init+0xe4>
 8003850:	2a03      	cmp	r2, #3
 8003852:	d0ef      	beq.n	8003834 <HAL_DMA_Init+0xe0>
 8003854:	e7b5      	b.n	80037c2 <HAL_DMA_Init+0x6e>
    switch (tmp)
 8003856:	2a03      	cmp	r2, #3
 8003858:	d8b3      	bhi.n	80037c2 <HAL_DMA_Init+0x6e>
 800385a:	a001      	add	r0, pc, #4	@ (adr r0, 8003860 <HAL_DMA_Init+0x10c>)
 800385c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8003860:	08003839 	.word	0x08003839
 8003864:	08003835 	.word	0x08003835
 8003868:	08003839 	.word	0x08003839
 800386c:	08003871 	.word	0x08003871
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003870:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8003874:	d1a5      	bne.n	80037c2 <HAL_DMA_Init+0x6e>
 8003876:	e7df      	b.n	8003838 <HAL_DMA_Init+0xe4>
 8003878:	f010803f 	.word	0xf010803f
 800387c:	0800a1a8 	.word	0x0800a1a8
 8003880:	aaaaaaab 	.word	0xaaaaaaab

08003884 <HAL_DMA_Start_IT>:
{
 8003884:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8003886:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800388a:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800388c:	f1bc 0f01 	cmp.w	ip, #1
 8003890:	d009      	beq.n	80038a6 <HAL_DMA_Start_IT+0x22>
 8003892:	2401      	movs	r4, #1
 8003894:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003898:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 800389c:	2c01      	cmp	r4, #1
 800389e:	d005      	beq.n	80038ac <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80038a0:	2300      	movs	r3, #0
 80038a2:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 80038a6:	2002      	movs	r0, #2
}
 80038a8:	bc70      	pop	{r4, r5, r6}
 80038aa:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ac:	2502      	movs	r5, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038ae:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80038b0:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b4:	2500      	movs	r5, #0
 80038b6:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038b8:	6825      	ldr	r5, [r4, #0]
 80038ba:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 80038be:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80038c0:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038c2:	6883      	ldr	r3, [r0, #8]
 80038c4:	2b40      	cmp	r3, #64	@ 0x40
 80038c6:	d01a      	beq.n	80038fe <HAL_DMA_Start_IT+0x7a>
    hdma->Instance->PAR = SrcAddress;
 80038c8:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80038ca:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038cc:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 80038ce:	233f      	movs	r3, #63	@ 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 80038d0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d2:	408b      	lsls	r3, r1
 80038d4:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	f043 0316 	orr.w	r3, r3, #22
 80038dc:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80038de:	6963      	ldr	r3, [r4, #20]
 80038e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038e4:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80038e6:	b11a      	cbz	r2, 80038f0 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CR  |= DMA_IT_HT;
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f043 0308 	orr.w	r3, r3, #8
 80038ee:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80038f0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038f2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6023      	str	r3, [r4, #0]
}
 80038fa:	bc70      	pop	{r4, r5, r6}
 80038fc:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80038fe:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003900:	60e1      	str	r1, [r4, #12]
 8003902:	e7e3      	b.n	80038cc <HAL_DMA_Start_IT+0x48>

08003904 <HAL_DMA_Abort>:
{
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003908:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 800390a:	f7ff fb35 	bl	8002f78 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800390e:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8003912:	2b02      	cmp	r3, #2
 8003914:	d006      	beq.n	8003924 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003916:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 8003918:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800391a:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800391c:	2300      	movs	r3, #0
 800391e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003922:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	4606      	mov	r6, r0
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	f022 0216 	bic.w	r2, r2, #22
 800392e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003936:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003938:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800393a:	b34a      	cbz	r2, 8003990 <HAL_DMA_Abort+0x8c>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	f022 0208 	bic.w	r2, r2, #8
 8003942:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800394c:	e005      	b.n	800395a <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800394e:	f7ff fb13 	bl	8002f78 <HAL_GetTick>
 8003952:	1b83      	subs	r3, r0, r6
 8003954:	2b05      	cmp	r3, #5
 8003956:	d811      	bhi.n	800397c <HAL_DMA_Abort+0x78>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f013 0301 	ands.w	r3, r3, #1
 8003960:	d1f5      	bne.n	800394e <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003962:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003964:	223f      	movs	r2, #63	@ 0x3f
  return HAL_OK;
 8003966:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 8003968:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396a:	fa02 f101 	lsl.w	r1, r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800396e:	2201      	movs	r2, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003970:	60a9      	str	r1, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003972:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8003976:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800397a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800397c:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800397e:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 8003980:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003982:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003984:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8003988:	2300      	movs	r3, #0
 800398a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800398e:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003990:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003992:	2a00      	cmp	r2, #0
 8003994:	d1d2      	bne.n	800393c <HAL_DMA_Abort+0x38>
 8003996:	e7d5      	b.n	8003944 <HAL_DMA_Abort+0x40>

08003998 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003998:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
{
 800399c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800399e:	2a02      	cmp	r2, #2
 80039a0:	d003      	beq.n	80039aa <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a2:	2280      	movs	r2, #128	@ 0x80
    return HAL_ERROR;
 80039a4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039a8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80039aa:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80039ac:	2105      	movs	r1, #5
  return HAL_OK;
 80039ae:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 80039b0:	f883 1035 	strb.w	r1, [r3, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80039b4:	6813      	ldr	r3, [r2, #0]
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop

080039c0 <HAL_DMA_IRQHandler>:
{
 80039c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80039c2:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 80039c4:	4b66      	ldr	r3, [pc, #408]	@ (8003b60 <HAL_DMA_IRQHandler+0x1a0>)
{
 80039c6:	b083      	sub	sp, #12
 80039c8:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600;
 80039ca:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0;
 80039cc:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ce:	2208      	movs	r2, #8
 80039d0:	e9d0 7316 	ldrd	r7, r3, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80039d4:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d6:	409a      	lsls	r2, r3
 80039d8:	422a      	tst	r2, r5
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x26>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039dc:	6801      	ldr	r1, [r0, #0]
 80039de:	6808      	ldr	r0, [r1, #0]
 80039e0:	0740      	lsls	r0, r0, #29
 80039e2:	f100 8097 	bmi.w	8003b14 <HAL_DMA_IRQHandler+0x154>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e6:	2201      	movs	r2, #1
 80039e8:	409a      	lsls	r2, r3
 80039ea:	422a      	tst	r2, r5
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x38>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039ee:	6821      	ldr	r1, [r4, #0]
 80039f0:	6949      	ldr	r1, [r1, #20]
 80039f2:	0608      	lsls	r0, r1, #24
 80039f4:	f100 8088 	bmi.w	8003b08 <HAL_DMA_IRQHandler+0x148>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f8:	2204      	movs	r2, #4
 80039fa:	409a      	lsls	r2, r3
 80039fc:	422a      	tst	r2, r5
 80039fe:	d003      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x48>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a00:	6821      	ldr	r1, [r4, #0]
 8003a02:	6809      	ldr	r1, [r1, #0]
 8003a04:	0789      	lsls	r1, r1, #30
 8003a06:	d479      	bmi.n	8003afc <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a08:	2210      	movs	r2, #16
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	422a      	tst	r2, r5
 8003a0e:	d003      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x58>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a10:	6821      	ldr	r1, [r4, #0]
 8003a12:	6808      	ldr	r0, [r1, #0]
 8003a14:	0700      	lsls	r0, r0, #28
 8003a16:	d45e      	bmi.n	8003ad6 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a18:	2220      	movs	r2, #32
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	422a      	tst	r2, r5
 8003a1e:	d014      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x8a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a20:	6821      	ldr	r1, [r4, #0]
 8003a22:	6808      	ldr	r0, [r1, #0]
 8003a24:	06c0      	lsls	r0, r0, #27
 8003a26:	d510      	bpl.n	8003a4a <HAL_DMA_IRQHandler+0x8a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a28:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a2a:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8003a2e:	2a05      	cmp	r2, #5
 8003a30:	d033      	beq.n	8003a9a <HAL_DMA_IRQHandler+0xda>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a32:	680b      	ldr	r3, [r1, #0]
 8003a34:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a38:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a3a:	d07b      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x174>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a3c:	0319      	lsls	r1, r3, #12
 8003a3e:	f140 8086 	bpl.w	8003b4e <HAL_DMA_IRQHandler+0x18e>
        if(hdma->XferCpltCallback != NULL)
 8003a42:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a44:	b10b      	cbz	r3, 8003a4a <HAL_DMA_IRQHandler+0x8a>
          hdma->XferCpltCallback(hdma);
 8003a46:	4620      	mov	r0, r4
 8003a48:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a4a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d040      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x112>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a50:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a52:	07da      	lsls	r2, r3, #31
 8003a54:	d51a      	bpl.n	8003a8c <HAL_DMA_IRQHandler+0xcc>
      __HAL_DMA_DISABLE(hdma);
 8003a56:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a58:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8003a5a:	4b42      	ldr	r3, [pc, #264]	@ (8003b64 <HAL_DMA_IRQHandler+0x1a4>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a5c:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8003a60:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8003a64:	6813      	ldr	r3, [r2, #0]
 8003a66:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8003a6a:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e002      	b.n	8003a76 <HAL_DMA_IRQHandler+0xb6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a70:	6813      	ldr	r3, [r2, #0]
 8003a72:	07db      	lsls	r3, r3, #31
 8003a74:	d504      	bpl.n	8003a80 <HAL_DMA_IRQHandler+0xc0>
        if (++count > timeout)
 8003a76:	9b01      	ldr	r3, [sp, #4]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	42b3      	cmp	r3, r6
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	d9f7      	bls.n	8003a70 <HAL_DMA_IRQHandler+0xb0>
      hdma->State = HAL_DMA_STATE_READY;
 8003a80:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8003a82:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003a84:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8003a88:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8003a8c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003a8e:	b303      	cbz	r3, 8003ad2 <HAL_DMA_IRQHandler+0x112>
      hdma->XferErrorCallback(hdma);
 8003a90:	4620      	mov	r0, r4
}
 8003a92:	b003      	add	sp, #12
 8003a94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8003a98:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a9a:	680a      	ldr	r2, [r1, #0]
 8003a9c:	f022 0216 	bic.w	r2, r2, #22
 8003aa0:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aa2:	694a      	ldr	r2, [r1, #20]
 8003aa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003aa8:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aaa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003aac:	2a00      	cmp	r2, #0
 8003aae:	d053      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x198>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab0:	680a      	ldr	r2, [r1, #0]
 8003ab2:	f022 0208 	bic.w	r2, r2, #8
 8003ab6:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab8:	223f      	movs	r2, #63	@ 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8003aba:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8003ac0:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac2:	60bb      	str	r3, [r7, #8]
        if(hdma->XferAbortCallback != NULL)
 8003ac4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003aca:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1de      	bne.n	8003a90 <HAL_DMA_IRQHandler+0xd0>
}
 8003ad2:	b003      	add	sp, #12
 8003ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ad6:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ad8:	680a      	ldr	r2, [r1, #0]
 8003ada:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ade:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ae0:	d122      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ae2:	05d2      	lsls	r2, r2, #23
 8003ae4:	d403      	bmi.n	8003aee <HAL_DMA_IRQHandler+0x12e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ae6:	680a      	ldr	r2, [r1, #0]
 8003ae8:	f022 0208 	bic.w	r2, r2, #8
 8003aec:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003aee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003af0:	2a00      	cmp	r2, #0
 8003af2:	d091      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x58>
          hdma->XferHalfCpltCallback(hdma);
 8003af4:	4620      	mov	r0, r4
 8003af6:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003afa:	e78d      	b.n	8003a18 <HAL_DMA_IRQHandler+0x58>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003afc:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003afe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b00:	f042 0204 	orr.w	r2, r2, #4
 8003b04:	6562      	str	r2, [r4, #84]	@ 0x54
 8003b06:	e77f      	b.n	8003a08 <HAL_DMA_IRQHandler+0x48>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b08:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b0a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b0c:	f042 0202 	orr.w	r2, r2, #2
 8003b10:	6562      	str	r2, [r4, #84]	@ 0x54
 8003b12:	e771      	b.n	80039f8 <HAL_DMA_IRQHandler+0x38>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b14:	6808      	ldr	r0, [r1, #0]
 8003b16:	f020 0004 	bic.w	r0, r0, #4
 8003b1a:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b1c:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	6562      	str	r2, [r4, #84]	@ 0x54
 8003b26:	e75e      	b.n	80039e6 <HAL_DMA_IRQHandler+0x26>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b28:	0311      	lsls	r1, r2, #12
 8003b2a:	d5e0      	bpl.n	8003aee <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b2c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003b2e:	2a00      	cmp	r2, #0
 8003b30:	d1e0      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x134>
 8003b32:	e771      	b.n	8003a18 <HAL_DMA_IRQHandler+0x58>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b34:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8003b38:	d183      	bne.n	8003a42 <HAL_DMA_IRQHandler+0x82>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b3a:	680a      	ldr	r2, [r1, #0]
 8003b3c:	f022 0210 	bic.w	r2, r2, #16
 8003b40:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003b42:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8003b44:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003b48:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003b4c:	e779      	b.n	8003a42 <HAL_DMA_IRQHandler+0x82>
          if(hdma->XferM1CpltCallback != NULL)
 8003b4e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f47f af78 	bne.w	8003a46 <HAL_DMA_IRQHandler+0x86>
 8003b56:	e778      	b.n	8003a4a <HAL_DMA_IRQHandler+0x8a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b58:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003b5a:	2a00      	cmp	r2, #0
 8003b5c:	d1a8      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0xf0>
 8003b5e:	e7ab      	b.n	8003ab8 <HAL_DMA_IRQHandler+0xf8>
 8003b60:	20000000 	.word	0x20000000
 8003b64:	1b4e81b5 	.word	0x1b4e81b5

08003b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b6c:	2300      	movs	r3, #0
{
 8003b6e:	b085      	sub	sp, #20
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b70:	f04f 0b01 	mov.w	fp, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b74:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003dbc <HAL_GPIO_Init+0x254>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b7a:	4689      	mov	r9, r1
 8003b7c:	e003      	b.n	8003b86 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b7e:	3301      	adds	r3, #1
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	f000 809b 	beq.w	8003cbc <HAL_GPIO_Init+0x154>
    ioposition = ((uint32_t)0x01) << position;
 8003b86:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b8a:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8003b8e:	43a2      	bics	r2, r4
 8003b90:	d1f5      	bne.n	8003b7e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b92:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003b96:	005a      	lsls	r2, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b98:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b9a:	f001 0c03 	and.w	ip, r1, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b9e:	4095      	lsls	r5, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba0:	f10c 36ff 	add.w	r6, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ba4:	43ed      	mvns	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba6:	2e01      	cmp	r6, #1
 8003ba8:	f240 808b 	bls.w	8003cc2 <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bac:	f1bc 0f03 	cmp.w	ip, #3
 8003bb0:	f040 80f4 	bne.w	8003d9c <HAL_GPIO_Init+0x234>
      temp = GPIOx->MODER;
 8003bb4:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bb6:	fa0c f202 	lsl.w	r2, ip, r2
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bba:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bbe:	ea05 0506 	and.w	r5, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bc2:	ea42 0205 	orr.w	r2, r2, r5
      GPIOx->MODER = temp;
 8003bc6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bc8:	d0d9      	beq.n	8003b7e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bca:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8003bce:	f023 0503 	bic.w	r5, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bd2:	f003 0603 	and.w	r6, r3, #3
 8003bd6:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bdc:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003be0:	00b6      	lsls	r6, r6, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be2:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8003be6:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8003bea:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bee:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bf2:	4f6f      	ldr	r7, [pc, #444]	@ (8003db0 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bf8:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfa:	9203      	str	r2, [sp, #12]
 8003bfc:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8003bfe:	68aa      	ldr	r2, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c00:	ea22 020c 	bic.w	r2, r2, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c04:	d031      	beq.n	8003c6a <HAL_GPIO_Init+0x102>
 8003c06:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8003c0a:	42b8      	cmp	r0, r7
 8003c0c:	f000 8096 	beq.w	8003d3c <HAL_GPIO_Init+0x1d4>
 8003c10:	4f68      	ldr	r7, [pc, #416]	@ (8003db4 <HAL_GPIO_Init+0x24c>)
 8003c12:	42b8      	cmp	r0, r7
 8003c14:	f000 8098 	beq.w	8003d48 <HAL_GPIO_Init+0x1e0>
 8003c18:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8003dc0 <HAL_GPIO_Init+0x258>
 8003c1c:	4560      	cmp	r0, ip
 8003c1e:	f000 8099 	beq.w	8003d54 <HAL_GPIO_Init+0x1ec>
 8003c22:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8003dc4 <HAL_GPIO_Init+0x25c>
 8003c26:	4560      	cmp	r0, ip
 8003c28:	f000 809a 	beq.w	8003d60 <HAL_GPIO_Init+0x1f8>
 8003c2c:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8003dc8 <HAL_GPIO_Init+0x260>
 8003c30:	4560      	cmp	r0, ip
 8003c32:	f000 80a1 	beq.w	8003d78 <HAL_GPIO_Init+0x210>
 8003c36:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8003dcc <HAL_GPIO_Init+0x264>
 8003c3a:	4560      	cmp	r0, ip
 8003c3c:	f000 80a2 	beq.w	8003d84 <HAL_GPIO_Init+0x21c>
 8003c40:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8003dd0 <HAL_GPIO_Init+0x268>
 8003c44:	4560      	cmp	r0, ip
 8003c46:	f000 8091 	beq.w	8003d6c <HAL_GPIO_Init+0x204>
 8003c4a:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8003dd4 <HAL_GPIO_Init+0x26c>
 8003c4e:	4560      	cmp	r0, ip
 8003c50:	f000 809e 	beq.w	8003d90 <HAL_GPIO_Init+0x228>
 8003c54:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8003dd8 <HAL_GPIO_Init+0x270>
 8003c58:	4560      	cmp	r0, ip
 8003c5a:	bf0c      	ite	eq
 8003c5c:	f04f 0c09 	moveq.w	ip, #9
 8003c60:	f04f 0c0a 	movne.w	ip, #10
 8003c64:	fa0c f606 	lsl.w	r6, ip, r6
 8003c68:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c6a:	60aa      	str	r2, [r5, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c6c:	02ce      	lsls	r6, r1, #11
        temp = EXTI->RTSR;
 8003c6e:	4a52      	ldr	r2, [pc, #328]	@ (8003db8 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8003c70:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003c74:	4e50      	ldr	r6, [pc, #320]	@ (8003db8 <HAL_GPIO_Init+0x250>)
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c76:	f103 0301 	add.w	r3, r3, #1
        temp = EXTI->RTSR;
 8003c7a:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003c7c:	bf54      	ite	pl
 8003c7e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003c80:	ea48 0202 	orrmi.w	r2, r8, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c84:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 8003c86:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8003c88:	68f2      	ldr	r2, [r6, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003c8a:	4e4b      	ldr	r6, [pc, #300]	@ (8003db8 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8003c8c:	bf54      	ite	pl
 8003c8e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003c90:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8003c94:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8003c96:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c98:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003c9a:	4e47      	ldr	r6, [pc, #284]	@ (8003db8 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	bf54      	ite	pl
 8003c9e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003ca0:	ea48 0202 	orrmi.w	r2, r8, r2

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ca4:	03c9      	lsls	r1, r1, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003ca6:	4944      	ldr	r1, [pc, #272]	@ (8003db8 <HAL_GPIO_Init+0x250>)
        EXTI->EMR = temp;
 8003ca8:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 8003caa:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8003cac:	bf54      	ite	pl
 8003cae:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003cb0:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cb4:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8003cb6:	600a      	str	r2, [r1, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cb8:	f47f af65 	bne.w	8003b86 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8003cbc:	b005      	add	sp, #20
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003cc2:	6886      	ldr	r6, [r0, #8]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc4:	f1bc 0f02 	cmp.w	ip, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cc8:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ccc:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8003cd0:	fa06 f602 	lsl.w	r6, r6, r2
 8003cd4:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8003cd8:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cda:	f3c1 1600 	ubfx	r6, r1, #4, #1
        temp = GPIOx->OTYPER;
 8003cde:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce2:	fa06 f603 	lsl.w	r6, r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce6:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cea:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 8003cee:	6046      	str	r6, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003cf0:	f8d9 6008 	ldr.w	r6, [r9, #8]
        temp = GPIOx->PUPDR;
 8003cf4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003cf8:	fa06 f602 	lsl.w	r6, r6, r2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003cfc:	ea0e 0e05 	and.w	lr, lr, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d00:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8003d04:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d06:	f47f af55 	bne.w	8003bb4 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3];
 8003d0a:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d0c:	f003 0e07 	and.w	lr, r3, #7
 8003d10:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8003d14:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8003d18:	6a37      	ldr	r7, [r6, #32]
 8003d1a:	9601      	str	r6, [sp, #4]
 8003d1c:	9700      	str	r7, [sp, #0]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d1e:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d20:	f8d9 6010 	ldr.w	r6, [r9, #16]
 8003d24:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d28:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003d2c:	9f00      	ldr	r7, [sp, #0]
 8003d2e:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8003d32:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d34:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3] = temp;
 8003d38:	623e      	str	r6, [r7, #32]
 8003d3a:	e73b      	b.n	8003bb4 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d3c:	f04f 0c01 	mov.w	ip, #1
 8003d40:	fa0c f606 	lsl.w	r6, ip, r6
 8003d44:	4332      	orrs	r2, r6
 8003d46:	e790      	b.n	8003c6a <HAL_GPIO_Init+0x102>
 8003d48:	f04f 0c02 	mov.w	ip, #2
 8003d4c:	fa0c f606 	lsl.w	r6, ip, r6
 8003d50:	4332      	orrs	r2, r6
 8003d52:	e78a      	b.n	8003c6a <HAL_GPIO_Init+0x102>
 8003d54:	f04f 0c03 	mov.w	ip, #3
 8003d58:	fa0c f606 	lsl.w	r6, ip, r6
 8003d5c:	4332      	orrs	r2, r6
 8003d5e:	e784      	b.n	8003c6a <HAL_GPIO_Init+0x102>
 8003d60:	f04f 0c04 	mov.w	ip, #4
 8003d64:	fa0c f606 	lsl.w	r6, ip, r6
 8003d68:	4332      	orrs	r2, r6
 8003d6a:	e77e      	b.n	8003c6a <HAL_GPIO_Init+0x102>
 8003d6c:	f04f 0c07 	mov.w	ip, #7
 8003d70:	fa0c f606 	lsl.w	r6, ip, r6
 8003d74:	4332      	orrs	r2, r6
 8003d76:	e778      	b.n	8003c6a <HAL_GPIO_Init+0x102>
 8003d78:	f04f 0c05 	mov.w	ip, #5
 8003d7c:	fa0c f606 	lsl.w	r6, ip, r6
 8003d80:	4332      	orrs	r2, r6
 8003d82:	e772      	b.n	8003c6a <HAL_GPIO_Init+0x102>
 8003d84:	f04f 0c06 	mov.w	ip, #6
 8003d88:	fa0c f606 	lsl.w	r6, ip, r6
 8003d8c:	4332      	orrs	r2, r6
 8003d8e:	e76c      	b.n	8003c6a <HAL_GPIO_Init+0x102>
 8003d90:	f04f 0c08 	mov.w	ip, #8
 8003d94:	fa0c f606 	lsl.w	r6, ip, r6
 8003d98:	4332      	orrs	r2, r6
 8003d9a:	e766      	b.n	8003c6a <HAL_GPIO_Init+0x102>
        temp = GPIOx->PUPDR;
 8003d9c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d9e:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003da2:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8003da6:	4096      	lsls	r6, r2
 8003da8:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8003dac:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dae:	e701      	b.n	8003bb4 <HAL_GPIO_Init+0x4c>
 8003db0:	40020000 	.word	0x40020000
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40013c00 	.word	0x40013c00
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40020c00 	.word	0x40020c00
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40021400 	.word	0x40021400
 8003dcc:	40021800 	.word	0x40021800
 8003dd0:	40021c00 	.word	0x40021c00
 8003dd4:	40022000 	.word	0x40022000
 8003dd8:	40022400 	.word	0x40022400

08003ddc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ddc:	b902      	cbnz	r2, 8003de0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dde:	0409      	lsls	r1, r1, #16
 8003de0:	6181      	str	r1, [r0, #24]
  }
}
 8003de2:	4770      	bx	lr

08003de4 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d04e      	beq.n	8003e86 <HAL_I2C_Init+0xa2>
{
 8003de8:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dea:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003dee:	4604      	mov	r4, r0
 8003df0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d041      	beq.n	8003e7c <HAL_I2C_Init+0x98>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003df8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfa:	2124      	movs	r1, #36	@ 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dfc:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfe:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003e02:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e08:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003e0a:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e0e:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8003e10:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e12:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e14:	689a      	ldr	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e16:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e1c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e1e:	d029      	beq.n	8003e74 <HAL_I2C_Init+0x90>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e20:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e24:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e26:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e28:	d102      	bne.n	8003e30 <HAL_I2C_Init+0x4c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e30:	6858      	ldr	r0, [r3, #4]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e36:	4915      	ldr	r1, [pc, #84]	@ (8003e8c <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e38:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e3a:	4301      	orrs	r1, r0
 8003e3c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e3e:	68d9      	ldr	r1, [r3, #12]
 8003e40:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8003e44:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e46:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e4a:	4302      	orrs	r2, r0
 8003e4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e50:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e54:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e56:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e58:	4301      	orrs	r1, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003e5a:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e5c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	f041 0101 	orr.w	r1, r1, #1
 8003e64:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e66:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e6c:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 8003e72:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e74:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003e78:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e7a:	e7d9      	b.n	8003e30 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8003e7c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8003e80:	f7fe fda2 	bl	80029c8 <HAL_I2C_MspInit>
 8003e84:	e7b8      	b.n	8003df8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8003e86:	2001      	movs	r0, #1
}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	02008000 	.word	0x02008000

08003e90 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e90:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8003e94:	2a20      	cmp	r2, #32
 8003e96:	d123      	bne.n	8003ee0 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003e98:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2a01      	cmp	r2, #1
 8003ea4:	d01c      	beq.n	8003ee0 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea8:	2024      	movs	r0, #36	@ 0x24
{
 8003eaa:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eac:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb0:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8003eb4:	6810      	ldr	r0, [r2, #0]
 8003eb6:	f020 0001 	bic.w	r0, r0, #1
 8003eba:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ebc:	6810      	ldr	r0, [r2, #0]
 8003ebe:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003ec2:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ec4:	6810      	ldr	r0, [r2, #0]
 8003ec6:	4301      	orrs	r1, r0

    return HAL_OK;
 8003ec8:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 8003eca:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	f041 0101 	orr.w	r1, r1, #1
 8003ed2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003ed8:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003edc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8003ee0:	2002      	movs	r0, #2
}
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8003ee8:	2a20      	cmp	r2, #32
 8003eea:	d122      	bne.n	8003f32 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8003eec:	4603      	mov	r3, r0
{
 8003eee:	b500      	push	{lr}
 8003ef0:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003ef8:	2a01      	cmp	r2, #1
 8003efa:	d01c      	beq.n	8003f36 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003efc:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efe:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f00:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f04:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003f08:	6810      	ldr	r0, [r2, #0]
 8003f0a:	f020 0001 	bic.w	r0, r0, #1
 8003f0e:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8003f10:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003f12:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003f16:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 8003f1a:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8003f1c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003f1e:	6811      	ldr	r1, [r2, #0]
 8003f20:	f041 0101 	orr.w	r1, r1, #1
 8003f24:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003f2a:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8003f32:	2002      	movs	r0, #2
}
 8003f34:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003f36:	2002      	movs	r0, #2
}
 8003f38:	f85d fb04 	ldr.w	pc, [sp], #4

08003f3c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <HAL_PWREx_EnableOverDrive+0x6c>)
 8003f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f40:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
{
 8003f44:	b530      	push	{r4, r5, lr}
 8003f46:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f48:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f4c:	4c17      	ldr	r4, [pc, #92]	@ (8003fac <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5c:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f5e:	f7ff f80b 	bl	8002f78 <HAL_GetTick>
 8003f62:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f64:	e005      	b.n	8003f72 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f66:	f7ff f807 	bl	8002f78 <HAL_GetTick>
 8003f6a:	1b40      	subs	r0, r0, r5
 8003f6c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003f70:	d817      	bhi.n	8003fa2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f72:	6863      	ldr	r3, [r4, #4]
 8003f74:	03da      	lsls	r2, r3, #15
 8003f76:	d5f6      	bpl.n	8003f66 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f78:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f7a:	4d0c      	ldr	r5, [pc, #48]	@ (8003fac <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f80:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003f82:	f7fe fff9 	bl	8002f78 <HAL_GetTick>
 8003f86:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f88:	e005      	b.n	8003f96 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f8a:	f7fe fff5 	bl	8002f78 <HAL_GetTick>
 8003f8e:	1b00      	subs	r0, r0, r4
 8003f90:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003f94:	d805      	bhi.n	8003fa2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f96:	686b      	ldr	r3, [r5, #4]
 8003f98:	039b      	lsls	r3, r3, #14
 8003f9a:	d5f6      	bpl.n	8003f8a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003f9c:	2000      	movs	r0, #0
}
 8003f9e:	b003      	add	sp, #12
 8003fa0:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003fa2:	2003      	movs	r0, #3
}
 8003fa4:	b003      	add	sp, #12
 8003fa6:	bd30      	pop	{r4, r5, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40007000 	.word	0x40007000

08003fb0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	f000 81e7 	beq.w	8004384 <HAL_RCC_OscConfig+0x3d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb6:	6803      	ldr	r3, [r0, #0]
{
 8003fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbc:	07dd      	lsls	r5, r3, #31
{
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc2:	d535      	bpl.n	8004030 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fc4:	499a      	ldr	r1, [pc, #616]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	688a      	ldr	r2, [r1, #8]
 8003fc8:	f002 020c 	and.w	r2, r2, #12
 8003fcc:	2a04      	cmp	r2, #4
 8003fce:	f000 80e0 	beq.w	8004192 <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd2:	688a      	ldr	r2, [r1, #8]
 8003fd4:	f002 020c 	and.w	r2, r2, #12
 8003fd8:	2a08      	cmp	r2, #8
 8003fda:	f000 80d6 	beq.w	800418a <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fde:	6863      	ldr	r3, [r4, #4]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe4:	d010      	beq.n	8004008 <HAL_RCC_OscConfig+0x58>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80fd 	beq.w	80041e6 <HAL_RCC_OscConfig+0x236>
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff0:	4b8f      	ldr	r3, [pc, #572]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	f000 8185 	beq.w	8004302 <HAL_RCC_OscConfig+0x352>
 8003ff8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004004:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004006:	e004      	b.n	8004012 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004008:	4a89      	ldr	r2, [pc, #548]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004010:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fe ffb1 	bl	8002f78 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4e86      	ldr	r6, [pc, #536]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8004018:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	e005      	b.n	8004028 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fe ffac 	bl	8002f78 <HAL_GetTick>
 8004020:	1b40      	subs	r0, r0, r5
 8004022:	2864      	cmp	r0, #100	@ 0x64
 8004024:	f200 80db 	bhi.w	80041de <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004028:	6833      	ldr	r3, [r6, #0]
 800402a:	039b      	lsls	r3, r3, #14
 800402c:	d5f6      	bpl.n	800401c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	079d      	lsls	r5, r3, #30
 8004032:	d528      	bpl.n	8004086 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004034:	4a7e      	ldr	r2, [pc, #504]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 8004036:	6891      	ldr	r1, [r2, #8]
 8004038:	f011 0f0c 	tst.w	r1, #12
 800403c:	f000 8089 	beq.w	8004152 <HAL_RCC_OscConfig+0x1a2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004040:	6891      	ldr	r1, [r2, #8]
 8004042:	f001 010c 	and.w	r1, r1, #12
 8004046:	2908      	cmp	r1, #8
 8004048:	d07f      	beq.n	800414a <HAL_RCC_OscConfig+0x19a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800404a:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800404c:	4d78      	ldr	r5, [pc, #480]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8103 	beq.w	800425a <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe ff8c 	bl	8002f78 <HAL_GetTick>
 8004060:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004062:	e005      	b.n	8004070 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004064:	f7fe ff88 	bl	8002f78 <HAL_GetTick>
 8004068:	1b80      	subs	r0, r0, r6
 800406a:	2802      	cmp	r0, #2
 800406c:	f200 80b7 	bhi.w	80041de <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	079f      	lsls	r7, r3, #30
 8004074:	d5f6      	bpl.n	8004064 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004076:	682b      	ldr	r3, [r5, #0]
 8004078:	6922      	ldr	r2, [r4, #16]
 800407a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800407e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004082:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	071a      	lsls	r2, r3, #28
 8004088:	d428      	bmi.n	80040dc <HAL_RCC_OscConfig+0x12c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408a:	075e      	lsls	r6, r3, #29
 800408c:	d53d      	bpl.n	800410a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408e:	4b68      	ldr	r3, [pc, #416]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 8004090:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004092:	00d5      	lsls	r5, r2, #3
 8004094:	d477      	bmi.n	8004186 <HAL_RCC_OscConfig+0x1d6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8004098:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800409a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	4e62      	ldr	r6, [pc, #392]	@ (8004234 <HAL_RCC_OscConfig+0x284>)
 80040ac:	6833      	ldr	r3, [r6, #0]
 80040ae:	05d8      	lsls	r0, r3, #23
 80040b0:	f140 8085 	bpl.w	80041be <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	68a3      	ldr	r3, [r4, #8]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	f000 80e1 	beq.w	800427e <HAL_RCC_OscConfig+0x2ce>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a8 	beq.w	8004212 <HAL_RCC_OscConfig+0x262>
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 80040c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040c8:	f000 8123 	beq.w	8004312 <HAL_RCC_OscConfig+0x362>
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80040d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040d4:	f022 0204 	bic.w	r2, r2, #4
 80040d8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040da:	e0d5      	b.n	8004288 <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040dc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80040de:	4d54      	ldr	r5, [pc, #336]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d03f      	beq.n	8004164 <HAL_RCC_OscConfig+0x1b4>
      __HAL_RCC_LSI_ENABLE();
 80040e4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80040ec:	f7fe ff44 	bl	8002f78 <HAL_GetTick>
 80040f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	e004      	b.n	80040fe <HAL_RCC_OscConfig+0x14e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fe ff40 	bl	8002f78 <HAL_GetTick>
 80040f8:	1b80      	subs	r0, r0, r6
 80040fa:	2802      	cmp	r0, #2
 80040fc:	d86f      	bhi.n	80041de <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fe:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004100:	079b      	lsls	r3, r3, #30
 8004102:	d5f7      	bpl.n	80040f4 <HAL_RCC_OscConfig+0x144>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	075e      	lsls	r6, r3, #29
 8004108:	d4c1      	bmi.n	800408e <HAL_RCC_OscConfig+0xde>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410a:	69a3      	ldr	r3, [r4, #24]
 800410c:	b1cb      	cbz	r3, 8004142 <HAL_RCC_OscConfig+0x192>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800410e:	4d48      	ldr	r5, [pc, #288]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 8004110:	68aa      	ldr	r2, [r5, #8]
 8004112:	f002 020c 	and.w	r2, r2, #12
 8004116:	2a08      	cmp	r2, #8
 8004118:	f000 80c9 	beq.w	80042ae <HAL_RCC_OscConfig+0x2fe>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411c:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004124:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004126:	f000 80fc 	beq.w	8004322 <HAL_RCC_OscConfig+0x372>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fe ff25 	bl	8002f78 <HAL_GetTick>
 800412e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004130:	e004      	b.n	800413c <HAL_RCC_OscConfig+0x18c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004132:	f7fe ff21 	bl	8002f78 <HAL_GetTick>
 8004136:	1b00      	subs	r0, r0, r4
 8004138:	2802      	cmp	r0, #2
 800413a:	d850      	bhi.n	80041de <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	019b      	lsls	r3, r3, #6
 8004140:	d4f7      	bmi.n	8004132 <HAL_RCC_OscConfig+0x182>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004142:	2000      	movs	r0, #0
}
 8004144:	b002      	add	sp, #8
 8004146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414a:	6852      	ldr	r2, [r2, #4]
 800414c:	0251      	lsls	r1, r2, #9
 800414e:	f53f af7c 	bmi.w	800404a <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	4a37      	ldr	r2, [pc, #220]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	0792      	lsls	r2, r2, #30
 8004158:	d525      	bpl.n	80041a6 <HAL_RCC_OscConfig+0x1f6>
 800415a:	68e2      	ldr	r2, [r4, #12]
 800415c:	2a01      	cmp	r2, #1
 800415e:	d022      	beq.n	80041a6 <HAL_RCC_OscConfig+0x1f6>
    return HAL_ERROR;
 8004160:	2001      	movs	r0, #1
 8004162:	e7ef      	b.n	8004144 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_LSI_DISABLE();
 8004164:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800416c:	f7fe ff04 	bl	8002f78 <HAL_GetTick>
 8004170:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004172:	e004      	b.n	800417e <HAL_RCC_OscConfig+0x1ce>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004174:	f7fe ff00 	bl	8002f78 <HAL_GetTick>
 8004178:	1b80      	subs	r0, r0, r6
 800417a:	2802      	cmp	r0, #2
 800417c:	d82f      	bhi.n	80041de <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004180:	079f      	lsls	r7, r3, #30
 8004182:	d4f7      	bmi.n	8004174 <HAL_RCC_OscConfig+0x1c4>
 8004184:	e7be      	b.n	8004104 <HAL_RCC_OscConfig+0x154>
  FlagStatus pwrclkchanged = RESET;
 8004186:	2500      	movs	r5, #0
 8004188:	e78f      	b.n	80040aa <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418a:	684a      	ldr	r2, [r1, #4]
 800418c:	0251      	lsls	r1, r2, #9
 800418e:	f57f af26 	bpl.w	8003fde <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004192:	4a27      	ldr	r2, [pc, #156]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	0392      	lsls	r2, r2, #14
 8004198:	f57f af4a 	bpl.w	8004030 <HAL_RCC_OscConfig+0x80>
 800419c:	6862      	ldr	r2, [r4, #4]
 800419e:	2a00      	cmp	r2, #0
 80041a0:	f47f af46 	bne.w	8004030 <HAL_RCC_OscConfig+0x80>
 80041a4:	e7dc      	b.n	8004160 <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a6:	4922      	ldr	r1, [pc, #136]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 80041a8:	6920      	ldr	r0, [r4, #16]
 80041aa:	680a      	ldr	r2, [r1, #0]
 80041ac:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80041b0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80041b4:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b6:	071a      	lsls	r2, r3, #28
 80041b8:	f57f af67 	bpl.w	800408a <HAL_RCC_OscConfig+0xda>
 80041bc:	e78e      	b.n	80040dc <HAL_RCC_OscConfig+0x12c>
      PWR->CR1 |= PWR_CR1_DBP;
 80041be:	6833      	ldr	r3, [r6, #0]
 80041c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041c4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80041c6:	f7fe fed7 	bl	8002f78 <HAL_GetTick>
 80041ca:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041cc:	6833      	ldr	r3, [r6, #0]
 80041ce:	05d9      	lsls	r1, r3, #23
 80041d0:	f53f af70 	bmi.w	80040b4 <HAL_RCC_OscConfig+0x104>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d4:	f7fe fed0 	bl	8002f78 <HAL_GetTick>
 80041d8:	1bc0      	subs	r0, r0, r7
 80041da:	2864      	cmp	r0, #100	@ 0x64
 80041dc:	d9f6      	bls.n	80041cc <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 80041de:	2003      	movs	r0, #3
}
 80041e0:	b002      	add	sp, #8
 80041e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e6:	4d12      	ldr	r5, [pc, #72]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ee:	602b      	str	r3, [r5, #0]
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80041f8:	f7fe febe 	bl	8002f78 <HAL_GetTick>
 80041fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	e004      	b.n	800420a <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004200:	f7fe feba 	bl	8002f78 <HAL_GetTick>
 8004204:	1b80      	subs	r0, r0, r6
 8004206:	2864      	cmp	r0, #100	@ 0x64
 8004208:	d8e9      	bhi.n	80041de <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420a:	682b      	ldr	r3, [r5, #0]
 800420c:	039f      	lsls	r7, r3, #14
 800420e:	d4f7      	bmi.n	8004200 <HAL_RCC_OscConfig+0x250>
 8004210:	e70d      	b.n	800402e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004212:	4e07      	ldr	r6, [pc, #28]	@ (8004230 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004214:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004218:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6733      	str	r3, [r6, #112]	@ 0x70
 8004220:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	6733      	str	r3, [r6, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004228:	f7fe fea6 	bl	8002f78 <HAL_GetTick>
 800422c:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x292>
 8004230:	40023800 	.word	0x40023800
 8004234:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fe fe9e 	bl	8002f78 <HAL_GetTick>
 800423c:	1bc0      	subs	r0, r0, r7
 800423e:	4540      	cmp	r0, r8
 8004240:	d8cd      	bhi.n	80041de <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004242:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004244:	079b      	lsls	r3, r3, #30
 8004246:	d4f7      	bmi.n	8004238 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8004248:	2d00      	cmp	r5, #0
 800424a:	f43f af5e 	beq.w	800410a <HAL_RCC_OscConfig+0x15a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800424e:	4a4e      	ldr	r2, [pc, #312]	@ (8004388 <HAL_RCC_OscConfig+0x3d8>)
 8004250:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004256:	6413      	str	r3, [r2, #64]	@ 0x40
 8004258:	e757      	b.n	800410a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 800425a:	682b      	ldr	r3, [r5, #0]
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004262:	f7fe fe89 	bl	8002f78 <HAL_GetTick>
 8004266:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004268:	e004      	b.n	8004274 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426a:	f7fe fe85 	bl	8002f78 <HAL_GetTick>
 800426e:	1b80      	subs	r0, r0, r6
 8004270:	2802      	cmp	r0, #2
 8004272:	d8b4      	bhi.n	80041de <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	0799      	lsls	r1, r3, #30
 8004278:	d4f7      	bmi.n	800426a <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	e703      	b.n	8004086 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427e:	4a42      	ldr	r2, [pc, #264]	@ (8004388 <HAL_RCC_OscConfig+0x3d8>)
 8004280:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004288:	f7fe fe76 	bl	8002f78 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	4f3e      	ldr	r7, [pc, #248]	@ (8004388 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004292:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004294:	e004      	b.n	80042a0 <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fe fe6f 	bl	8002f78 <HAL_GetTick>
 800429a:	1b80      	subs	r0, r0, r6
 800429c:	4540      	cmp	r0, r8
 800429e:	d89e      	bhi.n	80041de <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042a2:	079a      	lsls	r2, r3, #30
 80042a4:	d5f7      	bpl.n	8004296 <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 80042a6:	2d00      	cmp	r5, #0
 80042a8:	f43f af2f 	beq.w	800410a <HAL_RCC_OscConfig+0x15a>
 80042ac:	e7cf      	b.n	800424e <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ae:	2b01      	cmp	r3, #1
      pll_config = RCC->PLLCFGR;
 80042b0:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b2:	f43f af55 	beq.w	8004160 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ba:	69e1      	ldr	r1, [r4, #28]
 80042bc:	428b      	cmp	r3, r1
 80042be:	f47f af4f 	bne.w	8004160 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042c2:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	6a21      	ldr	r1, [r4, #32]
 80042c8:	428b      	cmp	r3, r1
 80042ca:	f47f af49 	bne.w	8004160 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ce:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80042d4:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042d6:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80042da:	f47f af41 	bne.w	8004160 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042e0:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e8:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80042ec:	f47f af38 	bne.w	8004160 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80042f2:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042f6:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 80042fa:	bf14      	ite	ne
 80042fc:	2001      	movne	r0, #1
 80042fe:	2000      	moveq	r0, #0
 8004300:	e720      	b.n	8004144 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004302:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800430e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004310:	e67f      	b.n	8004012 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004312:	f042 0204 	orr.w	r2, r2, #4
 8004316:	671a      	str	r2, [r3, #112]	@ 0x70
 8004318:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004320:	e7b2      	b.n	8004288 <HAL_RCC_OscConfig+0x2d8>
        tickstart = HAL_GetTick();
 8004322:	f7fe fe29 	bl	8002f78 <HAL_GetTick>
 8004326:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004328:	e005      	b.n	8004336 <HAL_RCC_OscConfig+0x386>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432a:	f7fe fe25 	bl	8002f78 <HAL_GetTick>
 800432e:	1b80      	subs	r0, r0, r6
 8004330:	2802      	cmp	r0, #2
 8004332:	f63f af54 	bhi.w	80041de <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	0199      	lsls	r1, r3, #6
 800433a:	d4f6      	bmi.n	800432a <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800433c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800433e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004340:	0852      	lsrs	r2, r2, #1
 8004342:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004346:	3a01      	subs	r2, #1
 8004348:	430b      	orrs	r3, r1
 800434a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800434c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004350:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004354:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004358:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800435c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800435e:	682b      	ldr	r3, [r5, #0]
 8004360:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004364:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004366:	f7fe fe07 	bl	8002f78 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436a:	4d07      	ldr	r5, [pc, #28]	@ (8004388 <HAL_RCC_OscConfig+0x3d8>)
        tickstart = HAL_GetTick();
 800436c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	e005      	b.n	800437c <HAL_RCC_OscConfig+0x3cc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe fe02 	bl	8002f78 <HAL_GetTick>
 8004374:	1b00      	subs	r0, r0, r4
 8004376:	2802      	cmp	r0, #2
 8004378:	f63f af31 	bhi.w	80041de <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	019a      	lsls	r2, r3, #6
 8004380:	d5f6      	bpl.n	8004370 <HAL_RCC_OscConfig+0x3c0>
 8004382:	e6de      	b.n	8004142 <HAL_RCC_OscConfig+0x192>
    return HAL_ERROR;
 8004384:	2001      	movs	r0, #1
}
 8004386:	4770      	bx	lr
 8004388:	40023800 	.word	0x40023800

0800438c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800438c:	4916      	ldr	r1, [pc, #88]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800438e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004390:	688b      	ldr	r3, [r1, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b04      	cmp	r3, #4
 8004398:	d01b      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x46>
 800439a:	2b08      	cmp	r3, #8
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800439e:	4813      	ldr	r0, [pc, #76]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80043a0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043a4:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043aa:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043ac:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
 80043b0:	d111      	bne.n	80043d6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	480e      	ldr	r0, [pc, #56]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x60>)
 80043b4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80043b8:	fba1 0100 	umull	r0, r1, r1, r0
 80043bc:	f7fc fc84 	bl	8000cc8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043c0:	4b09      	ldr	r3, [pc, #36]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x5c>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80043c8:	3301      	adds	r3, #1
 80043ca:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80043cc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80043d0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d2:	4807      	ldr	r0, [pc, #28]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80043d4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4806      	ldr	r0, [pc, #24]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x64>)
 80043d8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80043dc:	2300      	movs	r3, #0
 80043de:	fba1 0100 	umull	r0, r1, r1, r0
 80043e2:	f7fc fc71 	bl	8000cc8 <__aeabi_uldivmod>
 80043e6:	e7eb      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x34>
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	007a1200 	.word	0x007a1200

080043f4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80043f4:	2800      	cmp	r0, #0
 80043f6:	f000 808c 	beq.w	8004512 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043fa:	4a49      	ldr	r2, [pc, #292]	@ (8004520 <HAL_RCC_ClockConfig+0x12c>)
 80043fc:	6813      	ldr	r3, [r2, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	428b      	cmp	r3, r1
{
 8004404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004408:	4604      	mov	r4, r0
 800440a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	d20c      	bcs.n	8004428 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	f023 030f 	bic.w	r3, r3, #15
 8004414:	430b      	orrs	r3, r1
 8004416:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004418:	6813      	ldr	r3, [r2, #0]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	428b      	cmp	r3, r1
 8004420:	d002      	beq.n	8004428 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004422:	2001      	movs	r0, #1
}
 8004424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	0798      	lsls	r0, r3, #30
 800442c:	d514      	bpl.n	8004458 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442e:	0759      	lsls	r1, r3, #29
 8004430:	d504      	bpl.n	800443c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004432:	493c      	ldr	r1, [pc, #240]	@ (8004524 <HAL_RCC_ClockConfig+0x130>)
 8004434:	688a      	ldr	r2, [r1, #8]
 8004436:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800443a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443c:	071a      	lsls	r2, r3, #28
 800443e:	d504      	bpl.n	800444a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004440:	4938      	ldr	r1, [pc, #224]	@ (8004524 <HAL_RCC_ClockConfig+0x130>)
 8004442:	688a      	ldr	r2, [r1, #8]
 8004444:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8004448:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444a:	4936      	ldr	r1, [pc, #216]	@ (8004524 <HAL_RCC_ClockConfig+0x130>)
 800444c:	68a0      	ldr	r0, [r4, #8]
 800444e:	688a      	ldr	r2, [r1, #8]
 8004450:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004454:	4302      	orrs	r2, r0
 8004456:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004458:	07df      	lsls	r7, r3, #31
 800445a:	d520      	bpl.n	800449e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	4b31      	ldr	r3, [pc, #196]	@ (8004524 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004460:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004464:	d057      	beq.n	8004516 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004466:	2a02      	cmp	r2, #2
 8004468:	d050      	beq.n	800450c <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446a:	0799      	lsls	r1, r3, #30
 800446c:	d5d9      	bpl.n	8004422 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800446e:	4e2d      	ldr	r6, [pc, #180]	@ (8004524 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004470:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004474:	68b3      	ldr	r3, [r6, #8]
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	4313      	orrs	r3, r2
 800447c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800447e:	f7fe fd7b 	bl	8002f78 <HAL_GetTick>
 8004482:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004484:	e004      	b.n	8004490 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004486:	f7fe fd77 	bl	8002f78 <HAL_GetTick>
 800448a:	1bc0      	subs	r0, r0, r7
 800448c:	4540      	cmp	r0, r8
 800448e:	d845      	bhi.n	800451c <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004490:	68b3      	ldr	r3, [r6, #8]
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800449c:	d1f3      	bne.n	8004486 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800449e:	4a20      	ldr	r2, [pc, #128]	@ (8004520 <HAL_RCC_ClockConfig+0x12c>)
 80044a0:	6813      	ldr	r3, [r2, #0]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	42ab      	cmp	r3, r5
 80044a8:	d909      	bls.n	80044be <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	6813      	ldr	r3, [r2, #0]
 80044ac:	f023 030f 	bic.w	r3, r3, #15
 80044b0:	432b      	orrs	r3, r5
 80044b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	42ab      	cmp	r3, r5
 80044bc:	d1b1      	bne.n	8004422 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	075a      	lsls	r2, r3, #29
 80044c2:	d506      	bpl.n	80044d2 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c4:	4917      	ldr	r1, [pc, #92]	@ (8004524 <HAL_RCC_ClockConfig+0x130>)
 80044c6:	68e0      	ldr	r0, [r4, #12]
 80044c8:	688a      	ldr	r2, [r1, #8]
 80044ca:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80044ce:	4302      	orrs	r2, r0
 80044d0:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d2:	071b      	lsls	r3, r3, #28
 80044d4:	d507      	bpl.n	80044e6 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044d6:	4a13      	ldr	r2, [pc, #76]	@ (8004524 <HAL_RCC_ClockConfig+0x130>)
 80044d8:	6921      	ldr	r1, [r4, #16]
 80044da:	6893      	ldr	r3, [r2, #8]
 80044dc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80044e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044e4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044e6:	f7ff ff51 	bl	800438c <HAL_RCC_GetSysClockFreq>
 80044ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004524 <HAL_RCC_ClockConfig+0x130>)
 80044ec:	4c0e      	ldr	r4, [pc, #56]	@ (8004528 <HAL_RCC_ClockConfig+0x134>)
 80044ee:	4603      	mov	r3, r0
 80044f0:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 80044f2:	480e      	ldr	r0, [pc, #56]	@ (800452c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044f4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80044f8:	490d      	ldr	r1, [pc, #52]	@ (8004530 <HAL_RCC_ClockConfig+0x13c>)
  HAL_InitTick(uwTickPrio);
 80044fa:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044fc:	5ca2      	ldrb	r2, [r4, r2]
 80044fe:	40d3      	lsrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8004502:	f7fe fcff 	bl	8002f04 <HAL_InitTick>
  return HAL_OK;
 8004506:	2000      	movs	r0, #0
}
 8004508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450c:	0198      	lsls	r0, r3, #6
 800450e:	d4ae      	bmi.n	800446e <HAL_RCC_ClockConfig+0x7a>
 8004510:	e787      	b.n	8004422 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004512:	2001      	movs	r0, #1
}
 8004514:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004516:	039e      	lsls	r6, r3, #14
 8004518:	d4a9      	bmi.n	800446e <HAL_RCC_ClockConfig+0x7a>
 800451a:	e782      	b.n	8004422 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800451c:	2003      	movs	r0, #3
 800451e:	e781      	b.n	8004424 <HAL_RCC_ClockConfig+0x30>
 8004520:	40023c00 	.word	0x40023c00
 8004524:	40023800 	.word	0x40023800
 8004528:	0800a198 	.word	0x0800a198
 800452c:	20000008 	.word	0x20000008
 8004530:	20000000 	.word	0x20000000

08004534 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004534:	4b04      	ldr	r3, [pc, #16]	@ (8004548 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004536:	4905      	ldr	r1, [pc, #20]	@ (800454c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	4a05      	ldr	r2, [pc, #20]	@ (8004550 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800453c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004540:	6808      	ldr	r0, [r1, #0]
 8004542:	5cd3      	ldrb	r3, [r2, r3]
}
 8004544:	40d8      	lsrs	r0, r3
 8004546:	4770      	bx	lr
 8004548:	40023800 	.word	0x40023800
 800454c:	20000000 	.word	0x20000000
 8004550:	0800a190 	.word	0x0800a190

08004554 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004554:	4b04      	ldr	r3, [pc, #16]	@ (8004568 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004556:	4905      	ldr	r1, [pc, #20]	@ (800456c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4a05      	ldr	r2, [pc, #20]	@ (8004570 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800455c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004560:	6808      	ldr	r0, [r1, #0]
 8004562:	5cd3      	ldrb	r3, [r2, r3]
}
 8004564:	40d8      	lsrs	r0, r3
 8004566:	4770      	bx	lr
 8004568:	40023800 	.word	0x40023800
 800456c:	20000000 	.word	0x20000000
 8004570:	0800a190 	.word	0x0800a190

08004574 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004574:	6803      	ldr	r3, [r0, #0]
{
 8004576:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800457a:	f013 0601 	ands.w	r6, r3, #1
{
 800457e:	b083      	sub	sp, #12
 8004580:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004582:	d00b      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004584:	4aa8      	ldr	r2, [pc, #672]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004586:	6891      	ldr	r1, [r2, #8]
 8004588:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 800458c:	6091      	str	r1, [r2, #8]
 800458e:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8004590:	6891      	ldr	r1, [r2, #8]
 8004592:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004594:	fab6 f686 	clz	r6, r6
 8004598:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800459a:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800459c:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 80045a0:	d010      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a2:	49a1      	ldr	r1, [pc, #644]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80045a4:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80045a6:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045aa:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ae:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80045b2:	ea42 0205 	orr.w	r2, r2, r5
 80045b6:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045ba:	f000 8214 	beq.w	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045be:	fab5 f585 	clz	r5, r5
 80045c2:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045c4:	02df      	lsls	r7, r3, #11
 80045c6:	d510      	bpl.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045c8:	4897      	ldr	r0, [pc, #604]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80045ca:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80045cc:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045d0:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045d4:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80045d8:	ea42 0201 	orr.w	r2, r2, r1
 80045dc:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045e0:	f000 8204 	beq.w	80049ec <HAL_RCCEx_PeriphCLKConfig+0x478>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80045e4:	2900      	cmp	r1, #0
 80045e6:	bf08      	it	eq
 80045e8:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80045ea:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80045ee:	bf18      	it	ne
 80045f0:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045f2:	0698      	lsls	r0, r3, #26
 80045f4:	f100 81b2 	bmi.w	800495c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045f8:	06d9      	lsls	r1, r3, #27
 80045fa:	d50c      	bpl.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045fc:	4a8a      	ldr	r2, [pc, #552]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80045fe:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8004602:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8004606:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800460a:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800460e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004610:	4301      	orrs	r1, r0
 8004612:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004616:	045a      	lsls	r2, r3, #17
 8004618:	d508      	bpl.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800461a:	4983      	ldr	r1, [pc, #524]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800461c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800461e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004622:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004626:	4302      	orrs	r2, r0
 8004628:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800462c:	041f      	lsls	r7, r3, #16
 800462e:	d508      	bpl.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004630:	497d      	ldr	r1, [pc, #500]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004632:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8004634:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004638:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800463c:	4302      	orrs	r2, r0
 800463e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004642:	03d8      	lsls	r0, r3, #15
 8004644:	d508      	bpl.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004646:	4978      	ldr	r1, [pc, #480]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004648:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800464a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800464e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004652:	4302      	orrs	r2, r0
 8004654:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004658:	0399      	lsls	r1, r3, #14
 800465a:	d508      	bpl.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800465c:	4972      	ldr	r1, [pc, #456]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800465e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004660:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004664:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004668:	4302      	orrs	r2, r0
 800466a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800466e:	065a      	lsls	r2, r3, #25
 8004670:	d508      	bpl.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004672:	496d      	ldr	r1, [pc, #436]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004674:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004676:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800467a:	f022 0203 	bic.w	r2, r2, #3
 800467e:	4302      	orrs	r2, r0
 8004680:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004684:	061f      	lsls	r7, r3, #24
 8004686:	d508      	bpl.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004688:	4967      	ldr	r1, [pc, #412]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800468a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800468c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004690:	f022 020c 	bic.w	r2, r2, #12
 8004694:	4302      	orrs	r2, r0
 8004696:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800469a:	05d8      	lsls	r0, r3, #23
 800469c:	d508      	bpl.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800469e:	4962      	ldr	r1, [pc, #392]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80046a0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80046a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80046a6:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80046aa:	4302      	orrs	r2, r0
 80046ac:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046b0:	0599      	lsls	r1, r3, #22
 80046b2:	d508      	bpl.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046b4:	495c      	ldr	r1, [pc, #368]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80046b6:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80046b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80046bc:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80046c0:	4302      	orrs	r2, r0
 80046c2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046c6:	055a      	lsls	r2, r3, #21
 80046c8:	d508      	bpl.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ca:	4957      	ldr	r1, [pc, #348]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80046cc:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80046ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80046d2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80046d6:	4302      	orrs	r2, r0
 80046d8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046dc:	051f      	lsls	r7, r3, #20
 80046de:	d508      	bpl.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046e0:	4951      	ldr	r1, [pc, #324]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80046e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80046e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80046ec:	4302      	orrs	r2, r0
 80046ee:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046f2:	04d8      	lsls	r0, r3, #19
 80046f4:	d508      	bpl.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046f6:	494c      	ldr	r1, [pc, #304]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80046f8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80046fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80046fe:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004702:	4302      	orrs	r2, r0
 8004704:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004708:	0499      	lsls	r1, r3, #18
 800470a:	d508      	bpl.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800470c:	4946      	ldr	r1, [pc, #280]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800470e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004710:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004714:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004718:	4302      	orrs	r2, r0
 800471a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800471e:	025a      	lsls	r2, r3, #9
 8004720:	d508      	bpl.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004722:	4941      	ldr	r1, [pc, #260]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004724:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8004726:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800472a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800472e:	4302      	orrs	r2, r0
 8004730:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004734:	029f      	lsls	r7, r3, #10
 8004736:	d50c      	bpl.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004738:	493b      	ldr	r1, [pc, #236]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800473a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800473c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004740:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004744:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8004748:	bf08      	it	eq
 800474a:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800474c:	4302      	orrs	r2, r0
 800474e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004752:	f013 0f08 	tst.w	r3, #8
 8004756:	bf18      	it	ne
 8004758:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800475a:	0358      	lsls	r0, r3, #13
 800475c:	d508      	bpl.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800475e:	4932      	ldr	r1, [pc, #200]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004760:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004762:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004766:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800476a:	4302      	orrs	r2, r0
 800476c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004770:	0219      	lsls	r1, r3, #8
 8004772:	d46a      	bmi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004774:	2e01      	cmp	r6, #1
 8004776:	d001      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004778:	019a      	lsls	r2, r3, #6
 800477a:	d560      	bpl.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800477c:	4e2a      	ldr	r6, [pc, #168]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800477e:	6833      	ldr	r3, [r6, #0]
 8004780:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004784:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004786:	f7fe fbf7 	bl	8002f78 <HAL_GetTick>
 800478a:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800478c:	e005      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800478e:	f7fe fbf3 	bl	8002f78 <HAL_GetTick>
 8004792:	1bc3      	subs	r3, r0, r7
 8004794:	2b64      	cmp	r3, #100	@ 0x64
 8004796:	f200 80dd 	bhi.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800479a:	6833      	ldr	r3, [r6, #0]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	d4f6      	bmi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x21a>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	07df      	lsls	r7, r3, #31
 80047a4:	d512      	bpl.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x258>
 80047a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80047a8:	b982      	cbnz	r2, 80047cc <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047aa:	f8d6 2084 	ldr.w	r2, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047ae:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047b2:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80047b6:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80047ba:	430a      	orrs	r2, r1
 80047bc:	6861      	ldr	r1, [r4, #4]
 80047be:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80047c2:	68a1      	ldr	r1, [r4, #8]
 80047c4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80047c8:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047cc:	031e      	lsls	r6, r3, #12
 80047ce:	d504      	bpl.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x266>
 80047d0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80047d2:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80047d6:	f000 811a 	beq.w	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80047da:	02d8      	lsls	r0, r3, #11
 80047dc:	d504      	bpl.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047de:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80047e0:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 80047e4:	f000 8113 	beq.w	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x49a>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047e8:	01d9      	lsls	r1, r3, #7
 80047ea:	d511      	bpl.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047ec:	490e      	ldr	r1, [pc, #56]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80047ee:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047f2:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047f6:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 80047fa:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80047fe:	4302      	orrs	r2, r0
 8004800:	6860      	ldr	r0, [r4, #4]
 8004802:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004806:	6920      	ldr	r0, [r4, #16]
 8004808:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800480c:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004810:	019a      	lsls	r2, r3, #6
 8004812:	f100 80ed 	bmi.w	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004816:	4e04      	ldr	r6, [pc, #16]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004818:	6833      	ldr	r3, [r6, #0]
 800481a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800481e:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004820:	f7fe fbaa 	bl	8002f78 <HAL_GetTick>
 8004824:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004826:	e007      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004828:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800482c:	f7fe fba4 	bl	8002f78 <HAL_GetTick>
 8004830:	1bc0      	subs	r0, r0, r7
 8004832:	2864      	cmp	r0, #100	@ 0x64
 8004834:	f200 808e 	bhi.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	d5f6      	bpl.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800483e:	2d01      	cmp	r5, #1
 8004840:	d00e      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004842:	2000      	movs	r0, #0
}
 8004844:	b003      	add	sp, #12
 8004846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800484a:	4991      	ldr	r1, [pc, #580]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800484c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8004850:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004854:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004858:	4302      	orrs	r2, r0
 800485a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
 800485e:	e789      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_PLLSAI_DISABLE();
 8004860:	4d8b      	ldr	r5, [pc, #556]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004862:	682b      	ldr	r3, [r5, #0]
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004868:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800486a:	f7fe fb85 	bl	8002f78 <HAL_GetTick>
 800486e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004870:	e004      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x308>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004872:	f7fe fb81 	bl	8002f78 <HAL_GetTick>
 8004876:	1b80      	subs	r0, r0, r6
 8004878:	2864      	cmp	r0, #100	@ 0x64
 800487a:	d86b      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	009f      	lsls	r7, r3, #2
 8004880:	d4f7      	bmi.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	031d      	lsls	r5, r3, #12
 8004886:	f140 80fb 	bpl.w	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800488a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800488c:	2a00      	cmp	r2, #0
 800488e:	f040 80f7 	bne.w	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004892:	497f      	ldr	r1, [pc, #508]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004894:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004898:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800489c:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80048a0:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80048a4:	4302      	orrs	r2, r0
 80048a6:	6960      	ldr	r0, [r4, #20]
 80048a8:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80048ac:	69a0      	ldr	r0, [r4, #24]
 80048ae:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80048b2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048b6:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 80048ba:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80048bc:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80048c0:	3801      	subs	r0, #1
 80048c2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80048c6:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048ca:	0299      	lsls	r1, r3, #10
 80048cc:	d515      	bpl.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x386>
 80048ce:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80048d0:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 80048d4:	d111      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x386>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048d6:	496e      	ldr	r1, [pc, #440]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80048d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048dc:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048e0:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 80048e4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80048e8:	4302      	orrs	r2, r0
 80048ea:	6960      	ldr	r0, [r4, #20]
 80048ec:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80048f0:	6a20      	ldr	r0, [r4, #32]
 80048f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80048f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048fa:	071a      	lsls	r2, r3, #28
 80048fc:	d519      	bpl.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048fe:	4a64      	ldr	r2, [pc, #400]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004900:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004902:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004906:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800490a:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800490e:	69e0      	ldr	r0, [r4, #28]
 8004910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004914:	430b      	orrs	r3, r1
 8004916:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800491a:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800491e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004922:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004926:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004928:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800492c:	430b      	orrs	r3, r1
 800492e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004932:	4c57      	ldr	r4, [pc, #348]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800493c:	f7fe fb1c 	bl	8002f78 <HAL_GetTick>
 8004940:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f53f af7c 	bmi.w	8004842 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800494a:	f7fe fb15 	bl	8002f78 <HAL_GetTick>
 800494e:	1b40      	subs	r0, r0, r5
 8004950:	2864      	cmp	r0, #100	@ 0x64
 8004952:	d9f6      	bls.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        return HAL_TIMEOUT;
 8004954:	2003      	movs	r0, #3
}
 8004956:	b003      	add	sp, #12
 8004958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800495c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    PWR->CR1 |= PWR_CR1_DBP;
 800495e:	4f4d      	ldr	r7, [pc, #308]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x520>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004962:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004966:	641a      	str	r2, [r3, #64]	@ 0x40
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004978:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800497a:	f7fe fafd 	bl	8002f78 <HAL_GetTick>
 800497e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004980:	e005      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004982:	f7fe faf9 	bl	8002f78 <HAL_GetTick>
 8004986:	eba0 0008 	sub.w	r0, r0, r8
 800498a:	2864      	cmp	r0, #100	@ 0x64
 800498c:	d8e2      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	05d9      	lsls	r1, r3, #23
 8004992:	d5f6      	bpl.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004994:	4f3e      	ldr	r7, [pc, #248]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004996:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004998:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800499a:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 800499e:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 80049a2:	d010      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80049a4:	428a      	cmp	r2, r1
 80049a6:	d00e      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80049aa:	6f38      	ldr	r0, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80049b0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80049b4:	6738      	str	r0, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049b6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80049b8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80049bc:	6738      	str	r0, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 80049be:	673a      	str	r2, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049c0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80049c2:	07d2      	lsls	r2, r2, #31
 80049c4:	d448      	bmi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c6:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 80049ca:	d03c      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80049cc:	4930      	ldr	r1, [pc, #192]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80049ce:	688a      	ldr	r2, [r1, #8]
 80049d0:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80049d4:	608a      	str	r2, [r1, #8]
 80049d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80049d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049dc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80049de:	430b      	orrs	r3, r1
 80049e0:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	e608      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 80049e6:	2500      	movs	r5, #0
      plli2sused = 1;
 80049e8:	2601      	movs	r6, #1
 80049ea:	e5eb      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 80049ec:	2601      	movs	r6, #1
 80049ee:	e5fc      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	6861      	ldr	r1, [r4, #4]
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	68e2      	ldr	r2, [r4, #12]
 80049f8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80049fc:	68a1      	ldr	r1, [r4, #8]
 80049fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004a02:	4a23      	ldr	r2, [pc, #140]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004a04:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004a08:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8004a0c:	e703      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a0e:	4920      	ldr	r1, [pc, #128]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004a10:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a14:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a18:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8004a1c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004a20:	4302      	orrs	r2, r0
 8004a22:	6860      	ldr	r0, [r4, #4]
 8004a24:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004a28:	68e0      	ldr	r0, [r4, #12]
 8004a2a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004a2e:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a32:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8004a36:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004a38:	f020 001f 	bic.w	r0, r0, #31
 8004a3c:	3a01      	subs	r2, #1
 8004a3e:	4302      	orrs	r2, r0
 8004a40:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 8004a44:	e6d0      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a46:	4812      	ldr	r0, [pc, #72]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004a48:	4913      	ldr	r1, [pc, #76]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8004a4a:	6882      	ldr	r2, [r0, #8]
 8004a4c:	4019      	ands	r1, r3
 8004a4e:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8004a52:	430a      	orrs	r2, r1
 8004a54:	6082      	str	r2, [r0, #8]
 8004a56:	e7be      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x462>
        tickstart = HAL_GetTick();
 8004a58:	f7fe fa8e 	bl	8002f78 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004a60:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a62:	e006      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a64:	f7fe fa88 	bl	8002f78 <HAL_GetTick>
 8004a68:	eba0 0008 	sub.w	r0, r0, r8
 8004a6c:	4548      	cmp	r0, r9
 8004a6e:	f63f af71 	bhi.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a74:	0798      	lsls	r0, r3, #30
 8004a76:	d5f5      	bpl.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004a7a:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8004a7e:	e7a2      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a80:	02d8      	lsls	r0, r3, #11
 8004a82:	f57f af22 	bpl.w	80048ca <HAL_RCCEx_PeriphCLKConfig+0x356>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a86:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	f47f af1e 	bne.w	80048ca <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004a8e:	e700      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40007000 	.word	0x40007000
 8004a98:	0ffffcff 	.word	0x0ffffcff

08004a9c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a9e:	4a16      	ldr	r2, [pc, #88]	@ (8004af8 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
{
 8004aa4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004aa8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004aaa:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004aac:	6985      	ldr	r5, [r0, #24]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aae:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab2:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	680d      	ldr	r5, [r1, #0]
 8004ab6:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ab8:	688d      	ldr	r5, [r1, #8]
 8004aba:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004abc:	4d0f      	ldr	r5, [pc, #60]	@ (8004afc <TIM_OC1_SetConfig+0x60>)
 8004abe:	42a8      	cmp	r0, r5
 8004ac0:	d00a      	beq.n	8004ad8 <TIM_OC1_SetConfig+0x3c>
 8004ac2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004ac6:	42a8      	cmp	r0, r5
 8004ac8:	d006      	beq.n	8004ad8 <TIM_OC1_SetConfig+0x3c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aca:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004acc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ace:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad0:	6341      	str	r1, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad2:	6203      	str	r3, [r0, #32]
}
 8004ad4:	bc70      	pop	{r4, r5, r6}
 8004ad6:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004ad8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ada:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ade:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8004ae2:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ae4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ae8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aec:	ea46 0c05 	orr.w	ip, r6, r5
 8004af0:	ea4c 0404 	orr.w	r4, ip, r4
 8004af4:	e7e9      	b.n	8004aca <TIM_OC1_SetConfig+0x2e>
 8004af6:	bf00      	nop
 8004af8:	fffeff8c 	.word	0xfffeff8c
 8004afc:	40010000 	.word	0x40010000

08004b00 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b00:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b02:	4a17      	ldr	r2, [pc, #92]	@ (8004b60 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
{
 8004b08:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004b0c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004b0e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004b10:	69c5      	ldr	r5, [r0, #28]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b12:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b16:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8004b18:	680d      	ldr	r5, [r1, #0]
 8004b1a:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b1c:	688d      	ldr	r5, [r1, #8]
 8004b1e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b22:	4d10      	ldr	r5, [pc, #64]	@ (8004b64 <TIM_OC3_SetConfig+0x64>)
 8004b24:	42a8      	cmp	r0, r5
 8004b26:	d00a      	beq.n	8004b3e <TIM_OC3_SetConfig+0x3e>
 8004b28:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004b2c:	42a8      	cmp	r0, r5
 8004b2e:	d006      	beq.n	8004b3e <TIM_OC3_SetConfig+0x3e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b30:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b32:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004b34:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004b36:	63c1      	str	r1, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b38:	6203      	str	r3, [r0, #32]
}
 8004b3a:	bc70      	pop	{r4, r5, r6}
 8004b3c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b3e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b44:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b48:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b4c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b54:	ea46 0c05 	orr.w	ip, r6, r5
 8004b58:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
 8004b5c:	e7e8      	b.n	8004b30 <TIM_OC3_SetConfig+0x30>
 8004b5e:	bf00      	nop
 8004b60:	fffeff8c 	.word	0xfffeff8c
 8004b64:	40010000 	.word	0x40010000

08004b68 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b68:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b6a:	4a12      	ldr	r2, [pc, #72]	@ (8004bb4 <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 8004b70:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b72:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004b74:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004b76:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004b78:	69c5      	ldr	r5, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b7e:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b80:	680d      	ldr	r5, [r1, #0]
 8004b82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b86:	688d      	ldr	r5, [r1, #8]
 8004b88:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8c:	4d0a      	ldr	r5, [pc, #40]	@ (8004bb8 <TIM_OC4_SetConfig+0x50>)
 8004b8e:	42a8      	cmp	r0, r5
 8004b90:	d00a      	beq.n	8004ba8 <TIM_OC4_SetConfig+0x40>
 8004b92:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004b96:	42a8      	cmp	r0, r5
 8004b98:	d006      	beq.n	8004ba8 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b9a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b9c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004b9e:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba0:	6401      	str	r1, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	6203      	str	r3, [r0, #32]
}
 8004ba4:	bc30      	pop	{r4, r5}
 8004ba6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ba8:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bac:	694d      	ldr	r5, [r1, #20]
 8004bae:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004bb2:	e7f2      	b.n	8004b9a <TIM_OC4_SetConfig+0x32>
 8004bb4:	feff8cff 	.word	0xfeff8cff
 8004bb8:	40010000 	.word	0x40010000

08004bbc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bbc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bbe:	4a12      	ldr	r2, [pc, #72]	@ (8004c08 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
{
 8004bc4:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bc6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004bc8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004bca:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8004bcc:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bce:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bd2:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	680d      	ldr	r5, [r1, #0]
 8004bd6:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bd8:	688d      	ldr	r5, [r1, #8]
 8004bda:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bde:	4d0b      	ldr	r5, [pc, #44]	@ (8004c0c <TIM_OC5_SetConfig+0x50>)
 8004be0:	42a8      	cmp	r0, r5
 8004be2:	d00a      	beq.n	8004bfa <TIM_OC5_SetConfig+0x3e>
 8004be4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004be8:	42a8      	cmp	r0, r5
 8004bea:	d006      	beq.n	8004bfa <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bec:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004bee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004bf0:	6542      	str	r2, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004bf2:	6581      	str	r1, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf4:	6203      	str	r3, [r0, #32]
}
 8004bf6:	bc30      	pop	{r4, r5}
 8004bf8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bfa:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bfe:	694d      	ldr	r5, [r1, #20]
 8004c00:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8004c04:	e7f2      	b.n	8004bec <TIM_OC5_SetConfig+0x30>
 8004c06:	bf00      	nop
 8004c08:	fffeff8f 	.word	0xfffeff8f
 8004c0c:	40010000 	.word	0x40010000

08004c10 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c10:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c12:	4a12      	ldr	r2, [pc, #72]	@ (8004c5c <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
{
 8004c18:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c1a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004c1c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004c1e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8004c20:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c26:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c28:	680d      	ldr	r5, [r1, #0]
 8004c2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c2e:	688d      	ldr	r5, [r1, #8]
 8004c30:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c34:	4d0a      	ldr	r5, [pc, #40]	@ (8004c60 <TIM_OC6_SetConfig+0x50>)
 8004c36:	42a8      	cmp	r0, r5
 8004c38:	d00a      	beq.n	8004c50 <TIM_OC6_SetConfig+0x40>
 8004c3a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004c3e:	42a8      	cmp	r0, r5
 8004c40:	d006      	beq.n	8004c50 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c42:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004c44:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004c46:	6542      	str	r2, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004c48:	65c1      	str	r1, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4a:	6203      	str	r3, [r0, #32]
}
 8004c4c:	bc30      	pop	{r4, r5}
 8004c4e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c50:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c54:	694d      	ldr	r5, [r1, #20]
 8004c56:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8004c5a:	e7f2      	b.n	8004c42 <TIM_OC6_SetConfig+0x32>
 8004c5c:	feff8fff 	.word	0xfeff8fff
 8004c60:	40010000 	.word	0x40010000

08004c64 <TIM_SlaveTimer_SetConfig.constprop.0>:
  * @brief  Slave Timer configuration function
  * @param  htim TIM handle
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 8004c64:	b430      	push	{r4, r5}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c66:	6804      	ldr	r4, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004c68:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004c6a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004c6c:	4b34      	ldr	r3, [pc, #208]	@ (8004d40 <TIM_SlaveTimer_SetConfig.constprop.0+0xdc>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004c6e:	2850      	cmp	r0, #80	@ 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c70:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004c74:	ea42 0200 	orr.w	r2, r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004c78:	ea03 0302 	and.w	r3, r3, r2
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004c7c:	680a      	ldr	r2, [r1, #0]
 8004c7e:	ea43 0302 	orr.w	r3, r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8004c82:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004c84:	d022      	beq.n	8004ccc <TIM_SlaveTimer_SetConfig.constprop.0+0x68>
 8004c86:	d911      	bls.n	8004cac <TIM_SlaveTimer_SetConfig.constprop.0+0x48>
 8004c88:	2860      	cmp	r0, #96	@ 0x60
 8004c8a:	d031      	beq.n	8004cf0 <TIM_SlaveTimer_SetConfig.constprop.0+0x8c>
 8004c8c:	2870      	cmp	r0, #112	@ 0x70
 8004c8e:	d11a      	bne.n	8004cc6 <TIM_SlaveTimer_SetConfig.constprop.0+0x62>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c90:	68a2      	ldr	r2, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c92:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
 8004c96:	6909      	ldr	r1, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c98:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c9c:	4303      	orrs	r3, r0
 8004c9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004ca2:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2000      	movs	r0, #0
}
 8004ca8:	bc30      	pop	{r4, r5}
 8004caa:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004cac:	2840      	cmp	r0, #64	@ 0x40
 8004cae:	d032      	beq.n	8004d16 <TIM_SlaveTimer_SetConfig.constprop.0+0xb2>
 8004cb0:	d809      	bhi.n	8004cc6 <TIM_SlaveTimer_SetConfig.constprop.0+0x62>
 8004cb2:	2820      	cmp	r0, #32
 8004cb4:	d0f7      	beq.n	8004ca6 <TIM_SlaveTimer_SetConfig.constprop.0+0x42>
 8004cb6:	d83e      	bhi.n	8004d36 <TIM_SlaveTimer_SetConfig.constprop.0+0xd2>
 8004cb8:	f030 0310 	bics.w	r3, r0, #16
 8004cbc:	bf14      	ite	ne
 8004cbe:	2001      	movne	r0, #1
 8004cc0:	2000      	moveq	r0, #0
}
 8004cc2:	bc30      	pop	{r4, r5}
 8004cc4:	4770      	bx	lr
        return HAL_ERROR;
 8004cc6:	2001      	movs	r0, #1
}
 8004cc8:	bc30      	pop	{r4, r5}
 8004cca:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004ccc:	6a20      	ldr	r0, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cce:	6a23      	ldr	r3, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 8004cd0:	688a      	ldr	r2, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
                               sSlaveConfig->TriggerFilter);
 8004cd6:	690d      	ldr	r5, [r1, #16]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd8:	f020 010a 	bic.w	r1, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cdc:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cde:	69a3      	ldr	r3, [r4, #24]
  tmpccer |= TIM_ICPolarity;
 8004ce0:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ce6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004cea:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004cec:	6222      	str	r2, [r4, #32]
}
 8004cee:	e7da      	b.n	8004ca6 <TIM_SlaveTimer_SetConfig.constprop.0+0x42>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf0:	6a23      	ldr	r3, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 8004cf2:	6888      	ldr	r0, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf4:	f023 0310 	bic.w	r3, r3, #16
                               sSlaveConfig->TriggerFilter);
 8004cf8:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfa:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfc:	69a2      	ldr	r2, [r4, #24]
  tmpccer = TIMx->CCER;
 8004cfe:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d00:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d08:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d0c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004d10:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004d12:	6223      	str	r3, [r4, #32]
}
 8004d14:	e7c7      	b.n	8004ca6 <TIM_SlaveTimer_SetConfig.constprop.0+0x42>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d16:	2a05      	cmp	r2, #5
 8004d18:	d0d5      	beq.n	8004cc6 <TIM_SlaveTimer_SetConfig.constprop.0+0x62>
      tmpccer = htim->Instance->CCER;
 8004d1a:	6a22      	ldr	r2, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d1c:	6a23      	ldr	r3, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d1e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	6223      	str	r3, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004d26:	69a3      	ldr	r3, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d2c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004d30:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004d32:	6222      	str	r2, [r4, #32]
      break;
 8004d34:	e7b7      	b.n	8004ca6 <TIM_SlaveTimer_SetConfig.constprop.0+0x42>
  switch (sSlaveConfig->InputTrigger)
 8004d36:	3830      	subs	r0, #48	@ 0x30
 8004d38:	bf18      	it	ne
 8004d3a:	2001      	movne	r0, #1
 8004d3c:	e7c1      	b.n	8004cc2 <TIM_SlaveTimer_SetConfig.constprop.0+0x5e>
 8004d3e:	bf00      	nop
 8004d40:	fffefff8 	.word	0xfffefff8

08004d44 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d139      	bne.n	8004dc0 <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4c:	6802      	ldr	r2, [r0, #0]
 8004d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc4 <HAL_TIM_Base_Start+0x80>)
 8004d50:	491d      	ldr	r1, [pc, #116]	@ (8004dc8 <HAL_TIM_Base_Start+0x84>)
 8004d52:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004d56:	bf18      	it	ne
 8004d58:	429a      	cmpne	r2, r3
{
 8004d5a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5c:	bf0c      	ite	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	2300      	movne	r3, #0
 8004d62:	4d1a      	ldr	r5, [pc, #104]	@ (8004dcc <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d66:	42aa      	cmp	r2, r5
 8004d68:	bf08      	it	eq
 8004d6a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6e:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d72:	4c17      	ldr	r4, [pc, #92]	@ (8004dd0 <HAL_TIM_Base_Start+0x8c>)
 8004d74:	428a      	cmp	r2, r1
 8004d76:	bf08      	it	eq
 8004d78:	f043 0301 	orreq.w	r3, r3, #1
 8004d7c:	4815      	ldr	r0, [pc, #84]	@ (8004dd4 <HAL_TIM_Base_Start+0x90>)
 8004d7e:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
 8004d82:	42a2      	cmp	r2, r4
 8004d84:	bf08      	it	eq
 8004d86:	f043 0301 	orreq.w	r3, r3, #1
 8004d8a:	4282      	cmp	r2, r0
 8004d8c:	bf08      	it	eq
 8004d8e:	f043 0301 	orreq.w	r3, r3, #1
 8004d92:	428a      	cmp	r2, r1
 8004d94:	bf08      	it	eq
 8004d96:	f043 0301 	orreq.w	r3, r3, #1
 8004d9a:	b913      	cbnz	r3, 8004da2 <HAL_TIM_Base_Start+0x5e>
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd8 <HAL_TIM_Base_Start+0x94>)
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d107      	bne.n	8004db2 <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da2:	6891      	ldr	r1, [r2, #8]
 8004da4:	4b0d      	ldr	r3, [pc, #52]	@ (8004ddc <HAL_TIM_Base_Start+0x98>)
 8004da6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da8:	2b06      	cmp	r3, #6
 8004daa:	d006      	beq.n	8004dba <HAL_TIM_Base_Start+0x76>
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004dba:	2000      	movs	r0, #0
}
 8004dbc:	bc30      	pop	{r4, r5}
 8004dbe:	4770      	bx	lr
    return HAL_ERROR;
 8004dc0:	2001      	movs	r0, #1
}
 8004dc2:	4770      	bx	lr
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40010400 	.word	0x40010400
 8004dd8:	40001800 	.word	0x40001800
 8004ddc:	00010007 	.word	0x00010007

08004de0 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004de0:	2910      	cmp	r1, #16
 8004de2:	d80a      	bhi.n	8004dfa <HAL_TIM_OC_Start+0x1a>
 8004de4:	e8df f001 	tbb	[pc, r1]
 8004de8:	09090919 	.word	0x09090919
 8004dec:	0909094a 	.word	0x0909094a
 8004df0:	09090952 	.word	0x09090952
 8004df4:	0909095a 	.word	0x0909095a
 8004df8:	62          	.byte	0x62
 8004df9:	00          	.byte	0x00
 8004dfa:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d160      	bne.n	8004ec4 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e02:	1f0b      	subs	r3, r1, #4
 8004e04:	2b0c      	cmp	r3, #12
 8004e06:	d859      	bhi.n	8004ebc <HAL_TIM_OC_Start+0xdc>
 8004e08:	e8df f003 	tbb	[pc, r3]
 8004e0c:	5858583c 	.word	0x5858583c
 8004e10:	58585844 	.word	0x58585844
 8004e14:	5858584c 	.word	0x5858584c
 8004e18:	54          	.byte	0x54
 8004e19:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e1a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d150      	bne.n	8004ec4 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e22:	2302      	movs	r3, #2
 8004e24:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e28:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e2a:	f001 011f 	and.w	r1, r1, #31
 8004e2e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e30:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e32:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8004e34:	ea20 0002 	bic.w	r0, r0, r2
{
 8004e38:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8004e3a:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e3c:	4c2f      	ldr	r4, [pc, #188]	@ (8004efc <HAL_TIM_OC_Start+0x11c>)

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e3e:	6a19      	ldr	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e40:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e42:	ea42 0201 	orr.w	r2, r2, r1
 8004e46:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e48:	d03e      	beq.n	8004ec8 <HAL_TIM_OC_Start+0xe8>
 8004e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f00 <HAL_TIM_OC_Start+0x120>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d03b      	beq.n	8004ec8 <HAL_TIM_OC_Start+0xe8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e54:	d002      	beq.n	8004e5c <HAL_TIM_OC_Start+0x7c>
 8004e56:	4a2b      	ldr	r2, [pc, #172]	@ (8004f04 <HAL_TIM_OC_Start+0x124>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d13a      	bne.n	8004ed2 <HAL_TIM_OC_Start+0xf2>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e5c:	6899      	ldr	r1, [r3, #8]
 8004e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f08 <HAL_TIM_OC_Start+0x128>)
 8004e60:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e62:	2a06      	cmp	r2, #6
 8004e64:	d006      	beq.n	8004e74 <HAL_TIM_OC_Start+0x94>
 8004e66:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004e6a:	d003      	beq.n	8004e74 <HAL_TIM_OC_Start+0x94>
      __HAL_TIM_ENABLE(htim);
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004e74:	2000      	movs	r0, #0
}
 8004e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e7a:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e7c:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d11f      	bne.n	8004ec4 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e84:	2302      	movs	r3, #2
 8004e86:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8004e8a:	e7cd      	b.n	8004e28 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e8c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d117      	bne.n	8004ec4 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e94:	2302      	movs	r3, #2
 8004e96:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8004e9a:	e7c5      	b.n	8004e28 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e9c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d10f      	bne.n	8004ec4 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8004eaa:	e7bd      	b.n	8004e28 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eac:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d107      	bne.n	8004ec4 <HAL_TIM_OC_Start+0xe4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 8004eba:	e7b5      	b.n	8004e28 <HAL_TIM_OC_Start+0x48>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 8004ec2:	e7b1      	b.n	8004e28 <HAL_TIM_OC_Start+0x48>
    return HAL_ERROR;
 8004ec4:	2001      	movs	r0, #1
}
 8004ec6:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8004ec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed0:	e7c4      	b.n	8004e5c <HAL_TIM_OC_Start+0x7c>
 8004ed2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ed6:	480d      	ldr	r0, [pc, #52]	@ (8004f0c <HAL_TIM_OC_Start+0x12c>)
 8004ed8:	490d      	ldr	r1, [pc, #52]	@ (8004f10 <HAL_TIM_OC_Start+0x130>)
 8004eda:	4283      	cmp	r3, r0
 8004edc:	bf18      	it	ne
 8004ede:	4293      	cmpne	r3, r2
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2201      	moveq	r2, #1
 8004ee4:	2200      	movne	r2, #0
 8004ee6:	428b      	cmp	r3, r1
 8004ee8:	bf08      	it	eq
 8004eea:	f042 0201 	orreq.w	r2, r2, #1
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	d1b4      	bne.n	8004e5c <HAL_TIM_OC_Start+0x7c>
 8004ef2:	4a08      	ldr	r2, [pc, #32]	@ (8004f14 <HAL_TIM_OC_Start+0x134>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d1b9      	bne.n	8004e6c <HAL_TIM_OC_Start+0x8c>
 8004ef8:	e7b0      	b.n	8004e5c <HAL_TIM_OC_Start+0x7c>
 8004efa:	bf00      	nop
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40010400 	.word	0x40010400
 8004f04:	40000400 	.word	0x40000400
 8004f08:	00010007 	.word	0x00010007
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40001800 	.word	0x40001800

08004f18 <HAL_TIM_OC_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f18:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f1a:	f04f 0c01 	mov.w	ip, #1
{
 8004f1e:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f20:	f001 041f 	and.w	r4, r1, #31
  TIMx->CCER &= ~tmp;
 8004f24:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f26:	fa0c fc04 	lsl.w	ip, ip, r4
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f2a:	4c2f      	ldr	r4, [pc, #188]	@ (8004fe8 <HAL_TIM_OC_Stop+0xd0>)
  TIMx->CCER &= ~tmp;
 8004f2c:	ea22 020c 	bic.w	r2, r2, ip
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f30:	42a3      	cmp	r3, r4
  TIMx->CCER &= ~tmp;
 8004f32:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f38:	d01d      	beq.n	8004f76 <HAL_TIM_OC_Stop+0x5e>
 8004f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004fec <HAL_TIM_OC_Stop+0xd4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d01a      	beq.n	8004f76 <HAL_TIM_OC_Stop+0x5e>
  __HAL_TIM_DISABLE(htim);
 8004f40:	6a1c      	ldr	r4, [r3, #32]
 8004f42:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004f46:	4214      	tst	r4, r2
 8004f48:	d108      	bne.n	8004f5c <HAL_TIM_OC_Stop+0x44>
 8004f4a:	6a1c      	ldr	r4, [r3, #32]
 8004f4c:	f240 4244 	movw	r2, #1092	@ 0x444
 8004f50:	4214      	tst	r4, r2
 8004f52:	d103      	bne.n	8004f5c <HAL_TIM_OC_Stop+0x44>
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f5c:	2910      	cmp	r1, #16
 8004f5e:	d819      	bhi.n	8004f94 <HAL_TIM_OC_Stop+0x7c>
 8004f60:	e8df f001 	tbb	[pc, r1]
 8004f64:	18181826 	.word	0x18181826
 8004f68:	1818182d 	.word	0x1818182d
 8004f6c:	18181834 	.word	0x18181834
 8004f70:	1818183b 	.word	0x1818183b
 8004f74:	1f          	.byte	0x1f
 8004f75:	00          	.byte	0x00
    __HAL_TIM_MOE_DISABLE(htim);
 8004f76:	6a1c      	ldr	r4, [r3, #32]
 8004f78:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004f7c:	4214      	tst	r4, r2
 8004f7e:	d1df      	bne.n	8004f40 <HAL_TIM_OC_Stop+0x28>
 8004f80:	6a1c      	ldr	r4, [r3, #32]
 8004f82:	f240 4244 	movw	r2, #1092	@ 0x444
 8004f86:	4214      	tst	r4, r2
 8004f88:	d1da      	bne.n	8004f40 <HAL_TIM_OC_Stop+0x28>
 8004f8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f90:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f92:	e7d5      	b.n	8004f40 <HAL_TIM_OC_Stop+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	2301      	movs	r3, #1
 8004f96:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
}
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fa0:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
}
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fae:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
}
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fbc:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
}
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fca:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd8:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400

08004ff0 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004ff0:	f7ff bef6 	b.w	8004de0 <HAL_TIM_OC_Start>

08004ff4 <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004ff4:	f7ff bf90 	b.w	8004f18 <HAL_TIM_OC_Stop>

08004ff8 <HAL_TIM_SlaveConfigSynchro>:
{
 8004ff8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004ffa:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d01e      	beq.n	8005040 <HAL_TIM_SlaveConfigSynchro+0x48>
 8005002:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	2302      	movs	r3, #2
 8005006:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005008:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005010:	f7ff fe28 	bl	8004c64 <TIM_SlaveTimer_SetConfig.constprop.0>
 8005014:	b968      	cbnz	r0, 8005032 <HAL_TIM_SlaveConfigSynchro+0x3a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005026:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005028:	f884 503d 	strb.w	r5, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800502c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8005030:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(htim);
 8005032:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005034:	4628      	mov	r0, r5
    htim->State = HAL_TIM_STATE_READY;
 8005036:	f884 503d 	strb.w	r5, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800503a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800503e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005040:	2002      	movs	r0, #2
}
 8005042:	bd38      	pop	{r3, r4, r5, pc}

08005044 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop

08005048 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop

0800504c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop

08005050 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop

08005054 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop

08005058 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005058:	6803      	ldr	r3, [r0, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	0791      	lsls	r1, r2, #30
{
 800505e:	b510      	push	{r4, lr}
 8005060:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005062:	d502      	bpl.n	800506a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	0792      	lsls	r2, r2, #30
 8005068:	d468      	bmi.n	800513c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	0752      	lsls	r2, r2, #29
 800506e:	d502      	bpl.n	8005076 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	0750      	lsls	r0, r2, #29
 8005074:	d44f      	bmi.n	8005116 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	0711      	lsls	r1, r2, #28
 800507a:	d502      	bpl.n	8005082 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	0712      	lsls	r2, r2, #28
 8005080:	d437      	bmi.n	80050f2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	06d0      	lsls	r0, r2, #27
 8005086:	d502      	bpl.n	800508e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	06d1      	lsls	r1, r2, #27
 800508c:	d41e      	bmi.n	80050cc <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	07d2      	lsls	r2, r2, #31
 8005092:	d502      	bpl.n	800509a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	07d0      	lsls	r0, r2, #31
 8005098:	d469      	bmi.n	800516e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	0611      	lsls	r1, r2, #24
 800509e:	d502      	bpl.n	80050a6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	0612      	lsls	r2, r2, #24
 80050a4:	d46b      	bmi.n	800517e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	05d0      	lsls	r0, r2, #23
 80050aa:	d502      	bpl.n	80050b2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	0611      	lsls	r1, r2, #24
 80050b0:	d46d      	bmi.n	800518e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	0652      	lsls	r2, r2, #25
 80050b6:	d502      	bpl.n	80050be <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	0650      	lsls	r0, r2, #25
 80050bc:	d46f      	bmi.n	800519e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	0691      	lsls	r1, r2, #26
 80050c2:	d502      	bpl.n	80050ca <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	0692      	lsls	r2, r2, #26
 80050c8:	d449      	bmi.n	800515e <HAL_TIM_IRQHandler+0x106>
}
 80050ca:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050cc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80050d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050d4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80050de:	d16f      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e0:	f7ff ffb2 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	4620      	mov	r0, r4
 80050e6:	f7ff ffb3 	bl	8005050 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050ec:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	7722      	strb	r2, [r4, #28]
 80050f0:	e7cd      	b.n	800508e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050f2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80050f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050fa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	079b      	lsls	r3, r3, #30
 8005102:	d15a      	bne.n	80051ba <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005104:	f7ff ffa0 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	4620      	mov	r0, r4
 800510a:	f7ff ffa1 	bl	8005050 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005110:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	7722      	strb	r2, [r4, #28]
 8005114:	e7b5      	b.n	8005082 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005116:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800511a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800511c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800511e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005120:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005128:	d144      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	f7ff ff8d 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512e:	4620      	mov	r0, r4
 8005130:	f7ff ff8e 	bl	8005050 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005134:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005136:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005138:	7722      	strb	r2, [r4, #28]
 800513a:	e79c      	b.n	8005076 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800513c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005140:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005142:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005144:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	0799      	lsls	r1, r3, #30
 800514a:	d130      	bne.n	80051ae <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514c:	f7ff ff7c 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	4620      	mov	r0, r4
 8005152:	f7ff ff7d 	bl	8005050 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005158:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	7722      	strb	r2, [r4, #28]
 800515c:	e785      	b.n	800506a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800515e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005162:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005164:	611a      	str	r2, [r3, #16]
}
 8005166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800516a:	f000 bb23 	b.w	80057b4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800516e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005172:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005174:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005176:	f7ff ff65 	bl	8005044 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	e78d      	b.n	800509a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800517e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005182:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005184:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005186:	f000 fb17 	bl	80057b8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	e78b      	b.n	80050a6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800518e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8005192:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005194:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005196:	f000 fb11 	bl	80057bc <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	e789      	b.n	80050b2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800519e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80051a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80051a6:	f7ff ff55 	bl	8005054 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	e787      	b.n	80050be <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	f7ff ff4d 	bl	800504c <HAL_TIM_IC_CaptureCallback>
 80051b2:	e7d0      	b.n	8005156 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80051b4:	f7ff ff4a 	bl	800504c <HAL_TIM_IC_CaptureCallback>
 80051b8:	e7bc      	b.n	8005134 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	f7ff ff47 	bl	800504c <HAL_TIM_IC_CaptureCallback>
 80051be:	e7a6      	b.n	800510e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80051c0:	f7ff ff44 	bl	800504c <HAL_TIM_IC_CaptureCallback>
 80051c4:	e791      	b.n	80050ea <HAL_TIM_IRQHandler+0x92>
 80051c6:	bf00      	nop

080051c8 <TIM_Base_SetConfig>:
{
 80051c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ca:	4a32      	ldr	r2, [pc, #200]	@ (8005294 <TIM_Base_SetConfig+0xcc>)
 80051cc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80051d0:	4c31      	ldr	r4, [pc, #196]	@ (8005298 <TIM_Base_SetConfig+0xd0>)
 80051d2:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 80051d6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d8:	eba0 0e04 	sub.w	lr, r0, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051dc:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051de:	fab2 f282 	clz	r2, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e2:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e4:	fabe fe8e 	clz	lr, lr
  TIMx->PSC = Structure->Prescaler;
 80051e8:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ea:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80051ee:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80051f2:	d026      	beq.n	8005242 <TIM_Base_SetConfig+0x7a>
 80051f4:	bb2a      	cbnz	r2, 8005242 <TIM_Base_SetConfig+0x7a>
 80051f6:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80052a4 <TIM_Base_SetConfig+0xdc>
 80051fa:	4560      	cmp	r0, ip
 80051fc:	d038      	beq.n	8005270 <TIM_Base_SetConfig+0xa8>
 80051fe:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005202:	4560      	cmp	r0, ip
 8005204:	d034      	beq.n	8005270 <TIM_Base_SetConfig+0xa8>
 8005206:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800520a:	4560      	cmp	r0, ip
 800520c:	d019      	beq.n	8005242 <TIM_Base_SetConfig+0x7a>
 800520e:	f1be 0f00 	cmp.w	lr, #0
 8005212:	d116      	bne.n	8005242 <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005214:	4a21      	ldr	r2, [pc, #132]	@ (800529c <TIM_Base_SetConfig+0xd4>)
 8005216:	4290      	cmp	r0, r2
 8005218:	d02e      	beq.n	8005278 <TIM_Base_SetConfig+0xb0>
 800521a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800521e:	4290      	cmp	r0, r2
 8005220:	d02a      	beq.n	8005278 <TIM_Base_SetConfig+0xb0>
 8005222:	4a1f      	ldr	r2, [pc, #124]	@ (80052a0 <TIM_Base_SetConfig+0xd8>)
 8005224:	4290      	cmp	r0, r2
 8005226:	d027      	beq.n	8005278 <TIM_Base_SetConfig+0xb0>
 8005228:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800522c:	4290      	cmp	r0, r2
 800522e:	d023      	beq.n	8005278 <TIM_Base_SetConfig+0xb0>
 8005230:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005234:	4290      	cmp	r0, r2
 8005236:	d01f      	beq.n	8005278 <TIM_Base_SetConfig+0xb0>
 8005238:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800523c:	4290      	cmp	r0, r2
 800523e:	d11f      	bne.n	8005280 <TIM_Base_SetConfig+0xb8>
 8005240:	e01a      	b.n	8005278 <TIM_Base_SetConfig+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8005242:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005248:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524a:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800524c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005250:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005256:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8005258:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800525a:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800525c:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800525e:	b912      	cbnz	r2, 8005266 <TIM_Base_SetConfig+0x9e>
 8005260:	f1be 0f00 	cmp.w	lr, #0
 8005264:	d001      	beq.n	800526a <TIM_Base_SetConfig+0xa2>
    TIMx->RCR = Structure->RepetitionCounter;
 8005266:	690b      	ldr	r3, [r1, #16]
 8005268:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800526a:	2301      	movs	r3, #1
 800526c:	6143      	str	r3, [r0, #20]
}
 800526e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005274:	684a      	ldr	r2, [r1, #4]
 8005276:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005278:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800527a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005284:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8005286:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005288:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528a:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800528c:	6285      	str	r5, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800528e:	6143      	str	r3, [r0, #20]
}
 8005290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014800 	.word	0x40014800
 80052a4:	40000400 	.word	0x40000400

080052a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80052a8:	b370      	cbz	r0, 8005308 <HAL_TIM_Base_Init+0x60>
{
 80052aa:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80052ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80052b0:	4604      	mov	r4, r0
 80052b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80052b6:	b313      	cbz	r3, 80052fe <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80052ba:	2302      	movs	r3, #2
 80052bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c0:	f851 0b04 	ldr.w	r0, [r1], #4
 80052c4:	f7ff ff80 	bl	80051c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c8:	2301      	movs	r3, #1
  return HAL_OK;
 80052ca:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80052d4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80052d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80052dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80052e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80052ec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80052f0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80052f4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80052f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80052fc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80052fe:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005302:	f7fd fc0f 	bl	8002b24 <HAL_TIM_Base_MspInit>
 8005306:	e7d7      	b.n	80052b8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8005308:	2001      	movs	r0, #1
}
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800530c:	b370      	cbz	r0, 800536c <HAL_TIM_PWM_Init+0x60>
{
 800530e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005310:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005314:	4604      	mov	r4, r0
 8005316:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800531a:	b313      	cbz	r3, 8005362 <HAL_TIM_PWM_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800531e:	2302      	movs	r3, #2
 8005320:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005324:	f851 0b04 	ldr.w	r0, [r1], #4
 8005328:	f7ff ff4e 	bl	80051c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800532c:	2301      	movs	r3, #1
  return HAL_OK;
 800532e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005330:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005338:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800533c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005340:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005350:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005354:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005358:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800535c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005360:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005362:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005366:	f7fd fbb5 	bl	8002ad4 <HAL_TIM_PWM_MspInit>
 800536a:	e7d7      	b.n	800531c <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 800536c:	2001      	movs	r0, #1
}
 800536e:	4770      	bx	lr

08005370 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005370:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005372:	4a17      	ldr	r2, [pc, #92]	@ (80053d0 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005374:	f023 0310 	bic.w	r3, r3, #16
{
 8005378:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800537a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800537c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800537e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005380:	6985      	ldr	r5, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005382:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005386:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005388:	680d      	ldr	r5, [r1, #0]
 800538a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800538e:	688d      	ldr	r5, [r1, #8]
 8005390:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005394:	4d0f      	ldr	r5, [pc, #60]	@ (80053d4 <TIM_OC2_SetConfig+0x64>)
 8005396:	42a8      	cmp	r0, r5
 8005398:	d00a      	beq.n	80053b0 <TIM_OC2_SetConfig+0x40>
 800539a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800539e:	42a8      	cmp	r0, r5
 80053a0:	d006      	beq.n	80053b0 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 80053a2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80053a4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80053a6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80053a8:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80053aa:	6203      	str	r3, [r0, #32]
}
 80053ac:	bc70      	pop	{r4, r5, r6}
 80053ae:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053b0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80053b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b6:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053be:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053c6:	ea46 0c05 	orr.w	ip, r6, r5
 80053ca:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 80053ce:	e7e8      	b.n	80053a2 <TIM_OC2_SetConfig+0x32>
 80053d0:	feff8cff 	.word	0xfeff8cff
 80053d4:	40010000 	.word	0x40010000

080053d8 <HAL_TIM_PWM_ConfigChannel>:
{
 80053d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80053da:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d07c      	beq.n	80054dc <HAL_TIM_PWM_ConfigChannel+0x104>
 80053e2:	2301      	movs	r3, #1
 80053e4:	4604      	mov	r4, r0
 80053e6:	460d      	mov	r5, r1
 80053e8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80053ec:	2a14      	cmp	r2, #20
 80053ee:	d80c      	bhi.n	800540a <HAL_TIM_PWM_ConfigChannel+0x32>
 80053f0:	e8df f002 	tbb	[pc, r2]
 80053f4:	0b0b0b22 	.word	0x0b0b0b22
 80053f8:	0b0b0b32 	.word	0x0b0b0b32
 80053fc:	0b0b0b43 	.word	0x0b0b0b43
 8005400:	0b0b0b53 	.word	0x0b0b0b53
 8005404:	0b0b0b64 	.word	0x0b0b0b64
 8005408:	10          	.byte	0x10
 8005409:	00          	.byte	0x00
 800540a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800540c:	2300      	movs	r3, #0
 800540e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005412:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005414:	6800      	ldr	r0, [r0, #0]
 8005416:	f7ff fbfb 	bl	8004c10 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800541a:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800541c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800541e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005422:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005424:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005426:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800542a:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800542c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800542e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005432:	6543      	str	r3, [r0, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2000      	movs	r0, #0
 8005436:	e7e9      	b.n	800540c <HAL_TIM_PWM_ConfigChannel+0x34>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005438:	6800      	ldr	r0, [r0, #0]
 800543a:	f7ff fb2f 	bl	8004a9c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800543e:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005440:	6983      	ldr	r3, [r0, #24]
 8005442:	f043 0308 	orr.w	r3, r3, #8
 8005446:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005448:	6983      	ldr	r3, [r0, #24]
 800544a:	f023 0304 	bic.w	r3, r3, #4
 800544e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005450:	6983      	ldr	r3, [r0, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	6183      	str	r3, [r0, #24]
      break;
 8005456:	e7ed      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005458:	6800      	ldr	r0, [r0, #0]
 800545a:	f7ff ff89 	bl	8005370 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800545e:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005460:	6983      	ldr	r3, [r0, #24]
 8005462:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005466:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005468:	6983      	ldr	r3, [r0, #24]
 800546a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800546e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005470:	6983      	ldr	r3, [r0, #24]
 8005472:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005476:	6183      	str	r3, [r0, #24]
      break;
 8005478:	e7dc      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	f7ff fb40 	bl	8004b00 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005480:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005482:	69c3      	ldr	r3, [r0, #28]
 8005484:	f043 0308 	orr.w	r3, r3, #8
 8005488:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800548a:	69c3      	ldr	r3, [r0, #28]
 800548c:	f023 0304 	bic.w	r3, r3, #4
 8005490:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005492:	69c3      	ldr	r3, [r0, #28]
 8005494:	4313      	orrs	r3, r2
 8005496:	61c3      	str	r3, [r0, #28]
      break;
 8005498:	e7cc      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	f7ff fb64 	bl	8004b68 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054a0:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054a2:	69c3      	ldr	r3, [r0, #28]
 80054a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054a8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054aa:	69c3      	ldr	r3, [r0, #28]
 80054ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054b0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054b2:	69c3      	ldr	r3, [r0, #28]
 80054b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80054b8:	61c3      	str	r3, [r0, #28]
      break;
 80054ba:	e7bb      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054bc:	6800      	ldr	r0, [r0, #0]
 80054be:	f7ff fb7d 	bl	8004bbc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c2:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054c4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80054c6:	f043 0308 	orr.w	r3, r3, #8
 80054ca:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054cc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80054ce:	f023 0304 	bic.w	r3, r3, #4
 80054d2:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054d4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80054d6:	4313      	orrs	r3, r2
 80054d8:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 80054da:	e7ab      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x5c>
  __HAL_LOCK(htim);
 80054dc:	2002      	movs	r0, #2
}
 80054de:	bd38      	pop	{r3, r4, r5, pc}

080054e0 <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054e0:	2900      	cmp	r1, #0
 80054e2:	d14e      	bne.n	8005582 <HAL_TIMEx_OCN_Start+0xa2>
 80054e4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d152      	bne.n	8005592 <HAL_TIMEx_OCN_Start+0xb2>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ec:	2302      	movs	r3, #2
 80054ee:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80054f2:	6803      	ldr	r3, [r0, #0]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f4:	f001 011f 	and.w	r1, r1, #31
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f8:	4a31      	ldr	r2, [pc, #196]	@ (80055c0 <HAL_TIMEx_OCN_Start+0xe0>)
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054fa:	2004      	movs	r0, #4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005500:	bf18      	it	ne
 8005502:	4293      	cmpne	r3, r2
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005504:	fa00 f101 	lsl.w	r1, r0, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005508:	482e      	ldr	r0, [pc, #184]	@ (80055c4 <HAL_TIMEx_OCN_Start+0xe4>)
 800550a:	bf0c      	ite	eq
 800550c:	2201      	moveq	r2, #1
 800550e:	2200      	movne	r2, #0
{
 8005510:	b430      	push	{r4, r5}

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005512:	6a1c      	ldr	r4, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005514:	4d2c      	ldr	r5, [pc, #176]	@ (80055c8 <HAL_TIMEx_OCN_Start+0xe8>)
  TIMx->CCER &=  ~tmp;
 8005516:	ea24 0401 	bic.w	r4, r4, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	42ab      	cmp	r3, r5
 800551c:	bf08      	it	eq
 800551e:	f042 0201 	orreq.w	r2, r2, #1
 8005522:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
  TIMx->CCER &=  ~tmp;
 8005526:	621c      	str	r4, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005528:	42ab      	cmp	r3, r5
 800552a:	bf08      	it	eq
 800552c:	f042 0201 	orreq.w	r2, r2, #1

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005530:	6a1c      	ldr	r4, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005532:	4283      	cmp	r3, r0
 8005534:	bf08      	it	eq
 8005536:	f042 0201 	orreq.w	r2, r2, #1
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800553a:	4321      	orrs	r1, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553c:	4c23      	ldr	r4, [pc, #140]	@ (80055cc <HAL_TIMEx_OCN_Start+0xec>)
 800553e:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005542:	6219      	str	r1, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005544:	42a3      	cmp	r3, r4
 8005546:	bf08      	it	eq
 8005548:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_TIM_MOE_ENABLE(htim);
 800554c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554e:	4283      	cmp	r3, r0
 8005550:	bf08      	it	eq
 8005552:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_TIM_MOE_ENABLE(htim);
 8005556:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800555a:	6459      	str	r1, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555c:	b912      	cbnz	r2, 8005564 <HAL_TIMEx_OCN_Start+0x84>
 800555e:	4a1c      	ldr	r2, [pc, #112]	@ (80055d0 <HAL_TIMEx_OCN_Start+0xf0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d107      	bne.n	8005574 <HAL_TIMEx_OCN_Start+0x94>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005564:	6899      	ldr	r1, [r3, #8]
 8005566:	4a1b      	ldr	r2, [pc, #108]	@ (80055d4 <HAL_TIMEx_OCN_Start+0xf4>)
 8005568:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556a:	2a06      	cmp	r2, #6
 800556c:	d006      	beq.n	800557c <HAL_TIMEx_OCN_Start+0x9c>
 800556e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005572:	d003      	beq.n	800557c <HAL_TIMEx_OCN_Start+0x9c>
      __HAL_TIM_ENABLE(htim);
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800557c:	2000      	movs	r0, #0
}
 800557e:	bc30      	pop	{r4, r5}
 8005580:	4770      	bx	lr
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005582:	2904      	cmp	r1, #4
 8005584:	d00b      	beq.n	800559e <HAL_TIMEx_OCN_Start+0xbe>
 8005586:	2908      	cmp	r1, #8
 8005588:	d011      	beq.n	80055ae <HAL_TIMEx_OCN_Start+0xce>
 800558a:	f890 3047 	ldrb.w	r3, [r0, #71]	@ 0x47
 800558e:	2b01      	cmp	r3, #1
 8005590:	d001      	beq.n	8005596 <HAL_TIMEx_OCN_Start+0xb6>
    return HAL_ERROR;
 8005592:	2001      	movs	r0, #1
}
 8005594:	4770      	bx	lr
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005596:	2302      	movs	r3, #2
 8005598:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 800559c:	e7a9      	b.n	80054f2 <HAL_TIMEx_OCN_Start+0x12>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800559e:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d1f5      	bne.n	8005592 <HAL_TIMEx_OCN_Start+0xb2>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a6:	2302      	movs	r3, #2
 80055a8:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
 80055ac:	e7a1      	b.n	80054f2 <HAL_TIMEx_OCN_Start+0x12>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ae:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d1ed      	bne.n	8005592 <HAL_TIMEx_OCN_Start+0xb2>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b6:	2302      	movs	r3, #2
 80055b8:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
 80055bc:	e799      	b.n	80054f2 <HAL_TIMEx_OCN_Start+0x12>
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40010400 	.word	0x40010400
 80055d0:	40001800 	.word	0x40001800
 80055d4:	00010007 	.word	0x00010007

080055d8 <HAL_TIMEx_OCN_Stop>:
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80055d8:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055da:	f04f 0c04 	mov.w	ip, #4
{
 80055de:	b410      	push	{r4}
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055e0:	f001 041f 	and.w	r4, r1, #31
  TIMx->CCER &=  ~tmp;
 80055e4:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055e6:	fa0c fc04 	lsl.w	ip, ip, r4
  __HAL_TIM_MOE_DISABLE(htim);
 80055ea:	f241 1411 	movw	r4, #4369	@ 0x1111
  TIMx->CCER &=  ~tmp;
 80055ee:	ea22 020c 	bic.w	r2, r2, ip
 80055f2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_DISABLE(htim);
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	4222      	tst	r2, r4
 80055fc:	d104      	bne.n	8005608 <HAL_TIMEx_OCN_Stop+0x30>
 80055fe:	6a1c      	ldr	r4, [r3, #32]
 8005600:	f240 4244 	movw	r2, #1092	@ 0x444
 8005604:	4214      	tst	r4, r2
 8005606:	d020      	beq.n	800564a <HAL_TIMEx_OCN_Stop+0x72>
  __HAL_TIM_DISABLE(htim);
 8005608:	6a1c      	ldr	r4, [r3, #32]
 800560a:	f241 1211 	movw	r2, #4369	@ 0x1111
 800560e:	4214      	tst	r4, r2
 8005610:	d104      	bne.n	800561c <HAL_TIMEx_OCN_Stop+0x44>
 8005612:	6a1c      	ldr	r4, [r3, #32]
 8005614:	f240 4244 	movw	r2, #1092	@ 0x444
 8005618:	4214      	tst	r4, r2
 800561a:	d011      	beq.n	8005640 <HAL_TIMEx_OCN_Stop+0x68>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	2301      	movs	r3, #1
 800561e:	b929      	cbnz	r1, 800562c <HAL_TIMEx_OCN_Stop+0x54>
 8005620:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
}
 8005624:	2000      	movs	r0, #0
 8005626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800562a:	4770      	bx	lr
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	2904      	cmp	r1, #4
 800562e:	d011      	beq.n	8005654 <HAL_TIMEx_OCN_Stop+0x7c>
 8005630:	2908      	cmp	r1, #8
 8005632:	d015      	beq.n	8005660 <HAL_TIMEx_OCN_Stop+0x88>
 8005634:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
}
 8005638:	2000      	movs	r0, #0
 800563a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800563e:	4770      	bx	lr
  __HAL_TIM_DISABLE(htim);
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	e7e8      	b.n	800561c <HAL_TIMEx_OCN_Stop+0x44>
  __HAL_TIM_MOE_DISABLE(htim);
 800564a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800564c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005650:	645a      	str	r2, [r3, #68]	@ 0x44
 8005652:	e7d9      	b.n	8005608 <HAL_TIMEx_OCN_Stop+0x30>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
}
 8005658:	2000      	movs	r0, #0
 800565a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800565e:	4770      	bx	lr
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
}
 8005664:	2000      	movs	r0, #0
 8005666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800566c:	f7ff bf38 	b.w	80054e0 <HAL_TIMEx_OCN_Start>

08005670 <HAL_TIMEx_PWMN_Stop>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005670:	f7ff bfb2 	b.w	80055d8 <HAL_TIMEx_OCN_Stop>

08005674 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8005674:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d04b      	beq.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
  tmpcr2 = htim->Instance->CR2;
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	2002      	movs	r0, #2
{
 8005682:	b430      	push	{r4, r5}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005684:	4d24      	ldr	r5, [pc, #144]	@ (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005686:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800568a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800568c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800568e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005690:	d029      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005692:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005696:	42ab      	cmp	r3, r5
 8005698:	d025      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569a:	4d20      	ldr	r5, [pc, #128]	@ (800571c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800569c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a0:	42ab      	cmp	r3, r5
 80056a2:	bf18      	it	ne
 80056a4:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 80056a8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056ac:	bf0c      	ite	eq
 80056ae:	f04f 0c01 	moveq.w	ip, #1
 80056b2:	f04f 0c00 	movne.w	ip, #0
 80056b6:	42ab      	cmp	r3, r5
 80056b8:	bf08      	it	eq
 80056ba:	f04c 0c01 	orreq.w	ip, ip, #1
 80056be:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056c2:	42ab      	cmp	r3, r5
 80056c4:	bf08      	it	eq
 80056c6:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ca:	680d      	ldr	r5, [r1, #0]
 80056cc:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ce:	4d14      	ldr	r5, [pc, #80]	@ (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 80056d0:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d2:	42ab      	cmp	r3, r5
 80056d4:	bf14      	ite	ne
 80056d6:	4660      	movne	r0, ip
 80056d8:	f04c 0001 	orreq.w	r0, ip, #1
 80056dc:	b960      	cbnz	r0, 80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80056de:	4811      	ldr	r0, [pc, #68]	@ (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056e0:	4283      	cmp	r3, r0
 80056e2:	d009      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80056e4:	e00d      	b.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056e6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056e8:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056ec:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ee:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f0:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056f4:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80056f6:	6058      	str	r0, [r3, #4]
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fa:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fe:	430c      	orrs	r4, r1
    htim->Instance->SMCR = tmpsmcr;
 8005700:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(htim);
 8005702:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005704:	2101      	movs	r1, #1
  return HAL_OK;
 8005706:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8005708:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800570c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005710:	bc30      	pop	{r4, r5}
 8005712:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005714:	2002      	movs	r0, #2
}
 8005716:	4770      	bx	lr
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40014000 	.word	0x40014000
 8005724:	40001800 	.word	0x40001800

08005728 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8005728:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d03d      	beq.n	80057ac <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005730:	4602      	mov	r2, r0
 8005732:	6848      	ldr	r0, [r1, #4]
{
 8005734:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005736:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800573a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800573e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005740:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005742:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005746:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005748:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800574a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800574e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005750:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005752:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005756:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005758:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800575a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800575e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005760:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005762:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005766:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005768:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800576a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800576e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005772:	4c0f      	ldr	r4, [pc, #60]	@ (80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8005774:	42a0      	cmp	r0, r4
 8005776:	d00b      	beq.n	8005790 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8005778:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800577c:	42a0      	cmp	r0, r4
 800577e:	d007      	beq.n	8005790 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  __HAL_UNLOCK(htim);
 8005780:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005782:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005784:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c
  return HAL_OK;
 8005788:	4608      	mov	r0, r1
}
 800578a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800578e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005790:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8005792:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005796:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800579a:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800579e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057a2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057a4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80057a8:	430b      	orrs	r3, r1
 80057aa:	e7e9      	b.n	8005780 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 80057ac:	2002      	movs	r0, #2
}
 80057ae:	4770      	bx	lr
 80057b0:	40010000 	.word	0x40010000

080057b4 <HAL_TIMEx_CommutCallback>:
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop

080057bc <HAL_TIMEx_Break2Callback>:
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop

080057c0 <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop

080057c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057c4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	e842 3100 	strex	r1, r3, [r2]
 80057d2:	2900      	cmp	r1, #0
 80057d4:	d1f7      	bne.n	80057c6 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	f102 0308 	add.w	r3, r2, #8
 80057da:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	f102 0c08 	add.w	ip, r2, #8
 80057e6:	e84c 3100 	strex	r1, r3, [ip]
 80057ea:	2900      	cmp	r1, #0
 80057ec:	d1f3      	bne.n	80057d6 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ee:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d006      	beq.n	8005802 <UART_EndRxTransfer+0x3e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f8:	6683      	str	r3, [r0, #104]	@ 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80057fa:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	6603      	str	r3, [r0, #96]	@ 0x60
}
 8005800:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005806:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	e842 3100 	strex	r1, r3, [r2]
 800580e:	2900      	cmp	r1, #0
 8005810:	d0f0      	beq.n	80057f4 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	e852 3f00 	ldrex	r3, [r2]
 8005816:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	e842 3100 	strex	r1, r3, [r2]
 800581e:	2900      	cmp	r1, #0
 8005820:	d1ef      	bne.n	8005802 <UART_EndRxTransfer+0x3e>
 8005822:	e7e7      	b.n	80057f4 <UART_EndRxTransfer+0x30>

08005824 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005824:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005826:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800582c:	d018      	beq.n	8005860 <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	6802      	ldr	r2, [r0, #0]
 8005832:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	f102 0308 	add.w	r3, r2, #8
 800583a:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800583e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	f102 0008 	add.w	r0, r2, #8
 8005846:	e840 3100 	strex	r1, r3, [r0]
 800584a:	2900      	cmp	r1, #0
 800584c:	d1f3      	bne.n	8005836 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	e842 3100 	strex	r1, r3, [r2]
 800585a:	2900      	cmp	r1, #0
 800585c:	d1f7      	bne.n	800584e <UART_DMATransmitCplt+0x2a>
 800585e:	4770      	bx	lr
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8005860:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8005864:	4718      	bx	r3
 8005866:	bf00      	nop

08005868 <UART_DMATxHalfCplt>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005868:	6b80      	ldr	r0, [r0, #56]	@ 0x38

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800586a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800586e:	4718      	bx	r3

08005870 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005870:	6b80      	ldr	r0, [r0, #56]	@ 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005872:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005874:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
{
 8005876:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005878:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800587c:	6893      	ldr	r3, [r2, #8]
 800587e:	061b      	lsls	r3, r3, #24
 8005880:	d501      	bpl.n	8005886 <UART_DMAError+0x16>
 8005882:	2921      	cmp	r1, #33	@ 0x21
 8005884:	d00f      	beq.n	80058a6 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005886:	6893      	ldr	r3, [r2, #8]
 8005888:	065b      	lsls	r3, r3, #25
 800588a:	d501      	bpl.n	8005890 <UART_DMAError+0x20>
 800588c:	2c22      	cmp	r4, #34	@ 0x22
 800588e:	d018      	beq.n	80058c2 <UART_DMAError+0x52>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005890:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005894:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005898:	f043 0310 	orr.w	r3, r3, #16
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058a0:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  huart->ErrorCallback(huart);
 80058a4:	4710      	bx	r2
    huart->TxXferCount = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	e842 3100 	strex	r1, r3, [r2]
 80058b8:	2900      	cmp	r1, #0
 80058ba:	d1f7      	bne.n	80058ac <UART_DMAError+0x3c>
  huart->gState = HAL_UART_STATE_READY;
 80058bc:	2320      	movs	r3, #32
 80058be:	67c3      	str	r3, [r0, #124]	@ 0x7c
}
 80058c0:	e7e1      	b.n	8005886 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80058c8:	f7ff ff7c 	bl	80057c4 <UART_EndRxTransfer>
 80058cc:	e7e0      	b.n	8005890 <UART_DMAError+0x20>
 80058ce:	bf00      	nop

080058d0 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058d0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 80058d2:	2300      	movs	r3, #0
  huart->TxXferCount = 0U;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80058d4:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
  huart->RxXferCount = 0U;
 80058d8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80058dc:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  huart->ErrorCallback(huart);
 80058e0:	4710      	bx	r2
 80058e2:	bf00      	nop

080058e4 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058e4:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
  uint16_t uhMask = huart->Mask;
 80058e8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ec:	2a22      	cmp	r2, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058ee:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058f0:	d004      	beq.n	80058fc <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	f042 0208 	orr.w	r2, r2, #8
 80058f8:	619a      	str	r2, [r3, #24]
  }
}
 80058fa:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058fe:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8005900:	400b      	ands	r3, r1
 8005902:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8005904:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 8005908:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 800590a:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 800590c:	3201      	adds	r2, #1
    huart->RxXferCount--;
 800590e:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8005910:	6542      	str	r2, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8005912:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 8005916:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1ec      	bne.n	80058fa <UART_RxISR_8BIT+0x16>
 8005920:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	e842 3100 	strex	r1, r3, [r2]
 800592e:	2900      	cmp	r1, #0
 8005930:	d1f7      	bne.n	8005922 <UART_RxISR_8BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	f102 0308 	add.w	r3, r2, #8
 8005936:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	f102 0c08 	add.w	ip, r2, #8
 8005942:	e84c 3100 	strex	r1, r3, [ip]
 8005946:	2900      	cmp	r1, #0
 8005948:	d1f3      	bne.n	8005932 <UART_RxISR_8BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 800594a:	2320      	movs	r3, #32
      huart->RxISR = NULL;
 800594c:	6681      	str	r1, [r0, #104]	@ 0x68
      huart->RxState = HAL_UART_STATE_READY;
 800594e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005952:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005954:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005956:	2b01      	cmp	r3, #1
 8005958:	d002      	beq.n	8005960 <UART_RxISR_8BIT+0x7c>
        huart->RxCpltCallback(huart);
 800595a:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 800595e:	4718      	bx	r3
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005960:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005966:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	e842 3100 	strex	r1, r3, [r2]
 800596e:	2900      	cmp	r1, #0
 8005970:	d1f7      	bne.n	8005962 <UART_RxISR_8BIT+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005972:	69d3      	ldr	r3, [r2, #28]
 8005974:	06db      	lsls	r3, r3, #27
 8005976:	d501      	bpl.n	800597c <UART_RxISR_8BIT+0x98>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005978:	2310      	movs	r3, #16
 800597a:	6213      	str	r3, [r2, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 800597c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	@ 0xa8
 8005980:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005984:	4718      	bx	r3
 8005986:	bf00      	nop

08005988 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005988:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
  uint16_t uhMask = huart->Mask;
 800598c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005990:	2922      	cmp	r1, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005992:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005994:	d004      	beq.n	80059a0 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	f042 0208 	orr.w	r2, r2, #8
 800599c:	619a      	str	r2, [r3, #24]
 800599e:	4770      	bx	lr
{
 80059a0:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059a2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80059a4:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 80059a6:	4022      	ands	r2, r4
 80059a8:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80059ac:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr += 2U;
 80059b0:	6541      	str	r1, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 80059b2:	3a01      	subs	r2, #1
 80059b4:	b292      	uxth	r2, r2
 80059b6:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 80059ba:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
 80059be:	b292      	uxth	r2, r2
 80059c0:	bb02      	cbnz	r2, 8005a04 <UART_RxISR_16BIT+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	e843 2100 	strex	r1, r2, [r3]
 80059ce:	2900      	cmp	r1, #0
 80059d0:	d1f7      	bne.n	80059c2 <UART_RxISR_16BIT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	f103 0208 	add.w	r2, r3, #8
 80059d6:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	f103 0408 	add.w	r4, r3, #8
 80059e2:	e844 2100 	strex	r1, r2, [r4]
 80059e6:	2900      	cmp	r1, #0
 80059e8:	d1f3      	bne.n	80059d2 <UART_RxISR_16BIT+0x4a>
      huart->RxState = HAL_UART_STATE_READY;
 80059ea:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 80059ec:	6681      	str	r1, [r0, #104]	@ 0x68
      huart->RxState = HAL_UART_STATE_READY;
 80059ee:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f2:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80059f6:	2a01      	cmp	r2, #1
 80059f8:	d007      	beq.n	8005a0a <UART_RxISR_16BIT+0x82>
        huart->RxCpltCallback(huart);
 80059fa:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
  }
}
 80059fe:	f85d 4b04 	ldr.w	r4, [sp], #4
        huart->RxCpltCallback(huart);
 8005a02:	4718      	bx	r3
}
 8005a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a08:	4770      	bx	lr
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a10:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	e843 2100 	strex	r1, r2, [r3]
 8005a18:	2900      	cmp	r1, #0
 8005a1a:	d1f7      	bne.n	8005a0c <UART_RxISR_16BIT+0x84>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	06d2      	lsls	r2, r2, #27
 8005a20:	d501      	bpl.n	8005a26 <UART_RxISR_16BIT+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a22:	2210      	movs	r2, #16
 8005a24:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005a26:	f8d0 30a8 	ldr.w	r3, [r0, #168]	@ 0xa8
 8005a2a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
}
 8005a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005a32:	4718      	bx	r3

08005a34 <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop

08005a38 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop

08005a3c <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop

08005a40 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop

08005a44 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop

08005a48 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop

08005a4c <HAL_UART_AbortCpltCallback>:
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop

08005a50 <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop

08005a54 <HAL_UART_Transmit_DMA>:
{
 8005a54:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8005a56:	6fc6      	ldr	r6, [r0, #124]	@ 0x7c
{
 8005a58:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005a5a:	2e20      	cmp	r6, #32
 8005a5c:	d123      	bne.n	8005aa6 <HAL_UART_Transmit_DMA+0x52>
    if ((pData == NULL) || (Size == 0U))
 8005a5e:	b301      	cbz	r1, 8005aa2 <HAL_UART_Transmit_DMA+0x4e>
 8005a60:	4613      	mov	r3, r2
 8005a62:	fab2 f282 	clz	r2, r2
 8005a66:	0952      	lsrs	r2, r2, #5
 8005a68:	b1db      	cbz	r3, 8005aa2 <HAL_UART_Transmit_DMA+0x4e>
    huart->TxXferCount = Size;
 8005a6a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    huart->pTxBuffPtr  = pData;
 8005a6e:	64c1      	str	r1, [r0, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005a70:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a74:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a78:	2021      	movs	r0, #33	@ 0x21
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005a7a:	6825      	ldr	r5, [r4, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a7c:	67e0      	str	r0, [r4, #124]	@ 0x7c
    if (huart->hdmatx != NULL)
 8005a7e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005a80:	b1a0      	cbz	r0, 8005aac <HAL_UART_Transmit_DMA+0x58>
      huart->hdmatx->XferAbortCallback = NULL;
 8005a82:	6502      	str	r2, [r0, #80]	@ 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005a84:	f105 0228 	add.w	r2, r5, #40	@ 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a88:	4d10      	ldr	r5, [pc, #64]	@ (8005acc <HAL_UART_Transmit_DMA+0x78>)
 8005a8a:	63c5      	str	r5, [r0, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a8c:	4d10      	ldr	r5, [pc, #64]	@ (8005ad0 <HAL_UART_Transmit_DMA+0x7c>)
 8005a8e:	6405      	str	r5, [r0, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a90:	4d10      	ldr	r5, [pc, #64]	@ (8005ad4 <HAL_UART_Transmit_DMA+0x80>)
 8005a92:	64c5      	str	r5, [r0, #76]	@ 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005a94:	f7fd fef6 	bl	8003884 <HAL_DMA_Start_IT>
 8005a98:	b138      	cbz	r0, 8005aaa <HAL_UART_Transmit_DMA+0x56>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a9a:	2310      	movs	r3, #16
 8005a9c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        huart->gState = HAL_UART_STATE_READY;
 8005aa0:	67e6      	str	r6, [r4, #124]	@ 0x7c
      return HAL_ERROR;
 8005aa2:	2001      	movs	r0, #1
}
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005aa6:	2002      	movs	r0, #2
}
 8005aa8:	bd70      	pop	{r4, r5, r6, pc}
 8005aaa:	6825      	ldr	r5, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005aac:	2340      	movs	r3, #64	@ 0x40
 8005aae:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	f105 0308 	add.w	r3, r5, #8
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	f105 0108 	add.w	r1, r5, #8
 8005ac0:	e841 3200 	strex	r2, r3, [r1]
 8005ac4:	2a00      	cmp	r2, #0
 8005ac6:	d1f3      	bne.n	8005ab0 <HAL_UART_Transmit_DMA+0x5c>
    return HAL_OK;
 8005ac8:	2000      	movs	r0, #0
}
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	08005825 	.word	0x08005825
 8005ad0:	08005869 	.word	0x08005869
 8005ad4:	08005871 	.word	0x08005871

08005ad8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ad8:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ada:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ade:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ae0:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8005ae2:	ea12 0f0c 	tst.w	r2, ip
{
 8005ae6:	b570      	push	{r4, r5, r6, lr}
 8005ae8:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aea:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8005aec:	d17d      	bne.n	8005bea <HAL_UART_IRQHandler+0x112>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005aee:	0696      	lsls	r6, r2, #26
 8005af0:	d502      	bpl.n	8005af8 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005af2:	068d      	lsls	r5, r1, #26
 8005af4:	f100 80c3 	bmi.w	8005c7e <HAL_UART_IRQHandler+0x1a6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005afa:	2801      	cmp	r0, #1
 8005afc:	d01f      	beq.n	8005b3e <HAL_UART_IRQHandler+0x66>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005afe:	0615      	lsls	r5, r2, #24
 8005b00:	d414      	bmi.n	8005b2c <HAL_UART_IRQHandler+0x54>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b02:	0652      	lsls	r2, r2, #25
 8005b04:	d501      	bpl.n	8005b0a <HAL_UART_IRQHandler+0x32>
 8005b06:	064e      	lsls	r6, r1, #25
 8005b08:	d400      	bmi.n	8005b0c <HAL_UART_IRQHandler+0x34>
}
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	e843 2100 	strex	r1, r2, [r3]
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	d1f7      	bne.n	8005b0c <HAL_UART_IRQHandler+0x34>
  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	2120      	movs	r1, #32
  huart->TxISR = NULL;
 8005b1e:	2200      	movs	r2, #0
  huart->TxCpltCallback(huart);
 8005b20:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005b24:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8005b26:	67e1      	str	r1, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 8005b28:	66e2      	str	r2, [r4, #108]	@ 0x6c
 8005b2a:	e0ac      	b.n	8005c86 <HAL_UART_IRQHandler+0x1ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b2c:	0608      	lsls	r0, r1, #24
 8005b2e:	d5e8      	bpl.n	8005b02 <HAL_UART_IRQHandler+0x2a>
    if (huart->TxISR != NULL)
 8005b30:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0e9      	beq.n	8005b0a <HAL_UART_IRQHandler+0x32>
      huart->TxISR(huart);
 8005b36:	4620      	mov	r0, r4
}
 8005b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005b3c:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b3e:	06d5      	lsls	r5, r2, #27
 8005b40:	d5dd      	bpl.n	8005afe <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b42:	06c8      	lsls	r0, r1, #27
 8005b44:	d5db      	bpl.n	8005afe <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b46:	2210      	movs	r2, #16
 8005b48:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	0656      	lsls	r6, r2, #25
 8005b4e:	f140 810c 	bpl.w	8005d6a <HAL_UART_IRQHandler+0x292>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b52:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005b54:	6802      	ldr	r2, [r0, #0]
 8005b56:	6852      	ldr	r2, [r2, #4]
 8005b58:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005b5a:	2a00      	cmp	r2, #0
 8005b5c:	d0d5      	beq.n	8005b0a <HAL_UART_IRQHandler+0x32>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b5e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8005b62:	4291      	cmp	r1, r2
 8005b64:	d9d1      	bls.n	8005b0a <HAL_UART_IRQHandler+0x32>
        huart->RxXferCount = nb_remaining_rx_data;
 8005b66:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b6a:	69c2      	ldr	r2, [r0, #28]
 8005b6c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005b70:	d02f      	beq.n	8005bd2 <HAL_UART_IRQHandler+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	e843 2100 	strex	r1, r2, [r3]
 8005b7e:	2900      	cmp	r1, #0
 8005b80:	d1f7      	bne.n	8005b72 <HAL_UART_IRQHandler+0x9a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	f103 0208 	add.w	r2, r3, #8
 8005b86:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	f103 0508 	add.w	r5, r3, #8
 8005b92:	e845 2100 	strex	r1, r2, [r5]
 8005b96:	2900      	cmp	r1, #0
 8005b98:	d1f3      	bne.n	8005b82 <HAL_UART_IRQHandler+0xaa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	f103 0208 	add.w	r2, r3, #8
 8005b9e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	f103 0508 	add.w	r5, r3, #8
 8005baa:	e845 2100 	strex	r1, r2, [r5]
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	d1f3      	bne.n	8005b9a <HAL_UART_IRQHandler+0xc2>
          huart->RxState = HAL_UART_STATE_READY;
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb8:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	e843 2100 	strex	r1, r2, [r3]
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d1f7      	bne.n	8005bba <HAL_UART_IRQHandler+0xe2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bca:	f7fd fe9b 	bl	8003904 <HAL_DMA_Abort>
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bce:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd2:	2202      	movs	r2, #2
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bd4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8005bd8:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bda:	6662      	str	r2, [r4, #100]	@ 0x64
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bdc:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8005be0:	1a89      	subs	r1, r1, r2
}
 8005be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005be6:	b289      	uxth	r1, r1
 8005be8:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bea:	f015 0501 	ands.w	r5, r5, #1
 8005bee:	461e      	mov	r6, r3
 8005bf0:	d16e      	bne.n	8005cd0 <HAL_UART_IRQHandler+0x1f8>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005bf2:	487d      	ldr	r0, [pc, #500]	@ (8005de8 <HAL_UART_IRQHandler+0x310>)
 8005bf4:	4201      	tst	r1, r0
 8005bf6:	f43f af7f 	beq.w	8005af8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bfa:	07d0      	lsls	r0, r2, #31
 8005bfc:	d50e      	bpl.n	8005c1c <HAL_UART_IRQHandler+0x144>
 8005bfe:	05c8      	lsls	r0, r1, #23
 8005c00:	f140 80af 	bpl.w	8005d62 <HAL_UART_IRQHandler+0x28a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c04:	2001      	movs	r0, #1
 8005c06:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c08:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005c0c:	f040 0001 	orr.w	r0, r0, #1
 8005c10:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c14:	0790      	lsls	r0, r2, #30
 8005c16:	d53d      	bpl.n	8005c94 <HAL_UART_IRQHandler+0x1bc>
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	d15d      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x200>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c1c:	0750      	lsls	r0, r2, #29
 8005c1e:	d550      	bpl.n	8005cc2 <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c20:	0710      	lsls	r0, r2, #28
 8005c22:	f100 809b 	bmi.w	8005d5c <HAL_UART_IRQHandler+0x284>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c26:	0510      	lsls	r0, r2, #20
 8005c28:	d50a      	bpl.n	8005c40 <HAL_UART_IRQHandler+0x168>
 8005c2a:	014d      	lsls	r5, r1, #5
 8005c2c:	d508      	bpl.n	8005c40 <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c2e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005c32:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c34:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005c38:	f043 0320 	orr.w	r3, r3, #32
 8005c3c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c40:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f43f af60 	beq.w	8005b0a <HAL_UART_IRQHandler+0x32>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c4a:	0690      	lsls	r0, r2, #26
 8005c4c:	d506      	bpl.n	8005c5c <HAL_UART_IRQHandler+0x184>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c4e:	068a      	lsls	r2, r1, #26
 8005c50:	d504      	bpl.n	8005c5c <HAL_UART_IRQHandler+0x184>
        if (huart->RxISR != NULL)
 8005c52:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005c54:	b113      	cbz	r3, 8005c5c <HAL_UART_IRQHandler+0x184>
          huart->RxISR(huart);
 8005c56:	4620      	mov	r0, r4
 8005c58:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c5a:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 8005c5c:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c60:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c62:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6a:	ea53 0502 	orrs.w	r5, r3, r2
 8005c6e:	d140      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x21a>
        huart->ErrorCallback(huart);
 8005c70:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8005c74:	4620      	mov	r0, r4
 8005c76:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 8005c7c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005c7e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f43f af42 	beq.w	8005b0a <HAL_UART_IRQHandler+0x32>
}
 8005c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  huart->TxCpltCallback(huart);
 8005c8a:	4718      	bx	r3
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c8c:	05c8      	lsls	r0, r1, #23
 8005c8e:	d4b9      	bmi.n	8005c04 <HAL_UART_IRQHandler+0x12c>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c90:	0790      	lsls	r0, r2, #30
 8005c92:	d421      	bmi.n	8005cd8 <HAL_UART_IRQHandler+0x200>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c94:	0750      	lsls	r0, r2, #29
 8005c96:	d514      	bpl.n	8005cc2 <HAL_UART_IRQHandler+0x1ea>
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	d0c1      	beq.n	8005c20 <HAL_UART_IRQHandler+0x148>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c9c:	2004      	movs	r0, #4
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c9e:	0715      	lsls	r5, r2, #28
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ca0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ca2:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005ca6:	f040 0002 	orr.w	r0, r0, #2
 8005caa:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cae:	d5ba      	bpl.n	8005c26 <HAL_UART_IRQHandler+0x14e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb0:	2008      	movs	r0, #8
 8005cb2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cb4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005cb8:	f040 0008 	orr.w	r0, r0, #8
 8005cbc:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8005cc0:	e7b1      	b.n	8005c26 <HAL_UART_IRQHandler+0x14e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cc2:	0710      	lsls	r0, r2, #28
 8005cc4:	d5af      	bpl.n	8005c26 <HAL_UART_IRQHandler+0x14e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cc6:	f001 0020 	and.w	r0, r1, #32
 8005cca:	4328      	orrs	r0, r5
 8005ccc:	d0ab      	beq.n	8005c26 <HAL_UART_IRQHandler+0x14e>
 8005cce:	e7ef      	b.n	8005cb0 <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cd0:	07d0      	lsls	r0, r2, #31
 8005cd2:	d4db      	bmi.n	8005c8c <HAL_UART_IRQHandler+0x1b4>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cd4:	0790      	lsls	r0, r2, #30
 8005cd6:	d53e      	bpl.n	8005d56 <HAL_UART_IRQHandler+0x27e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cd8:	2002      	movs	r0, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cda:	0755      	lsls	r5, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cdc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cde:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005ce2:	f040 0004 	orr.w	r0, r0, #4
 8005ce6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cea:	d4d7      	bmi.n	8005c9c <HAL_UART_IRQHandler+0x1c4>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cec:	0710      	lsls	r0, r2, #28
 8005cee:	d4df      	bmi.n	8005cb0 <HAL_UART_IRQHandler+0x1d8>
 8005cf0:	e799      	b.n	8005c26 <HAL_UART_IRQHandler+0x14e>
        UART_EndRxTransfer(huart);
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7ff fd66 	bl	80057c4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	68b3      	ldr	r3, [r6, #8]
 8005cfa:	065b      	lsls	r3, r3, #25
 8005cfc:	d526      	bpl.n	8005d4c <HAL_UART_IRQHandler+0x274>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	f106 0308 	add.w	r3, r6, #8
 8005d02:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	f106 0108 	add.w	r1, r6, #8
 8005d0e:	e841 3200 	strex	r2, r3, [r1]
 8005d12:	b162      	cbz	r2, 8005d2e <HAL_UART_IRQHandler+0x256>
 8005d14:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	f103 0208 	add.w	r2, r3, #8
 8005d1a:	e852 2f00 	ldrex	r2, [r2]
 8005d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	f103 0008 	add.w	r0, r3, #8
 8005d26:	e840 2100 	strex	r1, r2, [r0]
 8005d2a:	2900      	cmp	r1, #0
 8005d2c:	d1f3      	bne.n	8005d16 <HAL_UART_IRQHandler+0x23e>
          if (huart->hdmarx != NULL)
 8005d2e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d052      	beq.n	8005dda <HAL_UART_IRQHandler+0x302>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d34:	4b2d      	ldr	r3, [pc, #180]	@ (8005dec <HAL_UART_IRQHandler+0x314>)
 8005d36:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d38:	f7fd fe2e 	bl	8003998 <HAL_DMA_Abort_IT>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	f43f aee4 	beq.w	8005b0a <HAL_UART_IRQHandler+0x32>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d42:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 8005d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d48:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005d4a:	4718      	bx	r3
          huart->ErrorCallback(huart);
 8005d4c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
}
 8005d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          huart->ErrorCallback(huart);
 8005d54:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d56:	0755      	lsls	r5, r2, #29
 8005d58:	d4a0      	bmi.n	8005c9c <HAL_UART_IRQHandler+0x1c4>
 8005d5a:	e7c7      	b.n	8005cec <HAL_UART_IRQHandler+0x214>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d5c:	068d      	lsls	r5, r1, #26
 8005d5e:	d4a7      	bmi.n	8005cb0 <HAL_UART_IRQHandler+0x1d8>
 8005d60:	e761      	b.n	8005c26 <HAL_UART_IRQHandler+0x14e>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d62:	0790      	lsls	r0, r2, #30
 8005d64:	f53f af5a 	bmi.w	8005c1c <HAL_UART_IRQHandler+0x144>
 8005d68:	e794      	b.n	8005c94 <HAL_UART_IRQHandler+0x1bc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d6a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 8005d6e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 8005d72:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d76:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8005d78:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d7a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	f43f aec4 	beq.w	8005b0a <HAL_UART_IRQHandler+0x32>
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	f43f aec1 	beq.w	8005b0a <HAL_UART_IRQHandler+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	e843 2000 	strex	r0, r2, [r3]
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d1f7      	bne.n	8005d88 <HAL_UART_IRQHandler+0x2b0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	f103 0208 	add.w	r2, r3, #8
 8005d9c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	f103 0508 	add.w	r5, r3, #8
 8005da8:	e845 2000 	strex	r0, r2, [r5]
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d1f3      	bne.n	8005d98 <HAL_UART_IRQHandler+0x2c0>
        huart->RxState = HAL_UART_STATE_READY;
 8005db0:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8005db2:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8005db4:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	e843 2000 	strex	r0, r2, [r3]
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d1f7      	bne.n	8005dba <HAL_UART_IRQHandler+0x2e2>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dca:	2202      	movs	r2, #2
        huart->RxEventCallback(huart, nb_rx_data);
 8005dcc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8005dd0:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dd2:	6662      	str	r2, [r4, #100]	@ 0x64
}
 8005dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        huart->RxEventCallback(huart, nb_rx_data);
 8005dd8:	4718      	bx	r3
            huart->ErrorCallback(huart);
 8005dda:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8005dde:	4620      	mov	r0, r4
}
 8005de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            huart->ErrorCallback(huart);
 8005de4:	4718      	bx	r3
 8005de6:	bf00      	nop
 8005de8:	04000120 	.word	0x04000120
 8005dec:	080058d1 	.word	0x080058d1

08005df0 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005df0:	6901      	ldr	r1, [r0, #16]
 8005df2:	6882      	ldr	r2, [r0, #8]
{
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005df8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	69c0      	ldr	r0, [r0, #28]
 8005dfe:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e00:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e02:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e04:	4987      	ldr	r1, [pc, #540]	@ (8006024 <UART_SetConfig+0x234>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e06:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e08:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0a:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e10:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e12:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e14:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005e18:	4329      	orrs	r1, r5
 8005e1a:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8005e1c:	6a21      	ldr	r1, [r4, #32]
 8005e1e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e20:	6899      	ldr	r1, [r3, #8]
 8005e22:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005e26:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e28:	497f      	ldr	r1, [pc, #508]	@ (8006028 <UART_SetConfig+0x238>)
 8005e2a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e2c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e2e:	d03f      	beq.n	8005eb0 <UART_SetConfig+0xc0>
 8005e30:	4a7e      	ldr	r2, [pc, #504]	@ (800602c <UART_SetConfig+0x23c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d017      	beq.n	8005e66 <UART_SetConfig+0x76>
 8005e36:	4a7e      	ldr	r2, [pc, #504]	@ (8006030 <UART_SetConfig+0x240>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	f000 80ad 	beq.w	8005f98 <UART_SetConfig+0x1a8>
 8005e3e:	4a7d      	ldr	r2, [pc, #500]	@ (8006034 <UART_SetConfig+0x244>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	f000 80b4 	beq.w	8005fae <UART_SetConfig+0x1be>
 8005e46:	4a7c      	ldr	r2, [pc, #496]	@ (8006038 <UART_SetConfig+0x248>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d073      	beq.n	8005f34 <UART_SetConfig+0x144>
 8005e4c:	4a7b      	ldr	r2, [pc, #492]	@ (800603c <UART_SetConfig+0x24c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d03d      	beq.n	8005ece <UART_SetConfig+0xde>
 8005e52:	4a7b      	ldr	r2, [pc, #492]	@ (8006040 <UART_SetConfig+0x250>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	f000 80c1 	beq.w	8005fdc <UART_SetConfig+0x1ec>
 8005e5a:	4a7a      	ldr	r2, [pc, #488]	@ (8006044 <UART_SetConfig+0x254>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	f000 80cc 	beq.w	8005ffa <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 8005e62:	2001      	movs	r0, #1
 8005e64:	e04d      	b.n	8005f02 <UART_SetConfig+0x112>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e66:	4b78      	ldr	r3, [pc, #480]	@ (8006048 <UART_SetConfig+0x258>)
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6c:	f003 030c 	and.w	r3, r3, #12
 8005e70:	2b0c      	cmp	r3, #12
 8005e72:	d8f6      	bhi.n	8005e62 <UART_SetConfig+0x72>
 8005e74:	a201      	add	r2, pc, #4	@ (adr r2, 8005e7c <UART_SetConfig+0x8c>)
 8005e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7a:	bf00      	nop
 8005e7c:	08005f4b 	.word	0x08005f4b
 8005e80:	08005e63 	.word	0x08005e63
 8005e84:	08005e63 	.word	0x08005e63
 8005e88:	08005e63 	.word	0x08005e63
 8005e8c:	08005f11 	.word	0x08005f11
 8005e90:	08005e63 	.word	0x08005e63
 8005e94:	08005e63 	.word	0x08005e63
 8005e98:	08005e63 	.word	0x08005e63
 8005e9c:	08005edf 	.word	0x08005edf
 8005ea0:	08005e63 	.word	0x08005e63
 8005ea4:	08005e63 	.word	0x08005e63
 8005ea8:	08005e63 	.word	0x08005e63
 8005eac:	08005ec3 	.word	0x08005ec3
 8005eb0:	4b65      	ldr	r3, [pc, #404]	@ (8006048 <UART_SetConfig+0x258>)
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d00f      	beq.n	8005ede <UART_SetConfig+0xee>
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d12e      	bne.n	8005f20 <UART_SetConfig+0x130>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005ec6:	d05e      	beq.n	8005f86 <UART_SetConfig+0x196>
        pclk = (uint32_t) LSE_VALUE;
 8005ec8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005ecc:	e00b      	b.n	8005ee6 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ece:	4b5e      	ldr	r3, [pc, #376]	@ (8006048 <UART_SetConfig+0x258>)
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005edc:	d115      	bne.n	8005f0a <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ede:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005ee2:	d03a      	beq.n	8005f5a <UART_SetConfig+0x16a>
        pclk = (uint32_t) HSI_VALUE;
 8005ee4:	4859      	ldr	r0, [pc, #356]	@ (800604c <UART_SetConfig+0x25c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ee6:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eec:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005ef0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef4:	f1a0 0310 	sub.w	r3, r0, #16
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d8b2      	bhi.n	8005e62 <UART_SetConfig+0x72>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 8005f00:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8005f08:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f0a:	f200 8085 	bhi.w	8006018 <UART_SetConfig+0x228>
 8005f0e:	b14b      	cbz	r3, 8005f24 <UART_SetConfig+0x134>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f10:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005f14:	d03a      	beq.n	8005f8c <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f16:	f7fe fa39 	bl	800438c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d0f0      	beq.n	8005f00 <UART_SetConfig+0x110>
 8005f1e:	e7e2      	b.n	8005ee6 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d0f5      	beq.n	8005f10 <UART_SetConfig+0x120>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f24:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005f28:	d04d      	beq.n	8005fc6 <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f2a:	f7fe fb13 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d0e6      	beq.n	8005f00 <UART_SetConfig+0x110>
 8005f32:	e7d8      	b.n	8005ee6 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f34:	4b44      	ldr	r3, [pc, #272]	@ (8006048 <UART_SetConfig+0x258>)
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f42:	d0cc      	beq.n	8005ede <UART_SetConfig+0xee>
 8005f44:	d845      	bhi.n	8005fd2 <UART_SetConfig+0x1e2>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e2      	bne.n	8005f10 <UART_SetConfig+0x120>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005f4e:	d03d      	beq.n	8005fcc <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe faf0 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d0d3      	beq.n	8005f00 <UART_SetConfig+0x110>
 8005f58:	e7c5      	b.n	8005ee6 <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5a:	483d      	ldr	r0, [pc, #244]	@ (8006050 <UART_SetConfig+0x260>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f5c:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f5e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f62:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005f66:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f6a:	f1a3 0110 	sub.w	r1, r3, #16
 8005f6e:	4291      	cmp	r1, r2
 8005f70:	f63f af77 	bhi.w	8005e62 <UART_SetConfig+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f74:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f78:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005f7c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f7e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60cb      	str	r3, [r1, #12]
 8005f84:	e7bc      	b.n	8005f00 <UART_SetConfig+0x110>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f86:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005f8a:	e7e7      	b.n	8005f5c <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8c:	f7fe f9fe 	bl	800438c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d0b5      	beq.n	8005f00 <UART_SetConfig+0x110>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f94:	0040      	lsls	r0, r0, #1
 8005f96:	e7e1      	b.n	8005f5c <UART_SetConfig+0x16c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f98:	4b2b      	ldr	r3, [pc, #172]	@ (8006048 <UART_SetConfig+0x258>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d09b      	beq.n	8005ede <UART_SetConfig+0xee>
 8005fa6:	d9ce      	bls.n	8005f46 <UART_SetConfig+0x156>
 8005fa8:	2b30      	cmp	r3, #48	@ 0x30
 8005faa:	d08a      	beq.n	8005ec2 <UART_SetConfig+0xd2>
 8005fac:	e759      	b.n	8005e62 <UART_SetConfig+0x72>
 8005fae:	4b26      	ldr	r3, [pc, #152]	@ (8006048 <UART_SetConfig+0x258>)
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005fb8:	2b80      	cmp	r3, #128	@ 0x80
 8005fba:	d090      	beq.n	8005ede <UART_SetConfig+0xee>
 8005fbc:	d9c3      	bls.n	8005f46 <UART_SetConfig+0x156>
 8005fbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fc0:	f43f af7f 	beq.w	8005ec2 <UART_SetConfig+0xd2>
 8005fc4:	e74d      	b.n	8005e62 <UART_SetConfig+0x72>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc6:	f7fe fac5 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
        break;
 8005fca:	e7e1      	b.n	8005f90 <UART_SetConfig+0x1a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fe fab2 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
        break;
 8005fd0:	e7de      	b.n	8005f90 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd6:	f43f af74 	beq.w	8005ec2 <UART_SetConfig+0xd2>
 8005fda:	e742      	b.n	8005e62 <UART_SetConfig+0x72>
 8005fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8006048 <UART_SetConfig+0x258>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fea:	f43f af78 	beq.w	8005ede <UART_SetConfig+0xee>
 8005fee:	d9aa      	bls.n	8005f46 <UART_SetConfig+0x156>
 8005ff0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ff4:	f43f af65 	beq.w	8005ec2 <UART_SetConfig+0xd2>
 8005ff8:	e733      	b.n	8005e62 <UART_SetConfig+0x72>
 8005ffa:	4b13      	ldr	r3, [pc, #76]	@ (8006048 <UART_SetConfig+0x258>)
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006000:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006008:	f43f af69 	beq.w	8005ede <UART_SetConfig+0xee>
 800600c:	d99b      	bls.n	8005f46 <UART_SetConfig+0x156>
 800600e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006012:	f43f af56 	beq.w	8005ec2 <UART_SetConfig+0xd2>
 8006016:	e724      	b.n	8005e62 <UART_SetConfig+0x72>
 8006018:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800601c:	f43f af51 	beq.w	8005ec2 <UART_SetConfig+0xd2>
 8006020:	e71f      	b.n	8005e62 <UART_SetConfig+0x72>
 8006022:	bf00      	nop
 8006024:	efff69f3 	.word	0xefff69f3
 8006028:	40011000 	.word	0x40011000
 800602c:	40004400 	.word	0x40004400
 8006030:	40004800 	.word	0x40004800
 8006034:	40004c00 	.word	0x40004c00
 8006038:	40005000 	.word	0x40005000
 800603c:	40011400 	.word	0x40011400
 8006040:	40007800 	.word	0x40007800
 8006044:	40007c00 	.word	0x40007c00
 8006048:	40023800 	.word	0x40023800
 800604c:	00f42400 	.word	0x00f42400
 8006050:	01e84800 	.word	0x01e84800

08006054 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006054:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006056:	07da      	lsls	r2, r3, #31
{
 8006058:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800605a:	d506      	bpl.n	800606a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800605c:	6801      	ldr	r1, [r0, #0]
 800605e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8006060:	684a      	ldr	r2, [r1, #4]
 8006062:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006066:	4322      	orrs	r2, r4
 8006068:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800606a:	079c      	lsls	r4, r3, #30
 800606c:	d506      	bpl.n	800607c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800606e:	6801      	ldr	r1, [r0, #0]
 8006070:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006072:	684a      	ldr	r2, [r1, #4]
 8006074:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006078:	4322      	orrs	r2, r4
 800607a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800607c:	0759      	lsls	r1, r3, #29
 800607e:	d506      	bpl.n	800608e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006080:	6801      	ldr	r1, [r0, #0]
 8006082:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006084:	684a      	ldr	r2, [r1, #4]
 8006086:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800608a:	4322      	orrs	r2, r4
 800608c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800608e:	071a      	lsls	r2, r3, #28
 8006090:	d506      	bpl.n	80060a0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006092:	6801      	ldr	r1, [r0, #0]
 8006094:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006096:	684a      	ldr	r2, [r1, #4]
 8006098:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800609c:	4322      	orrs	r2, r4
 800609e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060a0:	06dc      	lsls	r4, r3, #27
 80060a2:	d506      	bpl.n	80060b2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060a4:	6801      	ldr	r1, [r0, #0]
 80060a6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80060a8:	688a      	ldr	r2, [r1, #8]
 80060aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060ae:	4322      	orrs	r2, r4
 80060b0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060b2:	0699      	lsls	r1, r3, #26
 80060b4:	d506      	bpl.n	80060c4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060b6:	6801      	ldr	r1, [r0, #0]
 80060b8:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80060ba:	688a      	ldr	r2, [r1, #8]
 80060bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060c0:	4322      	orrs	r2, r4
 80060c2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060c4:	065a      	lsls	r2, r3, #25
 80060c6:	d50a      	bpl.n	80060de <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060c8:	6801      	ldr	r1, [r0, #0]
 80060ca:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80060cc:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ce:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060d2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80060d6:	ea42 0204 	orr.w	r2, r2, r4
 80060da:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060dc:	d00b      	beq.n	80060f6 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060de:	061b      	lsls	r3, r3, #24
 80060e0:	d506      	bpl.n	80060f0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060e2:	6802      	ldr	r2, [r0, #0]
 80060e4:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80060e6:	6853      	ldr	r3, [r2, #4]
 80060e8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6053      	str	r3, [r2, #4]
}
 80060f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060f6:	684a      	ldr	r2, [r1, #4]
 80060f8:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80060fa:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80060fe:	4322      	orrs	r2, r4
 8006100:	604a      	str	r2, [r1, #4]
 8006102:	e7ec      	b.n	80060de <UART_AdvFeatureConfig+0x8a>

08006104 <UART_WaitOnFlagUntilTimeout>:
{
 8006104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800610c:	4607      	mov	r7, r0
 800610e:	460e      	mov	r6, r1
 8006110:	4615      	mov	r5, r2
 8006112:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006114:	6804      	ldr	r4, [r0, #0]
 8006116:	69e2      	ldr	r2, [r4, #28]
 8006118:	ea36 0202 	bics.w	r2, r6, r2
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	42ab      	cmp	r3, r5
 8006124:	d10a      	bne.n	800613c <UART_WaitOnFlagUntilTimeout+0x38>
    if (Timeout != HAL_MAX_DELAY)
 8006126:	f1b8 3fff 	cmp.w	r8, #4294967295
 800612a:	d10a      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0x3e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800612c:	69e3      	ldr	r3, [r4, #28]
 800612e:	ea36 0303 	bics.w	r3, r6, r3
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	42ab      	cmp	r3, r5
 800613a:	d0f7      	beq.n	800612c <UART_WaitOnFlagUntilTimeout+0x28>
  return HAL_OK;
 800613c:	2000      	movs	r0, #0
}
 800613e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006142:	f7fc ff19 	bl	8002f78 <HAL_GetTick>
 8006146:	eba0 0009 	sub.w	r0, r0, r9
 800614a:	4540      	cmp	r0, r8
 800614c:	d833      	bhi.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800614e:	f1b8 0f00 	cmp.w	r8, #0
 8006152:	d030      	beq.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006154:	683c      	ldr	r4, [r7, #0]
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	4623      	mov	r3, r4
 800615a:	0751      	lsls	r1, r2, #29
 800615c:	d5db      	bpl.n	8006116 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800615e:	69e2      	ldr	r2, [r4, #28]
 8006160:	0512      	lsls	r2, r2, #20
 8006162:	d5d8      	bpl.n	8006116 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006164:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006168:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800616e:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	e844 2100 	strex	r1, r2, [r4]
 8006176:	b139      	cbz	r1, 8006188 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	e853 2f00 	ldrex	r2, [r3]
 800617c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	e843 2100 	strex	r1, r2, [r3]
 8006184:	2900      	cmp	r1, #0
 8006186:	d1f7      	bne.n	8006178 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f103 0208 	add.w	r2, r3, #8
 800618c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006190:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	f103 0008 	add.w	r0, r3, #8
 8006198:	e840 2100 	strex	r1, r2, [r0]
 800619c:	2900      	cmp	r1, #0
 800619e:	d1f3      	bne.n	8006188 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 80061a0:	2320      	movs	r3, #32
 80061a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80061a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80061ac:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80061ae:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80061b0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 80061b4:	e7c3      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0x3a>
 80061b6:	683b      	ldr	r3, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061bc:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	e843 2100 	strex	r1, r2, [r3]
 80061c4:	2900      	cmp	r1, #0
 80061c6:	d1f7      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	f103 0208 	add.w	r2, r3, #8
 80061cc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	f103 0008 	add.w	r0, r3, #8
 80061d8:	e840 2100 	strex	r1, r2, [r0]
 80061dc:	2900      	cmp	r1, #0
 80061de:	d1f3      	bne.n	80061c8 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 80061e0:	2320      	movs	r3, #32
 80061e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80061e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 80061e8:	e7e0      	b.n	80061ac <UART_WaitOnFlagUntilTimeout+0xa8>
 80061ea:	bf00      	nop

080061ec <UART_CheckIdleState>:
{
 80061ec:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ee:	2500      	movs	r5, #0
{
 80061f0:	4604      	mov	r4, r0
 80061f2:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f4:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80061f8:	f7fc febe 	bl	8002f78 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	071b      	lsls	r3, r3, #28
 8006202:	d40b      	bmi.n	800621c <UART_CheckIdleState+0x30>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006204:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006206:	2220      	movs	r2, #32
  return HAL_OK;
 8006208:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800620a:	67e2      	str	r2, [r4, #124]	@ 0x7c
  __HAL_UNLOCK(huart);
 800620c:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006210:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006214:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006216:	6663      	str	r3, [r4, #100]	@ 0x64
}
 8006218:	b002      	add	sp, #8
 800621a:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800621c:	f06f 467e 	mvn.w	r6, #4261412864	@ 0xfe000000
 8006220:	4603      	mov	r3, r0
 8006222:	462a      	mov	r2, r5
 8006224:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006228:	4620      	mov	r0, r4
 800622a:	9600      	str	r6, [sp, #0]
 800622c:	f7ff ff6a 	bl	8006104 <UART_WaitOnFlagUntilTimeout>
 8006230:	2800      	cmp	r0, #0
 8006232:	d0e7      	beq.n	8006204 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006234:	2003      	movs	r0, #3
 8006236:	e7ef      	b.n	8006218 <UART_CheckIdleState+0x2c>

08006238 <HAL_UART_Init>:
  if (huart == NULL)
 8006238:	2800      	cmp	r0, #0
 800623a:	d048      	beq.n	80062ce <HAL_UART_Init+0x96>
{
 800623c:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800623e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8006240:	4604      	mov	r4, r0
 8006242:	b9cb      	cbnz	r3, 8006278 <HAL_UART_Init+0x40>
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006244:	4a23      	ldr	r2, [pc, #140]	@ (80062d4 <HAL_UART_Init+0x9c>)
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006246:	4824      	ldr	r0, [pc, #144]	@ (80062d8 <HAL_UART_Init+0xa0>)
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006248:	4d24      	ldr	r5, [pc, #144]	@ (80062dc <HAL_UART_Init+0xa4>)
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800624a:	4925      	ldr	r1, [pc, #148]	@ (80062e0 <HAL_UART_Init+0xa8>)
    huart->Lock = HAL_UNLOCKED;
 800624c:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006250:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006254:	4b23      	ldr	r3, [pc, #140]	@ (80062e4 <HAL_UART_Init+0xac>)
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006256:	4a24      	ldr	r2, [pc, #144]	@ (80062e8 <HAL_UART_Init+0xb0>)
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006258:	e9c4 5023 	strd	r5, r0, [r4, #140]	@ 0x8c
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800625c:	4823      	ldr	r0, [pc, #140]	@ (80062ec <HAL_UART_Init+0xb4>)
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800625e:	e9c4 1225 	strd	r1, r2, [r4, #148]	@ 0x94
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006262:	e9c4 0327 	strd	r0, r3, [r4, #156]	@ 0x9c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006266:	4922      	ldr	r1, [pc, #136]	@ (80062f0 <HAL_UART_Init+0xb8>)
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006268:	4a22      	ldr	r2, [pc, #136]	@ (80062f4 <HAL_UART_Init+0xbc>)
    if (huart->MspInitCallback == NULL)
 800626a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800626e:	e9c4 1229 	strd	r1, r2, [r4, #164]	@ 0xa4
    if (huart->MspInitCallback == NULL)
 8006272:	b33b      	cbz	r3, 80062c4 <HAL_UART_Init+0x8c>
    huart->MspInitCallback(huart);
 8006274:	4620      	mov	r0, r4
 8006276:	4798      	blx	r3
  __HAL_UART_DISABLE(huart);
 8006278:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800627a:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800627c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800627e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8006280:	6813      	ldr	r3, [r2, #0]
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006288:	f7ff fdb2 	bl	8005df0 <UART_SetConfig>
 800628c:	2801      	cmp	r0, #1
 800628e:	d017      	beq.n	80062c0 <HAL_UART_Init+0x88>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006290:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006292:	b98b      	cbnz	r3, 80062b8 <HAL_UART_Init+0x80>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006294:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006296:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800629e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062a6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 80062b4:	f7ff bf9a 	b.w	80061ec <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7ff fecb 	bl	8006054 <UART_AdvFeatureConfig>
 80062be:	e7e9      	b.n	8006294 <HAL_UART_Init+0x5c>
}
 80062c0:	2001      	movs	r0, #1
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
      huart->MspInitCallback = HAL_UART_MspInit;
 80062c4:	4a0c      	ldr	r2, [pc, #48]	@ (80062f8 <HAL_UART_Init+0xc0>)
 80062c6:	4613      	mov	r3, r2
 80062c8:	f8c4 20ac 	str.w	r2, [r4, #172]	@ 0xac
 80062cc:	e7d2      	b.n	8006274 <HAL_UART_Init+0x3c>
}
 80062ce:	2001      	movs	r0, #1
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	08005a3d 	.word	0x08005a3d
 80062d8:	08005a45 	.word	0x08005a45
 80062dc:	08005a39 	.word	0x08005a39
 80062e0:	08005a41 	.word	0x08005a41
 80062e4:	08005a51 	.word	0x08005a51
 80062e8:	08005a49 	.word	0x08005a49
 80062ec:	08005a4d 	.word	0x08005a4d
 80062f0:	08005a35 	.word	0x08005a35
 80062f4:	080057c1 	.word	0x080057c1
 80062f8:	08002c9d 	.word	0x08002c9d

080062fc <UART_Start_Receive_IT>:
{
 80062fc:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 80062fe:	6884      	ldr	r4, [r0, #8]
  huart->RxISR       = NULL;
 8006300:	2300      	movs	r3, #0
  huart->pRxBuffPtr  = pData;
 8006302:	6541      	str	r1, [r0, #84]	@ 0x54
  UART_MASK_COMPUTATION(huart);
 8006304:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
  huart->RxXferSize  = Size;
 8006308:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->RxXferCount = Size;
 800630c:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006310:	6683      	str	r3, [r0, #104]	@ 0x68
  UART_MASK_COMPUTATION(huart);
 8006312:	d04b      	beq.n	80063ac <UART_Start_Receive_IT+0xb0>
 8006314:	bb6c      	cbnz	r4, 8006372 <UART_Start_Receive_IT+0x76>
 8006316:	6903      	ldr	r3, [r0, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	bf0c      	ite	eq
 800631c:	23ff      	moveq	r3, #255	@ 0xff
 800631e:	237f      	movne	r3, #127	@ 0x7f
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006320:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006322:	2122      	movs	r1, #34	@ 0x22
 8006324:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006326:	f8c0 4084 	str.w	r4, [r0, #132]	@ 0x84
  UART_MASK_COMPUTATION(huart);
 800632a:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800632e:	f8c0 1080 	str.w	r1, [r0, #128]	@ 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	f102 0308 	add.w	r3, r2, #8
 8006336:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	f102 0408 	add.w	r4, r2, #8
 8006342:	e844 3100 	strex	r1, r3, [r4]
 8006346:	2900      	cmp	r1, #0
 8006348:	d1f3      	bne.n	8006332 <UART_Start_Receive_IT+0x36>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634a:	6883      	ldr	r3, [r0, #8]
 800634c:	6901      	ldr	r1, [r0, #16]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006352:	d017      	beq.n	8006384 <UART_Start_Receive_IT+0x88>
 8006354:	4b1a      	ldr	r3, [pc, #104]	@ (80063c0 <UART_Start_Receive_IT+0xc4>)
 8006356:	6683      	str	r3, [r0, #104]	@ 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006358:	b1b9      	cbz	r1, 800638a <UART_Start_Receive_IT+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800635e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	e842 3100 	strex	r1, r3, [r2]
 8006366:	2900      	cmp	r1, #0
 8006368:	d1f7      	bne.n	800635a <UART_Start_Receive_IT+0x5e>
}
 800636a:	2000      	movs	r0, #0
 800636c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006370:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006372:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8006376:	d1d3      	bne.n	8006320 <UART_Start_Receive_IT+0x24>
 8006378:	6903      	ldr	r3, [r0, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf0c      	ite	eq
 800637e:	237f      	moveq	r3, #127	@ 0x7f
 8006380:	233f      	movne	r3, #63	@ 0x3f
 8006382:	e7cd      	b.n	8006320 <UART_Start_Receive_IT+0x24>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006384:	b9c9      	cbnz	r1, 80063ba <UART_Start_Receive_IT+0xbe>
 8006386:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <UART_Start_Receive_IT+0xc8>)
 8006388:	6683      	str	r3, [r0, #104]	@ 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800638e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	e842 3100 	strex	r1, r3, [r2]
 8006396:	2900      	cmp	r1, #0
 8006398:	d0e7      	beq.n	800636a <UART_Start_Receive_IT+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	e852 3f00 	ldrex	r3, [r2]
 800639e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	e842 3100 	strex	r1, r3, [r2]
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d1ef      	bne.n	800638a <UART_Start_Receive_IT+0x8e>
 80063aa:	e7de      	b.n	800636a <UART_Start_Receive_IT+0x6e>
  UART_MASK_COMPUTATION(huart);
 80063ac:	6902      	ldr	r2, [r0, #16]
 80063ae:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	bf18      	it	ne
 80063b6:	23ff      	movne	r3, #255	@ 0xff
 80063b8:	e7b2      	b.n	8006320 <UART_Start_Receive_IT+0x24>
 80063ba:	4b01      	ldr	r3, [pc, #4]	@ (80063c0 <UART_Start_Receive_IT+0xc4>)
 80063bc:	6683      	str	r3, [r0, #104]	@ 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 80063be:	e7cc      	b.n	800635a <UART_Start_Receive_IT+0x5e>
 80063c0:	080058e5 	.word	0x080058e5
 80063c4:	08005989 	.word	0x08005989

080063c8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80063c8:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d117      	bne.n	8006400 <HAL_UART_Receive_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 80063d0:	b1a1      	cbz	r1, 80063fc <HAL_UART_Receive_IT+0x34>
 80063d2:	fab2 f382 	clz	r3, r2
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	b182      	cbz	r2, 80063fc <HAL_UART_Receive_IT+0x34>
{
 80063da:	b430      	push	{r4, r5}
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063dc:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063de:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	d507      	bpl.n	80063f6 <HAL_UART_Receive_IT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	e844 3500 	strex	r5, r3, [r4]
 80063f2:	2d00      	cmp	r5, #0
 80063f4:	d1f7      	bne.n	80063e6 <HAL_UART_Receive_IT+0x1e>
}
 80063f6:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80063f8:	f7ff bf80 	b.w	80062fc <UART_Start_Receive_IT>
      return HAL_ERROR;
 80063fc:	2001      	movs	r0, #1
}
 80063fe:	4770      	bx	lr
    return HAL_BUSY;
 8006400:	2002      	movs	r0, #2
 8006402:	4770      	bx	lr

08006404 <__cvt>:
 8006404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	ec57 6b10 	vmov	r6, r7, d0
 800640c:	2f00      	cmp	r7, #0
 800640e:	460c      	mov	r4, r1
 8006410:	4619      	mov	r1, r3
 8006412:	463b      	mov	r3, r7
 8006414:	bfbb      	ittet	lt
 8006416:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800641a:	461f      	movlt	r7, r3
 800641c:	2300      	movge	r3, #0
 800641e:	232d      	movlt	r3, #45	@ 0x2d
 8006420:	700b      	strb	r3, [r1, #0]
 8006422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006424:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006428:	4691      	mov	r9, r2
 800642a:	f023 0820 	bic.w	r8, r3, #32
 800642e:	bfbc      	itt	lt
 8006430:	4632      	movlt	r2, r6
 8006432:	4616      	movlt	r6, r2
 8006434:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006438:	d005      	beq.n	8006446 <__cvt+0x42>
 800643a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800643e:	d100      	bne.n	8006442 <__cvt+0x3e>
 8006440:	3401      	adds	r4, #1
 8006442:	2102      	movs	r1, #2
 8006444:	e000      	b.n	8006448 <__cvt+0x44>
 8006446:	2103      	movs	r1, #3
 8006448:	ab03      	add	r3, sp, #12
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	ab02      	add	r3, sp, #8
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	ec47 6b10 	vmov	d0, r6, r7
 8006454:	4653      	mov	r3, sl
 8006456:	4622      	mov	r2, r4
 8006458:	f000 fe5a 	bl	8007110 <_dtoa_r>
 800645c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006460:	4605      	mov	r5, r0
 8006462:	d119      	bne.n	8006498 <__cvt+0x94>
 8006464:	f019 0f01 	tst.w	r9, #1
 8006468:	d00e      	beq.n	8006488 <__cvt+0x84>
 800646a:	eb00 0904 	add.w	r9, r0, r4
 800646e:	2200      	movs	r2, #0
 8006470:	2300      	movs	r3, #0
 8006472:	4630      	mov	r0, r6
 8006474:	4639      	mov	r1, r7
 8006476:	f7fa fb47 	bl	8000b08 <__aeabi_dcmpeq>
 800647a:	b108      	cbz	r0, 8006480 <__cvt+0x7c>
 800647c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006480:	2230      	movs	r2, #48	@ 0x30
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	454b      	cmp	r3, r9
 8006486:	d31e      	bcc.n	80064c6 <__cvt+0xc2>
 8006488:	9b03      	ldr	r3, [sp, #12]
 800648a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800648c:	1b5b      	subs	r3, r3, r5
 800648e:	4628      	mov	r0, r5
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	b004      	add	sp, #16
 8006494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006498:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800649c:	eb00 0904 	add.w	r9, r0, r4
 80064a0:	d1e5      	bne.n	800646e <__cvt+0x6a>
 80064a2:	7803      	ldrb	r3, [r0, #0]
 80064a4:	2b30      	cmp	r3, #48	@ 0x30
 80064a6:	d10a      	bne.n	80064be <__cvt+0xba>
 80064a8:	2200      	movs	r2, #0
 80064aa:	2300      	movs	r3, #0
 80064ac:	4630      	mov	r0, r6
 80064ae:	4639      	mov	r1, r7
 80064b0:	f7fa fb2a 	bl	8000b08 <__aeabi_dcmpeq>
 80064b4:	b918      	cbnz	r0, 80064be <__cvt+0xba>
 80064b6:	f1c4 0401 	rsb	r4, r4, #1
 80064ba:	f8ca 4000 	str.w	r4, [sl]
 80064be:	f8da 3000 	ldr.w	r3, [sl]
 80064c2:	4499      	add	r9, r3
 80064c4:	e7d3      	b.n	800646e <__cvt+0x6a>
 80064c6:	1c59      	adds	r1, r3, #1
 80064c8:	9103      	str	r1, [sp, #12]
 80064ca:	701a      	strb	r2, [r3, #0]
 80064cc:	e7d9      	b.n	8006482 <__cvt+0x7e>

080064ce <__exponent>:
 80064ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064d0:	2900      	cmp	r1, #0
 80064d2:	bfba      	itte	lt
 80064d4:	4249      	neglt	r1, r1
 80064d6:	232d      	movlt	r3, #45	@ 0x2d
 80064d8:	232b      	movge	r3, #43	@ 0x2b
 80064da:	2909      	cmp	r1, #9
 80064dc:	7002      	strb	r2, [r0, #0]
 80064de:	7043      	strb	r3, [r0, #1]
 80064e0:	dd29      	ble.n	8006536 <__exponent+0x68>
 80064e2:	f10d 0307 	add.w	r3, sp, #7
 80064e6:	461d      	mov	r5, r3
 80064e8:	270a      	movs	r7, #10
 80064ea:	461a      	mov	r2, r3
 80064ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80064f0:	fb07 1416 	mls	r4, r7, r6, r1
 80064f4:	3430      	adds	r4, #48	@ 0x30
 80064f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064fa:	460c      	mov	r4, r1
 80064fc:	2c63      	cmp	r4, #99	@ 0x63
 80064fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8006502:	4631      	mov	r1, r6
 8006504:	dcf1      	bgt.n	80064ea <__exponent+0x1c>
 8006506:	3130      	adds	r1, #48	@ 0x30
 8006508:	1e94      	subs	r4, r2, #2
 800650a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800650e:	1c41      	adds	r1, r0, #1
 8006510:	4623      	mov	r3, r4
 8006512:	42ab      	cmp	r3, r5
 8006514:	d30a      	bcc.n	800652c <__exponent+0x5e>
 8006516:	f10d 0309 	add.w	r3, sp, #9
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	42ac      	cmp	r4, r5
 800651e:	bf88      	it	hi
 8006520:	2300      	movhi	r3, #0
 8006522:	3302      	adds	r3, #2
 8006524:	4403      	add	r3, r0
 8006526:	1a18      	subs	r0, r3, r0
 8006528:	b003      	add	sp, #12
 800652a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800652c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006530:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006534:	e7ed      	b.n	8006512 <__exponent+0x44>
 8006536:	2330      	movs	r3, #48	@ 0x30
 8006538:	3130      	adds	r1, #48	@ 0x30
 800653a:	7083      	strb	r3, [r0, #2]
 800653c:	70c1      	strb	r1, [r0, #3]
 800653e:	1d03      	adds	r3, r0, #4
 8006540:	e7f1      	b.n	8006526 <__exponent+0x58>
	...

08006544 <_printf_float>:
 8006544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006548:	b08d      	sub	sp, #52	@ 0x34
 800654a:	460c      	mov	r4, r1
 800654c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006550:	4616      	mov	r6, r2
 8006552:	461f      	mov	r7, r3
 8006554:	4605      	mov	r5, r0
 8006556:	f000 fcdb 	bl	8006f10 <_localeconv_r>
 800655a:	6803      	ldr	r3, [r0, #0]
 800655c:	9304      	str	r3, [sp, #16]
 800655e:	4618      	mov	r0, r3
 8006560:	f7f9 fea6 	bl	80002b0 <strlen>
 8006564:	2300      	movs	r3, #0
 8006566:	930a      	str	r3, [sp, #40]	@ 0x28
 8006568:	f8d8 3000 	ldr.w	r3, [r8]
 800656c:	9005      	str	r0, [sp, #20]
 800656e:	3307      	adds	r3, #7
 8006570:	f023 0307 	bic.w	r3, r3, #7
 8006574:	f103 0208 	add.w	r2, r3, #8
 8006578:	f894 a018 	ldrb.w	sl, [r4, #24]
 800657c:	f8d4 b000 	ldr.w	fp, [r4]
 8006580:	f8c8 2000 	str.w	r2, [r8]
 8006584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006588:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800658c:	9307      	str	r3, [sp, #28]
 800658e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006592:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800659a:	4b9c      	ldr	r3, [pc, #624]	@ (800680c <_printf_float+0x2c8>)
 800659c:	f04f 32ff 	mov.w	r2, #4294967295
 80065a0:	f7fa fae4 	bl	8000b6c <__aeabi_dcmpun>
 80065a4:	bb70      	cbnz	r0, 8006604 <_printf_float+0xc0>
 80065a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065aa:	4b98      	ldr	r3, [pc, #608]	@ (800680c <_printf_float+0x2c8>)
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	f7fa fabe 	bl	8000b30 <__aeabi_dcmple>
 80065b4:	bb30      	cbnz	r0, 8006604 <_printf_float+0xc0>
 80065b6:	2200      	movs	r2, #0
 80065b8:	2300      	movs	r3, #0
 80065ba:	4640      	mov	r0, r8
 80065bc:	4649      	mov	r1, r9
 80065be:	f7fa faad 	bl	8000b1c <__aeabi_dcmplt>
 80065c2:	b110      	cbz	r0, 80065ca <_printf_float+0x86>
 80065c4:	232d      	movs	r3, #45	@ 0x2d
 80065c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ca:	4a91      	ldr	r2, [pc, #580]	@ (8006810 <_printf_float+0x2cc>)
 80065cc:	4b91      	ldr	r3, [pc, #580]	@ (8006814 <_printf_float+0x2d0>)
 80065ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065d2:	bf8c      	ite	hi
 80065d4:	4690      	movhi	r8, r2
 80065d6:	4698      	movls	r8, r3
 80065d8:	2303      	movs	r3, #3
 80065da:	6123      	str	r3, [r4, #16]
 80065dc:	f02b 0304 	bic.w	r3, fp, #4
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	9700      	str	r7, [sp, #0]
 80065e8:	4633      	mov	r3, r6
 80065ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065ec:	4621      	mov	r1, r4
 80065ee:	4628      	mov	r0, r5
 80065f0:	f000 f9d2 	bl	8006998 <_printf_common>
 80065f4:	3001      	adds	r0, #1
 80065f6:	f040 808d 	bne.w	8006714 <_printf_float+0x1d0>
 80065fa:	f04f 30ff 	mov.w	r0, #4294967295
 80065fe:	b00d      	add	sp, #52	@ 0x34
 8006600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006604:	4642      	mov	r2, r8
 8006606:	464b      	mov	r3, r9
 8006608:	4640      	mov	r0, r8
 800660a:	4649      	mov	r1, r9
 800660c:	f7fa faae 	bl	8000b6c <__aeabi_dcmpun>
 8006610:	b140      	cbz	r0, 8006624 <_printf_float+0xe0>
 8006612:	464b      	mov	r3, r9
 8006614:	2b00      	cmp	r3, #0
 8006616:	bfbc      	itt	lt
 8006618:	232d      	movlt	r3, #45	@ 0x2d
 800661a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800661e:	4a7e      	ldr	r2, [pc, #504]	@ (8006818 <_printf_float+0x2d4>)
 8006620:	4b7e      	ldr	r3, [pc, #504]	@ (800681c <_printf_float+0x2d8>)
 8006622:	e7d4      	b.n	80065ce <_printf_float+0x8a>
 8006624:	6863      	ldr	r3, [r4, #4]
 8006626:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800662a:	9206      	str	r2, [sp, #24]
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	d13b      	bne.n	80066a8 <_printf_float+0x164>
 8006630:	2306      	movs	r3, #6
 8006632:	6063      	str	r3, [r4, #4]
 8006634:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006638:	2300      	movs	r3, #0
 800663a:	6022      	str	r2, [r4, #0]
 800663c:	9303      	str	r3, [sp, #12]
 800663e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006640:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006644:	ab09      	add	r3, sp, #36	@ 0x24
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	6861      	ldr	r1, [r4, #4]
 800664a:	ec49 8b10 	vmov	d0, r8, r9
 800664e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006652:	4628      	mov	r0, r5
 8006654:	f7ff fed6 	bl	8006404 <__cvt>
 8006658:	9b06      	ldr	r3, [sp, #24]
 800665a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800665c:	2b47      	cmp	r3, #71	@ 0x47
 800665e:	4680      	mov	r8, r0
 8006660:	d129      	bne.n	80066b6 <_printf_float+0x172>
 8006662:	1cc8      	adds	r0, r1, #3
 8006664:	db02      	blt.n	800666c <_printf_float+0x128>
 8006666:	6863      	ldr	r3, [r4, #4]
 8006668:	4299      	cmp	r1, r3
 800666a:	dd41      	ble.n	80066f0 <_printf_float+0x1ac>
 800666c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006670:	fa5f fa8a 	uxtb.w	sl, sl
 8006674:	3901      	subs	r1, #1
 8006676:	4652      	mov	r2, sl
 8006678:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800667c:	9109      	str	r1, [sp, #36]	@ 0x24
 800667e:	f7ff ff26 	bl	80064ce <__exponent>
 8006682:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006684:	1813      	adds	r3, r2, r0
 8006686:	2a01      	cmp	r2, #1
 8006688:	4681      	mov	r9, r0
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	dc02      	bgt.n	8006694 <_printf_float+0x150>
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	07d2      	lsls	r2, r2, #31
 8006692:	d501      	bpl.n	8006698 <_printf_float+0x154>
 8006694:	3301      	adds	r3, #1
 8006696:	6123      	str	r3, [r4, #16]
 8006698:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0a2      	beq.n	80065e6 <_printf_float+0xa2>
 80066a0:	232d      	movs	r3, #45	@ 0x2d
 80066a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a6:	e79e      	b.n	80065e6 <_printf_float+0xa2>
 80066a8:	9a06      	ldr	r2, [sp, #24]
 80066aa:	2a47      	cmp	r2, #71	@ 0x47
 80066ac:	d1c2      	bne.n	8006634 <_printf_float+0xf0>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1c0      	bne.n	8006634 <_printf_float+0xf0>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e7bd      	b.n	8006632 <_printf_float+0xee>
 80066b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066ba:	d9db      	bls.n	8006674 <_printf_float+0x130>
 80066bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80066c0:	d118      	bne.n	80066f4 <_printf_float+0x1b0>
 80066c2:	2900      	cmp	r1, #0
 80066c4:	6863      	ldr	r3, [r4, #4]
 80066c6:	dd0b      	ble.n	80066e0 <_printf_float+0x19c>
 80066c8:	6121      	str	r1, [r4, #16]
 80066ca:	b913      	cbnz	r3, 80066d2 <_printf_float+0x18e>
 80066cc:	6822      	ldr	r2, [r4, #0]
 80066ce:	07d0      	lsls	r0, r2, #31
 80066d0:	d502      	bpl.n	80066d8 <_printf_float+0x194>
 80066d2:	3301      	adds	r3, #1
 80066d4:	440b      	add	r3, r1
 80066d6:	6123      	str	r3, [r4, #16]
 80066d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066da:	f04f 0900 	mov.w	r9, #0
 80066de:	e7db      	b.n	8006698 <_printf_float+0x154>
 80066e0:	b913      	cbnz	r3, 80066e8 <_printf_float+0x1a4>
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	07d2      	lsls	r2, r2, #31
 80066e6:	d501      	bpl.n	80066ec <_printf_float+0x1a8>
 80066e8:	3302      	adds	r3, #2
 80066ea:	e7f4      	b.n	80066d6 <_printf_float+0x192>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e7f2      	b.n	80066d6 <_printf_float+0x192>
 80066f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066f6:	4299      	cmp	r1, r3
 80066f8:	db05      	blt.n	8006706 <_printf_float+0x1c2>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	6121      	str	r1, [r4, #16]
 80066fe:	07d8      	lsls	r0, r3, #31
 8006700:	d5ea      	bpl.n	80066d8 <_printf_float+0x194>
 8006702:	1c4b      	adds	r3, r1, #1
 8006704:	e7e7      	b.n	80066d6 <_printf_float+0x192>
 8006706:	2900      	cmp	r1, #0
 8006708:	bfd4      	ite	le
 800670a:	f1c1 0202 	rsble	r2, r1, #2
 800670e:	2201      	movgt	r2, #1
 8006710:	4413      	add	r3, r2
 8006712:	e7e0      	b.n	80066d6 <_printf_float+0x192>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	055a      	lsls	r2, r3, #21
 8006718:	d407      	bmi.n	800672a <_printf_float+0x1e6>
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	4642      	mov	r2, r8
 800671e:	4631      	mov	r1, r6
 8006720:	4628      	mov	r0, r5
 8006722:	47b8      	blx	r7
 8006724:	3001      	adds	r0, #1
 8006726:	d12b      	bne.n	8006780 <_printf_float+0x23c>
 8006728:	e767      	b.n	80065fa <_printf_float+0xb6>
 800672a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800672e:	f240 80dd 	bls.w	80068ec <_printf_float+0x3a8>
 8006732:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006736:	2200      	movs	r2, #0
 8006738:	2300      	movs	r3, #0
 800673a:	f7fa f9e5 	bl	8000b08 <__aeabi_dcmpeq>
 800673e:	2800      	cmp	r0, #0
 8006740:	d033      	beq.n	80067aa <_printf_float+0x266>
 8006742:	4a37      	ldr	r2, [pc, #220]	@ (8006820 <_printf_float+0x2dc>)
 8006744:	2301      	movs	r3, #1
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	f43f af54 	beq.w	80065fa <_printf_float+0xb6>
 8006752:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006756:	4543      	cmp	r3, r8
 8006758:	db02      	blt.n	8006760 <_printf_float+0x21c>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	07d8      	lsls	r0, r3, #31
 800675e:	d50f      	bpl.n	8006780 <_printf_float+0x23c>
 8006760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	47b8      	blx	r7
 800676a:	3001      	adds	r0, #1
 800676c:	f43f af45 	beq.w	80065fa <_printf_float+0xb6>
 8006770:	f04f 0900 	mov.w	r9, #0
 8006774:	f108 38ff 	add.w	r8, r8, #4294967295
 8006778:	f104 0a1a 	add.w	sl, r4, #26
 800677c:	45c8      	cmp	r8, r9
 800677e:	dc09      	bgt.n	8006794 <_printf_float+0x250>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	079b      	lsls	r3, r3, #30
 8006784:	f100 8103 	bmi.w	800698e <_printf_float+0x44a>
 8006788:	68e0      	ldr	r0, [r4, #12]
 800678a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800678c:	4298      	cmp	r0, r3
 800678e:	bfb8      	it	lt
 8006790:	4618      	movlt	r0, r3
 8006792:	e734      	b.n	80065fe <_printf_float+0xba>
 8006794:	2301      	movs	r3, #1
 8006796:	4652      	mov	r2, sl
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f af2b 	beq.w	80065fa <_printf_float+0xb6>
 80067a4:	f109 0901 	add.w	r9, r9, #1
 80067a8:	e7e8      	b.n	800677c <_printf_float+0x238>
 80067aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	dc39      	bgt.n	8006824 <_printf_float+0x2e0>
 80067b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006820 <_printf_float+0x2dc>)
 80067b2:	2301      	movs	r3, #1
 80067b4:	4631      	mov	r1, r6
 80067b6:	4628      	mov	r0, r5
 80067b8:	47b8      	blx	r7
 80067ba:	3001      	adds	r0, #1
 80067bc:	f43f af1d 	beq.w	80065fa <_printf_float+0xb6>
 80067c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80067c4:	ea59 0303 	orrs.w	r3, r9, r3
 80067c8:	d102      	bne.n	80067d0 <_printf_float+0x28c>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	07d9      	lsls	r1, r3, #31
 80067ce:	d5d7      	bpl.n	8006780 <_printf_float+0x23c>
 80067d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f af0d 	beq.w	80065fa <_printf_float+0xb6>
 80067e0:	f04f 0a00 	mov.w	sl, #0
 80067e4:	f104 0b1a 	add.w	fp, r4, #26
 80067e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ea:	425b      	negs	r3, r3
 80067ec:	4553      	cmp	r3, sl
 80067ee:	dc01      	bgt.n	80067f4 <_printf_float+0x2b0>
 80067f0:	464b      	mov	r3, r9
 80067f2:	e793      	b.n	800671c <_printf_float+0x1d8>
 80067f4:	2301      	movs	r3, #1
 80067f6:	465a      	mov	r2, fp
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f aefb 	beq.w	80065fa <_printf_float+0xb6>
 8006804:	f10a 0a01 	add.w	sl, sl, #1
 8006808:	e7ee      	b.n	80067e8 <_printf_float+0x2a4>
 800680a:	bf00      	nop
 800680c:	7fefffff 	.word	0x7fefffff
 8006810:	0800a1b4 	.word	0x0800a1b4
 8006814:	0800a1b0 	.word	0x0800a1b0
 8006818:	0800a1bc 	.word	0x0800a1bc
 800681c:	0800a1b8 	.word	0x0800a1b8
 8006820:	0800a1c0 	.word	0x0800a1c0
 8006824:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006826:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800682a:	4553      	cmp	r3, sl
 800682c:	bfa8      	it	ge
 800682e:	4653      	movge	r3, sl
 8006830:	2b00      	cmp	r3, #0
 8006832:	4699      	mov	r9, r3
 8006834:	dc36      	bgt.n	80068a4 <_printf_float+0x360>
 8006836:	f04f 0b00 	mov.w	fp, #0
 800683a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800683e:	f104 021a 	add.w	r2, r4, #26
 8006842:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006844:	9306      	str	r3, [sp, #24]
 8006846:	eba3 0309 	sub.w	r3, r3, r9
 800684a:	455b      	cmp	r3, fp
 800684c:	dc31      	bgt.n	80068b2 <_printf_float+0x36e>
 800684e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006850:	459a      	cmp	sl, r3
 8006852:	dc3a      	bgt.n	80068ca <_printf_float+0x386>
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	07da      	lsls	r2, r3, #31
 8006858:	d437      	bmi.n	80068ca <_printf_float+0x386>
 800685a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685c:	ebaa 0903 	sub.w	r9, sl, r3
 8006860:	9b06      	ldr	r3, [sp, #24]
 8006862:	ebaa 0303 	sub.w	r3, sl, r3
 8006866:	4599      	cmp	r9, r3
 8006868:	bfa8      	it	ge
 800686a:	4699      	movge	r9, r3
 800686c:	f1b9 0f00 	cmp.w	r9, #0
 8006870:	dc33      	bgt.n	80068da <_printf_float+0x396>
 8006872:	f04f 0800 	mov.w	r8, #0
 8006876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800687a:	f104 0b1a 	add.w	fp, r4, #26
 800687e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006880:	ebaa 0303 	sub.w	r3, sl, r3
 8006884:	eba3 0309 	sub.w	r3, r3, r9
 8006888:	4543      	cmp	r3, r8
 800688a:	f77f af79 	ble.w	8006780 <_printf_float+0x23c>
 800688e:	2301      	movs	r3, #1
 8006890:	465a      	mov	r2, fp
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f aeae 	beq.w	80065fa <_printf_float+0xb6>
 800689e:	f108 0801 	add.w	r8, r8, #1
 80068a2:	e7ec      	b.n	800687e <_printf_float+0x33a>
 80068a4:	4642      	mov	r2, r8
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	d1c2      	bne.n	8006836 <_printf_float+0x2f2>
 80068b0:	e6a3      	b.n	80065fa <_printf_float+0xb6>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	9206      	str	r2, [sp, #24]
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	f43f ae9c 	beq.w	80065fa <_printf_float+0xb6>
 80068c2:	9a06      	ldr	r2, [sp, #24]
 80068c4:	f10b 0b01 	add.w	fp, fp, #1
 80068c8:	e7bb      	b.n	8006842 <_printf_float+0x2fe>
 80068ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	d1c0      	bne.n	800685a <_printf_float+0x316>
 80068d8:	e68f      	b.n	80065fa <_printf_float+0xb6>
 80068da:	9a06      	ldr	r2, [sp, #24]
 80068dc:	464b      	mov	r3, r9
 80068de:	4442      	add	r2, r8
 80068e0:	4631      	mov	r1, r6
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	d1c3      	bne.n	8006872 <_printf_float+0x32e>
 80068ea:	e686      	b.n	80065fa <_printf_float+0xb6>
 80068ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068f0:	f1ba 0f01 	cmp.w	sl, #1
 80068f4:	dc01      	bgt.n	80068fa <_printf_float+0x3b6>
 80068f6:	07db      	lsls	r3, r3, #31
 80068f8:	d536      	bpl.n	8006968 <_printf_float+0x424>
 80068fa:	2301      	movs	r3, #1
 80068fc:	4642      	mov	r2, r8
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	f43f ae78 	beq.w	80065fa <_printf_float+0xb6>
 800690a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f ae70 	beq.w	80065fa <_printf_float+0xb6>
 800691a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800691e:	2200      	movs	r2, #0
 8006920:	2300      	movs	r3, #0
 8006922:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006926:	f7fa f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800692a:	b9c0      	cbnz	r0, 800695e <_printf_float+0x41a>
 800692c:	4653      	mov	r3, sl
 800692e:	f108 0201 	add.w	r2, r8, #1
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	d10c      	bne.n	8006956 <_printf_float+0x412>
 800693c:	e65d      	b.n	80065fa <_printf_float+0xb6>
 800693e:	2301      	movs	r3, #1
 8006940:	465a      	mov	r2, fp
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	f43f ae56 	beq.w	80065fa <_printf_float+0xb6>
 800694e:	f108 0801 	add.w	r8, r8, #1
 8006952:	45d0      	cmp	r8, sl
 8006954:	dbf3      	blt.n	800693e <_printf_float+0x3fa>
 8006956:	464b      	mov	r3, r9
 8006958:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800695c:	e6df      	b.n	800671e <_printf_float+0x1da>
 800695e:	f04f 0800 	mov.w	r8, #0
 8006962:	f104 0b1a 	add.w	fp, r4, #26
 8006966:	e7f4      	b.n	8006952 <_printf_float+0x40e>
 8006968:	2301      	movs	r3, #1
 800696a:	4642      	mov	r2, r8
 800696c:	e7e1      	b.n	8006932 <_printf_float+0x3ee>
 800696e:	2301      	movs	r3, #1
 8006970:	464a      	mov	r2, r9
 8006972:	4631      	mov	r1, r6
 8006974:	4628      	mov	r0, r5
 8006976:	47b8      	blx	r7
 8006978:	3001      	adds	r0, #1
 800697a:	f43f ae3e 	beq.w	80065fa <_printf_float+0xb6>
 800697e:	f108 0801 	add.w	r8, r8, #1
 8006982:	68e3      	ldr	r3, [r4, #12]
 8006984:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006986:	1a5b      	subs	r3, r3, r1
 8006988:	4543      	cmp	r3, r8
 800698a:	dcf0      	bgt.n	800696e <_printf_float+0x42a>
 800698c:	e6fc      	b.n	8006788 <_printf_float+0x244>
 800698e:	f04f 0800 	mov.w	r8, #0
 8006992:	f104 0919 	add.w	r9, r4, #25
 8006996:	e7f4      	b.n	8006982 <_printf_float+0x43e>

08006998 <_printf_common>:
 8006998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	4616      	mov	r6, r2
 800699e:	4698      	mov	r8, r3
 80069a0:	688a      	ldr	r2, [r1, #8]
 80069a2:	690b      	ldr	r3, [r1, #16]
 80069a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069a8:	4293      	cmp	r3, r2
 80069aa:	bfb8      	it	lt
 80069ac:	4613      	movlt	r3, r2
 80069ae:	6033      	str	r3, [r6, #0]
 80069b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069b4:	4607      	mov	r7, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	b10a      	cbz	r2, 80069be <_printf_common+0x26>
 80069ba:	3301      	adds	r3, #1
 80069bc:	6033      	str	r3, [r6, #0]
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	0699      	lsls	r1, r3, #26
 80069c2:	bf42      	ittt	mi
 80069c4:	6833      	ldrmi	r3, [r6, #0]
 80069c6:	3302      	addmi	r3, #2
 80069c8:	6033      	strmi	r3, [r6, #0]
 80069ca:	6825      	ldr	r5, [r4, #0]
 80069cc:	f015 0506 	ands.w	r5, r5, #6
 80069d0:	d106      	bne.n	80069e0 <_printf_common+0x48>
 80069d2:	f104 0a19 	add.w	sl, r4, #25
 80069d6:	68e3      	ldr	r3, [r4, #12]
 80069d8:	6832      	ldr	r2, [r6, #0]
 80069da:	1a9b      	subs	r3, r3, r2
 80069dc:	42ab      	cmp	r3, r5
 80069de:	dc26      	bgt.n	8006a2e <_printf_common+0x96>
 80069e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069e4:	6822      	ldr	r2, [r4, #0]
 80069e6:	3b00      	subs	r3, #0
 80069e8:	bf18      	it	ne
 80069ea:	2301      	movne	r3, #1
 80069ec:	0692      	lsls	r2, r2, #26
 80069ee:	d42b      	bmi.n	8006a48 <_printf_common+0xb0>
 80069f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069f4:	4641      	mov	r1, r8
 80069f6:	4638      	mov	r0, r7
 80069f8:	47c8      	blx	r9
 80069fa:	3001      	adds	r0, #1
 80069fc:	d01e      	beq.n	8006a3c <_printf_common+0xa4>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	6922      	ldr	r2, [r4, #16]
 8006a02:	f003 0306 	and.w	r3, r3, #6
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	bf02      	ittt	eq
 8006a0a:	68e5      	ldreq	r5, [r4, #12]
 8006a0c:	6833      	ldreq	r3, [r6, #0]
 8006a0e:	1aed      	subeq	r5, r5, r3
 8006a10:	68a3      	ldr	r3, [r4, #8]
 8006a12:	bf0c      	ite	eq
 8006a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a18:	2500      	movne	r5, #0
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	bfc4      	itt	gt
 8006a1e:	1a9b      	subgt	r3, r3, r2
 8006a20:	18ed      	addgt	r5, r5, r3
 8006a22:	2600      	movs	r6, #0
 8006a24:	341a      	adds	r4, #26
 8006a26:	42b5      	cmp	r5, r6
 8006a28:	d11a      	bne.n	8006a60 <_printf_common+0xc8>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e008      	b.n	8006a40 <_printf_common+0xa8>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4652      	mov	r2, sl
 8006a32:	4641      	mov	r1, r8
 8006a34:	4638      	mov	r0, r7
 8006a36:	47c8      	blx	r9
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d103      	bne.n	8006a44 <_printf_common+0xac>
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a44:	3501      	adds	r5, #1
 8006a46:	e7c6      	b.n	80069d6 <_printf_common+0x3e>
 8006a48:	18e1      	adds	r1, r4, r3
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	2030      	movs	r0, #48	@ 0x30
 8006a4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a52:	4422      	add	r2, r4
 8006a54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	e7c7      	b.n	80069f0 <_printf_common+0x58>
 8006a60:	2301      	movs	r3, #1
 8006a62:	4622      	mov	r2, r4
 8006a64:	4641      	mov	r1, r8
 8006a66:	4638      	mov	r0, r7
 8006a68:	47c8      	blx	r9
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d0e6      	beq.n	8006a3c <_printf_common+0xa4>
 8006a6e:	3601      	adds	r6, #1
 8006a70:	e7d9      	b.n	8006a26 <_printf_common+0x8e>
	...

08006a74 <_printf_i>:
 8006a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a78:	7e0f      	ldrb	r7, [r1, #24]
 8006a7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a7c:	2f78      	cmp	r7, #120	@ 0x78
 8006a7e:	4691      	mov	r9, r2
 8006a80:	4680      	mov	r8, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	469a      	mov	sl, r3
 8006a86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a8a:	d807      	bhi.n	8006a9c <_printf_i+0x28>
 8006a8c:	2f62      	cmp	r7, #98	@ 0x62
 8006a8e:	d80a      	bhi.n	8006aa6 <_printf_i+0x32>
 8006a90:	2f00      	cmp	r7, #0
 8006a92:	f000 80d1 	beq.w	8006c38 <_printf_i+0x1c4>
 8006a96:	2f58      	cmp	r7, #88	@ 0x58
 8006a98:	f000 80b8 	beq.w	8006c0c <_printf_i+0x198>
 8006a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006aa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006aa4:	e03a      	b.n	8006b1c <_printf_i+0xa8>
 8006aa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006aaa:	2b15      	cmp	r3, #21
 8006aac:	d8f6      	bhi.n	8006a9c <_printf_i+0x28>
 8006aae:	a101      	add	r1, pc, #4	@ (adr r1, 8006ab4 <_printf_i+0x40>)
 8006ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ab4:	08006b0d 	.word	0x08006b0d
 8006ab8:	08006b21 	.word	0x08006b21
 8006abc:	08006a9d 	.word	0x08006a9d
 8006ac0:	08006a9d 	.word	0x08006a9d
 8006ac4:	08006a9d 	.word	0x08006a9d
 8006ac8:	08006a9d 	.word	0x08006a9d
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006a9d 	.word	0x08006a9d
 8006ad4:	08006a9d 	.word	0x08006a9d
 8006ad8:	08006a9d 	.word	0x08006a9d
 8006adc:	08006a9d 	.word	0x08006a9d
 8006ae0:	08006c1f 	.word	0x08006c1f
 8006ae4:	08006b4b 	.word	0x08006b4b
 8006ae8:	08006bd9 	.word	0x08006bd9
 8006aec:	08006a9d 	.word	0x08006a9d
 8006af0:	08006a9d 	.word	0x08006a9d
 8006af4:	08006c41 	.word	0x08006c41
 8006af8:	08006a9d 	.word	0x08006a9d
 8006afc:	08006b4b 	.word	0x08006b4b
 8006b00:	08006a9d 	.word	0x08006a9d
 8006b04:	08006a9d 	.word	0x08006a9d
 8006b08:	08006be1 	.word	0x08006be1
 8006b0c:	6833      	ldr	r3, [r6, #0]
 8006b0e:	1d1a      	adds	r2, r3, #4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6032      	str	r2, [r6, #0]
 8006b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e09c      	b.n	8006c5a <_printf_i+0x1e6>
 8006b20:	6833      	ldr	r3, [r6, #0]
 8006b22:	6820      	ldr	r0, [r4, #0]
 8006b24:	1d19      	adds	r1, r3, #4
 8006b26:	6031      	str	r1, [r6, #0]
 8006b28:	0606      	lsls	r6, r0, #24
 8006b2a:	d501      	bpl.n	8006b30 <_printf_i+0xbc>
 8006b2c:	681d      	ldr	r5, [r3, #0]
 8006b2e:	e003      	b.n	8006b38 <_printf_i+0xc4>
 8006b30:	0645      	lsls	r5, r0, #25
 8006b32:	d5fb      	bpl.n	8006b2c <_printf_i+0xb8>
 8006b34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b38:	2d00      	cmp	r5, #0
 8006b3a:	da03      	bge.n	8006b44 <_printf_i+0xd0>
 8006b3c:	232d      	movs	r3, #45	@ 0x2d
 8006b3e:	426d      	negs	r5, r5
 8006b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b44:	4858      	ldr	r0, [pc, #352]	@ (8006ca8 <_printf_i+0x234>)
 8006b46:	230a      	movs	r3, #10
 8006b48:	e011      	b.n	8006b6e <_printf_i+0xfa>
 8006b4a:	6821      	ldr	r1, [r4, #0]
 8006b4c:	6833      	ldr	r3, [r6, #0]
 8006b4e:	0608      	lsls	r0, r1, #24
 8006b50:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b54:	d402      	bmi.n	8006b5c <_printf_i+0xe8>
 8006b56:	0649      	lsls	r1, r1, #25
 8006b58:	bf48      	it	mi
 8006b5a:	b2ad      	uxthmi	r5, r5
 8006b5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b5e:	4852      	ldr	r0, [pc, #328]	@ (8006ca8 <_printf_i+0x234>)
 8006b60:	6033      	str	r3, [r6, #0]
 8006b62:	bf14      	ite	ne
 8006b64:	230a      	movne	r3, #10
 8006b66:	2308      	moveq	r3, #8
 8006b68:	2100      	movs	r1, #0
 8006b6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b6e:	6866      	ldr	r6, [r4, #4]
 8006b70:	60a6      	str	r6, [r4, #8]
 8006b72:	2e00      	cmp	r6, #0
 8006b74:	db05      	blt.n	8006b82 <_printf_i+0x10e>
 8006b76:	6821      	ldr	r1, [r4, #0]
 8006b78:	432e      	orrs	r6, r5
 8006b7a:	f021 0104 	bic.w	r1, r1, #4
 8006b7e:	6021      	str	r1, [r4, #0]
 8006b80:	d04b      	beq.n	8006c1a <_printf_i+0x1a6>
 8006b82:	4616      	mov	r6, r2
 8006b84:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b88:	fb03 5711 	mls	r7, r3, r1, r5
 8006b8c:	5dc7      	ldrb	r7, [r0, r7]
 8006b8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b92:	462f      	mov	r7, r5
 8006b94:	42bb      	cmp	r3, r7
 8006b96:	460d      	mov	r5, r1
 8006b98:	d9f4      	bls.n	8006b84 <_printf_i+0x110>
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d10b      	bne.n	8006bb6 <_printf_i+0x142>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	07df      	lsls	r7, r3, #31
 8006ba2:	d508      	bpl.n	8006bb6 <_printf_i+0x142>
 8006ba4:	6923      	ldr	r3, [r4, #16]
 8006ba6:	6861      	ldr	r1, [r4, #4]
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	bfde      	ittt	le
 8006bac:	2330      	movle	r3, #48	@ 0x30
 8006bae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bb6:	1b92      	subs	r2, r2, r6
 8006bb8:	6122      	str	r2, [r4, #16]
 8006bba:	f8cd a000 	str.w	sl, [sp]
 8006bbe:	464b      	mov	r3, r9
 8006bc0:	aa03      	add	r2, sp, #12
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	f7ff fee7 	bl	8006998 <_printf_common>
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d14a      	bne.n	8006c64 <_printf_i+0x1f0>
 8006bce:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd2:	b004      	add	sp, #16
 8006bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	f043 0320 	orr.w	r3, r3, #32
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	4832      	ldr	r0, [pc, #200]	@ (8006cac <_printf_i+0x238>)
 8006be2:	2778      	movs	r7, #120	@ 0x78
 8006be4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	6831      	ldr	r1, [r6, #0]
 8006bec:	061f      	lsls	r7, r3, #24
 8006bee:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bf2:	d402      	bmi.n	8006bfa <_printf_i+0x186>
 8006bf4:	065f      	lsls	r7, r3, #25
 8006bf6:	bf48      	it	mi
 8006bf8:	b2ad      	uxthmi	r5, r5
 8006bfa:	6031      	str	r1, [r6, #0]
 8006bfc:	07d9      	lsls	r1, r3, #31
 8006bfe:	bf44      	itt	mi
 8006c00:	f043 0320 	orrmi.w	r3, r3, #32
 8006c04:	6023      	strmi	r3, [r4, #0]
 8006c06:	b11d      	cbz	r5, 8006c10 <_printf_i+0x19c>
 8006c08:	2310      	movs	r3, #16
 8006c0a:	e7ad      	b.n	8006b68 <_printf_i+0xf4>
 8006c0c:	4826      	ldr	r0, [pc, #152]	@ (8006ca8 <_printf_i+0x234>)
 8006c0e:	e7e9      	b.n	8006be4 <_printf_i+0x170>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	f023 0320 	bic.w	r3, r3, #32
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	e7f6      	b.n	8006c08 <_printf_i+0x194>
 8006c1a:	4616      	mov	r6, r2
 8006c1c:	e7bd      	b.n	8006b9a <_printf_i+0x126>
 8006c1e:	6833      	ldr	r3, [r6, #0]
 8006c20:	6825      	ldr	r5, [r4, #0]
 8006c22:	6961      	ldr	r1, [r4, #20]
 8006c24:	1d18      	adds	r0, r3, #4
 8006c26:	6030      	str	r0, [r6, #0]
 8006c28:	062e      	lsls	r6, r5, #24
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	d501      	bpl.n	8006c32 <_printf_i+0x1be>
 8006c2e:	6019      	str	r1, [r3, #0]
 8006c30:	e002      	b.n	8006c38 <_printf_i+0x1c4>
 8006c32:	0668      	lsls	r0, r5, #25
 8006c34:	d5fb      	bpl.n	8006c2e <_printf_i+0x1ba>
 8006c36:	8019      	strh	r1, [r3, #0]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	4616      	mov	r6, r2
 8006c3e:	e7bc      	b.n	8006bba <_printf_i+0x146>
 8006c40:	6833      	ldr	r3, [r6, #0]
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	6032      	str	r2, [r6, #0]
 8006c46:	681e      	ldr	r6, [r3, #0]
 8006c48:	6862      	ldr	r2, [r4, #4]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f7f9 fadf 	bl	8000210 <memchr>
 8006c52:	b108      	cbz	r0, 8006c58 <_printf_i+0x1e4>
 8006c54:	1b80      	subs	r0, r0, r6
 8006c56:	6060      	str	r0, [r4, #4]
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	6123      	str	r3, [r4, #16]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c62:	e7aa      	b.n	8006bba <_printf_i+0x146>
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	4632      	mov	r2, r6
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	47d0      	blx	sl
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d0ad      	beq.n	8006bce <_printf_i+0x15a>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	079b      	lsls	r3, r3, #30
 8006c76:	d413      	bmi.n	8006ca0 <_printf_i+0x22c>
 8006c78:	68e0      	ldr	r0, [r4, #12]
 8006c7a:	9b03      	ldr	r3, [sp, #12]
 8006c7c:	4298      	cmp	r0, r3
 8006c7e:	bfb8      	it	lt
 8006c80:	4618      	movlt	r0, r3
 8006c82:	e7a6      	b.n	8006bd2 <_printf_i+0x15e>
 8006c84:	2301      	movs	r3, #1
 8006c86:	4632      	mov	r2, r6
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	47d0      	blx	sl
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d09d      	beq.n	8006bce <_printf_i+0x15a>
 8006c92:	3501      	adds	r5, #1
 8006c94:	68e3      	ldr	r3, [r4, #12]
 8006c96:	9903      	ldr	r1, [sp, #12]
 8006c98:	1a5b      	subs	r3, r3, r1
 8006c9a:	42ab      	cmp	r3, r5
 8006c9c:	dcf2      	bgt.n	8006c84 <_printf_i+0x210>
 8006c9e:	e7eb      	b.n	8006c78 <_printf_i+0x204>
 8006ca0:	2500      	movs	r5, #0
 8006ca2:	f104 0619 	add.w	r6, r4, #25
 8006ca6:	e7f5      	b.n	8006c94 <_printf_i+0x220>
 8006ca8:	0800a1c2 	.word	0x0800a1c2
 8006cac:	0800a1d3 	.word	0x0800a1d3

08006cb0 <std>:
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cbe:	6083      	str	r3, [r0, #8]
 8006cc0:	8181      	strh	r1, [r0, #12]
 8006cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cc4:	81c2      	strh	r2, [r0, #14]
 8006cc6:	6183      	str	r3, [r0, #24]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	2208      	movs	r2, #8
 8006ccc:	305c      	adds	r0, #92	@ 0x5c
 8006cce:	f000 f916 	bl	8006efe <memset>
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <std+0x58>)
 8006cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <std+0x5c>)
 8006cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <std+0x60>)
 8006cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cde:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <std+0x64>)
 8006ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <std+0x68>)
 8006ce4:	6224      	str	r4, [r4, #32]
 8006ce6:	429c      	cmp	r4, r3
 8006ce8:	d006      	beq.n	8006cf8 <std+0x48>
 8006cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cee:	4294      	cmp	r4, r2
 8006cf0:	d002      	beq.n	8006cf8 <std+0x48>
 8006cf2:	33d0      	adds	r3, #208	@ 0xd0
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	d105      	bne.n	8006d04 <std+0x54>
 8006cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d00:	f000 b97a 	b.w	8006ff8 <__retarget_lock_init_recursive>
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	bf00      	nop
 8006d08:	08006e79 	.word	0x08006e79
 8006d0c:	08006e9b 	.word	0x08006e9b
 8006d10:	08006ed3 	.word	0x08006ed3
 8006d14:	08006ef7 	.word	0x08006ef7
 8006d18:	20000ea0 	.word	0x20000ea0

08006d1c <stdio_exit_handler>:
 8006d1c:	4a02      	ldr	r2, [pc, #8]	@ (8006d28 <stdio_exit_handler+0xc>)
 8006d1e:	4903      	ldr	r1, [pc, #12]	@ (8006d2c <stdio_exit_handler+0x10>)
 8006d20:	4803      	ldr	r0, [pc, #12]	@ (8006d30 <stdio_exit_handler+0x14>)
 8006d22:	f000 b869 	b.w	8006df8 <_fwalk_sglue>
 8006d26:	bf00      	nop
 8006d28:	2000000c 	.word	0x2000000c
 8006d2c:	0800895d 	.word	0x0800895d
 8006d30:	2000001c 	.word	0x2000001c

08006d34 <cleanup_stdio>:
 8006d34:	6841      	ldr	r1, [r0, #4]
 8006d36:	4b0c      	ldr	r3, [pc, #48]	@ (8006d68 <cleanup_stdio+0x34>)
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	d001      	beq.n	8006d44 <cleanup_stdio+0x10>
 8006d40:	f001 fe0c 	bl	800895c <_fflush_r>
 8006d44:	68a1      	ldr	r1, [r4, #8]
 8006d46:	4b09      	ldr	r3, [pc, #36]	@ (8006d6c <cleanup_stdio+0x38>)
 8006d48:	4299      	cmp	r1, r3
 8006d4a:	d002      	beq.n	8006d52 <cleanup_stdio+0x1e>
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f001 fe05 	bl	800895c <_fflush_r>
 8006d52:	68e1      	ldr	r1, [r4, #12]
 8006d54:	4b06      	ldr	r3, [pc, #24]	@ (8006d70 <cleanup_stdio+0x3c>)
 8006d56:	4299      	cmp	r1, r3
 8006d58:	d004      	beq.n	8006d64 <cleanup_stdio+0x30>
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d60:	f001 bdfc 	b.w	800895c <_fflush_r>
 8006d64:	bd10      	pop	{r4, pc}
 8006d66:	bf00      	nop
 8006d68:	20000ea0 	.word	0x20000ea0
 8006d6c:	20000f08 	.word	0x20000f08
 8006d70:	20000f70 	.word	0x20000f70

08006d74 <global_stdio_init.part.0>:
 8006d74:	b510      	push	{r4, lr}
 8006d76:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <global_stdio_init.part.0+0x30>)
 8006d78:	4c0b      	ldr	r4, [pc, #44]	@ (8006da8 <global_stdio_init.part.0+0x34>)
 8006d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006dac <global_stdio_init.part.0+0x38>)
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	2200      	movs	r2, #0
 8006d82:	2104      	movs	r1, #4
 8006d84:	f7ff ff94 	bl	8006cb0 <std>
 8006d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	2109      	movs	r1, #9
 8006d90:	f7ff ff8e 	bl	8006cb0 <std>
 8006d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d98:	2202      	movs	r2, #2
 8006d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d9e:	2112      	movs	r1, #18
 8006da0:	f7ff bf86 	b.w	8006cb0 <std>
 8006da4:	20000fd8 	.word	0x20000fd8
 8006da8:	20000ea0 	.word	0x20000ea0
 8006dac:	08006d1d 	.word	0x08006d1d

08006db0 <__sfp_lock_acquire>:
 8006db0:	4801      	ldr	r0, [pc, #4]	@ (8006db8 <__sfp_lock_acquire+0x8>)
 8006db2:	f000 b922 	b.w	8006ffa <__retarget_lock_acquire_recursive>
 8006db6:	bf00      	nop
 8006db8:	20000fe1 	.word	0x20000fe1

08006dbc <__sfp_lock_release>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	@ (8006dc4 <__sfp_lock_release+0x8>)
 8006dbe:	f000 b91d 	b.w	8006ffc <__retarget_lock_release_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	20000fe1 	.word	0x20000fe1

08006dc8 <__sinit>:
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	4604      	mov	r4, r0
 8006dcc:	f7ff fff0 	bl	8006db0 <__sfp_lock_acquire>
 8006dd0:	6a23      	ldr	r3, [r4, #32]
 8006dd2:	b11b      	cbz	r3, 8006ddc <__sinit+0x14>
 8006dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd8:	f7ff bff0 	b.w	8006dbc <__sfp_lock_release>
 8006ddc:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <__sinit+0x28>)
 8006dde:	6223      	str	r3, [r4, #32]
 8006de0:	4b04      	ldr	r3, [pc, #16]	@ (8006df4 <__sinit+0x2c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f5      	bne.n	8006dd4 <__sinit+0xc>
 8006de8:	f7ff ffc4 	bl	8006d74 <global_stdio_init.part.0>
 8006dec:	e7f2      	b.n	8006dd4 <__sinit+0xc>
 8006dee:	bf00      	nop
 8006df0:	08006d35 	.word	0x08006d35
 8006df4:	20000fd8 	.word	0x20000fd8

08006df8 <_fwalk_sglue>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	4688      	mov	r8, r1
 8006e00:	4614      	mov	r4, r2
 8006e02:	2600      	movs	r6, #0
 8006e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e08:	f1b9 0901 	subs.w	r9, r9, #1
 8006e0c:	d505      	bpl.n	8006e1a <_fwalk_sglue+0x22>
 8006e0e:	6824      	ldr	r4, [r4, #0]
 8006e10:	2c00      	cmp	r4, #0
 8006e12:	d1f7      	bne.n	8006e04 <_fwalk_sglue+0xc>
 8006e14:	4630      	mov	r0, r6
 8006e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1a:	89ab      	ldrh	r3, [r5, #12]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d907      	bls.n	8006e30 <_fwalk_sglue+0x38>
 8006e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e24:	3301      	adds	r3, #1
 8006e26:	d003      	beq.n	8006e30 <_fwalk_sglue+0x38>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	47c0      	blx	r8
 8006e2e:	4306      	orrs	r6, r0
 8006e30:	3568      	adds	r5, #104	@ 0x68
 8006e32:	e7e9      	b.n	8006e08 <_fwalk_sglue+0x10>

08006e34 <siprintf>:
 8006e34:	b40e      	push	{r1, r2, r3}
 8006e36:	b510      	push	{r4, lr}
 8006e38:	b09d      	sub	sp, #116	@ 0x74
 8006e3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006e3c:	9002      	str	r0, [sp, #8]
 8006e3e:	9006      	str	r0, [sp, #24]
 8006e40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e44:	480a      	ldr	r0, [pc, #40]	@ (8006e70 <siprintf+0x3c>)
 8006e46:	9107      	str	r1, [sp, #28]
 8006e48:	9104      	str	r1, [sp, #16]
 8006e4a:	490a      	ldr	r1, [pc, #40]	@ (8006e74 <siprintf+0x40>)
 8006e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e50:	9105      	str	r1, [sp, #20]
 8006e52:	2400      	movs	r4, #0
 8006e54:	a902      	add	r1, sp, #8
 8006e56:	6800      	ldr	r0, [r0, #0]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006e5c:	f001 fbfe 	bl	800865c <_svfiprintf_r>
 8006e60:	9b02      	ldr	r3, [sp, #8]
 8006e62:	701c      	strb	r4, [r3, #0]
 8006e64:	b01d      	add	sp, #116	@ 0x74
 8006e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e6a:	b003      	add	sp, #12
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	20000018 	.word	0x20000018
 8006e74:	ffff0208 	.word	0xffff0208

08006e78 <__sread>:
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e80:	f000 f86c 	bl	8006f5c <_read_r>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	bfab      	itete	ge
 8006e88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e8c:	181b      	addge	r3, r3, r0
 8006e8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e92:	bfac      	ite	ge
 8006e94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e96:	81a3      	strhlt	r3, [r4, #12]
 8006e98:	bd10      	pop	{r4, pc}

08006e9a <__swrite>:
 8006e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9e:	461f      	mov	r7, r3
 8006ea0:	898b      	ldrh	r3, [r1, #12]
 8006ea2:	05db      	lsls	r3, r3, #23
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	d505      	bpl.n	8006eb8 <__swrite+0x1e>
 8006eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f000 f840 	bl	8006f38 <_lseek_r>
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ebe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	4628      	mov	r0, r5
 8006eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ece:	f000 b857 	b.w	8006f80 <_write_r>

08006ed2 <__sseek>:
 8006ed2:	b510      	push	{r4, lr}
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eda:	f000 f82d 	bl	8006f38 <_lseek_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	bf15      	itete	ne
 8006ee4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ee6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eee:	81a3      	strheq	r3, [r4, #12]
 8006ef0:	bf18      	it	ne
 8006ef2:	81a3      	strhne	r3, [r4, #12]
 8006ef4:	bd10      	pop	{r4, pc}

08006ef6 <__sclose>:
 8006ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efa:	f000 b80d 	b.w	8006f18 <_close_r>

08006efe <memset>:
 8006efe:	4402      	add	r2, r0
 8006f00:	4603      	mov	r3, r0
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d100      	bne.n	8006f08 <memset+0xa>
 8006f06:	4770      	bx	lr
 8006f08:	f803 1b01 	strb.w	r1, [r3], #1
 8006f0c:	e7f9      	b.n	8006f02 <memset+0x4>
	...

08006f10 <_localeconv_r>:
 8006f10:	4800      	ldr	r0, [pc, #0]	@ (8006f14 <_localeconv_r+0x4>)
 8006f12:	4770      	bx	lr
 8006f14:	20000158 	.word	0x20000158

08006f18 <_close_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4d06      	ldr	r5, [pc, #24]	@ (8006f34 <_close_r+0x1c>)
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	4604      	mov	r4, r0
 8006f20:	4608      	mov	r0, r1
 8006f22:	602b      	str	r3, [r5, #0]
 8006f24:	f7fb ff88 	bl	8002e38 <_close>
 8006f28:	1c43      	adds	r3, r0, #1
 8006f2a:	d102      	bne.n	8006f32 <_close_r+0x1a>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	b103      	cbz	r3, 8006f32 <_close_r+0x1a>
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
 8006f34:	20000fdc 	.word	0x20000fdc

08006f38 <_lseek_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d07      	ldr	r5, [pc, #28]	@ (8006f58 <_lseek_r+0x20>)
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	4608      	mov	r0, r1
 8006f40:	4611      	mov	r1, r2
 8006f42:	2200      	movs	r2, #0
 8006f44:	602a      	str	r2, [r5, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f7fb ff82 	bl	8002e50 <_lseek>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_lseek_r+0x1e>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_lseek_r+0x1e>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	20000fdc 	.word	0x20000fdc

08006f5c <_read_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	@ (8006f7c <_read_r+0x20>)
 8006f60:	4604      	mov	r4, r0
 8006f62:	4608      	mov	r0, r1
 8006f64:	4611      	mov	r1, r2
 8006f66:	2200      	movs	r2, #0
 8006f68:	602a      	str	r2, [r5, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f7fb ff48 	bl	8002e00 <_read>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_read_r+0x1e>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_read_r+0x1e>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	20000fdc 	.word	0x20000fdc

08006f80 <_write_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d07      	ldr	r5, [pc, #28]	@ (8006fa0 <_write_r+0x20>)
 8006f84:	4604      	mov	r4, r0
 8006f86:	4608      	mov	r0, r1
 8006f88:	4611      	mov	r1, r2
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	602a      	str	r2, [r5, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f7fb ff44 	bl	8002e1c <_write>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_write_r+0x1e>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_write_r+0x1e>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	20000fdc 	.word	0x20000fdc

08006fa4 <__errno>:
 8006fa4:	4b01      	ldr	r3, [pc, #4]	@ (8006fac <__errno+0x8>)
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20000018 	.word	0x20000018

08006fb0 <__libc_init_array>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8006fe8 <__libc_init_array+0x38>)
 8006fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8006fec <__libc_init_array+0x3c>)
 8006fb6:	1b64      	subs	r4, r4, r5
 8006fb8:	10a4      	asrs	r4, r4, #2
 8006fba:	2600      	movs	r6, #0
 8006fbc:	42a6      	cmp	r6, r4
 8006fbe:	d109      	bne.n	8006fd4 <__libc_init_array+0x24>
 8006fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ff0 <__libc_init_array+0x40>)
 8006fc2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ff4 <__libc_init_array+0x44>)
 8006fc4:	f003 f88c 	bl	800a0e0 <_init>
 8006fc8:	1b64      	subs	r4, r4, r5
 8006fca:	10a4      	asrs	r4, r4, #2
 8006fcc:	2600      	movs	r6, #0
 8006fce:	42a6      	cmp	r6, r4
 8006fd0:	d105      	bne.n	8006fde <__libc_init_array+0x2e>
 8006fd2:	bd70      	pop	{r4, r5, r6, pc}
 8006fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd8:	4798      	blx	r3
 8006fda:	3601      	adds	r6, #1
 8006fdc:	e7ee      	b.n	8006fbc <__libc_init_array+0xc>
 8006fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe2:	4798      	blx	r3
 8006fe4:	3601      	adds	r6, #1
 8006fe6:	e7f2      	b.n	8006fce <__libc_init_array+0x1e>
 8006fe8:	0800a708 	.word	0x0800a708
 8006fec:	0800a708 	.word	0x0800a708
 8006ff0:	0800a708 	.word	0x0800a708
 8006ff4:	0800a70c 	.word	0x0800a70c

08006ff8 <__retarget_lock_init_recursive>:
 8006ff8:	4770      	bx	lr

08006ffa <__retarget_lock_acquire_recursive>:
 8006ffa:	4770      	bx	lr

08006ffc <__retarget_lock_release_recursive>:
 8006ffc:	4770      	bx	lr

08006ffe <quorem>:
 8006ffe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007002:	6903      	ldr	r3, [r0, #16]
 8007004:	690c      	ldr	r4, [r1, #16]
 8007006:	42a3      	cmp	r3, r4
 8007008:	4607      	mov	r7, r0
 800700a:	db7e      	blt.n	800710a <quorem+0x10c>
 800700c:	3c01      	subs	r4, #1
 800700e:	f101 0814 	add.w	r8, r1, #20
 8007012:	00a3      	lsls	r3, r4, #2
 8007014:	f100 0514 	add.w	r5, r0, #20
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007028:	3301      	adds	r3, #1
 800702a:	429a      	cmp	r2, r3
 800702c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007030:	fbb2 f6f3 	udiv	r6, r2, r3
 8007034:	d32e      	bcc.n	8007094 <quorem+0x96>
 8007036:	f04f 0a00 	mov.w	sl, #0
 800703a:	46c4      	mov	ip, r8
 800703c:	46ae      	mov	lr, r5
 800703e:	46d3      	mov	fp, sl
 8007040:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007044:	b298      	uxth	r0, r3
 8007046:	fb06 a000 	mla	r0, r6, r0, sl
 800704a:	0c02      	lsrs	r2, r0, #16
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	fb06 2303 	mla	r3, r6, r3, r2
 8007052:	f8de 2000 	ldr.w	r2, [lr]
 8007056:	b280      	uxth	r0, r0
 8007058:	b292      	uxth	r2, r2
 800705a:	1a12      	subs	r2, r2, r0
 800705c:	445a      	add	r2, fp
 800705e:	f8de 0000 	ldr.w	r0, [lr]
 8007062:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007066:	b29b      	uxth	r3, r3
 8007068:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800706c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007070:	b292      	uxth	r2, r2
 8007072:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007076:	45e1      	cmp	r9, ip
 8007078:	f84e 2b04 	str.w	r2, [lr], #4
 800707c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007080:	d2de      	bcs.n	8007040 <quorem+0x42>
 8007082:	9b00      	ldr	r3, [sp, #0]
 8007084:	58eb      	ldr	r3, [r5, r3]
 8007086:	b92b      	cbnz	r3, 8007094 <quorem+0x96>
 8007088:	9b01      	ldr	r3, [sp, #4]
 800708a:	3b04      	subs	r3, #4
 800708c:	429d      	cmp	r5, r3
 800708e:	461a      	mov	r2, r3
 8007090:	d32f      	bcc.n	80070f2 <quorem+0xf4>
 8007092:	613c      	str	r4, [r7, #16]
 8007094:	4638      	mov	r0, r7
 8007096:	f001 f97d 	bl	8008394 <__mcmp>
 800709a:	2800      	cmp	r0, #0
 800709c:	db25      	blt.n	80070ea <quorem+0xec>
 800709e:	4629      	mov	r1, r5
 80070a0:	2000      	movs	r0, #0
 80070a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80070a6:	f8d1 c000 	ldr.w	ip, [r1]
 80070aa:	fa1f fe82 	uxth.w	lr, r2
 80070ae:	fa1f f38c 	uxth.w	r3, ip
 80070b2:	eba3 030e 	sub.w	r3, r3, lr
 80070b6:	4403      	add	r3, r0
 80070b8:	0c12      	lsrs	r2, r2, #16
 80070ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80070be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070c8:	45c1      	cmp	r9, r8
 80070ca:	f841 3b04 	str.w	r3, [r1], #4
 80070ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070d2:	d2e6      	bcs.n	80070a2 <quorem+0xa4>
 80070d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070dc:	b922      	cbnz	r2, 80070e8 <quorem+0xea>
 80070de:	3b04      	subs	r3, #4
 80070e0:	429d      	cmp	r5, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	d30b      	bcc.n	80070fe <quorem+0x100>
 80070e6:	613c      	str	r4, [r7, #16]
 80070e8:	3601      	adds	r6, #1
 80070ea:	4630      	mov	r0, r6
 80070ec:	b003      	add	sp, #12
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	3b04      	subs	r3, #4
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	d1cb      	bne.n	8007092 <quorem+0x94>
 80070fa:	3c01      	subs	r4, #1
 80070fc:	e7c6      	b.n	800708c <quorem+0x8e>
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	3b04      	subs	r3, #4
 8007102:	2a00      	cmp	r2, #0
 8007104:	d1ef      	bne.n	80070e6 <quorem+0xe8>
 8007106:	3c01      	subs	r4, #1
 8007108:	e7ea      	b.n	80070e0 <quorem+0xe2>
 800710a:	2000      	movs	r0, #0
 800710c:	e7ee      	b.n	80070ec <quorem+0xee>
	...

08007110 <_dtoa_r>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	69c7      	ldr	r7, [r0, #28]
 8007116:	b097      	sub	sp, #92	@ 0x5c
 8007118:	ed8d 0b04 	vstr	d0, [sp, #16]
 800711c:	ec55 4b10 	vmov	r4, r5, d0
 8007120:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007122:	9107      	str	r1, [sp, #28]
 8007124:	4681      	mov	r9, r0
 8007126:	920c      	str	r2, [sp, #48]	@ 0x30
 8007128:	9311      	str	r3, [sp, #68]	@ 0x44
 800712a:	b97f      	cbnz	r7, 800714c <_dtoa_r+0x3c>
 800712c:	2010      	movs	r0, #16
 800712e:	f000 fe09 	bl	8007d44 <malloc>
 8007132:	4602      	mov	r2, r0
 8007134:	f8c9 001c 	str.w	r0, [r9, #28]
 8007138:	b920      	cbnz	r0, 8007144 <_dtoa_r+0x34>
 800713a:	4ba9      	ldr	r3, [pc, #676]	@ (80073e0 <_dtoa_r+0x2d0>)
 800713c:	21ef      	movs	r1, #239	@ 0xef
 800713e:	48a9      	ldr	r0, [pc, #676]	@ (80073e4 <_dtoa_r+0x2d4>)
 8007140:	f001 fc6c 	bl	8008a1c <__assert_func>
 8007144:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007148:	6007      	str	r7, [r0, #0]
 800714a:	60c7      	str	r7, [r0, #12]
 800714c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	b159      	cbz	r1, 800716c <_dtoa_r+0x5c>
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	604a      	str	r2, [r1, #4]
 8007158:	2301      	movs	r3, #1
 800715a:	4093      	lsls	r3, r2
 800715c:	608b      	str	r3, [r1, #8]
 800715e:	4648      	mov	r0, r9
 8007160:	f000 fee6 	bl	8007f30 <_Bfree>
 8007164:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	1e2b      	subs	r3, r5, #0
 800716e:	bfb9      	ittee	lt
 8007170:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007174:	9305      	strlt	r3, [sp, #20]
 8007176:	2300      	movge	r3, #0
 8007178:	6033      	strge	r3, [r6, #0]
 800717a:	9f05      	ldr	r7, [sp, #20]
 800717c:	4b9a      	ldr	r3, [pc, #616]	@ (80073e8 <_dtoa_r+0x2d8>)
 800717e:	bfbc      	itt	lt
 8007180:	2201      	movlt	r2, #1
 8007182:	6032      	strlt	r2, [r6, #0]
 8007184:	43bb      	bics	r3, r7
 8007186:	d112      	bne.n	80071ae <_dtoa_r+0x9e>
 8007188:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800718a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007194:	4323      	orrs	r3, r4
 8007196:	f000 855a 	beq.w	8007c4e <_dtoa_r+0xb3e>
 800719a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800719c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80073fc <_dtoa_r+0x2ec>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 855c 	beq.w	8007c5e <_dtoa_r+0xb4e>
 80071a6:	f10a 0303 	add.w	r3, sl, #3
 80071aa:	f000 bd56 	b.w	8007c5a <_dtoa_r+0xb4a>
 80071ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80071b2:	2200      	movs	r2, #0
 80071b4:	ec51 0b17 	vmov	r0, r1, d7
 80071b8:	2300      	movs	r3, #0
 80071ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80071be:	f7f9 fca3 	bl	8000b08 <__aeabi_dcmpeq>
 80071c2:	4680      	mov	r8, r0
 80071c4:	b158      	cbz	r0, 80071de <_dtoa_r+0xce>
 80071c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071c8:	2301      	movs	r3, #1
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071ce:	b113      	cbz	r3, 80071d6 <_dtoa_r+0xc6>
 80071d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80071d2:	4b86      	ldr	r3, [pc, #536]	@ (80073ec <_dtoa_r+0x2dc>)
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007400 <_dtoa_r+0x2f0>
 80071da:	f000 bd40 	b.w	8007c5e <_dtoa_r+0xb4e>
 80071de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80071e2:	aa14      	add	r2, sp, #80	@ 0x50
 80071e4:	a915      	add	r1, sp, #84	@ 0x54
 80071e6:	4648      	mov	r0, r9
 80071e8:	f001 f984 	bl	80084f4 <__d2b>
 80071ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80071f0:	9002      	str	r0, [sp, #8]
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	d078      	beq.n	80072e8 <_dtoa_r+0x1d8>
 80071f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80071fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007200:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007204:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007208:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800720c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007210:	4619      	mov	r1, r3
 8007212:	2200      	movs	r2, #0
 8007214:	4b76      	ldr	r3, [pc, #472]	@ (80073f0 <_dtoa_r+0x2e0>)
 8007216:	f7f9 f857 	bl	80002c8 <__aeabi_dsub>
 800721a:	a36b      	add	r3, pc, #428	@ (adr r3, 80073c8 <_dtoa_r+0x2b8>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f9 fa0a 	bl	8000638 <__aeabi_dmul>
 8007224:	a36a      	add	r3, pc, #424	@ (adr r3, 80073d0 <_dtoa_r+0x2c0>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f84f 	bl	80002cc <__adddf3>
 800722e:	4604      	mov	r4, r0
 8007230:	4630      	mov	r0, r6
 8007232:	460d      	mov	r5, r1
 8007234:	f7f9 f996 	bl	8000564 <__aeabi_i2d>
 8007238:	a367      	add	r3, pc, #412	@ (adr r3, 80073d8 <_dtoa_r+0x2c8>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f9fb 	bl	8000638 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 f83f 	bl	80002cc <__adddf3>
 800724e:	4604      	mov	r4, r0
 8007250:	460d      	mov	r5, r1
 8007252:	f7f9 fca1 	bl	8000b98 <__aeabi_d2iz>
 8007256:	2200      	movs	r2, #0
 8007258:	4607      	mov	r7, r0
 800725a:	2300      	movs	r3, #0
 800725c:	4620      	mov	r0, r4
 800725e:	4629      	mov	r1, r5
 8007260:	f7f9 fc5c 	bl	8000b1c <__aeabi_dcmplt>
 8007264:	b140      	cbz	r0, 8007278 <_dtoa_r+0x168>
 8007266:	4638      	mov	r0, r7
 8007268:	f7f9 f97c 	bl	8000564 <__aeabi_i2d>
 800726c:	4622      	mov	r2, r4
 800726e:	462b      	mov	r3, r5
 8007270:	f7f9 fc4a 	bl	8000b08 <__aeabi_dcmpeq>
 8007274:	b900      	cbnz	r0, 8007278 <_dtoa_r+0x168>
 8007276:	3f01      	subs	r7, #1
 8007278:	2f16      	cmp	r7, #22
 800727a:	d852      	bhi.n	8007322 <_dtoa_r+0x212>
 800727c:	4b5d      	ldr	r3, [pc, #372]	@ (80073f4 <_dtoa_r+0x2e4>)
 800727e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800728a:	f7f9 fc47 	bl	8000b1c <__aeabi_dcmplt>
 800728e:	2800      	cmp	r0, #0
 8007290:	d049      	beq.n	8007326 <_dtoa_r+0x216>
 8007292:	3f01      	subs	r7, #1
 8007294:	2300      	movs	r3, #0
 8007296:	9310      	str	r3, [sp, #64]	@ 0x40
 8007298:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800729a:	1b9b      	subs	r3, r3, r6
 800729c:	1e5a      	subs	r2, r3, #1
 800729e:	bf45      	ittet	mi
 80072a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80072a4:	9300      	strmi	r3, [sp, #0]
 80072a6:	2300      	movpl	r3, #0
 80072a8:	2300      	movmi	r3, #0
 80072aa:	9206      	str	r2, [sp, #24]
 80072ac:	bf54      	ite	pl
 80072ae:	9300      	strpl	r3, [sp, #0]
 80072b0:	9306      	strmi	r3, [sp, #24]
 80072b2:	2f00      	cmp	r7, #0
 80072b4:	db39      	blt.n	800732a <_dtoa_r+0x21a>
 80072b6:	9b06      	ldr	r3, [sp, #24]
 80072b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80072ba:	443b      	add	r3, r7
 80072bc:	9306      	str	r3, [sp, #24]
 80072be:	2300      	movs	r3, #0
 80072c0:	9308      	str	r3, [sp, #32]
 80072c2:	9b07      	ldr	r3, [sp, #28]
 80072c4:	2b09      	cmp	r3, #9
 80072c6:	d863      	bhi.n	8007390 <_dtoa_r+0x280>
 80072c8:	2b05      	cmp	r3, #5
 80072ca:	bfc4      	itt	gt
 80072cc:	3b04      	subgt	r3, #4
 80072ce:	9307      	strgt	r3, [sp, #28]
 80072d0:	9b07      	ldr	r3, [sp, #28]
 80072d2:	f1a3 0302 	sub.w	r3, r3, #2
 80072d6:	bfcc      	ite	gt
 80072d8:	2400      	movgt	r4, #0
 80072da:	2401      	movle	r4, #1
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d863      	bhi.n	80073a8 <_dtoa_r+0x298>
 80072e0:	e8df f003 	tbb	[pc, r3]
 80072e4:	2b375452 	.word	0x2b375452
 80072e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80072ec:	441e      	add	r6, r3
 80072ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	bfc1      	itttt	gt
 80072f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072fa:	409f      	lslgt	r7, r3
 80072fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007300:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007304:	bfd6      	itet	le
 8007306:	f1c3 0320 	rsble	r3, r3, #32
 800730a:	ea47 0003 	orrgt.w	r0, r7, r3
 800730e:	fa04 f003 	lslle.w	r0, r4, r3
 8007312:	f7f9 f917 	bl	8000544 <__aeabi_ui2d>
 8007316:	2201      	movs	r2, #1
 8007318:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800731c:	3e01      	subs	r6, #1
 800731e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007320:	e776      	b.n	8007210 <_dtoa_r+0x100>
 8007322:	2301      	movs	r3, #1
 8007324:	e7b7      	b.n	8007296 <_dtoa_r+0x186>
 8007326:	9010      	str	r0, [sp, #64]	@ 0x40
 8007328:	e7b6      	b.n	8007298 <_dtoa_r+0x188>
 800732a:	9b00      	ldr	r3, [sp, #0]
 800732c:	1bdb      	subs	r3, r3, r7
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	427b      	negs	r3, r7
 8007332:	9308      	str	r3, [sp, #32]
 8007334:	2300      	movs	r3, #0
 8007336:	930d      	str	r3, [sp, #52]	@ 0x34
 8007338:	e7c3      	b.n	80072c2 <_dtoa_r+0x1b2>
 800733a:	2301      	movs	r3, #1
 800733c:	9309      	str	r3, [sp, #36]	@ 0x24
 800733e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007340:	eb07 0b03 	add.w	fp, r7, r3
 8007344:	f10b 0301 	add.w	r3, fp, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	bfb8      	it	lt
 800734e:	2301      	movlt	r3, #1
 8007350:	e006      	b.n	8007360 <_dtoa_r+0x250>
 8007352:	2301      	movs	r3, #1
 8007354:	9309      	str	r3, [sp, #36]	@ 0x24
 8007356:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007358:	2b00      	cmp	r3, #0
 800735a:	dd28      	ble.n	80073ae <_dtoa_r+0x29e>
 800735c:	469b      	mov	fp, r3
 800735e:	9303      	str	r3, [sp, #12]
 8007360:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007364:	2100      	movs	r1, #0
 8007366:	2204      	movs	r2, #4
 8007368:	f102 0514 	add.w	r5, r2, #20
 800736c:	429d      	cmp	r5, r3
 800736e:	d926      	bls.n	80073be <_dtoa_r+0x2ae>
 8007370:	6041      	str	r1, [r0, #4]
 8007372:	4648      	mov	r0, r9
 8007374:	f000 fd9c 	bl	8007eb0 <_Balloc>
 8007378:	4682      	mov	sl, r0
 800737a:	2800      	cmp	r0, #0
 800737c:	d142      	bne.n	8007404 <_dtoa_r+0x2f4>
 800737e:	4b1e      	ldr	r3, [pc, #120]	@ (80073f8 <_dtoa_r+0x2e8>)
 8007380:	4602      	mov	r2, r0
 8007382:	f240 11af 	movw	r1, #431	@ 0x1af
 8007386:	e6da      	b.n	800713e <_dtoa_r+0x2e>
 8007388:	2300      	movs	r3, #0
 800738a:	e7e3      	b.n	8007354 <_dtoa_r+0x244>
 800738c:	2300      	movs	r3, #0
 800738e:	e7d5      	b.n	800733c <_dtoa_r+0x22c>
 8007390:	2401      	movs	r4, #1
 8007392:	2300      	movs	r3, #0
 8007394:	9307      	str	r3, [sp, #28]
 8007396:	9409      	str	r4, [sp, #36]	@ 0x24
 8007398:	f04f 3bff 	mov.w	fp, #4294967295
 800739c:	2200      	movs	r2, #0
 800739e:	f8cd b00c 	str.w	fp, [sp, #12]
 80073a2:	2312      	movs	r3, #18
 80073a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80073a6:	e7db      	b.n	8007360 <_dtoa_r+0x250>
 80073a8:	2301      	movs	r3, #1
 80073aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ac:	e7f4      	b.n	8007398 <_dtoa_r+0x288>
 80073ae:	f04f 0b01 	mov.w	fp, #1
 80073b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80073b6:	465b      	mov	r3, fp
 80073b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80073bc:	e7d0      	b.n	8007360 <_dtoa_r+0x250>
 80073be:	3101      	adds	r1, #1
 80073c0:	0052      	lsls	r2, r2, #1
 80073c2:	e7d1      	b.n	8007368 <_dtoa_r+0x258>
 80073c4:	f3af 8000 	nop.w
 80073c8:	636f4361 	.word	0x636f4361
 80073cc:	3fd287a7 	.word	0x3fd287a7
 80073d0:	8b60c8b3 	.word	0x8b60c8b3
 80073d4:	3fc68a28 	.word	0x3fc68a28
 80073d8:	509f79fb 	.word	0x509f79fb
 80073dc:	3fd34413 	.word	0x3fd34413
 80073e0:	0800a1f1 	.word	0x0800a1f1
 80073e4:	0800a208 	.word	0x0800a208
 80073e8:	7ff00000 	.word	0x7ff00000
 80073ec:	0800a1c1 	.word	0x0800a1c1
 80073f0:	3ff80000 	.word	0x3ff80000
 80073f4:	0800a358 	.word	0x0800a358
 80073f8:	0800a260 	.word	0x0800a260
 80073fc:	0800a1ed 	.word	0x0800a1ed
 8007400:	0800a1c0 	.word	0x0800a1c0
 8007404:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007408:	6018      	str	r0, [r3, #0]
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	2b0e      	cmp	r3, #14
 800740e:	f200 80a1 	bhi.w	8007554 <_dtoa_r+0x444>
 8007412:	2c00      	cmp	r4, #0
 8007414:	f000 809e 	beq.w	8007554 <_dtoa_r+0x444>
 8007418:	2f00      	cmp	r7, #0
 800741a:	dd33      	ble.n	8007484 <_dtoa_r+0x374>
 800741c:	4b9c      	ldr	r3, [pc, #624]	@ (8007690 <_dtoa_r+0x580>)
 800741e:	f007 020f 	and.w	r2, r7, #15
 8007422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007426:	ed93 7b00 	vldr	d7, [r3]
 800742a:	05f8      	lsls	r0, r7, #23
 800742c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007430:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007434:	d516      	bpl.n	8007464 <_dtoa_r+0x354>
 8007436:	4b97      	ldr	r3, [pc, #604]	@ (8007694 <_dtoa_r+0x584>)
 8007438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800743c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007440:	f7f9 fa24 	bl	800088c <__aeabi_ddiv>
 8007444:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007448:	f004 040f 	and.w	r4, r4, #15
 800744c:	2603      	movs	r6, #3
 800744e:	4d91      	ldr	r5, [pc, #580]	@ (8007694 <_dtoa_r+0x584>)
 8007450:	b954      	cbnz	r4, 8007468 <_dtoa_r+0x358>
 8007452:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800745a:	f7f9 fa17 	bl	800088c <__aeabi_ddiv>
 800745e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007462:	e028      	b.n	80074b6 <_dtoa_r+0x3a6>
 8007464:	2602      	movs	r6, #2
 8007466:	e7f2      	b.n	800744e <_dtoa_r+0x33e>
 8007468:	07e1      	lsls	r1, r4, #31
 800746a:	d508      	bpl.n	800747e <_dtoa_r+0x36e>
 800746c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007474:	f7f9 f8e0 	bl	8000638 <__aeabi_dmul>
 8007478:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800747c:	3601      	adds	r6, #1
 800747e:	1064      	asrs	r4, r4, #1
 8007480:	3508      	adds	r5, #8
 8007482:	e7e5      	b.n	8007450 <_dtoa_r+0x340>
 8007484:	f000 80af 	beq.w	80075e6 <_dtoa_r+0x4d6>
 8007488:	427c      	negs	r4, r7
 800748a:	4b81      	ldr	r3, [pc, #516]	@ (8007690 <_dtoa_r+0x580>)
 800748c:	4d81      	ldr	r5, [pc, #516]	@ (8007694 <_dtoa_r+0x584>)
 800748e:	f004 020f 	and.w	r2, r4, #15
 8007492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800749e:	f7f9 f8cb 	bl	8000638 <__aeabi_dmul>
 80074a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a6:	1124      	asrs	r4, r4, #4
 80074a8:	2300      	movs	r3, #0
 80074aa:	2602      	movs	r6, #2
 80074ac:	2c00      	cmp	r4, #0
 80074ae:	f040 808f 	bne.w	80075d0 <_dtoa_r+0x4c0>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1d3      	bne.n	800745e <_dtoa_r+0x34e>
 80074b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80074b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 8094 	beq.w	80075ea <_dtoa_r+0x4da>
 80074c2:	4b75      	ldr	r3, [pc, #468]	@ (8007698 <_dtoa_r+0x588>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f9 fb27 	bl	8000b1c <__aeabi_dcmplt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f000 808b 	beq.w	80075ea <_dtoa_r+0x4da>
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8087 	beq.w	80075ea <_dtoa_r+0x4da>
 80074dc:	f1bb 0f00 	cmp.w	fp, #0
 80074e0:	dd34      	ble.n	800754c <_dtoa_r+0x43c>
 80074e2:	4620      	mov	r0, r4
 80074e4:	4b6d      	ldr	r3, [pc, #436]	@ (800769c <_dtoa_r+0x58c>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f9 f8a5 	bl	8000638 <__aeabi_dmul>
 80074ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80074f6:	3601      	adds	r6, #1
 80074f8:	465c      	mov	r4, fp
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7f9 f832 	bl	8000564 <__aeabi_i2d>
 8007500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007504:	f7f9 f898 	bl	8000638 <__aeabi_dmul>
 8007508:	4b65      	ldr	r3, [pc, #404]	@ (80076a0 <_dtoa_r+0x590>)
 800750a:	2200      	movs	r2, #0
 800750c:	f7f8 fede 	bl	80002cc <__adddf3>
 8007510:	4605      	mov	r5, r0
 8007512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007516:	2c00      	cmp	r4, #0
 8007518:	d16a      	bne.n	80075f0 <_dtoa_r+0x4e0>
 800751a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800751e:	4b61      	ldr	r3, [pc, #388]	@ (80076a4 <_dtoa_r+0x594>)
 8007520:	2200      	movs	r2, #0
 8007522:	f7f8 fed1 	bl	80002c8 <__aeabi_dsub>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800752e:	462a      	mov	r2, r5
 8007530:	4633      	mov	r3, r6
 8007532:	f7f9 fb11 	bl	8000b58 <__aeabi_dcmpgt>
 8007536:	2800      	cmp	r0, #0
 8007538:	f040 8298 	bne.w	8007a6c <_dtoa_r+0x95c>
 800753c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007540:	462a      	mov	r2, r5
 8007542:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007546:	f7f9 fae9 	bl	8000b1c <__aeabi_dcmplt>
 800754a:	bb38      	cbnz	r0, 800759c <_dtoa_r+0x48c>
 800754c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007550:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007554:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007556:	2b00      	cmp	r3, #0
 8007558:	f2c0 8157 	blt.w	800780a <_dtoa_r+0x6fa>
 800755c:	2f0e      	cmp	r7, #14
 800755e:	f300 8154 	bgt.w	800780a <_dtoa_r+0x6fa>
 8007562:	4b4b      	ldr	r3, [pc, #300]	@ (8007690 <_dtoa_r+0x580>)
 8007564:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007568:	ed93 7b00 	vldr	d7, [r3]
 800756c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800756e:	2b00      	cmp	r3, #0
 8007570:	ed8d 7b00 	vstr	d7, [sp]
 8007574:	f280 80e5 	bge.w	8007742 <_dtoa_r+0x632>
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f300 80e1 	bgt.w	8007742 <_dtoa_r+0x632>
 8007580:	d10c      	bne.n	800759c <_dtoa_r+0x48c>
 8007582:	4b48      	ldr	r3, [pc, #288]	@ (80076a4 <_dtoa_r+0x594>)
 8007584:	2200      	movs	r2, #0
 8007586:	ec51 0b17 	vmov	r0, r1, d7
 800758a:	f7f9 f855 	bl	8000638 <__aeabi_dmul>
 800758e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007592:	f7f9 fad7 	bl	8000b44 <__aeabi_dcmpge>
 8007596:	2800      	cmp	r0, #0
 8007598:	f000 8266 	beq.w	8007a68 <_dtoa_r+0x958>
 800759c:	2400      	movs	r4, #0
 800759e:	4625      	mov	r5, r4
 80075a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075a2:	4656      	mov	r6, sl
 80075a4:	ea6f 0803 	mvn.w	r8, r3
 80075a8:	2700      	movs	r7, #0
 80075aa:	4621      	mov	r1, r4
 80075ac:	4648      	mov	r0, r9
 80075ae:	f000 fcbf 	bl	8007f30 <_Bfree>
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	f000 80bd 	beq.w	8007732 <_dtoa_r+0x622>
 80075b8:	b12f      	cbz	r7, 80075c6 <_dtoa_r+0x4b6>
 80075ba:	42af      	cmp	r7, r5
 80075bc:	d003      	beq.n	80075c6 <_dtoa_r+0x4b6>
 80075be:	4639      	mov	r1, r7
 80075c0:	4648      	mov	r0, r9
 80075c2:	f000 fcb5 	bl	8007f30 <_Bfree>
 80075c6:	4629      	mov	r1, r5
 80075c8:	4648      	mov	r0, r9
 80075ca:	f000 fcb1 	bl	8007f30 <_Bfree>
 80075ce:	e0b0      	b.n	8007732 <_dtoa_r+0x622>
 80075d0:	07e2      	lsls	r2, r4, #31
 80075d2:	d505      	bpl.n	80075e0 <_dtoa_r+0x4d0>
 80075d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075d8:	f7f9 f82e 	bl	8000638 <__aeabi_dmul>
 80075dc:	3601      	adds	r6, #1
 80075de:	2301      	movs	r3, #1
 80075e0:	1064      	asrs	r4, r4, #1
 80075e2:	3508      	adds	r5, #8
 80075e4:	e762      	b.n	80074ac <_dtoa_r+0x39c>
 80075e6:	2602      	movs	r6, #2
 80075e8:	e765      	b.n	80074b6 <_dtoa_r+0x3a6>
 80075ea:	9c03      	ldr	r4, [sp, #12]
 80075ec:	46b8      	mov	r8, r7
 80075ee:	e784      	b.n	80074fa <_dtoa_r+0x3ea>
 80075f0:	4b27      	ldr	r3, [pc, #156]	@ (8007690 <_dtoa_r+0x580>)
 80075f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075fc:	4454      	add	r4, sl
 80075fe:	2900      	cmp	r1, #0
 8007600:	d054      	beq.n	80076ac <_dtoa_r+0x59c>
 8007602:	4929      	ldr	r1, [pc, #164]	@ (80076a8 <_dtoa_r+0x598>)
 8007604:	2000      	movs	r0, #0
 8007606:	f7f9 f941 	bl	800088c <__aeabi_ddiv>
 800760a:	4633      	mov	r3, r6
 800760c:	462a      	mov	r2, r5
 800760e:	f7f8 fe5b 	bl	80002c8 <__aeabi_dsub>
 8007612:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007616:	4656      	mov	r6, sl
 8007618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800761c:	f7f9 fabc 	bl	8000b98 <__aeabi_d2iz>
 8007620:	4605      	mov	r5, r0
 8007622:	f7f8 ff9f 	bl	8000564 <__aeabi_i2d>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800762e:	f7f8 fe4b 	bl	80002c8 <__aeabi_dsub>
 8007632:	3530      	adds	r5, #48	@ 0x30
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800763c:	f806 5b01 	strb.w	r5, [r6], #1
 8007640:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007644:	f7f9 fa6a 	bl	8000b1c <__aeabi_dcmplt>
 8007648:	2800      	cmp	r0, #0
 800764a:	d172      	bne.n	8007732 <_dtoa_r+0x622>
 800764c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007650:	4911      	ldr	r1, [pc, #68]	@ (8007698 <_dtoa_r+0x588>)
 8007652:	2000      	movs	r0, #0
 8007654:	f7f8 fe38 	bl	80002c8 <__aeabi_dsub>
 8007658:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800765c:	f7f9 fa5e 	bl	8000b1c <__aeabi_dcmplt>
 8007660:	2800      	cmp	r0, #0
 8007662:	f040 80b4 	bne.w	80077ce <_dtoa_r+0x6be>
 8007666:	42a6      	cmp	r6, r4
 8007668:	f43f af70 	beq.w	800754c <_dtoa_r+0x43c>
 800766c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007670:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <_dtoa_r+0x58c>)
 8007672:	2200      	movs	r2, #0
 8007674:	f7f8 ffe0 	bl	8000638 <__aeabi_dmul>
 8007678:	4b08      	ldr	r3, [pc, #32]	@ (800769c <_dtoa_r+0x58c>)
 800767a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800767e:	2200      	movs	r2, #0
 8007680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007684:	f7f8 ffd8 	bl	8000638 <__aeabi_dmul>
 8007688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800768c:	e7c4      	b.n	8007618 <_dtoa_r+0x508>
 800768e:	bf00      	nop
 8007690:	0800a358 	.word	0x0800a358
 8007694:	0800a330 	.word	0x0800a330
 8007698:	3ff00000 	.word	0x3ff00000
 800769c:	40240000 	.word	0x40240000
 80076a0:	401c0000 	.word	0x401c0000
 80076a4:	40140000 	.word	0x40140000
 80076a8:	3fe00000 	.word	0x3fe00000
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	f7f8 ffc2 	bl	8000638 <__aeabi_dmul>
 80076b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80076ba:	4656      	mov	r6, sl
 80076bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076c0:	f7f9 fa6a 	bl	8000b98 <__aeabi_d2iz>
 80076c4:	4605      	mov	r5, r0
 80076c6:	f7f8 ff4d 	bl	8000564 <__aeabi_i2d>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d2:	f7f8 fdf9 	bl	80002c8 <__aeabi_dsub>
 80076d6:	3530      	adds	r5, #48	@ 0x30
 80076d8:	f806 5b01 	strb.w	r5, [r6], #1
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	42a6      	cmp	r6, r4
 80076e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076e6:	f04f 0200 	mov.w	r2, #0
 80076ea:	d124      	bne.n	8007736 <_dtoa_r+0x626>
 80076ec:	4baf      	ldr	r3, [pc, #700]	@ (80079ac <_dtoa_r+0x89c>)
 80076ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80076f2:	f7f8 fdeb 	bl	80002cc <__adddf3>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076fe:	f7f9 fa2b 	bl	8000b58 <__aeabi_dcmpgt>
 8007702:	2800      	cmp	r0, #0
 8007704:	d163      	bne.n	80077ce <_dtoa_r+0x6be>
 8007706:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800770a:	49a8      	ldr	r1, [pc, #672]	@ (80079ac <_dtoa_r+0x89c>)
 800770c:	2000      	movs	r0, #0
 800770e:	f7f8 fddb 	bl	80002c8 <__aeabi_dsub>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800771a:	f7f9 f9ff 	bl	8000b1c <__aeabi_dcmplt>
 800771e:	2800      	cmp	r0, #0
 8007720:	f43f af14 	beq.w	800754c <_dtoa_r+0x43c>
 8007724:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007726:	1e73      	subs	r3, r6, #1
 8007728:	9313      	str	r3, [sp, #76]	@ 0x4c
 800772a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800772e:	2b30      	cmp	r3, #48	@ 0x30
 8007730:	d0f8      	beq.n	8007724 <_dtoa_r+0x614>
 8007732:	4647      	mov	r7, r8
 8007734:	e03b      	b.n	80077ae <_dtoa_r+0x69e>
 8007736:	4b9e      	ldr	r3, [pc, #632]	@ (80079b0 <_dtoa_r+0x8a0>)
 8007738:	f7f8 ff7e 	bl	8000638 <__aeabi_dmul>
 800773c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007740:	e7bc      	b.n	80076bc <_dtoa_r+0x5ac>
 8007742:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007746:	4656      	mov	r6, sl
 8007748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774c:	4620      	mov	r0, r4
 800774e:	4629      	mov	r1, r5
 8007750:	f7f9 f89c 	bl	800088c <__aeabi_ddiv>
 8007754:	f7f9 fa20 	bl	8000b98 <__aeabi_d2iz>
 8007758:	4680      	mov	r8, r0
 800775a:	f7f8 ff03 	bl	8000564 <__aeabi_i2d>
 800775e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007762:	f7f8 ff69 	bl	8000638 <__aeabi_dmul>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007772:	f7f8 fda9 	bl	80002c8 <__aeabi_dsub>
 8007776:	f806 4b01 	strb.w	r4, [r6], #1
 800777a:	9d03      	ldr	r5, [sp, #12]
 800777c:	eba6 040a 	sub.w	r4, r6, sl
 8007780:	42a5      	cmp	r5, r4
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	d133      	bne.n	80077f0 <_dtoa_r+0x6e0>
 8007788:	f7f8 fda0 	bl	80002cc <__adddf3>
 800778c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007790:	4604      	mov	r4, r0
 8007792:	460d      	mov	r5, r1
 8007794:	f7f9 f9e0 	bl	8000b58 <__aeabi_dcmpgt>
 8007798:	b9c0      	cbnz	r0, 80077cc <_dtoa_r+0x6bc>
 800779a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800779e:	4620      	mov	r0, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7f9 f9b1 	bl	8000b08 <__aeabi_dcmpeq>
 80077a6:	b110      	cbz	r0, 80077ae <_dtoa_r+0x69e>
 80077a8:	f018 0f01 	tst.w	r8, #1
 80077ac:	d10e      	bne.n	80077cc <_dtoa_r+0x6bc>
 80077ae:	9902      	ldr	r1, [sp, #8]
 80077b0:	4648      	mov	r0, r9
 80077b2:	f000 fbbd 	bl	8007f30 <_Bfree>
 80077b6:	2300      	movs	r3, #0
 80077b8:	7033      	strb	r3, [r6, #0]
 80077ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80077bc:	3701      	adds	r7, #1
 80077be:	601f      	str	r7, [r3, #0]
 80077c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 824b 	beq.w	8007c5e <_dtoa_r+0xb4e>
 80077c8:	601e      	str	r6, [r3, #0]
 80077ca:	e248      	b.n	8007c5e <_dtoa_r+0xb4e>
 80077cc:	46b8      	mov	r8, r7
 80077ce:	4633      	mov	r3, r6
 80077d0:	461e      	mov	r6, r3
 80077d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077d6:	2a39      	cmp	r2, #57	@ 0x39
 80077d8:	d106      	bne.n	80077e8 <_dtoa_r+0x6d8>
 80077da:	459a      	cmp	sl, r3
 80077dc:	d1f8      	bne.n	80077d0 <_dtoa_r+0x6c0>
 80077de:	2230      	movs	r2, #48	@ 0x30
 80077e0:	f108 0801 	add.w	r8, r8, #1
 80077e4:	f88a 2000 	strb.w	r2, [sl]
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	3201      	adds	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e7a0      	b.n	8007732 <_dtoa_r+0x622>
 80077f0:	4b6f      	ldr	r3, [pc, #444]	@ (80079b0 <_dtoa_r+0x8a0>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	f7f8 ff20 	bl	8000638 <__aeabi_dmul>
 80077f8:	2200      	movs	r2, #0
 80077fa:	2300      	movs	r3, #0
 80077fc:	4604      	mov	r4, r0
 80077fe:	460d      	mov	r5, r1
 8007800:	f7f9 f982 	bl	8000b08 <__aeabi_dcmpeq>
 8007804:	2800      	cmp	r0, #0
 8007806:	d09f      	beq.n	8007748 <_dtoa_r+0x638>
 8007808:	e7d1      	b.n	80077ae <_dtoa_r+0x69e>
 800780a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800780c:	2a00      	cmp	r2, #0
 800780e:	f000 80ea 	beq.w	80079e6 <_dtoa_r+0x8d6>
 8007812:	9a07      	ldr	r2, [sp, #28]
 8007814:	2a01      	cmp	r2, #1
 8007816:	f300 80cd 	bgt.w	80079b4 <_dtoa_r+0x8a4>
 800781a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800781c:	2a00      	cmp	r2, #0
 800781e:	f000 80c1 	beq.w	80079a4 <_dtoa_r+0x894>
 8007822:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007826:	9c08      	ldr	r4, [sp, #32]
 8007828:	9e00      	ldr	r6, [sp, #0]
 800782a:	9a00      	ldr	r2, [sp, #0]
 800782c:	441a      	add	r2, r3
 800782e:	9200      	str	r2, [sp, #0]
 8007830:	9a06      	ldr	r2, [sp, #24]
 8007832:	2101      	movs	r1, #1
 8007834:	441a      	add	r2, r3
 8007836:	4648      	mov	r0, r9
 8007838:	9206      	str	r2, [sp, #24]
 800783a:	f000 fc2d 	bl	8008098 <__i2b>
 800783e:	4605      	mov	r5, r0
 8007840:	b166      	cbz	r6, 800785c <_dtoa_r+0x74c>
 8007842:	9b06      	ldr	r3, [sp, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	dd09      	ble.n	800785c <_dtoa_r+0x74c>
 8007848:	42b3      	cmp	r3, r6
 800784a:	9a00      	ldr	r2, [sp, #0]
 800784c:	bfa8      	it	ge
 800784e:	4633      	movge	r3, r6
 8007850:	1ad2      	subs	r2, r2, r3
 8007852:	9200      	str	r2, [sp, #0]
 8007854:	9a06      	ldr	r2, [sp, #24]
 8007856:	1af6      	subs	r6, r6, r3
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	9306      	str	r3, [sp, #24]
 800785c:	9b08      	ldr	r3, [sp, #32]
 800785e:	b30b      	cbz	r3, 80078a4 <_dtoa_r+0x794>
 8007860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80c6 	beq.w	80079f4 <_dtoa_r+0x8e4>
 8007868:	2c00      	cmp	r4, #0
 800786a:	f000 80c0 	beq.w	80079ee <_dtoa_r+0x8de>
 800786e:	4629      	mov	r1, r5
 8007870:	4622      	mov	r2, r4
 8007872:	4648      	mov	r0, r9
 8007874:	f000 fcc8 	bl	8008208 <__pow5mult>
 8007878:	9a02      	ldr	r2, [sp, #8]
 800787a:	4601      	mov	r1, r0
 800787c:	4605      	mov	r5, r0
 800787e:	4648      	mov	r0, r9
 8007880:	f000 fc20 	bl	80080c4 <__multiply>
 8007884:	9902      	ldr	r1, [sp, #8]
 8007886:	4680      	mov	r8, r0
 8007888:	4648      	mov	r0, r9
 800788a:	f000 fb51 	bl	8007f30 <_Bfree>
 800788e:	9b08      	ldr	r3, [sp, #32]
 8007890:	1b1b      	subs	r3, r3, r4
 8007892:	9308      	str	r3, [sp, #32]
 8007894:	f000 80b1 	beq.w	80079fa <_dtoa_r+0x8ea>
 8007898:	9a08      	ldr	r2, [sp, #32]
 800789a:	4641      	mov	r1, r8
 800789c:	4648      	mov	r0, r9
 800789e:	f000 fcb3 	bl	8008208 <__pow5mult>
 80078a2:	9002      	str	r0, [sp, #8]
 80078a4:	2101      	movs	r1, #1
 80078a6:	4648      	mov	r0, r9
 80078a8:	f000 fbf6 	bl	8008098 <__i2b>
 80078ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078ae:	4604      	mov	r4, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 81d8 	beq.w	8007c66 <_dtoa_r+0xb56>
 80078b6:	461a      	mov	r2, r3
 80078b8:	4601      	mov	r1, r0
 80078ba:	4648      	mov	r0, r9
 80078bc:	f000 fca4 	bl	8008208 <__pow5mult>
 80078c0:	9b07      	ldr	r3, [sp, #28]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	4604      	mov	r4, r0
 80078c6:	f300 809f 	bgt.w	8007a08 <_dtoa_r+0x8f8>
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 8097 	bne.w	8007a00 <_dtoa_r+0x8f0>
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f040 8093 	bne.w	8007a04 <_dtoa_r+0x8f4>
 80078de:	9b05      	ldr	r3, [sp, #20]
 80078e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078e4:	0d1b      	lsrs	r3, r3, #20
 80078e6:	051b      	lsls	r3, r3, #20
 80078e8:	b133      	cbz	r3, 80078f8 <_dtoa_r+0x7e8>
 80078ea:	9b00      	ldr	r3, [sp, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	9b06      	ldr	r3, [sp, #24]
 80078f2:	3301      	adds	r3, #1
 80078f4:	9306      	str	r3, [sp, #24]
 80078f6:	2301      	movs	r3, #1
 80078f8:	9308      	str	r3, [sp, #32]
 80078fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 81b8 	beq.w	8007c72 <_dtoa_r+0xb62>
 8007902:	6923      	ldr	r3, [r4, #16]
 8007904:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007908:	6918      	ldr	r0, [r3, #16]
 800790a:	f000 fb79 	bl	8008000 <__hi0bits>
 800790e:	f1c0 0020 	rsb	r0, r0, #32
 8007912:	9b06      	ldr	r3, [sp, #24]
 8007914:	4418      	add	r0, r3
 8007916:	f010 001f 	ands.w	r0, r0, #31
 800791a:	f000 8082 	beq.w	8007a22 <_dtoa_r+0x912>
 800791e:	f1c0 0320 	rsb	r3, r0, #32
 8007922:	2b04      	cmp	r3, #4
 8007924:	dd73      	ble.n	8007a0e <_dtoa_r+0x8fe>
 8007926:	9b00      	ldr	r3, [sp, #0]
 8007928:	f1c0 001c 	rsb	r0, r0, #28
 800792c:	4403      	add	r3, r0
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	9b06      	ldr	r3, [sp, #24]
 8007932:	4403      	add	r3, r0
 8007934:	4406      	add	r6, r0
 8007936:	9306      	str	r3, [sp, #24]
 8007938:	9b00      	ldr	r3, [sp, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	dd05      	ble.n	800794a <_dtoa_r+0x83a>
 800793e:	9902      	ldr	r1, [sp, #8]
 8007940:	461a      	mov	r2, r3
 8007942:	4648      	mov	r0, r9
 8007944:	f000 fcba 	bl	80082bc <__lshift>
 8007948:	9002      	str	r0, [sp, #8]
 800794a:	9b06      	ldr	r3, [sp, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	dd05      	ble.n	800795c <_dtoa_r+0x84c>
 8007950:	4621      	mov	r1, r4
 8007952:	461a      	mov	r2, r3
 8007954:	4648      	mov	r0, r9
 8007956:	f000 fcb1 	bl	80082bc <__lshift>
 800795a:	4604      	mov	r4, r0
 800795c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800795e:	2b00      	cmp	r3, #0
 8007960:	d061      	beq.n	8007a26 <_dtoa_r+0x916>
 8007962:	9802      	ldr	r0, [sp, #8]
 8007964:	4621      	mov	r1, r4
 8007966:	f000 fd15 	bl	8008394 <__mcmp>
 800796a:	2800      	cmp	r0, #0
 800796c:	da5b      	bge.n	8007a26 <_dtoa_r+0x916>
 800796e:	2300      	movs	r3, #0
 8007970:	9902      	ldr	r1, [sp, #8]
 8007972:	220a      	movs	r2, #10
 8007974:	4648      	mov	r0, r9
 8007976:	f000 fafd 	bl	8007f74 <__multadd>
 800797a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800797c:	9002      	str	r0, [sp, #8]
 800797e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8177 	beq.w	8007c76 <_dtoa_r+0xb66>
 8007988:	4629      	mov	r1, r5
 800798a:	2300      	movs	r3, #0
 800798c:	220a      	movs	r2, #10
 800798e:	4648      	mov	r0, r9
 8007990:	f000 faf0 	bl	8007f74 <__multadd>
 8007994:	f1bb 0f00 	cmp.w	fp, #0
 8007998:	4605      	mov	r5, r0
 800799a:	dc6f      	bgt.n	8007a7c <_dtoa_r+0x96c>
 800799c:	9b07      	ldr	r3, [sp, #28]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	dc49      	bgt.n	8007a36 <_dtoa_r+0x926>
 80079a2:	e06b      	b.n	8007a7c <_dtoa_r+0x96c>
 80079a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80079a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079aa:	e73c      	b.n	8007826 <_dtoa_r+0x716>
 80079ac:	3fe00000 	.word	0x3fe00000
 80079b0:	40240000 	.word	0x40240000
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	1e5c      	subs	r4, r3, #1
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	42a3      	cmp	r3, r4
 80079bc:	db09      	blt.n	80079d2 <_dtoa_r+0x8c2>
 80079be:	1b1c      	subs	r4, r3, r4
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f6bf af30 	bge.w	8007828 <_dtoa_r+0x718>
 80079c8:	9b00      	ldr	r3, [sp, #0]
 80079ca:	9a03      	ldr	r2, [sp, #12]
 80079cc:	1a9e      	subs	r6, r3, r2
 80079ce:	2300      	movs	r3, #0
 80079d0:	e72b      	b.n	800782a <_dtoa_r+0x71a>
 80079d2:	9b08      	ldr	r3, [sp, #32]
 80079d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079d6:	9408      	str	r4, [sp, #32]
 80079d8:	1ae3      	subs	r3, r4, r3
 80079da:	441a      	add	r2, r3
 80079dc:	9e00      	ldr	r6, [sp, #0]
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80079e2:	2400      	movs	r4, #0
 80079e4:	e721      	b.n	800782a <_dtoa_r+0x71a>
 80079e6:	9c08      	ldr	r4, [sp, #32]
 80079e8:	9e00      	ldr	r6, [sp, #0]
 80079ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80079ec:	e728      	b.n	8007840 <_dtoa_r+0x730>
 80079ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80079f2:	e751      	b.n	8007898 <_dtoa_r+0x788>
 80079f4:	9a08      	ldr	r2, [sp, #32]
 80079f6:	9902      	ldr	r1, [sp, #8]
 80079f8:	e750      	b.n	800789c <_dtoa_r+0x78c>
 80079fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80079fe:	e751      	b.n	80078a4 <_dtoa_r+0x794>
 8007a00:	2300      	movs	r3, #0
 8007a02:	e779      	b.n	80078f8 <_dtoa_r+0x7e8>
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	e777      	b.n	80078f8 <_dtoa_r+0x7e8>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9308      	str	r3, [sp, #32]
 8007a0c:	e779      	b.n	8007902 <_dtoa_r+0x7f2>
 8007a0e:	d093      	beq.n	8007938 <_dtoa_r+0x828>
 8007a10:	9a00      	ldr	r2, [sp, #0]
 8007a12:	331c      	adds	r3, #28
 8007a14:	441a      	add	r2, r3
 8007a16:	9200      	str	r2, [sp, #0]
 8007a18:	9a06      	ldr	r2, [sp, #24]
 8007a1a:	441a      	add	r2, r3
 8007a1c:	441e      	add	r6, r3
 8007a1e:	9206      	str	r2, [sp, #24]
 8007a20:	e78a      	b.n	8007938 <_dtoa_r+0x828>
 8007a22:	4603      	mov	r3, r0
 8007a24:	e7f4      	b.n	8007a10 <_dtoa_r+0x900>
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	46b8      	mov	r8, r7
 8007a2c:	dc20      	bgt.n	8007a70 <_dtoa_r+0x960>
 8007a2e:	469b      	mov	fp, r3
 8007a30:	9b07      	ldr	r3, [sp, #28]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	dd1e      	ble.n	8007a74 <_dtoa_r+0x964>
 8007a36:	f1bb 0f00 	cmp.w	fp, #0
 8007a3a:	f47f adb1 	bne.w	80075a0 <_dtoa_r+0x490>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	465b      	mov	r3, fp
 8007a42:	2205      	movs	r2, #5
 8007a44:	4648      	mov	r0, r9
 8007a46:	f000 fa95 	bl	8007f74 <__multadd>
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	9802      	ldr	r0, [sp, #8]
 8007a50:	f000 fca0 	bl	8008394 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f77f ada3 	ble.w	80075a0 <_dtoa_r+0x490>
 8007a5a:	4656      	mov	r6, sl
 8007a5c:	2331      	movs	r3, #49	@ 0x31
 8007a5e:	f806 3b01 	strb.w	r3, [r6], #1
 8007a62:	f108 0801 	add.w	r8, r8, #1
 8007a66:	e59f      	b.n	80075a8 <_dtoa_r+0x498>
 8007a68:	9c03      	ldr	r4, [sp, #12]
 8007a6a:	46b8      	mov	r8, r7
 8007a6c:	4625      	mov	r5, r4
 8007a6e:	e7f4      	b.n	8007a5a <_dtoa_r+0x94a>
 8007a70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8101 	beq.w	8007c7e <_dtoa_r+0xb6e>
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	dd05      	ble.n	8007a8c <_dtoa_r+0x97c>
 8007a80:	4629      	mov	r1, r5
 8007a82:	4632      	mov	r2, r6
 8007a84:	4648      	mov	r0, r9
 8007a86:	f000 fc19 	bl	80082bc <__lshift>
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	9b08      	ldr	r3, [sp, #32]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d05c      	beq.n	8007b4c <_dtoa_r+0xa3c>
 8007a92:	6869      	ldr	r1, [r5, #4]
 8007a94:	4648      	mov	r0, r9
 8007a96:	f000 fa0b 	bl	8007eb0 <_Balloc>
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	b928      	cbnz	r0, 8007aaa <_dtoa_r+0x99a>
 8007a9e:	4b82      	ldr	r3, [pc, #520]	@ (8007ca8 <_dtoa_r+0xb98>)
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007aa6:	f7ff bb4a 	b.w	800713e <_dtoa_r+0x2e>
 8007aaa:	692a      	ldr	r2, [r5, #16]
 8007aac:	3202      	adds	r2, #2
 8007aae:	0092      	lsls	r2, r2, #2
 8007ab0:	f105 010c 	add.w	r1, r5, #12
 8007ab4:	300c      	adds	r0, #12
 8007ab6:	f000 ffa3 	bl	8008a00 <memcpy>
 8007aba:	2201      	movs	r2, #1
 8007abc:	4631      	mov	r1, r6
 8007abe:	4648      	mov	r0, r9
 8007ac0:	f000 fbfc 	bl	80082bc <__lshift>
 8007ac4:	f10a 0301 	add.w	r3, sl, #1
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	eb0a 030b 	add.w	r3, sl, fp
 8007ace:	9308      	str	r3, [sp, #32]
 8007ad0:	9b04      	ldr	r3, [sp, #16]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	462f      	mov	r7, r5
 8007ad8:	9306      	str	r3, [sp, #24]
 8007ada:	4605      	mov	r5, r0
 8007adc:	9b00      	ldr	r3, [sp, #0]
 8007ade:	9802      	ldr	r0, [sp, #8]
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ae6:	f7ff fa8a 	bl	8006ffe <quorem>
 8007aea:	4603      	mov	r3, r0
 8007aec:	3330      	adds	r3, #48	@ 0x30
 8007aee:	9003      	str	r0, [sp, #12]
 8007af0:	4639      	mov	r1, r7
 8007af2:	9802      	ldr	r0, [sp, #8]
 8007af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af6:	f000 fc4d 	bl	8008394 <__mcmp>
 8007afa:	462a      	mov	r2, r5
 8007afc:	9004      	str	r0, [sp, #16]
 8007afe:	4621      	mov	r1, r4
 8007b00:	4648      	mov	r0, r9
 8007b02:	f000 fc63 	bl	80083cc <__mdiff>
 8007b06:	68c2      	ldr	r2, [r0, #12]
 8007b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	bb02      	cbnz	r2, 8007b50 <_dtoa_r+0xa40>
 8007b0e:	4601      	mov	r1, r0
 8007b10:	9802      	ldr	r0, [sp, #8]
 8007b12:	f000 fc3f 	bl	8008394 <__mcmp>
 8007b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b18:	4602      	mov	r2, r0
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4648      	mov	r0, r9
 8007b1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b22:	f000 fa05 	bl	8007f30 <_Bfree>
 8007b26:	9b07      	ldr	r3, [sp, #28]
 8007b28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b2a:	9e00      	ldr	r6, [sp, #0]
 8007b2c:	ea42 0103 	orr.w	r1, r2, r3
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	4319      	orrs	r1, r3
 8007b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b36:	d10d      	bne.n	8007b54 <_dtoa_r+0xa44>
 8007b38:	2b39      	cmp	r3, #57	@ 0x39
 8007b3a:	d027      	beq.n	8007b8c <_dtoa_r+0xa7c>
 8007b3c:	9a04      	ldr	r2, [sp, #16]
 8007b3e:	2a00      	cmp	r2, #0
 8007b40:	dd01      	ble.n	8007b46 <_dtoa_r+0xa36>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	3331      	adds	r3, #49	@ 0x31
 8007b46:	f88b 3000 	strb.w	r3, [fp]
 8007b4a:	e52e      	b.n	80075aa <_dtoa_r+0x49a>
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	e7b9      	b.n	8007ac4 <_dtoa_r+0x9b4>
 8007b50:	2201      	movs	r2, #1
 8007b52:	e7e2      	b.n	8007b1a <_dtoa_r+0xa0a>
 8007b54:	9904      	ldr	r1, [sp, #16]
 8007b56:	2900      	cmp	r1, #0
 8007b58:	db04      	blt.n	8007b64 <_dtoa_r+0xa54>
 8007b5a:	9807      	ldr	r0, [sp, #28]
 8007b5c:	4301      	orrs	r1, r0
 8007b5e:	9806      	ldr	r0, [sp, #24]
 8007b60:	4301      	orrs	r1, r0
 8007b62:	d120      	bne.n	8007ba6 <_dtoa_r+0xa96>
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	ddee      	ble.n	8007b46 <_dtoa_r+0xa36>
 8007b68:	9902      	ldr	r1, [sp, #8]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	4648      	mov	r0, r9
 8007b70:	f000 fba4 	bl	80082bc <__lshift>
 8007b74:	4621      	mov	r1, r4
 8007b76:	9002      	str	r0, [sp, #8]
 8007b78:	f000 fc0c 	bl	8008394 <__mcmp>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	9b00      	ldr	r3, [sp, #0]
 8007b80:	dc02      	bgt.n	8007b88 <_dtoa_r+0xa78>
 8007b82:	d1e0      	bne.n	8007b46 <_dtoa_r+0xa36>
 8007b84:	07da      	lsls	r2, r3, #31
 8007b86:	d5de      	bpl.n	8007b46 <_dtoa_r+0xa36>
 8007b88:	2b39      	cmp	r3, #57	@ 0x39
 8007b8a:	d1da      	bne.n	8007b42 <_dtoa_r+0xa32>
 8007b8c:	2339      	movs	r3, #57	@ 0x39
 8007b8e:	f88b 3000 	strb.w	r3, [fp]
 8007b92:	4633      	mov	r3, r6
 8007b94:	461e      	mov	r6, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b9c:	2a39      	cmp	r2, #57	@ 0x39
 8007b9e:	d04e      	beq.n	8007c3e <_dtoa_r+0xb2e>
 8007ba0:	3201      	adds	r2, #1
 8007ba2:	701a      	strb	r2, [r3, #0]
 8007ba4:	e501      	b.n	80075aa <_dtoa_r+0x49a>
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	dd03      	ble.n	8007bb2 <_dtoa_r+0xaa2>
 8007baa:	2b39      	cmp	r3, #57	@ 0x39
 8007bac:	d0ee      	beq.n	8007b8c <_dtoa_r+0xa7c>
 8007bae:	3301      	adds	r3, #1
 8007bb0:	e7c9      	b.n	8007b46 <_dtoa_r+0xa36>
 8007bb2:	9a00      	ldr	r2, [sp, #0]
 8007bb4:	9908      	ldr	r1, [sp, #32]
 8007bb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007bba:	428a      	cmp	r2, r1
 8007bbc:	d028      	beq.n	8007c10 <_dtoa_r+0xb00>
 8007bbe:	9902      	ldr	r1, [sp, #8]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	220a      	movs	r2, #10
 8007bc4:	4648      	mov	r0, r9
 8007bc6:	f000 f9d5 	bl	8007f74 <__multadd>
 8007bca:	42af      	cmp	r7, r5
 8007bcc:	9002      	str	r0, [sp, #8]
 8007bce:	f04f 0300 	mov.w	r3, #0
 8007bd2:	f04f 020a 	mov.w	r2, #10
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	4648      	mov	r0, r9
 8007bda:	d107      	bne.n	8007bec <_dtoa_r+0xadc>
 8007bdc:	f000 f9ca 	bl	8007f74 <__multadd>
 8007be0:	4607      	mov	r7, r0
 8007be2:	4605      	mov	r5, r0
 8007be4:	9b00      	ldr	r3, [sp, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	e777      	b.n	8007adc <_dtoa_r+0x9cc>
 8007bec:	f000 f9c2 	bl	8007f74 <__multadd>
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	220a      	movs	r2, #10
 8007bf8:	4648      	mov	r0, r9
 8007bfa:	f000 f9bb 	bl	8007f74 <__multadd>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	e7f0      	b.n	8007be4 <_dtoa_r+0xad4>
 8007c02:	f1bb 0f00 	cmp.w	fp, #0
 8007c06:	bfcc      	ite	gt
 8007c08:	465e      	movgt	r6, fp
 8007c0a:	2601      	movle	r6, #1
 8007c0c:	4456      	add	r6, sl
 8007c0e:	2700      	movs	r7, #0
 8007c10:	9902      	ldr	r1, [sp, #8]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	2201      	movs	r2, #1
 8007c16:	4648      	mov	r0, r9
 8007c18:	f000 fb50 	bl	80082bc <__lshift>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	9002      	str	r0, [sp, #8]
 8007c20:	f000 fbb8 	bl	8008394 <__mcmp>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	dcb4      	bgt.n	8007b92 <_dtoa_r+0xa82>
 8007c28:	d102      	bne.n	8007c30 <_dtoa_r+0xb20>
 8007c2a:	9b00      	ldr	r3, [sp, #0]
 8007c2c:	07db      	lsls	r3, r3, #31
 8007c2e:	d4b0      	bmi.n	8007b92 <_dtoa_r+0xa82>
 8007c30:	4633      	mov	r3, r6
 8007c32:	461e      	mov	r6, r3
 8007c34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c38:	2a30      	cmp	r2, #48	@ 0x30
 8007c3a:	d0fa      	beq.n	8007c32 <_dtoa_r+0xb22>
 8007c3c:	e4b5      	b.n	80075aa <_dtoa_r+0x49a>
 8007c3e:	459a      	cmp	sl, r3
 8007c40:	d1a8      	bne.n	8007b94 <_dtoa_r+0xa84>
 8007c42:	2331      	movs	r3, #49	@ 0x31
 8007c44:	f108 0801 	add.w	r8, r8, #1
 8007c48:	f88a 3000 	strb.w	r3, [sl]
 8007c4c:	e4ad      	b.n	80075aa <_dtoa_r+0x49a>
 8007c4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007cac <_dtoa_r+0xb9c>
 8007c54:	b11b      	cbz	r3, 8007c5e <_dtoa_r+0xb4e>
 8007c56:	f10a 0308 	add.w	r3, sl, #8
 8007c5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	4650      	mov	r0, sl
 8007c60:	b017      	add	sp, #92	@ 0x5c
 8007c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c66:	9b07      	ldr	r3, [sp, #28]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	f77f ae2e 	ble.w	80078ca <_dtoa_r+0x7ba>
 8007c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c70:	9308      	str	r3, [sp, #32]
 8007c72:	2001      	movs	r0, #1
 8007c74:	e64d      	b.n	8007912 <_dtoa_r+0x802>
 8007c76:	f1bb 0f00 	cmp.w	fp, #0
 8007c7a:	f77f aed9 	ble.w	8007a30 <_dtoa_r+0x920>
 8007c7e:	4656      	mov	r6, sl
 8007c80:	9802      	ldr	r0, [sp, #8]
 8007c82:	4621      	mov	r1, r4
 8007c84:	f7ff f9bb 	bl	8006ffe <quorem>
 8007c88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007c8c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c90:	eba6 020a 	sub.w	r2, r6, sl
 8007c94:	4593      	cmp	fp, r2
 8007c96:	ddb4      	ble.n	8007c02 <_dtoa_r+0xaf2>
 8007c98:	9902      	ldr	r1, [sp, #8]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	4648      	mov	r0, r9
 8007ca0:	f000 f968 	bl	8007f74 <__multadd>
 8007ca4:	9002      	str	r0, [sp, #8]
 8007ca6:	e7eb      	b.n	8007c80 <_dtoa_r+0xb70>
 8007ca8:	0800a260 	.word	0x0800a260
 8007cac:	0800a1e4 	.word	0x0800a1e4

08007cb0 <_free_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	d041      	beq.n	8007d3c <_free_r+0x8c>
 8007cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cbc:	1f0c      	subs	r4, r1, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bfb8      	it	lt
 8007cc2:	18e4      	addlt	r4, r4, r3
 8007cc4:	f000 f8e8 	bl	8007e98 <__malloc_lock>
 8007cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d40 <_free_r+0x90>)
 8007cca:	6813      	ldr	r3, [r2, #0]
 8007ccc:	b933      	cbnz	r3, 8007cdc <_free_r+0x2c>
 8007cce:	6063      	str	r3, [r4, #4]
 8007cd0:	6014      	str	r4, [r2, #0]
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd8:	f000 b8e4 	b.w	8007ea4 <__malloc_unlock>
 8007cdc:	42a3      	cmp	r3, r4
 8007cde:	d908      	bls.n	8007cf2 <_free_r+0x42>
 8007ce0:	6820      	ldr	r0, [r4, #0]
 8007ce2:	1821      	adds	r1, r4, r0
 8007ce4:	428b      	cmp	r3, r1
 8007ce6:	bf01      	itttt	eq
 8007ce8:	6819      	ldreq	r1, [r3, #0]
 8007cea:	685b      	ldreq	r3, [r3, #4]
 8007cec:	1809      	addeq	r1, r1, r0
 8007cee:	6021      	streq	r1, [r4, #0]
 8007cf0:	e7ed      	b.n	8007cce <_free_r+0x1e>
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	b10b      	cbz	r3, 8007cfc <_free_r+0x4c>
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	d9fa      	bls.n	8007cf2 <_free_r+0x42>
 8007cfc:	6811      	ldr	r1, [r2, #0]
 8007cfe:	1850      	adds	r0, r2, r1
 8007d00:	42a0      	cmp	r0, r4
 8007d02:	d10b      	bne.n	8007d1c <_free_r+0x6c>
 8007d04:	6820      	ldr	r0, [r4, #0]
 8007d06:	4401      	add	r1, r0
 8007d08:	1850      	adds	r0, r2, r1
 8007d0a:	4283      	cmp	r3, r0
 8007d0c:	6011      	str	r1, [r2, #0]
 8007d0e:	d1e0      	bne.n	8007cd2 <_free_r+0x22>
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	6053      	str	r3, [r2, #4]
 8007d16:	4408      	add	r0, r1
 8007d18:	6010      	str	r0, [r2, #0]
 8007d1a:	e7da      	b.n	8007cd2 <_free_r+0x22>
 8007d1c:	d902      	bls.n	8007d24 <_free_r+0x74>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	602b      	str	r3, [r5, #0]
 8007d22:	e7d6      	b.n	8007cd2 <_free_r+0x22>
 8007d24:	6820      	ldr	r0, [r4, #0]
 8007d26:	1821      	adds	r1, r4, r0
 8007d28:	428b      	cmp	r3, r1
 8007d2a:	bf04      	itt	eq
 8007d2c:	6819      	ldreq	r1, [r3, #0]
 8007d2e:	685b      	ldreq	r3, [r3, #4]
 8007d30:	6063      	str	r3, [r4, #4]
 8007d32:	bf04      	itt	eq
 8007d34:	1809      	addeq	r1, r1, r0
 8007d36:	6021      	streq	r1, [r4, #0]
 8007d38:	6054      	str	r4, [r2, #4]
 8007d3a:	e7ca      	b.n	8007cd2 <_free_r+0x22>
 8007d3c:	bd38      	pop	{r3, r4, r5, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000fe8 	.word	0x20000fe8

08007d44 <malloc>:
 8007d44:	4b02      	ldr	r3, [pc, #8]	@ (8007d50 <malloc+0xc>)
 8007d46:	4601      	mov	r1, r0
 8007d48:	6818      	ldr	r0, [r3, #0]
 8007d4a:	f000 b825 	b.w	8007d98 <_malloc_r>
 8007d4e:	bf00      	nop
 8007d50:	20000018 	.word	0x20000018

08007d54 <sbrk_aligned>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	4e0f      	ldr	r6, [pc, #60]	@ (8007d94 <sbrk_aligned+0x40>)
 8007d58:	460c      	mov	r4, r1
 8007d5a:	6831      	ldr	r1, [r6, #0]
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	b911      	cbnz	r1, 8007d66 <sbrk_aligned+0x12>
 8007d60:	f000 fe3e 	bl	80089e0 <_sbrk_r>
 8007d64:	6030      	str	r0, [r6, #0]
 8007d66:	4621      	mov	r1, r4
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f000 fe39 	bl	80089e0 <_sbrk_r>
 8007d6e:	1c43      	adds	r3, r0, #1
 8007d70:	d103      	bne.n	8007d7a <sbrk_aligned+0x26>
 8007d72:	f04f 34ff 	mov.w	r4, #4294967295
 8007d76:	4620      	mov	r0, r4
 8007d78:	bd70      	pop	{r4, r5, r6, pc}
 8007d7a:	1cc4      	adds	r4, r0, #3
 8007d7c:	f024 0403 	bic.w	r4, r4, #3
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d0f8      	beq.n	8007d76 <sbrk_aligned+0x22>
 8007d84:	1a21      	subs	r1, r4, r0
 8007d86:	4628      	mov	r0, r5
 8007d88:	f000 fe2a 	bl	80089e0 <_sbrk_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d1f2      	bne.n	8007d76 <sbrk_aligned+0x22>
 8007d90:	e7ef      	b.n	8007d72 <sbrk_aligned+0x1e>
 8007d92:	bf00      	nop
 8007d94:	20000fe4 	.word	0x20000fe4

08007d98 <_malloc_r>:
 8007d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d9c:	1ccd      	adds	r5, r1, #3
 8007d9e:	f025 0503 	bic.w	r5, r5, #3
 8007da2:	3508      	adds	r5, #8
 8007da4:	2d0c      	cmp	r5, #12
 8007da6:	bf38      	it	cc
 8007da8:	250c      	movcc	r5, #12
 8007daa:	2d00      	cmp	r5, #0
 8007dac:	4606      	mov	r6, r0
 8007dae:	db01      	blt.n	8007db4 <_malloc_r+0x1c>
 8007db0:	42a9      	cmp	r1, r5
 8007db2:	d904      	bls.n	8007dbe <_malloc_r+0x26>
 8007db4:	230c      	movs	r3, #12
 8007db6:	6033      	str	r3, [r6, #0]
 8007db8:	2000      	movs	r0, #0
 8007dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e94 <_malloc_r+0xfc>
 8007dc2:	f000 f869 	bl	8007e98 <__malloc_lock>
 8007dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dca:	461c      	mov	r4, r3
 8007dcc:	bb44      	cbnz	r4, 8007e20 <_malloc_r+0x88>
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff ffbf 	bl	8007d54 <sbrk_aligned>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	4604      	mov	r4, r0
 8007dda:	d158      	bne.n	8007e8e <_malloc_r+0xf6>
 8007ddc:	f8d8 4000 	ldr.w	r4, [r8]
 8007de0:	4627      	mov	r7, r4
 8007de2:	2f00      	cmp	r7, #0
 8007de4:	d143      	bne.n	8007e6e <_malloc_r+0xd6>
 8007de6:	2c00      	cmp	r4, #0
 8007de8:	d04b      	beq.n	8007e82 <_malloc_r+0xea>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	4639      	mov	r1, r7
 8007dee:	4630      	mov	r0, r6
 8007df0:	eb04 0903 	add.w	r9, r4, r3
 8007df4:	f000 fdf4 	bl	80089e0 <_sbrk_r>
 8007df8:	4581      	cmp	r9, r0
 8007dfa:	d142      	bne.n	8007e82 <_malloc_r+0xea>
 8007dfc:	6821      	ldr	r1, [r4, #0]
 8007dfe:	1a6d      	subs	r5, r5, r1
 8007e00:	4629      	mov	r1, r5
 8007e02:	4630      	mov	r0, r6
 8007e04:	f7ff ffa6 	bl	8007d54 <sbrk_aligned>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d03a      	beq.n	8007e82 <_malloc_r+0xea>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	442b      	add	r3, r5
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	f8d8 3000 	ldr.w	r3, [r8]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	bb62      	cbnz	r2, 8007e74 <_malloc_r+0xdc>
 8007e1a:	f8c8 7000 	str.w	r7, [r8]
 8007e1e:	e00f      	b.n	8007e40 <_malloc_r+0xa8>
 8007e20:	6822      	ldr	r2, [r4, #0]
 8007e22:	1b52      	subs	r2, r2, r5
 8007e24:	d420      	bmi.n	8007e68 <_malloc_r+0xd0>
 8007e26:	2a0b      	cmp	r2, #11
 8007e28:	d917      	bls.n	8007e5a <_malloc_r+0xc2>
 8007e2a:	1961      	adds	r1, r4, r5
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	6025      	str	r5, [r4, #0]
 8007e30:	bf18      	it	ne
 8007e32:	6059      	strne	r1, [r3, #4]
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	bf08      	it	eq
 8007e38:	f8c8 1000 	streq.w	r1, [r8]
 8007e3c:	5162      	str	r2, [r4, r5]
 8007e3e:	604b      	str	r3, [r1, #4]
 8007e40:	4630      	mov	r0, r6
 8007e42:	f000 f82f 	bl	8007ea4 <__malloc_unlock>
 8007e46:	f104 000b 	add.w	r0, r4, #11
 8007e4a:	1d23      	adds	r3, r4, #4
 8007e4c:	f020 0007 	bic.w	r0, r0, #7
 8007e50:	1ac2      	subs	r2, r0, r3
 8007e52:	bf1c      	itt	ne
 8007e54:	1a1b      	subne	r3, r3, r0
 8007e56:	50a3      	strne	r3, [r4, r2]
 8007e58:	e7af      	b.n	8007dba <_malloc_r+0x22>
 8007e5a:	6862      	ldr	r2, [r4, #4]
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	bf0c      	ite	eq
 8007e60:	f8c8 2000 	streq.w	r2, [r8]
 8007e64:	605a      	strne	r2, [r3, #4]
 8007e66:	e7eb      	b.n	8007e40 <_malloc_r+0xa8>
 8007e68:	4623      	mov	r3, r4
 8007e6a:	6864      	ldr	r4, [r4, #4]
 8007e6c:	e7ae      	b.n	8007dcc <_malloc_r+0x34>
 8007e6e:	463c      	mov	r4, r7
 8007e70:	687f      	ldr	r7, [r7, #4]
 8007e72:	e7b6      	b.n	8007de2 <_malloc_r+0x4a>
 8007e74:	461a      	mov	r2, r3
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	d1fb      	bne.n	8007e74 <_malloc_r+0xdc>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	6053      	str	r3, [r2, #4]
 8007e80:	e7de      	b.n	8007e40 <_malloc_r+0xa8>
 8007e82:	230c      	movs	r3, #12
 8007e84:	6033      	str	r3, [r6, #0]
 8007e86:	4630      	mov	r0, r6
 8007e88:	f000 f80c 	bl	8007ea4 <__malloc_unlock>
 8007e8c:	e794      	b.n	8007db8 <_malloc_r+0x20>
 8007e8e:	6005      	str	r5, [r0, #0]
 8007e90:	e7d6      	b.n	8007e40 <_malloc_r+0xa8>
 8007e92:	bf00      	nop
 8007e94:	20000fe8 	.word	0x20000fe8

08007e98 <__malloc_lock>:
 8007e98:	4801      	ldr	r0, [pc, #4]	@ (8007ea0 <__malloc_lock+0x8>)
 8007e9a:	f7ff b8ae 	b.w	8006ffa <__retarget_lock_acquire_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	20000fe0 	.word	0x20000fe0

08007ea4 <__malloc_unlock>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	@ (8007eac <__malloc_unlock+0x8>)
 8007ea6:	f7ff b8a9 	b.w	8006ffc <__retarget_lock_release_recursive>
 8007eaa:	bf00      	nop
 8007eac:	20000fe0 	.word	0x20000fe0

08007eb0 <_Balloc>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	69c6      	ldr	r6, [r0, #28]
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	b976      	cbnz	r6, 8007ed8 <_Balloc+0x28>
 8007eba:	2010      	movs	r0, #16
 8007ebc:	f7ff ff42 	bl	8007d44 <malloc>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	61e0      	str	r0, [r4, #28]
 8007ec4:	b920      	cbnz	r0, 8007ed0 <_Balloc+0x20>
 8007ec6:	4b18      	ldr	r3, [pc, #96]	@ (8007f28 <_Balloc+0x78>)
 8007ec8:	4818      	ldr	r0, [pc, #96]	@ (8007f2c <_Balloc+0x7c>)
 8007eca:	216b      	movs	r1, #107	@ 0x6b
 8007ecc:	f000 fda6 	bl	8008a1c <__assert_func>
 8007ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ed4:	6006      	str	r6, [r0, #0]
 8007ed6:	60c6      	str	r6, [r0, #12]
 8007ed8:	69e6      	ldr	r6, [r4, #28]
 8007eda:	68f3      	ldr	r3, [r6, #12]
 8007edc:	b183      	cbz	r3, 8007f00 <_Balloc+0x50>
 8007ede:	69e3      	ldr	r3, [r4, #28]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ee6:	b9b8      	cbnz	r0, 8007f18 <_Balloc+0x68>
 8007ee8:	2101      	movs	r1, #1
 8007eea:	fa01 f605 	lsl.w	r6, r1, r5
 8007eee:	1d72      	adds	r2, r6, #5
 8007ef0:	0092      	lsls	r2, r2, #2
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 fdb0 	bl	8008a58 <_calloc_r>
 8007ef8:	b160      	cbz	r0, 8007f14 <_Balloc+0x64>
 8007efa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007efe:	e00e      	b.n	8007f1e <_Balloc+0x6e>
 8007f00:	2221      	movs	r2, #33	@ 0x21
 8007f02:	2104      	movs	r1, #4
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fda7 	bl	8008a58 <_calloc_r>
 8007f0a:	69e3      	ldr	r3, [r4, #28]
 8007f0c:	60f0      	str	r0, [r6, #12]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e4      	bne.n	8007ede <_Balloc+0x2e>
 8007f14:	2000      	movs	r0, #0
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	6802      	ldr	r2, [r0, #0]
 8007f1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f24:	e7f7      	b.n	8007f16 <_Balloc+0x66>
 8007f26:	bf00      	nop
 8007f28:	0800a1f1 	.word	0x0800a1f1
 8007f2c:	0800a271 	.word	0x0800a271

08007f30 <_Bfree>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	69c6      	ldr	r6, [r0, #28]
 8007f34:	4605      	mov	r5, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	b976      	cbnz	r6, 8007f58 <_Bfree+0x28>
 8007f3a:	2010      	movs	r0, #16
 8007f3c:	f7ff ff02 	bl	8007d44 <malloc>
 8007f40:	4602      	mov	r2, r0
 8007f42:	61e8      	str	r0, [r5, #28]
 8007f44:	b920      	cbnz	r0, 8007f50 <_Bfree+0x20>
 8007f46:	4b09      	ldr	r3, [pc, #36]	@ (8007f6c <_Bfree+0x3c>)
 8007f48:	4809      	ldr	r0, [pc, #36]	@ (8007f70 <_Bfree+0x40>)
 8007f4a:	218f      	movs	r1, #143	@ 0x8f
 8007f4c:	f000 fd66 	bl	8008a1c <__assert_func>
 8007f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f54:	6006      	str	r6, [r0, #0]
 8007f56:	60c6      	str	r6, [r0, #12]
 8007f58:	b13c      	cbz	r4, 8007f6a <_Bfree+0x3a>
 8007f5a:	69eb      	ldr	r3, [r5, #28]
 8007f5c:	6862      	ldr	r2, [r4, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f64:	6021      	str	r1, [r4, #0]
 8007f66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}
 8007f6c:	0800a1f1 	.word	0x0800a1f1
 8007f70:	0800a271 	.word	0x0800a271

08007f74 <__multadd>:
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	690d      	ldr	r5, [r1, #16]
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	461e      	mov	r6, r3
 8007f80:	f101 0c14 	add.w	ip, r1, #20
 8007f84:	2000      	movs	r0, #0
 8007f86:	f8dc 3000 	ldr.w	r3, [ip]
 8007f8a:	b299      	uxth	r1, r3
 8007f8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007f90:	0c1e      	lsrs	r6, r3, #16
 8007f92:	0c0b      	lsrs	r3, r1, #16
 8007f94:	fb02 3306 	mla	r3, r2, r6, r3
 8007f98:	b289      	uxth	r1, r1
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fa0:	4285      	cmp	r5, r0
 8007fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8007fa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007faa:	dcec      	bgt.n	8007f86 <__multadd+0x12>
 8007fac:	b30e      	cbz	r6, 8007ff2 <__multadd+0x7e>
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	42ab      	cmp	r3, r5
 8007fb2:	dc19      	bgt.n	8007fe8 <__multadd+0x74>
 8007fb4:	6861      	ldr	r1, [r4, #4]
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	3101      	adds	r1, #1
 8007fba:	f7ff ff79 	bl	8007eb0 <_Balloc>
 8007fbe:	4680      	mov	r8, r0
 8007fc0:	b928      	cbnz	r0, 8007fce <__multadd+0x5a>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff8 <__multadd+0x84>)
 8007fc6:	480d      	ldr	r0, [pc, #52]	@ (8007ffc <__multadd+0x88>)
 8007fc8:	21ba      	movs	r1, #186	@ 0xba
 8007fca:	f000 fd27 	bl	8008a1c <__assert_func>
 8007fce:	6922      	ldr	r2, [r4, #16]
 8007fd0:	3202      	adds	r2, #2
 8007fd2:	f104 010c 	add.w	r1, r4, #12
 8007fd6:	0092      	lsls	r2, r2, #2
 8007fd8:	300c      	adds	r0, #12
 8007fda:	f000 fd11 	bl	8008a00 <memcpy>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f7ff ffa5 	bl	8007f30 <_Bfree>
 8007fe6:	4644      	mov	r4, r8
 8007fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fec:	3501      	adds	r5, #1
 8007fee:	615e      	str	r6, [r3, #20]
 8007ff0:	6125      	str	r5, [r4, #16]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff8:	0800a260 	.word	0x0800a260
 8007ffc:	0800a271 	.word	0x0800a271

08008000 <__hi0bits>:
 8008000:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008004:	4603      	mov	r3, r0
 8008006:	bf36      	itet	cc
 8008008:	0403      	lslcc	r3, r0, #16
 800800a:	2000      	movcs	r0, #0
 800800c:	2010      	movcc	r0, #16
 800800e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008012:	bf3c      	itt	cc
 8008014:	021b      	lslcc	r3, r3, #8
 8008016:	3008      	addcc	r0, #8
 8008018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800801c:	bf3c      	itt	cc
 800801e:	011b      	lslcc	r3, r3, #4
 8008020:	3004      	addcc	r0, #4
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008026:	bf3c      	itt	cc
 8008028:	009b      	lslcc	r3, r3, #2
 800802a:	3002      	addcc	r0, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	db05      	blt.n	800803c <__hi0bits+0x3c>
 8008030:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008034:	f100 0001 	add.w	r0, r0, #1
 8008038:	bf08      	it	eq
 800803a:	2020      	moveq	r0, #32
 800803c:	4770      	bx	lr

0800803e <__lo0bits>:
 800803e:	6803      	ldr	r3, [r0, #0]
 8008040:	4602      	mov	r2, r0
 8008042:	f013 0007 	ands.w	r0, r3, #7
 8008046:	d00b      	beq.n	8008060 <__lo0bits+0x22>
 8008048:	07d9      	lsls	r1, r3, #31
 800804a:	d421      	bmi.n	8008090 <__lo0bits+0x52>
 800804c:	0798      	lsls	r0, r3, #30
 800804e:	bf49      	itett	mi
 8008050:	085b      	lsrmi	r3, r3, #1
 8008052:	089b      	lsrpl	r3, r3, #2
 8008054:	2001      	movmi	r0, #1
 8008056:	6013      	strmi	r3, [r2, #0]
 8008058:	bf5c      	itt	pl
 800805a:	6013      	strpl	r3, [r2, #0]
 800805c:	2002      	movpl	r0, #2
 800805e:	4770      	bx	lr
 8008060:	b299      	uxth	r1, r3
 8008062:	b909      	cbnz	r1, 8008068 <__lo0bits+0x2a>
 8008064:	0c1b      	lsrs	r3, r3, #16
 8008066:	2010      	movs	r0, #16
 8008068:	b2d9      	uxtb	r1, r3
 800806a:	b909      	cbnz	r1, 8008070 <__lo0bits+0x32>
 800806c:	3008      	adds	r0, #8
 800806e:	0a1b      	lsrs	r3, r3, #8
 8008070:	0719      	lsls	r1, r3, #28
 8008072:	bf04      	itt	eq
 8008074:	091b      	lsreq	r3, r3, #4
 8008076:	3004      	addeq	r0, #4
 8008078:	0799      	lsls	r1, r3, #30
 800807a:	bf04      	itt	eq
 800807c:	089b      	lsreq	r3, r3, #2
 800807e:	3002      	addeq	r0, #2
 8008080:	07d9      	lsls	r1, r3, #31
 8008082:	d403      	bmi.n	800808c <__lo0bits+0x4e>
 8008084:	085b      	lsrs	r3, r3, #1
 8008086:	f100 0001 	add.w	r0, r0, #1
 800808a:	d003      	beq.n	8008094 <__lo0bits+0x56>
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	4770      	bx	lr
 8008090:	2000      	movs	r0, #0
 8008092:	4770      	bx	lr
 8008094:	2020      	movs	r0, #32
 8008096:	4770      	bx	lr

08008098 <__i2b>:
 8008098:	b510      	push	{r4, lr}
 800809a:	460c      	mov	r4, r1
 800809c:	2101      	movs	r1, #1
 800809e:	f7ff ff07 	bl	8007eb0 <_Balloc>
 80080a2:	4602      	mov	r2, r0
 80080a4:	b928      	cbnz	r0, 80080b2 <__i2b+0x1a>
 80080a6:	4b05      	ldr	r3, [pc, #20]	@ (80080bc <__i2b+0x24>)
 80080a8:	4805      	ldr	r0, [pc, #20]	@ (80080c0 <__i2b+0x28>)
 80080aa:	f240 1145 	movw	r1, #325	@ 0x145
 80080ae:	f000 fcb5 	bl	8008a1c <__assert_func>
 80080b2:	2301      	movs	r3, #1
 80080b4:	6144      	str	r4, [r0, #20]
 80080b6:	6103      	str	r3, [r0, #16]
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	bf00      	nop
 80080bc:	0800a260 	.word	0x0800a260
 80080c0:	0800a271 	.word	0x0800a271

080080c4 <__multiply>:
 80080c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	4617      	mov	r7, r2
 80080ca:	690a      	ldr	r2, [r1, #16]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	bfa8      	it	ge
 80080d2:	463b      	movge	r3, r7
 80080d4:	4689      	mov	r9, r1
 80080d6:	bfa4      	itt	ge
 80080d8:	460f      	movge	r7, r1
 80080da:	4699      	movge	r9, r3
 80080dc:	693d      	ldr	r5, [r7, #16]
 80080de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	eb05 060a 	add.w	r6, r5, sl
 80080ea:	42b3      	cmp	r3, r6
 80080ec:	b085      	sub	sp, #20
 80080ee:	bfb8      	it	lt
 80080f0:	3101      	addlt	r1, #1
 80080f2:	f7ff fedd 	bl	8007eb0 <_Balloc>
 80080f6:	b930      	cbnz	r0, 8008106 <__multiply+0x42>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4b41      	ldr	r3, [pc, #260]	@ (8008200 <__multiply+0x13c>)
 80080fc:	4841      	ldr	r0, [pc, #260]	@ (8008204 <__multiply+0x140>)
 80080fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008102:	f000 fc8b 	bl	8008a1c <__assert_func>
 8008106:	f100 0414 	add.w	r4, r0, #20
 800810a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800810e:	4623      	mov	r3, r4
 8008110:	2200      	movs	r2, #0
 8008112:	4573      	cmp	r3, lr
 8008114:	d320      	bcc.n	8008158 <__multiply+0x94>
 8008116:	f107 0814 	add.w	r8, r7, #20
 800811a:	f109 0114 	add.w	r1, r9, #20
 800811e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008122:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	1beb      	subs	r3, r5, r7
 800812a:	3b15      	subs	r3, #21
 800812c:	f023 0303 	bic.w	r3, r3, #3
 8008130:	3304      	adds	r3, #4
 8008132:	3715      	adds	r7, #21
 8008134:	42bd      	cmp	r5, r7
 8008136:	bf38      	it	cc
 8008138:	2304      	movcc	r3, #4
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	9103      	str	r1, [sp, #12]
 8008140:	428b      	cmp	r3, r1
 8008142:	d80c      	bhi.n	800815e <__multiply+0x9a>
 8008144:	2e00      	cmp	r6, #0
 8008146:	dd03      	ble.n	8008150 <__multiply+0x8c>
 8008148:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800814c:	2b00      	cmp	r3, #0
 800814e:	d055      	beq.n	80081fc <__multiply+0x138>
 8008150:	6106      	str	r6, [r0, #16]
 8008152:	b005      	add	sp, #20
 8008154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008158:	f843 2b04 	str.w	r2, [r3], #4
 800815c:	e7d9      	b.n	8008112 <__multiply+0x4e>
 800815e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008162:	f1ba 0f00 	cmp.w	sl, #0
 8008166:	d01f      	beq.n	80081a8 <__multiply+0xe4>
 8008168:	46c4      	mov	ip, r8
 800816a:	46a1      	mov	r9, r4
 800816c:	2700      	movs	r7, #0
 800816e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008172:	f8d9 3000 	ldr.w	r3, [r9]
 8008176:	fa1f fb82 	uxth.w	fp, r2
 800817a:	b29b      	uxth	r3, r3
 800817c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008180:	443b      	add	r3, r7
 8008182:	f8d9 7000 	ldr.w	r7, [r9]
 8008186:	0c12      	lsrs	r2, r2, #16
 8008188:	0c3f      	lsrs	r7, r7, #16
 800818a:	fb0a 7202 	mla	r2, sl, r2, r7
 800818e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008192:	b29b      	uxth	r3, r3
 8008194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008198:	4565      	cmp	r5, ip
 800819a:	f849 3b04 	str.w	r3, [r9], #4
 800819e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80081a2:	d8e4      	bhi.n	800816e <__multiply+0xaa>
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	50e7      	str	r7, [r4, r3]
 80081a8:	9b03      	ldr	r3, [sp, #12]
 80081aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80081ae:	3104      	adds	r1, #4
 80081b0:	f1b9 0f00 	cmp.w	r9, #0
 80081b4:	d020      	beq.n	80081f8 <__multiply+0x134>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	4647      	mov	r7, r8
 80081ba:	46a4      	mov	ip, r4
 80081bc:	f04f 0a00 	mov.w	sl, #0
 80081c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80081c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80081c8:	fb09 220b 	mla	r2, r9, fp, r2
 80081cc:	4452      	add	r2, sl
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d4:	f84c 3b04 	str.w	r3, [ip], #4
 80081d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80081dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80081e4:	fb09 330a 	mla	r3, r9, sl, r3
 80081e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80081ec:	42bd      	cmp	r5, r7
 80081ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081f2:	d8e5      	bhi.n	80081c0 <__multiply+0xfc>
 80081f4:	9a01      	ldr	r2, [sp, #4]
 80081f6:	50a3      	str	r3, [r4, r2]
 80081f8:	3404      	adds	r4, #4
 80081fa:	e79f      	b.n	800813c <__multiply+0x78>
 80081fc:	3e01      	subs	r6, #1
 80081fe:	e7a1      	b.n	8008144 <__multiply+0x80>
 8008200:	0800a260 	.word	0x0800a260
 8008204:	0800a271 	.word	0x0800a271

08008208 <__pow5mult>:
 8008208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800820c:	4615      	mov	r5, r2
 800820e:	f012 0203 	ands.w	r2, r2, #3
 8008212:	4607      	mov	r7, r0
 8008214:	460e      	mov	r6, r1
 8008216:	d007      	beq.n	8008228 <__pow5mult+0x20>
 8008218:	4c25      	ldr	r4, [pc, #148]	@ (80082b0 <__pow5mult+0xa8>)
 800821a:	3a01      	subs	r2, #1
 800821c:	2300      	movs	r3, #0
 800821e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008222:	f7ff fea7 	bl	8007f74 <__multadd>
 8008226:	4606      	mov	r6, r0
 8008228:	10ad      	asrs	r5, r5, #2
 800822a:	d03d      	beq.n	80082a8 <__pow5mult+0xa0>
 800822c:	69fc      	ldr	r4, [r7, #28]
 800822e:	b97c      	cbnz	r4, 8008250 <__pow5mult+0x48>
 8008230:	2010      	movs	r0, #16
 8008232:	f7ff fd87 	bl	8007d44 <malloc>
 8008236:	4602      	mov	r2, r0
 8008238:	61f8      	str	r0, [r7, #28]
 800823a:	b928      	cbnz	r0, 8008248 <__pow5mult+0x40>
 800823c:	4b1d      	ldr	r3, [pc, #116]	@ (80082b4 <__pow5mult+0xac>)
 800823e:	481e      	ldr	r0, [pc, #120]	@ (80082b8 <__pow5mult+0xb0>)
 8008240:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008244:	f000 fbea 	bl	8008a1c <__assert_func>
 8008248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800824c:	6004      	str	r4, [r0, #0]
 800824e:	60c4      	str	r4, [r0, #12]
 8008250:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008254:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008258:	b94c      	cbnz	r4, 800826e <__pow5mult+0x66>
 800825a:	f240 2171 	movw	r1, #625	@ 0x271
 800825e:	4638      	mov	r0, r7
 8008260:	f7ff ff1a 	bl	8008098 <__i2b>
 8008264:	2300      	movs	r3, #0
 8008266:	f8c8 0008 	str.w	r0, [r8, #8]
 800826a:	4604      	mov	r4, r0
 800826c:	6003      	str	r3, [r0, #0]
 800826e:	f04f 0900 	mov.w	r9, #0
 8008272:	07eb      	lsls	r3, r5, #31
 8008274:	d50a      	bpl.n	800828c <__pow5mult+0x84>
 8008276:	4631      	mov	r1, r6
 8008278:	4622      	mov	r2, r4
 800827a:	4638      	mov	r0, r7
 800827c:	f7ff ff22 	bl	80080c4 <__multiply>
 8008280:	4631      	mov	r1, r6
 8008282:	4680      	mov	r8, r0
 8008284:	4638      	mov	r0, r7
 8008286:	f7ff fe53 	bl	8007f30 <_Bfree>
 800828a:	4646      	mov	r6, r8
 800828c:	106d      	asrs	r5, r5, #1
 800828e:	d00b      	beq.n	80082a8 <__pow5mult+0xa0>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	b938      	cbnz	r0, 80082a4 <__pow5mult+0x9c>
 8008294:	4622      	mov	r2, r4
 8008296:	4621      	mov	r1, r4
 8008298:	4638      	mov	r0, r7
 800829a:	f7ff ff13 	bl	80080c4 <__multiply>
 800829e:	6020      	str	r0, [r4, #0]
 80082a0:	f8c0 9000 	str.w	r9, [r0]
 80082a4:	4604      	mov	r4, r0
 80082a6:	e7e4      	b.n	8008272 <__pow5mult+0x6a>
 80082a8:	4630      	mov	r0, r6
 80082aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ae:	bf00      	nop
 80082b0:	0800a324 	.word	0x0800a324
 80082b4:	0800a1f1 	.word	0x0800a1f1
 80082b8:	0800a271 	.word	0x0800a271

080082bc <__lshift>:
 80082bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	460c      	mov	r4, r1
 80082c2:	6849      	ldr	r1, [r1, #4]
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082ca:	68a3      	ldr	r3, [r4, #8]
 80082cc:	4607      	mov	r7, r0
 80082ce:	4691      	mov	r9, r2
 80082d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082d4:	f108 0601 	add.w	r6, r8, #1
 80082d8:	42b3      	cmp	r3, r6
 80082da:	db0b      	blt.n	80082f4 <__lshift+0x38>
 80082dc:	4638      	mov	r0, r7
 80082de:	f7ff fde7 	bl	8007eb0 <_Balloc>
 80082e2:	4605      	mov	r5, r0
 80082e4:	b948      	cbnz	r0, 80082fa <__lshift+0x3e>
 80082e6:	4602      	mov	r2, r0
 80082e8:	4b28      	ldr	r3, [pc, #160]	@ (800838c <__lshift+0xd0>)
 80082ea:	4829      	ldr	r0, [pc, #164]	@ (8008390 <__lshift+0xd4>)
 80082ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082f0:	f000 fb94 	bl	8008a1c <__assert_func>
 80082f4:	3101      	adds	r1, #1
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	e7ee      	b.n	80082d8 <__lshift+0x1c>
 80082fa:	2300      	movs	r3, #0
 80082fc:	f100 0114 	add.w	r1, r0, #20
 8008300:	f100 0210 	add.w	r2, r0, #16
 8008304:	4618      	mov	r0, r3
 8008306:	4553      	cmp	r3, sl
 8008308:	db33      	blt.n	8008372 <__lshift+0xb6>
 800830a:	6920      	ldr	r0, [r4, #16]
 800830c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008310:	f104 0314 	add.w	r3, r4, #20
 8008314:	f019 091f 	ands.w	r9, r9, #31
 8008318:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800831c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008320:	d02b      	beq.n	800837a <__lshift+0xbe>
 8008322:	f1c9 0e20 	rsb	lr, r9, #32
 8008326:	468a      	mov	sl, r1
 8008328:	2200      	movs	r2, #0
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	fa00 f009 	lsl.w	r0, r0, r9
 8008330:	4310      	orrs	r0, r2
 8008332:	f84a 0b04 	str.w	r0, [sl], #4
 8008336:	f853 2b04 	ldr.w	r2, [r3], #4
 800833a:	459c      	cmp	ip, r3
 800833c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008340:	d8f3      	bhi.n	800832a <__lshift+0x6e>
 8008342:	ebac 0304 	sub.w	r3, ip, r4
 8008346:	3b15      	subs	r3, #21
 8008348:	f023 0303 	bic.w	r3, r3, #3
 800834c:	3304      	adds	r3, #4
 800834e:	f104 0015 	add.w	r0, r4, #21
 8008352:	4560      	cmp	r0, ip
 8008354:	bf88      	it	hi
 8008356:	2304      	movhi	r3, #4
 8008358:	50ca      	str	r2, [r1, r3]
 800835a:	b10a      	cbz	r2, 8008360 <__lshift+0xa4>
 800835c:	f108 0602 	add.w	r6, r8, #2
 8008360:	3e01      	subs	r6, #1
 8008362:	4638      	mov	r0, r7
 8008364:	612e      	str	r6, [r5, #16]
 8008366:	4621      	mov	r1, r4
 8008368:	f7ff fde2 	bl	8007f30 <_Bfree>
 800836c:	4628      	mov	r0, r5
 800836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008372:	f842 0f04 	str.w	r0, [r2, #4]!
 8008376:	3301      	adds	r3, #1
 8008378:	e7c5      	b.n	8008306 <__lshift+0x4a>
 800837a:	3904      	subs	r1, #4
 800837c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008380:	f841 2f04 	str.w	r2, [r1, #4]!
 8008384:	459c      	cmp	ip, r3
 8008386:	d8f9      	bhi.n	800837c <__lshift+0xc0>
 8008388:	e7ea      	b.n	8008360 <__lshift+0xa4>
 800838a:	bf00      	nop
 800838c:	0800a260 	.word	0x0800a260
 8008390:	0800a271 	.word	0x0800a271

08008394 <__mcmp>:
 8008394:	690a      	ldr	r2, [r1, #16]
 8008396:	4603      	mov	r3, r0
 8008398:	6900      	ldr	r0, [r0, #16]
 800839a:	1a80      	subs	r0, r0, r2
 800839c:	b530      	push	{r4, r5, lr}
 800839e:	d10e      	bne.n	80083be <__mcmp+0x2a>
 80083a0:	3314      	adds	r3, #20
 80083a2:	3114      	adds	r1, #20
 80083a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083b4:	4295      	cmp	r5, r2
 80083b6:	d003      	beq.n	80083c0 <__mcmp+0x2c>
 80083b8:	d205      	bcs.n	80083c6 <__mcmp+0x32>
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295
 80083be:	bd30      	pop	{r4, r5, pc}
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d3f3      	bcc.n	80083ac <__mcmp+0x18>
 80083c4:	e7fb      	b.n	80083be <__mcmp+0x2a>
 80083c6:	2001      	movs	r0, #1
 80083c8:	e7f9      	b.n	80083be <__mcmp+0x2a>
	...

080083cc <__mdiff>:
 80083cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	4689      	mov	r9, r1
 80083d2:	4606      	mov	r6, r0
 80083d4:	4611      	mov	r1, r2
 80083d6:	4648      	mov	r0, r9
 80083d8:	4614      	mov	r4, r2
 80083da:	f7ff ffdb 	bl	8008394 <__mcmp>
 80083de:	1e05      	subs	r5, r0, #0
 80083e0:	d112      	bne.n	8008408 <__mdiff+0x3c>
 80083e2:	4629      	mov	r1, r5
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7ff fd63 	bl	8007eb0 <_Balloc>
 80083ea:	4602      	mov	r2, r0
 80083ec:	b928      	cbnz	r0, 80083fa <__mdiff+0x2e>
 80083ee:	4b3f      	ldr	r3, [pc, #252]	@ (80084ec <__mdiff+0x120>)
 80083f0:	f240 2137 	movw	r1, #567	@ 0x237
 80083f4:	483e      	ldr	r0, [pc, #248]	@ (80084f0 <__mdiff+0x124>)
 80083f6:	f000 fb11 	bl	8008a1c <__assert_func>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008400:	4610      	mov	r0, r2
 8008402:	b003      	add	sp, #12
 8008404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008408:	bfbc      	itt	lt
 800840a:	464b      	movlt	r3, r9
 800840c:	46a1      	movlt	r9, r4
 800840e:	4630      	mov	r0, r6
 8008410:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008414:	bfba      	itte	lt
 8008416:	461c      	movlt	r4, r3
 8008418:	2501      	movlt	r5, #1
 800841a:	2500      	movge	r5, #0
 800841c:	f7ff fd48 	bl	8007eb0 <_Balloc>
 8008420:	4602      	mov	r2, r0
 8008422:	b918      	cbnz	r0, 800842c <__mdiff+0x60>
 8008424:	4b31      	ldr	r3, [pc, #196]	@ (80084ec <__mdiff+0x120>)
 8008426:	f240 2145 	movw	r1, #581	@ 0x245
 800842a:	e7e3      	b.n	80083f4 <__mdiff+0x28>
 800842c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008430:	6926      	ldr	r6, [r4, #16]
 8008432:	60c5      	str	r5, [r0, #12]
 8008434:	f109 0310 	add.w	r3, r9, #16
 8008438:	f109 0514 	add.w	r5, r9, #20
 800843c:	f104 0e14 	add.w	lr, r4, #20
 8008440:	f100 0b14 	add.w	fp, r0, #20
 8008444:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008448:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	46d9      	mov	r9, fp
 8008450:	f04f 0c00 	mov.w	ip, #0
 8008454:	9b01      	ldr	r3, [sp, #4]
 8008456:	f85e 0b04 	ldr.w	r0, [lr], #4
 800845a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	fa1f f38a 	uxth.w	r3, sl
 8008464:	4619      	mov	r1, r3
 8008466:	b283      	uxth	r3, r0
 8008468:	1acb      	subs	r3, r1, r3
 800846a:	0c00      	lsrs	r0, r0, #16
 800846c:	4463      	add	r3, ip
 800846e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008472:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008476:	b29b      	uxth	r3, r3
 8008478:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800847c:	4576      	cmp	r6, lr
 800847e:	f849 3b04 	str.w	r3, [r9], #4
 8008482:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008486:	d8e5      	bhi.n	8008454 <__mdiff+0x88>
 8008488:	1b33      	subs	r3, r6, r4
 800848a:	3b15      	subs	r3, #21
 800848c:	f023 0303 	bic.w	r3, r3, #3
 8008490:	3415      	adds	r4, #21
 8008492:	3304      	adds	r3, #4
 8008494:	42a6      	cmp	r6, r4
 8008496:	bf38      	it	cc
 8008498:	2304      	movcc	r3, #4
 800849a:	441d      	add	r5, r3
 800849c:	445b      	add	r3, fp
 800849e:	461e      	mov	r6, r3
 80084a0:	462c      	mov	r4, r5
 80084a2:	4544      	cmp	r4, r8
 80084a4:	d30e      	bcc.n	80084c4 <__mdiff+0xf8>
 80084a6:	f108 0103 	add.w	r1, r8, #3
 80084aa:	1b49      	subs	r1, r1, r5
 80084ac:	f021 0103 	bic.w	r1, r1, #3
 80084b0:	3d03      	subs	r5, #3
 80084b2:	45a8      	cmp	r8, r5
 80084b4:	bf38      	it	cc
 80084b6:	2100      	movcc	r1, #0
 80084b8:	440b      	add	r3, r1
 80084ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084be:	b191      	cbz	r1, 80084e6 <__mdiff+0x11a>
 80084c0:	6117      	str	r7, [r2, #16]
 80084c2:	e79d      	b.n	8008400 <__mdiff+0x34>
 80084c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80084c8:	46e6      	mov	lr, ip
 80084ca:	0c08      	lsrs	r0, r1, #16
 80084cc:	fa1c fc81 	uxtah	ip, ip, r1
 80084d0:	4471      	add	r1, lr
 80084d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80084d6:	b289      	uxth	r1, r1
 80084d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084dc:	f846 1b04 	str.w	r1, [r6], #4
 80084e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084e4:	e7dd      	b.n	80084a2 <__mdiff+0xd6>
 80084e6:	3f01      	subs	r7, #1
 80084e8:	e7e7      	b.n	80084ba <__mdiff+0xee>
 80084ea:	bf00      	nop
 80084ec:	0800a260 	.word	0x0800a260
 80084f0:	0800a271 	.word	0x0800a271

080084f4 <__d2b>:
 80084f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084f8:	460f      	mov	r7, r1
 80084fa:	2101      	movs	r1, #1
 80084fc:	ec59 8b10 	vmov	r8, r9, d0
 8008500:	4616      	mov	r6, r2
 8008502:	f7ff fcd5 	bl	8007eb0 <_Balloc>
 8008506:	4604      	mov	r4, r0
 8008508:	b930      	cbnz	r0, 8008518 <__d2b+0x24>
 800850a:	4602      	mov	r2, r0
 800850c:	4b23      	ldr	r3, [pc, #140]	@ (800859c <__d2b+0xa8>)
 800850e:	4824      	ldr	r0, [pc, #144]	@ (80085a0 <__d2b+0xac>)
 8008510:	f240 310f 	movw	r1, #783	@ 0x30f
 8008514:	f000 fa82 	bl	8008a1c <__assert_func>
 8008518:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800851c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008520:	b10d      	cbz	r5, 8008526 <__d2b+0x32>
 8008522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	f1b8 0300 	subs.w	r3, r8, #0
 800852c:	d023      	beq.n	8008576 <__d2b+0x82>
 800852e:	4668      	mov	r0, sp
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	f7ff fd84 	bl	800803e <__lo0bits>
 8008536:	e9dd 1200 	ldrd	r1, r2, [sp]
 800853a:	b1d0      	cbz	r0, 8008572 <__d2b+0x7e>
 800853c:	f1c0 0320 	rsb	r3, r0, #32
 8008540:	fa02 f303 	lsl.w	r3, r2, r3
 8008544:	430b      	orrs	r3, r1
 8008546:	40c2      	lsrs	r2, r0
 8008548:	6163      	str	r3, [r4, #20]
 800854a:	9201      	str	r2, [sp, #4]
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	61a3      	str	r3, [r4, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	bf0c      	ite	eq
 8008554:	2201      	moveq	r2, #1
 8008556:	2202      	movne	r2, #2
 8008558:	6122      	str	r2, [r4, #16]
 800855a:	b1a5      	cbz	r5, 8008586 <__d2b+0x92>
 800855c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008560:	4405      	add	r5, r0
 8008562:	603d      	str	r5, [r7, #0]
 8008564:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008568:	6030      	str	r0, [r6, #0]
 800856a:	4620      	mov	r0, r4
 800856c:	b003      	add	sp, #12
 800856e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008572:	6161      	str	r1, [r4, #20]
 8008574:	e7ea      	b.n	800854c <__d2b+0x58>
 8008576:	a801      	add	r0, sp, #4
 8008578:	f7ff fd61 	bl	800803e <__lo0bits>
 800857c:	9b01      	ldr	r3, [sp, #4]
 800857e:	6163      	str	r3, [r4, #20]
 8008580:	3020      	adds	r0, #32
 8008582:	2201      	movs	r2, #1
 8008584:	e7e8      	b.n	8008558 <__d2b+0x64>
 8008586:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800858a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800858e:	6038      	str	r0, [r7, #0]
 8008590:	6918      	ldr	r0, [r3, #16]
 8008592:	f7ff fd35 	bl	8008000 <__hi0bits>
 8008596:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800859a:	e7e5      	b.n	8008568 <__d2b+0x74>
 800859c:	0800a260 	.word	0x0800a260
 80085a0:	0800a271 	.word	0x0800a271

080085a4 <__ssputs_r>:
 80085a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a8:	688e      	ldr	r6, [r1, #8]
 80085aa:	461f      	mov	r7, r3
 80085ac:	42be      	cmp	r6, r7
 80085ae:	680b      	ldr	r3, [r1, #0]
 80085b0:	4682      	mov	sl, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4690      	mov	r8, r2
 80085b6:	d82d      	bhi.n	8008614 <__ssputs_r+0x70>
 80085b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085c0:	d026      	beq.n	8008610 <__ssputs_r+0x6c>
 80085c2:	6965      	ldr	r5, [r4, #20]
 80085c4:	6909      	ldr	r1, [r1, #16]
 80085c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085ca:	eba3 0901 	sub.w	r9, r3, r1
 80085ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085d2:	1c7b      	adds	r3, r7, #1
 80085d4:	444b      	add	r3, r9
 80085d6:	106d      	asrs	r5, r5, #1
 80085d8:	429d      	cmp	r5, r3
 80085da:	bf38      	it	cc
 80085dc:	461d      	movcc	r5, r3
 80085de:	0553      	lsls	r3, r2, #21
 80085e0:	d527      	bpl.n	8008632 <__ssputs_r+0x8e>
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7ff fbd8 	bl	8007d98 <_malloc_r>
 80085e8:	4606      	mov	r6, r0
 80085ea:	b360      	cbz	r0, 8008646 <__ssputs_r+0xa2>
 80085ec:	6921      	ldr	r1, [r4, #16]
 80085ee:	464a      	mov	r2, r9
 80085f0:	f000 fa06 	bl	8008a00 <memcpy>
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	6126      	str	r6, [r4, #16]
 8008602:	6165      	str	r5, [r4, #20]
 8008604:	444e      	add	r6, r9
 8008606:	eba5 0509 	sub.w	r5, r5, r9
 800860a:	6026      	str	r6, [r4, #0]
 800860c:	60a5      	str	r5, [r4, #8]
 800860e:	463e      	mov	r6, r7
 8008610:	42be      	cmp	r6, r7
 8008612:	d900      	bls.n	8008616 <__ssputs_r+0x72>
 8008614:	463e      	mov	r6, r7
 8008616:	6820      	ldr	r0, [r4, #0]
 8008618:	4632      	mov	r2, r6
 800861a:	4641      	mov	r1, r8
 800861c:	f000 f9c6 	bl	80089ac <memmove>
 8008620:	68a3      	ldr	r3, [r4, #8]
 8008622:	1b9b      	subs	r3, r3, r6
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	4433      	add	r3, r6
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	2000      	movs	r0, #0
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	462a      	mov	r2, r5
 8008634:	f000 fa36 	bl	8008aa4 <_realloc_r>
 8008638:	4606      	mov	r6, r0
 800863a:	2800      	cmp	r0, #0
 800863c:	d1e0      	bne.n	8008600 <__ssputs_r+0x5c>
 800863e:	6921      	ldr	r1, [r4, #16]
 8008640:	4650      	mov	r0, sl
 8008642:	f7ff fb35 	bl	8007cb0 <_free_r>
 8008646:	230c      	movs	r3, #12
 8008648:	f8ca 3000 	str.w	r3, [sl]
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	e7e9      	b.n	800862e <__ssputs_r+0x8a>
	...

0800865c <_svfiprintf_r>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	4698      	mov	r8, r3
 8008662:	898b      	ldrh	r3, [r1, #12]
 8008664:	061b      	lsls	r3, r3, #24
 8008666:	b09d      	sub	sp, #116	@ 0x74
 8008668:	4607      	mov	r7, r0
 800866a:	460d      	mov	r5, r1
 800866c:	4614      	mov	r4, r2
 800866e:	d510      	bpl.n	8008692 <_svfiprintf_r+0x36>
 8008670:	690b      	ldr	r3, [r1, #16]
 8008672:	b973      	cbnz	r3, 8008692 <_svfiprintf_r+0x36>
 8008674:	2140      	movs	r1, #64	@ 0x40
 8008676:	f7ff fb8f 	bl	8007d98 <_malloc_r>
 800867a:	6028      	str	r0, [r5, #0]
 800867c:	6128      	str	r0, [r5, #16]
 800867e:	b930      	cbnz	r0, 800868e <_svfiprintf_r+0x32>
 8008680:	230c      	movs	r3, #12
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	f04f 30ff 	mov.w	r0, #4294967295
 8008688:	b01d      	add	sp, #116	@ 0x74
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	2340      	movs	r3, #64	@ 0x40
 8008690:	616b      	str	r3, [r5, #20]
 8008692:	2300      	movs	r3, #0
 8008694:	9309      	str	r3, [sp, #36]	@ 0x24
 8008696:	2320      	movs	r3, #32
 8008698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800869c:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a0:	2330      	movs	r3, #48	@ 0x30
 80086a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008840 <_svfiprintf_r+0x1e4>
 80086a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086aa:	f04f 0901 	mov.w	r9, #1
 80086ae:	4623      	mov	r3, r4
 80086b0:	469a      	mov	sl, r3
 80086b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b6:	b10a      	cbz	r2, 80086bc <_svfiprintf_r+0x60>
 80086b8:	2a25      	cmp	r2, #37	@ 0x25
 80086ba:	d1f9      	bne.n	80086b0 <_svfiprintf_r+0x54>
 80086bc:	ebba 0b04 	subs.w	fp, sl, r4
 80086c0:	d00b      	beq.n	80086da <_svfiprintf_r+0x7e>
 80086c2:	465b      	mov	r3, fp
 80086c4:	4622      	mov	r2, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ff6b 	bl	80085a4 <__ssputs_r>
 80086ce:	3001      	adds	r0, #1
 80086d0:	f000 80a7 	beq.w	8008822 <_svfiprintf_r+0x1c6>
 80086d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086d6:	445a      	add	r2, fp
 80086d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80086da:	f89a 3000 	ldrb.w	r3, [sl]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 809f 	beq.w	8008822 <_svfiprintf_r+0x1c6>
 80086e4:	2300      	movs	r3, #0
 80086e6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ee:	f10a 0a01 	add.w	sl, sl, #1
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	9307      	str	r3, [sp, #28]
 80086f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80086fc:	4654      	mov	r4, sl
 80086fe:	2205      	movs	r2, #5
 8008700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008704:	484e      	ldr	r0, [pc, #312]	@ (8008840 <_svfiprintf_r+0x1e4>)
 8008706:	f7f7 fd83 	bl	8000210 <memchr>
 800870a:	9a04      	ldr	r2, [sp, #16]
 800870c:	b9d8      	cbnz	r0, 8008746 <_svfiprintf_r+0xea>
 800870e:	06d0      	lsls	r0, r2, #27
 8008710:	bf44      	itt	mi
 8008712:	2320      	movmi	r3, #32
 8008714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008718:	0711      	lsls	r1, r2, #28
 800871a:	bf44      	itt	mi
 800871c:	232b      	movmi	r3, #43	@ 0x2b
 800871e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b2a      	cmp	r3, #42	@ 0x2a
 8008728:	d015      	beq.n	8008756 <_svfiprintf_r+0xfa>
 800872a:	9a07      	ldr	r2, [sp, #28]
 800872c:	4654      	mov	r4, sl
 800872e:	2000      	movs	r0, #0
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	4621      	mov	r1, r4
 8008736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873a:	3b30      	subs	r3, #48	@ 0x30
 800873c:	2b09      	cmp	r3, #9
 800873e:	d94b      	bls.n	80087d8 <_svfiprintf_r+0x17c>
 8008740:	b1b0      	cbz	r0, 8008770 <_svfiprintf_r+0x114>
 8008742:	9207      	str	r2, [sp, #28]
 8008744:	e014      	b.n	8008770 <_svfiprintf_r+0x114>
 8008746:	eba0 0308 	sub.w	r3, r0, r8
 800874a:	fa09 f303 	lsl.w	r3, r9, r3
 800874e:	4313      	orrs	r3, r2
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	46a2      	mov	sl, r4
 8008754:	e7d2      	b.n	80086fc <_svfiprintf_r+0xa0>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	1d19      	adds	r1, r3, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	9103      	str	r1, [sp, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfbb      	ittet	lt
 8008762:	425b      	neglt	r3, r3
 8008764:	f042 0202 	orrlt.w	r2, r2, #2
 8008768:	9307      	strge	r3, [sp, #28]
 800876a:	9307      	strlt	r3, [sp, #28]
 800876c:	bfb8      	it	lt
 800876e:	9204      	strlt	r2, [sp, #16]
 8008770:	7823      	ldrb	r3, [r4, #0]
 8008772:	2b2e      	cmp	r3, #46	@ 0x2e
 8008774:	d10a      	bne.n	800878c <_svfiprintf_r+0x130>
 8008776:	7863      	ldrb	r3, [r4, #1]
 8008778:	2b2a      	cmp	r3, #42	@ 0x2a
 800877a:	d132      	bne.n	80087e2 <_svfiprintf_r+0x186>
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	1d1a      	adds	r2, r3, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	9203      	str	r2, [sp, #12]
 8008784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008788:	3402      	adds	r4, #2
 800878a:	9305      	str	r3, [sp, #20]
 800878c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008850 <_svfiprintf_r+0x1f4>
 8008790:	7821      	ldrb	r1, [r4, #0]
 8008792:	2203      	movs	r2, #3
 8008794:	4650      	mov	r0, sl
 8008796:	f7f7 fd3b 	bl	8000210 <memchr>
 800879a:	b138      	cbz	r0, 80087ac <_svfiprintf_r+0x150>
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	eba0 000a 	sub.w	r0, r0, sl
 80087a2:	2240      	movs	r2, #64	@ 0x40
 80087a4:	4082      	lsls	r2, r0
 80087a6:	4313      	orrs	r3, r2
 80087a8:	3401      	adds	r4, #1
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b0:	4824      	ldr	r0, [pc, #144]	@ (8008844 <_svfiprintf_r+0x1e8>)
 80087b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087b6:	2206      	movs	r2, #6
 80087b8:	f7f7 fd2a 	bl	8000210 <memchr>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d036      	beq.n	800882e <_svfiprintf_r+0x1d2>
 80087c0:	4b21      	ldr	r3, [pc, #132]	@ (8008848 <_svfiprintf_r+0x1ec>)
 80087c2:	bb1b      	cbnz	r3, 800880c <_svfiprintf_r+0x1b0>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	3307      	adds	r3, #7
 80087c8:	f023 0307 	bic.w	r3, r3, #7
 80087cc:	3308      	adds	r3, #8
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d2:	4433      	add	r3, r6
 80087d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d6:	e76a      	b.n	80086ae <_svfiprintf_r+0x52>
 80087d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087dc:	460c      	mov	r4, r1
 80087de:	2001      	movs	r0, #1
 80087e0:	e7a8      	b.n	8008734 <_svfiprintf_r+0xd8>
 80087e2:	2300      	movs	r3, #0
 80087e4:	3401      	adds	r4, #1
 80087e6:	9305      	str	r3, [sp, #20]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f04f 0c0a 	mov.w	ip, #10
 80087ee:	4620      	mov	r0, r4
 80087f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f4:	3a30      	subs	r2, #48	@ 0x30
 80087f6:	2a09      	cmp	r2, #9
 80087f8:	d903      	bls.n	8008802 <_svfiprintf_r+0x1a6>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0c6      	beq.n	800878c <_svfiprintf_r+0x130>
 80087fe:	9105      	str	r1, [sp, #20]
 8008800:	e7c4      	b.n	800878c <_svfiprintf_r+0x130>
 8008802:	fb0c 2101 	mla	r1, ip, r1, r2
 8008806:	4604      	mov	r4, r0
 8008808:	2301      	movs	r3, #1
 800880a:	e7f0      	b.n	80087ee <_svfiprintf_r+0x192>
 800880c:	ab03      	add	r3, sp, #12
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	462a      	mov	r2, r5
 8008812:	4b0e      	ldr	r3, [pc, #56]	@ (800884c <_svfiprintf_r+0x1f0>)
 8008814:	a904      	add	r1, sp, #16
 8008816:	4638      	mov	r0, r7
 8008818:	f7fd fe94 	bl	8006544 <_printf_float>
 800881c:	1c42      	adds	r2, r0, #1
 800881e:	4606      	mov	r6, r0
 8008820:	d1d6      	bne.n	80087d0 <_svfiprintf_r+0x174>
 8008822:	89ab      	ldrh	r3, [r5, #12]
 8008824:	065b      	lsls	r3, r3, #25
 8008826:	f53f af2d 	bmi.w	8008684 <_svfiprintf_r+0x28>
 800882a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800882c:	e72c      	b.n	8008688 <_svfiprintf_r+0x2c>
 800882e:	ab03      	add	r3, sp, #12
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	462a      	mov	r2, r5
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <_svfiprintf_r+0x1f0>)
 8008836:	a904      	add	r1, sp, #16
 8008838:	4638      	mov	r0, r7
 800883a:	f7fe f91b 	bl	8006a74 <_printf_i>
 800883e:	e7ed      	b.n	800881c <_svfiprintf_r+0x1c0>
 8008840:	0800a2ca 	.word	0x0800a2ca
 8008844:	0800a2d4 	.word	0x0800a2d4
 8008848:	08006545 	.word	0x08006545
 800884c:	080085a5 	.word	0x080085a5
 8008850:	0800a2d0 	.word	0x0800a2d0

08008854 <__sflush_r>:
 8008854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885c:	0716      	lsls	r6, r2, #28
 800885e:	4605      	mov	r5, r0
 8008860:	460c      	mov	r4, r1
 8008862:	d454      	bmi.n	800890e <__sflush_r+0xba>
 8008864:	684b      	ldr	r3, [r1, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	dc02      	bgt.n	8008870 <__sflush_r+0x1c>
 800886a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd48      	ble.n	8008902 <__sflush_r+0xae>
 8008870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008872:	2e00      	cmp	r6, #0
 8008874:	d045      	beq.n	8008902 <__sflush_r+0xae>
 8008876:	2300      	movs	r3, #0
 8008878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800887c:	682f      	ldr	r7, [r5, #0]
 800887e:	6a21      	ldr	r1, [r4, #32]
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	d030      	beq.n	80088e6 <__sflush_r+0x92>
 8008884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	0759      	lsls	r1, r3, #29
 800888a:	d505      	bpl.n	8008898 <__sflush_r+0x44>
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008892:	b10b      	cbz	r3, 8008898 <__sflush_r+0x44>
 8008894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008896:	1ad2      	subs	r2, r2, r3
 8008898:	2300      	movs	r3, #0
 800889a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800889c:	6a21      	ldr	r1, [r4, #32]
 800889e:	4628      	mov	r0, r5
 80088a0:	47b0      	blx	r6
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	d106      	bne.n	80088b6 <__sflush_r+0x62>
 80088a8:	6829      	ldr	r1, [r5, #0]
 80088aa:	291d      	cmp	r1, #29
 80088ac:	d82b      	bhi.n	8008906 <__sflush_r+0xb2>
 80088ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008958 <__sflush_r+0x104>)
 80088b0:	40ca      	lsrs	r2, r1
 80088b2:	07d6      	lsls	r6, r2, #31
 80088b4:	d527      	bpl.n	8008906 <__sflush_r+0xb2>
 80088b6:	2200      	movs	r2, #0
 80088b8:	6062      	str	r2, [r4, #4]
 80088ba:	04d9      	lsls	r1, r3, #19
 80088bc:	6922      	ldr	r2, [r4, #16]
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	d504      	bpl.n	80088cc <__sflush_r+0x78>
 80088c2:	1c42      	adds	r2, r0, #1
 80088c4:	d101      	bne.n	80088ca <__sflush_r+0x76>
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	b903      	cbnz	r3, 80088cc <__sflush_r+0x78>
 80088ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80088cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088ce:	602f      	str	r7, [r5, #0]
 80088d0:	b1b9      	cbz	r1, 8008902 <__sflush_r+0xae>
 80088d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088d6:	4299      	cmp	r1, r3
 80088d8:	d002      	beq.n	80088e0 <__sflush_r+0x8c>
 80088da:	4628      	mov	r0, r5
 80088dc:	f7ff f9e8 	bl	8007cb0 <_free_r>
 80088e0:	2300      	movs	r3, #0
 80088e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80088e4:	e00d      	b.n	8008902 <__sflush_r+0xae>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b0      	blx	r6
 80088ec:	4602      	mov	r2, r0
 80088ee:	1c50      	adds	r0, r2, #1
 80088f0:	d1c9      	bne.n	8008886 <__sflush_r+0x32>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0c6      	beq.n	8008886 <__sflush_r+0x32>
 80088f8:	2b1d      	cmp	r3, #29
 80088fa:	d001      	beq.n	8008900 <__sflush_r+0xac>
 80088fc:	2b16      	cmp	r3, #22
 80088fe:	d11e      	bne.n	800893e <__sflush_r+0xea>
 8008900:	602f      	str	r7, [r5, #0]
 8008902:	2000      	movs	r0, #0
 8008904:	e022      	b.n	800894c <__sflush_r+0xf8>
 8008906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890a:	b21b      	sxth	r3, r3
 800890c:	e01b      	b.n	8008946 <__sflush_r+0xf2>
 800890e:	690f      	ldr	r7, [r1, #16]
 8008910:	2f00      	cmp	r7, #0
 8008912:	d0f6      	beq.n	8008902 <__sflush_r+0xae>
 8008914:	0793      	lsls	r3, r2, #30
 8008916:	680e      	ldr	r6, [r1, #0]
 8008918:	bf08      	it	eq
 800891a:	694b      	ldreq	r3, [r1, #20]
 800891c:	600f      	str	r7, [r1, #0]
 800891e:	bf18      	it	ne
 8008920:	2300      	movne	r3, #0
 8008922:	eba6 0807 	sub.w	r8, r6, r7
 8008926:	608b      	str	r3, [r1, #8]
 8008928:	f1b8 0f00 	cmp.w	r8, #0
 800892c:	dde9      	ble.n	8008902 <__sflush_r+0xae>
 800892e:	6a21      	ldr	r1, [r4, #32]
 8008930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008932:	4643      	mov	r3, r8
 8008934:	463a      	mov	r2, r7
 8008936:	4628      	mov	r0, r5
 8008938:	47b0      	blx	r6
 800893a:	2800      	cmp	r0, #0
 800893c:	dc08      	bgt.n	8008950 <__sflush_r+0xfc>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	4407      	add	r7, r0
 8008952:	eba8 0800 	sub.w	r8, r8, r0
 8008956:	e7e7      	b.n	8008928 <__sflush_r+0xd4>
 8008958:	20400001 	.word	0x20400001

0800895c <_fflush_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	690b      	ldr	r3, [r1, #16]
 8008960:	4605      	mov	r5, r0
 8008962:	460c      	mov	r4, r1
 8008964:	b913      	cbnz	r3, 800896c <_fflush_r+0x10>
 8008966:	2500      	movs	r5, #0
 8008968:	4628      	mov	r0, r5
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	b118      	cbz	r0, 8008976 <_fflush_r+0x1a>
 800896e:	6a03      	ldr	r3, [r0, #32]
 8008970:	b90b      	cbnz	r3, 8008976 <_fflush_r+0x1a>
 8008972:	f7fe fa29 	bl	8006dc8 <__sinit>
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0f3      	beq.n	8008966 <_fflush_r+0xa>
 800897e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008980:	07d0      	lsls	r0, r2, #31
 8008982:	d404      	bmi.n	800898e <_fflush_r+0x32>
 8008984:	0599      	lsls	r1, r3, #22
 8008986:	d402      	bmi.n	800898e <_fflush_r+0x32>
 8008988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800898a:	f7fe fb36 	bl	8006ffa <__retarget_lock_acquire_recursive>
 800898e:	4628      	mov	r0, r5
 8008990:	4621      	mov	r1, r4
 8008992:	f7ff ff5f 	bl	8008854 <__sflush_r>
 8008996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008998:	07da      	lsls	r2, r3, #31
 800899a:	4605      	mov	r5, r0
 800899c:	d4e4      	bmi.n	8008968 <_fflush_r+0xc>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	059b      	lsls	r3, r3, #22
 80089a2:	d4e1      	bmi.n	8008968 <_fflush_r+0xc>
 80089a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089a6:	f7fe fb29 	bl	8006ffc <__retarget_lock_release_recursive>
 80089aa:	e7dd      	b.n	8008968 <_fflush_r+0xc>

080089ac <memmove>:
 80089ac:	4288      	cmp	r0, r1
 80089ae:	b510      	push	{r4, lr}
 80089b0:	eb01 0402 	add.w	r4, r1, r2
 80089b4:	d902      	bls.n	80089bc <memmove+0x10>
 80089b6:	4284      	cmp	r4, r0
 80089b8:	4623      	mov	r3, r4
 80089ba:	d807      	bhi.n	80089cc <memmove+0x20>
 80089bc:	1e43      	subs	r3, r0, #1
 80089be:	42a1      	cmp	r1, r4
 80089c0:	d008      	beq.n	80089d4 <memmove+0x28>
 80089c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ca:	e7f8      	b.n	80089be <memmove+0x12>
 80089cc:	4402      	add	r2, r0
 80089ce:	4601      	mov	r1, r0
 80089d0:	428a      	cmp	r2, r1
 80089d2:	d100      	bne.n	80089d6 <memmove+0x2a>
 80089d4:	bd10      	pop	{r4, pc}
 80089d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089de:	e7f7      	b.n	80089d0 <memmove+0x24>

080089e0 <_sbrk_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d06      	ldr	r5, [pc, #24]	@ (80089fc <_sbrk_r+0x1c>)
 80089e4:	2300      	movs	r3, #0
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7fa fa32 	bl	8002e54 <_sbrk>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_sbrk_r+0x1a>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_sbrk_r+0x1a>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	20000fdc 	.word	0x20000fdc

08008a00 <memcpy>:
 8008a00:	440a      	add	r2, r1
 8008a02:	4291      	cmp	r1, r2
 8008a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a08:	d100      	bne.n	8008a0c <memcpy+0xc>
 8008a0a:	4770      	bx	lr
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a16:	4291      	cmp	r1, r2
 8008a18:	d1f9      	bne.n	8008a0e <memcpy+0xe>
 8008a1a:	bd10      	pop	{r4, pc}

08008a1c <__assert_func>:
 8008a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a1e:	4614      	mov	r4, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b09      	ldr	r3, [pc, #36]	@ (8008a48 <__assert_func+0x2c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4605      	mov	r5, r0
 8008a28:	68d8      	ldr	r0, [r3, #12]
 8008a2a:	b14c      	cbz	r4, 8008a40 <__assert_func+0x24>
 8008a2c:	4b07      	ldr	r3, [pc, #28]	@ (8008a4c <__assert_func+0x30>)
 8008a2e:	9100      	str	r1, [sp, #0]
 8008a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a34:	4906      	ldr	r1, [pc, #24]	@ (8008a50 <__assert_func+0x34>)
 8008a36:	462b      	mov	r3, r5
 8008a38:	f000 f870 	bl	8008b1c <fiprintf>
 8008a3c:	f000 f880 	bl	8008b40 <abort>
 8008a40:	4b04      	ldr	r3, [pc, #16]	@ (8008a54 <__assert_func+0x38>)
 8008a42:	461c      	mov	r4, r3
 8008a44:	e7f3      	b.n	8008a2e <__assert_func+0x12>
 8008a46:	bf00      	nop
 8008a48:	20000018 	.word	0x20000018
 8008a4c:	0800a2e5 	.word	0x0800a2e5
 8008a50:	0800a2f2 	.word	0x0800a2f2
 8008a54:	0800a320 	.word	0x0800a320

08008a58 <_calloc_r>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	fba1 5402 	umull	r5, r4, r1, r2
 8008a5e:	b934      	cbnz	r4, 8008a6e <_calloc_r+0x16>
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7ff f999 	bl	8007d98 <_malloc_r>
 8008a66:	4606      	mov	r6, r0
 8008a68:	b928      	cbnz	r0, 8008a76 <_calloc_r+0x1e>
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	bd70      	pop	{r4, r5, r6, pc}
 8008a6e:	220c      	movs	r2, #12
 8008a70:	6002      	str	r2, [r0, #0]
 8008a72:	2600      	movs	r6, #0
 8008a74:	e7f9      	b.n	8008a6a <_calloc_r+0x12>
 8008a76:	462a      	mov	r2, r5
 8008a78:	4621      	mov	r1, r4
 8008a7a:	f7fe fa40 	bl	8006efe <memset>
 8008a7e:	e7f4      	b.n	8008a6a <_calloc_r+0x12>

08008a80 <__ascii_mbtowc>:
 8008a80:	b082      	sub	sp, #8
 8008a82:	b901      	cbnz	r1, 8008a86 <__ascii_mbtowc+0x6>
 8008a84:	a901      	add	r1, sp, #4
 8008a86:	b142      	cbz	r2, 8008a9a <__ascii_mbtowc+0x1a>
 8008a88:	b14b      	cbz	r3, 8008a9e <__ascii_mbtowc+0x1e>
 8008a8a:	7813      	ldrb	r3, [r2, #0]
 8008a8c:	600b      	str	r3, [r1, #0]
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	1e10      	subs	r0, r2, #0
 8008a92:	bf18      	it	ne
 8008a94:	2001      	movne	r0, #1
 8008a96:	b002      	add	sp, #8
 8008a98:	4770      	bx	lr
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	e7fb      	b.n	8008a96 <__ascii_mbtowc+0x16>
 8008a9e:	f06f 0001 	mvn.w	r0, #1
 8008aa2:	e7f8      	b.n	8008a96 <__ascii_mbtowc+0x16>

08008aa4 <_realloc_r>:
 8008aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	4614      	mov	r4, r2
 8008aac:	460d      	mov	r5, r1
 8008aae:	b921      	cbnz	r1, 8008aba <_realloc_r+0x16>
 8008ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	f7ff b96f 	b.w	8007d98 <_malloc_r>
 8008aba:	b92a      	cbnz	r2, 8008ac8 <_realloc_r+0x24>
 8008abc:	f7ff f8f8 	bl	8007cb0 <_free_r>
 8008ac0:	4625      	mov	r5, r4
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac8:	f000 f841 	bl	8008b4e <_malloc_usable_size_r>
 8008acc:	4284      	cmp	r4, r0
 8008ace:	4606      	mov	r6, r0
 8008ad0:	d802      	bhi.n	8008ad8 <_realloc_r+0x34>
 8008ad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ad6:	d8f4      	bhi.n	8008ac2 <_realloc_r+0x1e>
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4638      	mov	r0, r7
 8008adc:	f7ff f95c 	bl	8007d98 <_malloc_r>
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	b908      	cbnz	r0, 8008ae8 <_realloc_r+0x44>
 8008ae4:	4645      	mov	r5, r8
 8008ae6:	e7ec      	b.n	8008ac2 <_realloc_r+0x1e>
 8008ae8:	42b4      	cmp	r4, r6
 8008aea:	4622      	mov	r2, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	bf28      	it	cs
 8008af0:	4632      	movcs	r2, r6
 8008af2:	f7ff ff85 	bl	8008a00 <memcpy>
 8008af6:	4629      	mov	r1, r5
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7ff f8d9 	bl	8007cb0 <_free_r>
 8008afe:	e7f1      	b.n	8008ae4 <_realloc_r+0x40>

08008b00 <__ascii_wctomb>:
 8008b00:	4603      	mov	r3, r0
 8008b02:	4608      	mov	r0, r1
 8008b04:	b141      	cbz	r1, 8008b18 <__ascii_wctomb+0x18>
 8008b06:	2aff      	cmp	r2, #255	@ 0xff
 8008b08:	d904      	bls.n	8008b14 <__ascii_wctomb+0x14>
 8008b0a:	228a      	movs	r2, #138	@ 0x8a
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b12:	4770      	bx	lr
 8008b14:	700a      	strb	r2, [r1, #0]
 8008b16:	2001      	movs	r0, #1
 8008b18:	4770      	bx	lr
	...

08008b1c <fiprintf>:
 8008b1c:	b40e      	push	{r1, r2, r3}
 8008b1e:	b503      	push	{r0, r1, lr}
 8008b20:	4601      	mov	r1, r0
 8008b22:	ab03      	add	r3, sp, #12
 8008b24:	4805      	ldr	r0, [pc, #20]	@ (8008b3c <fiprintf+0x20>)
 8008b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2a:	6800      	ldr	r0, [r0, #0]
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	f000 f83f 	bl	8008bb0 <_vfiprintf_r>
 8008b32:	b002      	add	sp, #8
 8008b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b38:	b003      	add	sp, #12
 8008b3a:	4770      	bx	lr
 8008b3c:	20000018 	.word	0x20000018

08008b40 <abort>:
 8008b40:	b508      	push	{r3, lr}
 8008b42:	2006      	movs	r0, #6
 8008b44:	f000 fa08 	bl	8008f58 <raise>
 8008b48:	2001      	movs	r0, #1
 8008b4a:	f7fa f953 	bl	8002df4 <_exit>

08008b4e <_malloc_usable_size_r>:
 8008b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b52:	1f18      	subs	r0, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bfbc      	itt	lt
 8008b58:	580b      	ldrlt	r3, [r1, r0]
 8008b5a:	18c0      	addlt	r0, r0, r3
 8008b5c:	4770      	bx	lr

08008b5e <__sfputc_r>:
 8008b5e:	6893      	ldr	r3, [r2, #8]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	b410      	push	{r4}
 8008b66:	6093      	str	r3, [r2, #8]
 8008b68:	da08      	bge.n	8008b7c <__sfputc_r+0x1e>
 8008b6a:	6994      	ldr	r4, [r2, #24]
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	db01      	blt.n	8008b74 <__sfputc_r+0x16>
 8008b70:	290a      	cmp	r1, #10
 8008b72:	d103      	bne.n	8008b7c <__sfputc_r+0x1e>
 8008b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b78:	f000 b932 	b.w	8008de0 <__swbuf_r>
 8008b7c:	6813      	ldr	r3, [r2, #0]
 8008b7e:	1c58      	adds	r0, r3, #1
 8008b80:	6010      	str	r0, [r2, #0]
 8008b82:	7019      	strb	r1, [r3, #0]
 8008b84:	4608      	mov	r0, r1
 8008b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <__sfputs_r>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460f      	mov	r7, r1
 8008b92:	4614      	mov	r4, r2
 8008b94:	18d5      	adds	r5, r2, r3
 8008b96:	42ac      	cmp	r4, r5
 8008b98:	d101      	bne.n	8008b9e <__sfputs_r+0x12>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e007      	b.n	8008bae <__sfputs_r+0x22>
 8008b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba2:	463a      	mov	r2, r7
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7ff ffda 	bl	8008b5e <__sfputc_r>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	d1f3      	bne.n	8008b96 <__sfputs_r+0xa>
 8008bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bb0 <_vfiprintf_r>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	b09d      	sub	sp, #116	@ 0x74
 8008bb8:	4614      	mov	r4, r2
 8008bba:	4698      	mov	r8, r3
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	b118      	cbz	r0, 8008bc8 <_vfiprintf_r+0x18>
 8008bc0:	6a03      	ldr	r3, [r0, #32]
 8008bc2:	b90b      	cbnz	r3, 8008bc8 <_vfiprintf_r+0x18>
 8008bc4:	f7fe f900 	bl	8006dc8 <__sinit>
 8008bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bca:	07d9      	lsls	r1, r3, #31
 8008bcc:	d405      	bmi.n	8008bda <_vfiprintf_r+0x2a>
 8008bce:	89ab      	ldrh	r3, [r5, #12]
 8008bd0:	059a      	lsls	r2, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_vfiprintf_r+0x2a>
 8008bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bd6:	f7fe fa10 	bl	8006ffa <__retarget_lock_acquire_recursive>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	071b      	lsls	r3, r3, #28
 8008bde:	d501      	bpl.n	8008be4 <_vfiprintf_r+0x34>
 8008be0:	692b      	ldr	r3, [r5, #16]
 8008be2:	b99b      	cbnz	r3, 8008c0c <_vfiprintf_r+0x5c>
 8008be4:	4629      	mov	r1, r5
 8008be6:	4630      	mov	r0, r6
 8008be8:	f000 f938 	bl	8008e5c <__swsetup_r>
 8008bec:	b170      	cbz	r0, 8008c0c <_vfiprintf_r+0x5c>
 8008bee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bf0:	07dc      	lsls	r4, r3, #31
 8008bf2:	d504      	bpl.n	8008bfe <_vfiprintf_r+0x4e>
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf8:	b01d      	add	sp, #116	@ 0x74
 8008bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	0598      	lsls	r0, r3, #22
 8008c02:	d4f7      	bmi.n	8008bf4 <_vfiprintf_r+0x44>
 8008c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c06:	f7fe f9f9 	bl	8006ffc <__retarget_lock_release_recursive>
 8008c0a:	e7f3      	b.n	8008bf4 <_vfiprintf_r+0x44>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c10:	2320      	movs	r3, #32
 8008c12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c1a:	2330      	movs	r3, #48	@ 0x30
 8008c1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008dcc <_vfiprintf_r+0x21c>
 8008c20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c24:	f04f 0901 	mov.w	r9, #1
 8008c28:	4623      	mov	r3, r4
 8008c2a:	469a      	mov	sl, r3
 8008c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c30:	b10a      	cbz	r2, 8008c36 <_vfiprintf_r+0x86>
 8008c32:	2a25      	cmp	r2, #37	@ 0x25
 8008c34:	d1f9      	bne.n	8008c2a <_vfiprintf_r+0x7a>
 8008c36:	ebba 0b04 	subs.w	fp, sl, r4
 8008c3a:	d00b      	beq.n	8008c54 <_vfiprintf_r+0xa4>
 8008c3c:	465b      	mov	r3, fp
 8008c3e:	4622      	mov	r2, r4
 8008c40:	4629      	mov	r1, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7ff ffa2 	bl	8008b8c <__sfputs_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	f000 80a7 	beq.w	8008d9c <_vfiprintf_r+0x1ec>
 8008c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c50:	445a      	add	r2, fp
 8008c52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c54:	f89a 3000 	ldrb.w	r3, [sl]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 809f 	beq.w	8008d9c <_vfiprintf_r+0x1ec>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f04f 32ff 	mov.w	r2, #4294967295
 8008c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c68:	f10a 0a01 	add.w	sl, sl, #1
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	9307      	str	r3, [sp, #28]
 8008c70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c74:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c76:	4654      	mov	r4, sl
 8008c78:	2205      	movs	r2, #5
 8008c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7e:	4853      	ldr	r0, [pc, #332]	@ (8008dcc <_vfiprintf_r+0x21c>)
 8008c80:	f7f7 fac6 	bl	8000210 <memchr>
 8008c84:	9a04      	ldr	r2, [sp, #16]
 8008c86:	b9d8      	cbnz	r0, 8008cc0 <_vfiprintf_r+0x110>
 8008c88:	06d1      	lsls	r1, r2, #27
 8008c8a:	bf44      	itt	mi
 8008c8c:	2320      	movmi	r3, #32
 8008c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c92:	0713      	lsls	r3, r2, #28
 8008c94:	bf44      	itt	mi
 8008c96:	232b      	movmi	r3, #43	@ 0x2b
 8008c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca2:	d015      	beq.n	8008cd0 <_vfiprintf_r+0x120>
 8008ca4:	9a07      	ldr	r2, [sp, #28]
 8008ca6:	4654      	mov	r4, sl
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f04f 0c0a 	mov.w	ip, #10
 8008cae:	4621      	mov	r1, r4
 8008cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cb4:	3b30      	subs	r3, #48	@ 0x30
 8008cb6:	2b09      	cmp	r3, #9
 8008cb8:	d94b      	bls.n	8008d52 <_vfiprintf_r+0x1a2>
 8008cba:	b1b0      	cbz	r0, 8008cea <_vfiprintf_r+0x13a>
 8008cbc:	9207      	str	r2, [sp, #28]
 8008cbe:	e014      	b.n	8008cea <_vfiprintf_r+0x13a>
 8008cc0:	eba0 0308 	sub.w	r3, r0, r8
 8008cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	9304      	str	r3, [sp, #16]
 8008ccc:	46a2      	mov	sl, r4
 8008cce:	e7d2      	b.n	8008c76 <_vfiprintf_r+0xc6>
 8008cd0:	9b03      	ldr	r3, [sp, #12]
 8008cd2:	1d19      	adds	r1, r3, #4
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	9103      	str	r1, [sp, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bfbb      	ittet	lt
 8008cdc:	425b      	neglt	r3, r3
 8008cde:	f042 0202 	orrlt.w	r2, r2, #2
 8008ce2:	9307      	strge	r3, [sp, #28]
 8008ce4:	9307      	strlt	r3, [sp, #28]
 8008ce6:	bfb8      	it	lt
 8008ce8:	9204      	strlt	r2, [sp, #16]
 8008cea:	7823      	ldrb	r3, [r4, #0]
 8008cec:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cee:	d10a      	bne.n	8008d06 <_vfiprintf_r+0x156>
 8008cf0:	7863      	ldrb	r3, [r4, #1]
 8008cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cf4:	d132      	bne.n	8008d5c <_vfiprintf_r+0x1ac>
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	1d1a      	adds	r2, r3, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	9203      	str	r2, [sp, #12]
 8008cfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d02:	3402      	adds	r4, #2
 8008d04:	9305      	str	r3, [sp, #20]
 8008d06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ddc <_vfiprintf_r+0x22c>
 8008d0a:	7821      	ldrb	r1, [r4, #0]
 8008d0c:	2203      	movs	r2, #3
 8008d0e:	4650      	mov	r0, sl
 8008d10:	f7f7 fa7e 	bl	8000210 <memchr>
 8008d14:	b138      	cbz	r0, 8008d26 <_vfiprintf_r+0x176>
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	eba0 000a 	sub.w	r0, r0, sl
 8008d1c:	2240      	movs	r2, #64	@ 0x40
 8008d1e:	4082      	lsls	r2, r0
 8008d20:	4313      	orrs	r3, r2
 8008d22:	3401      	adds	r4, #1
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2a:	4829      	ldr	r0, [pc, #164]	@ (8008dd0 <_vfiprintf_r+0x220>)
 8008d2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d30:	2206      	movs	r2, #6
 8008d32:	f7f7 fa6d 	bl	8000210 <memchr>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d03f      	beq.n	8008dba <_vfiprintf_r+0x20a>
 8008d3a:	4b26      	ldr	r3, [pc, #152]	@ (8008dd4 <_vfiprintf_r+0x224>)
 8008d3c:	bb1b      	cbnz	r3, 8008d86 <_vfiprintf_r+0x1d6>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	3307      	adds	r3, #7
 8008d42:	f023 0307 	bic.w	r3, r3, #7
 8008d46:	3308      	adds	r3, #8
 8008d48:	9303      	str	r3, [sp, #12]
 8008d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d4c:	443b      	add	r3, r7
 8008d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d50:	e76a      	b.n	8008c28 <_vfiprintf_r+0x78>
 8008d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d56:	460c      	mov	r4, r1
 8008d58:	2001      	movs	r0, #1
 8008d5a:	e7a8      	b.n	8008cae <_vfiprintf_r+0xfe>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	3401      	adds	r4, #1
 8008d60:	9305      	str	r3, [sp, #20]
 8008d62:	4619      	mov	r1, r3
 8008d64:	f04f 0c0a 	mov.w	ip, #10
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d6e:	3a30      	subs	r2, #48	@ 0x30
 8008d70:	2a09      	cmp	r2, #9
 8008d72:	d903      	bls.n	8008d7c <_vfiprintf_r+0x1cc>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0c6      	beq.n	8008d06 <_vfiprintf_r+0x156>
 8008d78:	9105      	str	r1, [sp, #20]
 8008d7a:	e7c4      	b.n	8008d06 <_vfiprintf_r+0x156>
 8008d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d80:	4604      	mov	r4, r0
 8008d82:	2301      	movs	r3, #1
 8008d84:	e7f0      	b.n	8008d68 <_vfiprintf_r+0x1b8>
 8008d86:	ab03      	add	r3, sp, #12
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	4b12      	ldr	r3, [pc, #72]	@ (8008dd8 <_vfiprintf_r+0x228>)
 8008d8e:	a904      	add	r1, sp, #16
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7fd fbd7 	bl	8006544 <_printf_float>
 8008d96:	4607      	mov	r7, r0
 8008d98:	1c78      	adds	r0, r7, #1
 8008d9a:	d1d6      	bne.n	8008d4a <_vfiprintf_r+0x19a>
 8008d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d9e:	07d9      	lsls	r1, r3, #31
 8008da0:	d405      	bmi.n	8008dae <_vfiprintf_r+0x1fe>
 8008da2:	89ab      	ldrh	r3, [r5, #12]
 8008da4:	059a      	lsls	r2, r3, #22
 8008da6:	d402      	bmi.n	8008dae <_vfiprintf_r+0x1fe>
 8008da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008daa:	f7fe f927 	bl	8006ffc <__retarget_lock_release_recursive>
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	065b      	lsls	r3, r3, #25
 8008db2:	f53f af1f 	bmi.w	8008bf4 <_vfiprintf_r+0x44>
 8008db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008db8:	e71e      	b.n	8008bf8 <_vfiprintf_r+0x48>
 8008dba:	ab03      	add	r3, sp, #12
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	462a      	mov	r2, r5
 8008dc0:	4b05      	ldr	r3, [pc, #20]	@ (8008dd8 <_vfiprintf_r+0x228>)
 8008dc2:	a904      	add	r1, sp, #16
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	f7fd fe55 	bl	8006a74 <_printf_i>
 8008dca:	e7e4      	b.n	8008d96 <_vfiprintf_r+0x1e6>
 8008dcc:	0800a2ca 	.word	0x0800a2ca
 8008dd0:	0800a2d4 	.word	0x0800a2d4
 8008dd4:	08006545 	.word	0x08006545
 8008dd8:	08008b8d 	.word	0x08008b8d
 8008ddc:	0800a2d0 	.word	0x0800a2d0

08008de0 <__swbuf_r>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	460e      	mov	r6, r1
 8008de4:	4614      	mov	r4, r2
 8008de6:	4605      	mov	r5, r0
 8008de8:	b118      	cbz	r0, 8008df2 <__swbuf_r+0x12>
 8008dea:	6a03      	ldr	r3, [r0, #32]
 8008dec:	b90b      	cbnz	r3, 8008df2 <__swbuf_r+0x12>
 8008dee:	f7fd ffeb 	bl	8006dc8 <__sinit>
 8008df2:	69a3      	ldr	r3, [r4, #24]
 8008df4:	60a3      	str	r3, [r4, #8]
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	071a      	lsls	r2, r3, #28
 8008dfa:	d501      	bpl.n	8008e00 <__swbuf_r+0x20>
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	b943      	cbnz	r3, 8008e12 <__swbuf_r+0x32>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f82a 	bl	8008e5c <__swsetup_r>
 8008e08:	b118      	cbz	r0, 8008e12 <__swbuf_r+0x32>
 8008e0a:	f04f 37ff 	mov.w	r7, #4294967295
 8008e0e:	4638      	mov	r0, r7
 8008e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	6922      	ldr	r2, [r4, #16]
 8008e16:	1a98      	subs	r0, r3, r2
 8008e18:	6963      	ldr	r3, [r4, #20]
 8008e1a:	b2f6      	uxtb	r6, r6
 8008e1c:	4283      	cmp	r3, r0
 8008e1e:	4637      	mov	r7, r6
 8008e20:	dc05      	bgt.n	8008e2e <__swbuf_r+0x4e>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4628      	mov	r0, r5
 8008e26:	f7ff fd99 	bl	800895c <_fflush_r>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d1ed      	bne.n	8008e0a <__swbuf_r+0x2a>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	701e      	strb	r6, [r3, #0]
 8008e3c:	6962      	ldr	r2, [r4, #20]
 8008e3e:	1c43      	adds	r3, r0, #1
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d004      	beq.n	8008e4e <__swbuf_r+0x6e>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	07db      	lsls	r3, r3, #31
 8008e48:	d5e1      	bpl.n	8008e0e <__swbuf_r+0x2e>
 8008e4a:	2e0a      	cmp	r6, #10
 8008e4c:	d1df      	bne.n	8008e0e <__swbuf_r+0x2e>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7ff fd83 	bl	800895c <_fflush_r>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d0d9      	beq.n	8008e0e <__swbuf_r+0x2e>
 8008e5a:	e7d6      	b.n	8008e0a <__swbuf_r+0x2a>

08008e5c <__swsetup_r>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	4b29      	ldr	r3, [pc, #164]	@ (8008f04 <__swsetup_r+0xa8>)
 8008e60:	4605      	mov	r5, r0
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	460c      	mov	r4, r1
 8008e66:	b118      	cbz	r0, 8008e70 <__swsetup_r+0x14>
 8008e68:	6a03      	ldr	r3, [r0, #32]
 8008e6a:	b90b      	cbnz	r3, 8008e70 <__swsetup_r+0x14>
 8008e6c:	f7fd ffac 	bl	8006dc8 <__sinit>
 8008e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e74:	0719      	lsls	r1, r3, #28
 8008e76:	d422      	bmi.n	8008ebe <__swsetup_r+0x62>
 8008e78:	06da      	lsls	r2, r3, #27
 8008e7a:	d407      	bmi.n	8008e8c <__swsetup_r+0x30>
 8008e7c:	2209      	movs	r2, #9
 8008e7e:	602a      	str	r2, [r5, #0]
 8008e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8a:	e033      	b.n	8008ef4 <__swsetup_r+0x98>
 8008e8c:	0758      	lsls	r0, r3, #29
 8008e8e:	d512      	bpl.n	8008eb6 <__swsetup_r+0x5a>
 8008e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e92:	b141      	cbz	r1, 8008ea6 <__swsetup_r+0x4a>
 8008e94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d002      	beq.n	8008ea2 <__swsetup_r+0x46>
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f7fe ff07 	bl	8007cb0 <_free_r>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008eac:	81a3      	strh	r3, [r4, #12]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6063      	str	r3, [r4, #4]
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f043 0308 	orr.w	r3, r3, #8
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	b94b      	cbnz	r3, 8008ed6 <__swsetup_r+0x7a>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ecc:	d003      	beq.n	8008ed6 <__swsetup_r+0x7a>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 f883 	bl	8008fdc <__smakebuf_r>
 8008ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eda:	f013 0201 	ands.w	r2, r3, #1
 8008ede:	d00a      	beq.n	8008ef6 <__swsetup_r+0x9a>
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	60a2      	str	r2, [r4, #8]
 8008ee4:	6962      	ldr	r2, [r4, #20]
 8008ee6:	4252      	negs	r2, r2
 8008ee8:	61a2      	str	r2, [r4, #24]
 8008eea:	6922      	ldr	r2, [r4, #16]
 8008eec:	b942      	cbnz	r2, 8008f00 <__swsetup_r+0xa4>
 8008eee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ef2:	d1c5      	bne.n	8008e80 <__swsetup_r+0x24>
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	0799      	lsls	r1, r3, #30
 8008ef8:	bf58      	it	pl
 8008efa:	6962      	ldrpl	r2, [r4, #20]
 8008efc:	60a2      	str	r2, [r4, #8]
 8008efe:	e7f4      	b.n	8008eea <__swsetup_r+0x8e>
 8008f00:	2000      	movs	r0, #0
 8008f02:	e7f7      	b.n	8008ef4 <__swsetup_r+0x98>
 8008f04:	20000018 	.word	0x20000018

08008f08 <_raise_r>:
 8008f08:	291f      	cmp	r1, #31
 8008f0a:	b538      	push	{r3, r4, r5, lr}
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d904      	bls.n	8008f1c <_raise_r+0x14>
 8008f12:	2316      	movs	r3, #22
 8008f14:	6003      	str	r3, [r0, #0]
 8008f16:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f1e:	b112      	cbz	r2, 8008f26 <_raise_r+0x1e>
 8008f20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f24:	b94b      	cbnz	r3, 8008f3a <_raise_r+0x32>
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 f830 	bl	8008f8c <_getpid_r>
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	4601      	mov	r1, r0
 8008f30:	4628      	mov	r0, r5
 8008f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f36:	f000 b817 	b.w	8008f68 <_kill_r>
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d00a      	beq.n	8008f54 <_raise_r+0x4c>
 8008f3e:	1c59      	adds	r1, r3, #1
 8008f40:	d103      	bne.n	8008f4a <_raise_r+0x42>
 8008f42:	2316      	movs	r3, #22
 8008f44:	6003      	str	r3, [r0, #0]
 8008f46:	2001      	movs	r0, #1
 8008f48:	e7e7      	b.n	8008f1a <_raise_r+0x12>
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f50:	4620      	mov	r0, r4
 8008f52:	4798      	blx	r3
 8008f54:	2000      	movs	r0, #0
 8008f56:	e7e0      	b.n	8008f1a <_raise_r+0x12>

08008f58 <raise>:
 8008f58:	4b02      	ldr	r3, [pc, #8]	@ (8008f64 <raise+0xc>)
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	f7ff bfd3 	b.w	8008f08 <_raise_r>
 8008f62:	bf00      	nop
 8008f64:	20000018 	.word	0x20000018

08008f68 <_kill_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d07      	ldr	r5, [pc, #28]	@ (8008f88 <_kill_r+0x20>)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4604      	mov	r4, r0
 8008f70:	4608      	mov	r0, r1
 8008f72:	4611      	mov	r1, r2
 8008f74:	602b      	str	r3, [r5, #0]
 8008f76:	f7f9 ff33 	bl	8002de0 <_kill>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	d102      	bne.n	8008f84 <_kill_r+0x1c>
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	b103      	cbz	r3, 8008f84 <_kill_r+0x1c>
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	bd38      	pop	{r3, r4, r5, pc}
 8008f86:	bf00      	nop
 8008f88:	20000fdc 	.word	0x20000fdc

08008f8c <_getpid_r>:
 8008f8c:	f7f9 bf26 	b.w	8002ddc <_getpid>

08008f90 <__swhatbuf_r>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	460c      	mov	r4, r1
 8008f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	b096      	sub	sp, #88	@ 0x58
 8008f9c:	4615      	mov	r5, r2
 8008f9e:	461e      	mov	r6, r3
 8008fa0:	da0d      	bge.n	8008fbe <__swhatbuf_r+0x2e>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fa8:	f04f 0100 	mov.w	r1, #0
 8008fac:	bf14      	ite	ne
 8008fae:	2340      	movne	r3, #64	@ 0x40
 8008fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	6031      	str	r1, [r6, #0]
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	b016      	add	sp, #88	@ 0x58
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	466a      	mov	r2, sp
 8008fc0:	f000 f848 	bl	8009054 <_fstat_r>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	dbec      	blt.n	8008fa2 <__swhatbuf_r+0x12>
 8008fc8:	9901      	ldr	r1, [sp, #4]
 8008fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fd2:	4259      	negs	r1, r3
 8008fd4:	4159      	adcs	r1, r3
 8008fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fda:	e7eb      	b.n	8008fb4 <__swhatbuf_r+0x24>

08008fdc <__smakebuf_r>:
 8008fdc:	898b      	ldrh	r3, [r1, #12]
 8008fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fe0:	079d      	lsls	r5, r3, #30
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	d507      	bpl.n	8008ff8 <__smakebuf_r+0x1c>
 8008fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	6163      	str	r3, [r4, #20]
 8008ff4:	b003      	add	sp, #12
 8008ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff8:	ab01      	add	r3, sp, #4
 8008ffa:	466a      	mov	r2, sp
 8008ffc:	f7ff ffc8 	bl	8008f90 <__swhatbuf_r>
 8009000:	9f00      	ldr	r7, [sp, #0]
 8009002:	4605      	mov	r5, r0
 8009004:	4639      	mov	r1, r7
 8009006:	4630      	mov	r0, r6
 8009008:	f7fe fec6 	bl	8007d98 <_malloc_r>
 800900c:	b948      	cbnz	r0, 8009022 <__smakebuf_r+0x46>
 800900e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009012:	059a      	lsls	r2, r3, #22
 8009014:	d4ee      	bmi.n	8008ff4 <__smakebuf_r+0x18>
 8009016:	f023 0303 	bic.w	r3, r3, #3
 800901a:	f043 0302 	orr.w	r3, r3, #2
 800901e:	81a3      	strh	r3, [r4, #12]
 8009020:	e7e2      	b.n	8008fe8 <__smakebuf_r+0xc>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	6020      	str	r0, [r4, #0]
 8009026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800902a:	81a3      	strh	r3, [r4, #12]
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009032:	b15b      	cbz	r3, 800904c <__smakebuf_r+0x70>
 8009034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f81d 	bl	8009078 <_isatty_r>
 800903e:	b128      	cbz	r0, 800904c <__smakebuf_r+0x70>
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	f043 0301 	orr.w	r3, r3, #1
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	431d      	orrs	r5, r3
 8009050:	81a5      	strh	r5, [r4, #12]
 8009052:	e7cf      	b.n	8008ff4 <__smakebuf_r+0x18>

08009054 <_fstat_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d07      	ldr	r5, [pc, #28]	@ (8009074 <_fstat_r+0x20>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	4611      	mov	r1, r2
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	f7f9 feed 	bl	8002e40 <_fstat>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d102      	bne.n	8009070 <_fstat_r+0x1c>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	b103      	cbz	r3, 8009070 <_fstat_r+0x1c>
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	bd38      	pop	{r3, r4, r5, pc}
 8009072:	bf00      	nop
 8009074:	20000fdc 	.word	0x20000fdc

08009078 <_isatty_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d06      	ldr	r5, [pc, #24]	@ (8009094 <_isatty_r+0x1c>)
 800907c:	2300      	movs	r3, #0
 800907e:	4604      	mov	r4, r0
 8009080:	4608      	mov	r0, r1
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	f7f9 fee2 	bl	8002e4c <_isatty>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_isatty_r+0x1a>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	b103      	cbz	r3, 8009092 <_isatty_r+0x1a>
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	20000fdc 	.word	0x20000fdc

08009098 <sin>:
 8009098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800909a:	ec53 2b10 	vmov	r2, r3, d0
 800909e:	4826      	ldr	r0, [pc, #152]	@ (8009138 <sin+0xa0>)
 80090a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80090a4:	4281      	cmp	r1, r0
 80090a6:	d807      	bhi.n	80090b8 <sin+0x20>
 80090a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009130 <sin+0x98>
 80090ac:	2000      	movs	r0, #0
 80090ae:	b005      	add	sp, #20
 80090b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b4:	f000 b90c 	b.w	80092d0 <__kernel_sin>
 80090b8:	4820      	ldr	r0, [pc, #128]	@ (800913c <sin+0xa4>)
 80090ba:	4281      	cmp	r1, r0
 80090bc:	d908      	bls.n	80090d0 <sin+0x38>
 80090be:	4610      	mov	r0, r2
 80090c0:	4619      	mov	r1, r3
 80090c2:	f7f7 f901 	bl	80002c8 <__aeabi_dsub>
 80090c6:	ec41 0b10 	vmov	d0, r0, r1
 80090ca:	b005      	add	sp, #20
 80090cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80090d0:	4668      	mov	r0, sp
 80090d2:	f000 f9b9 	bl	8009448 <__ieee754_rem_pio2>
 80090d6:	f000 0003 	and.w	r0, r0, #3
 80090da:	2801      	cmp	r0, #1
 80090dc:	d00c      	beq.n	80090f8 <sin+0x60>
 80090de:	2802      	cmp	r0, #2
 80090e0:	d011      	beq.n	8009106 <sin+0x6e>
 80090e2:	b9e8      	cbnz	r0, 8009120 <sin+0x88>
 80090e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80090e8:	ed9d 0b00 	vldr	d0, [sp]
 80090ec:	2001      	movs	r0, #1
 80090ee:	f000 f8ef 	bl	80092d0 <__kernel_sin>
 80090f2:	ec51 0b10 	vmov	r0, r1, d0
 80090f6:	e7e6      	b.n	80090c6 <sin+0x2e>
 80090f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80090fc:	ed9d 0b00 	vldr	d0, [sp]
 8009100:	f000 f81e 	bl	8009140 <__kernel_cos>
 8009104:	e7f5      	b.n	80090f2 <sin+0x5a>
 8009106:	ed9d 1b02 	vldr	d1, [sp, #8]
 800910a:	ed9d 0b00 	vldr	d0, [sp]
 800910e:	2001      	movs	r0, #1
 8009110:	f000 f8de 	bl	80092d0 <__kernel_sin>
 8009114:	ec53 2b10 	vmov	r2, r3, d0
 8009118:	4610      	mov	r0, r2
 800911a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800911e:	e7d2      	b.n	80090c6 <sin+0x2e>
 8009120:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009124:	ed9d 0b00 	vldr	d0, [sp]
 8009128:	f000 f80a 	bl	8009140 <__kernel_cos>
 800912c:	e7f2      	b.n	8009114 <sin+0x7c>
 800912e:	bf00      	nop
	...
 8009138:	3fe921fb 	.word	0x3fe921fb
 800913c:	7fefffff 	.word	0x7fefffff

08009140 <__kernel_cos>:
 8009140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	ec57 6b10 	vmov	r6, r7, d0
 8009148:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800914c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009150:	ed8d 1b00 	vstr	d1, [sp]
 8009154:	d206      	bcs.n	8009164 <__kernel_cos+0x24>
 8009156:	4630      	mov	r0, r6
 8009158:	4639      	mov	r1, r7
 800915a:	f7f7 fd1d 	bl	8000b98 <__aeabi_d2iz>
 800915e:	2800      	cmp	r0, #0
 8009160:	f000 8088 	beq.w	8009274 <__kernel_cos+0x134>
 8009164:	4632      	mov	r2, r6
 8009166:	463b      	mov	r3, r7
 8009168:	4630      	mov	r0, r6
 800916a:	4639      	mov	r1, r7
 800916c:	f7f7 fa64 	bl	8000638 <__aeabi_dmul>
 8009170:	4b51      	ldr	r3, [pc, #324]	@ (80092b8 <__kernel_cos+0x178>)
 8009172:	2200      	movs	r2, #0
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	f7f7 fa5e 	bl	8000638 <__aeabi_dmul>
 800917c:	a340      	add	r3, pc, #256	@ (adr r3, 8009280 <__kernel_cos+0x140>)
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	4682      	mov	sl, r0
 8009184:	468b      	mov	fp, r1
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 fa55 	bl	8000638 <__aeabi_dmul>
 800918e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009288 <__kernel_cos+0x148>)
 8009190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009194:	f7f7 f89a 	bl	80002cc <__adddf3>
 8009198:	4622      	mov	r2, r4
 800919a:	462b      	mov	r3, r5
 800919c:	f7f7 fa4c 	bl	8000638 <__aeabi_dmul>
 80091a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8009290 <__kernel_cos+0x150>)
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f7f7 f88f 	bl	80002c8 <__aeabi_dsub>
 80091aa:	4622      	mov	r2, r4
 80091ac:	462b      	mov	r3, r5
 80091ae:	f7f7 fa43 	bl	8000638 <__aeabi_dmul>
 80091b2:	a339      	add	r3, pc, #228	@ (adr r3, 8009298 <__kernel_cos+0x158>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f7 f888 	bl	80002cc <__adddf3>
 80091bc:	4622      	mov	r2, r4
 80091be:	462b      	mov	r3, r5
 80091c0:	f7f7 fa3a 	bl	8000638 <__aeabi_dmul>
 80091c4:	a336      	add	r3, pc, #216	@ (adr r3, 80092a0 <__kernel_cos+0x160>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f7f7 f87d 	bl	80002c8 <__aeabi_dsub>
 80091ce:	4622      	mov	r2, r4
 80091d0:	462b      	mov	r3, r5
 80091d2:	f7f7 fa31 	bl	8000638 <__aeabi_dmul>
 80091d6:	a334      	add	r3, pc, #208	@ (adr r3, 80092a8 <__kernel_cos+0x168>)
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f7f7 f876 	bl	80002cc <__adddf3>
 80091e0:	4622      	mov	r2, r4
 80091e2:	462b      	mov	r3, r5
 80091e4:	f7f7 fa28 	bl	8000638 <__aeabi_dmul>
 80091e8:	4622      	mov	r2, r4
 80091ea:	462b      	mov	r3, r5
 80091ec:	f7f7 fa24 	bl	8000638 <__aeabi_dmul>
 80091f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091f4:	4604      	mov	r4, r0
 80091f6:	460d      	mov	r5, r1
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 fa1c 	bl	8000638 <__aeabi_dmul>
 8009200:	460b      	mov	r3, r1
 8009202:	4602      	mov	r2, r0
 8009204:	4629      	mov	r1, r5
 8009206:	4620      	mov	r0, r4
 8009208:	f7f7 f85e 	bl	80002c8 <__aeabi_dsub>
 800920c:	4b2b      	ldr	r3, [pc, #172]	@ (80092bc <__kernel_cos+0x17c>)
 800920e:	4598      	cmp	r8, r3
 8009210:	4606      	mov	r6, r0
 8009212:	460f      	mov	r7, r1
 8009214:	d810      	bhi.n	8009238 <__kernel_cos+0xf8>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4650      	mov	r0, sl
 800921c:	4659      	mov	r1, fp
 800921e:	f7f7 f853 	bl	80002c8 <__aeabi_dsub>
 8009222:	460b      	mov	r3, r1
 8009224:	4926      	ldr	r1, [pc, #152]	@ (80092c0 <__kernel_cos+0x180>)
 8009226:	4602      	mov	r2, r0
 8009228:	2000      	movs	r0, #0
 800922a:	f7f7 f84d 	bl	80002c8 <__aeabi_dsub>
 800922e:	ec41 0b10 	vmov	d0, r0, r1
 8009232:	b003      	add	sp, #12
 8009234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009238:	4b22      	ldr	r3, [pc, #136]	@ (80092c4 <__kernel_cos+0x184>)
 800923a:	4921      	ldr	r1, [pc, #132]	@ (80092c0 <__kernel_cos+0x180>)
 800923c:	4598      	cmp	r8, r3
 800923e:	bf8c      	ite	hi
 8009240:	4d21      	ldrhi	r5, [pc, #132]	@ (80092c8 <__kernel_cos+0x188>)
 8009242:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009246:	2400      	movs	r4, #0
 8009248:	4622      	mov	r2, r4
 800924a:	462b      	mov	r3, r5
 800924c:	2000      	movs	r0, #0
 800924e:	f7f7 f83b 	bl	80002c8 <__aeabi_dsub>
 8009252:	4622      	mov	r2, r4
 8009254:	4680      	mov	r8, r0
 8009256:	4689      	mov	r9, r1
 8009258:	462b      	mov	r3, r5
 800925a:	4650      	mov	r0, sl
 800925c:	4659      	mov	r1, fp
 800925e:	f7f7 f833 	bl	80002c8 <__aeabi_dsub>
 8009262:	4632      	mov	r2, r6
 8009264:	463b      	mov	r3, r7
 8009266:	f7f7 f82f 	bl	80002c8 <__aeabi_dsub>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	e7da      	b.n	800922a <__kernel_cos+0xea>
 8009274:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80092b0 <__kernel_cos+0x170>
 8009278:	e7db      	b.n	8009232 <__kernel_cos+0xf2>
 800927a:	bf00      	nop
 800927c:	f3af 8000 	nop.w
 8009280:	be8838d4 	.word	0xbe8838d4
 8009284:	bda8fae9 	.word	0xbda8fae9
 8009288:	bdb4b1c4 	.word	0xbdb4b1c4
 800928c:	3e21ee9e 	.word	0x3e21ee9e
 8009290:	809c52ad 	.word	0x809c52ad
 8009294:	3e927e4f 	.word	0x3e927e4f
 8009298:	19cb1590 	.word	0x19cb1590
 800929c:	3efa01a0 	.word	0x3efa01a0
 80092a0:	16c15177 	.word	0x16c15177
 80092a4:	3f56c16c 	.word	0x3f56c16c
 80092a8:	5555554c 	.word	0x5555554c
 80092ac:	3fa55555 	.word	0x3fa55555
 80092b0:	00000000 	.word	0x00000000
 80092b4:	3ff00000 	.word	0x3ff00000
 80092b8:	3fe00000 	.word	0x3fe00000
 80092bc:	3fd33332 	.word	0x3fd33332
 80092c0:	3ff00000 	.word	0x3ff00000
 80092c4:	3fe90000 	.word	0x3fe90000
 80092c8:	3fd20000 	.word	0x3fd20000
 80092cc:	00000000 	.word	0x00000000

080092d0 <__kernel_sin>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	ec55 4b10 	vmov	r4, r5, d0
 80092d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80092dc:	b085      	sub	sp, #20
 80092de:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80092e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80092e6:	4680      	mov	r8, r0
 80092e8:	d205      	bcs.n	80092f6 <__kernel_sin+0x26>
 80092ea:	4620      	mov	r0, r4
 80092ec:	4629      	mov	r1, r5
 80092ee:	f7f7 fc53 	bl	8000b98 <__aeabi_d2iz>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d052      	beq.n	800939c <__kernel_sin+0xcc>
 80092f6:	4622      	mov	r2, r4
 80092f8:	462b      	mov	r3, r5
 80092fa:	4620      	mov	r0, r4
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f7 f99b 	bl	8000638 <__aeabi_dmul>
 8009302:	4682      	mov	sl, r0
 8009304:	468b      	mov	fp, r1
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4620      	mov	r0, r4
 800930c:	4629      	mov	r1, r5
 800930e:	f7f7 f993 	bl	8000638 <__aeabi_dmul>
 8009312:	a342      	add	r3, pc, #264	@ (adr r3, 800941c <__kernel_sin+0x14c>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	e9cd 0100 	strd	r0, r1, [sp]
 800931c:	4650      	mov	r0, sl
 800931e:	4659      	mov	r1, fp
 8009320:	f7f7 f98a 	bl	8000638 <__aeabi_dmul>
 8009324:	a33f      	add	r3, pc, #252	@ (adr r3, 8009424 <__kernel_sin+0x154>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffcd 	bl	80002c8 <__aeabi_dsub>
 800932e:	4652      	mov	r2, sl
 8009330:	465b      	mov	r3, fp
 8009332:	f7f7 f981 	bl	8000638 <__aeabi_dmul>
 8009336:	a33d      	add	r3, pc, #244	@ (adr r3, 800942c <__kernel_sin+0x15c>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f6 ffc6 	bl	80002cc <__adddf3>
 8009340:	4652      	mov	r2, sl
 8009342:	465b      	mov	r3, fp
 8009344:	f7f7 f978 	bl	8000638 <__aeabi_dmul>
 8009348:	a33a      	add	r3, pc, #232	@ (adr r3, 8009434 <__kernel_sin+0x164>)
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f7f6 ffbb 	bl	80002c8 <__aeabi_dsub>
 8009352:	4652      	mov	r2, sl
 8009354:	465b      	mov	r3, fp
 8009356:	f7f7 f96f 	bl	8000638 <__aeabi_dmul>
 800935a:	a338      	add	r3, pc, #224	@ (adr r3, 800943c <__kernel_sin+0x16c>)
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f7f6 ffb4 	bl	80002cc <__adddf3>
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	f1b8 0f00 	cmp.w	r8, #0
 800936c:	d11b      	bne.n	80093a6 <__kernel_sin+0xd6>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4650      	mov	r0, sl
 8009374:	4659      	mov	r1, fp
 8009376:	f7f7 f95f 	bl	8000638 <__aeabi_dmul>
 800937a:	a325      	add	r3, pc, #148	@ (adr r3, 8009410 <__kernel_sin+0x140>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f7f6 ffa2 	bl	80002c8 <__aeabi_dsub>
 8009384:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009388:	f7f7 f956 	bl	8000638 <__aeabi_dmul>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4620      	mov	r0, r4
 8009392:	4629      	mov	r1, r5
 8009394:	f7f6 ff9a 	bl	80002cc <__adddf3>
 8009398:	4604      	mov	r4, r0
 800939a:	460d      	mov	r5, r1
 800939c:	ec45 4b10 	vmov	d0, r4, r5
 80093a0:	b005      	add	sp, #20
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009418 <__kernel_sin+0x148>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	f7f7 f943 	bl	8000638 <__aeabi_dmul>
 80093b2:	4632      	mov	r2, r6
 80093b4:	4680      	mov	r8, r0
 80093b6:	4689      	mov	r9, r1
 80093b8:	463b      	mov	r3, r7
 80093ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093be:	f7f7 f93b 	bl	8000638 <__aeabi_dmul>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	f7f6 ff7d 	bl	80002c8 <__aeabi_dsub>
 80093ce:	4652      	mov	r2, sl
 80093d0:	465b      	mov	r3, fp
 80093d2:	f7f7 f931 	bl	8000638 <__aeabi_dmul>
 80093d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093da:	f7f6 ff75 	bl	80002c8 <__aeabi_dsub>
 80093de:	a30c      	add	r3, pc, #48	@ (adr r3, 8009410 <__kernel_sin+0x140>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	4606      	mov	r6, r0
 80093e6:	460f      	mov	r7, r1
 80093e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093ec:	f7f7 f924 	bl	8000638 <__aeabi_dmul>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4630      	mov	r0, r6
 80093f6:	4639      	mov	r1, r7
 80093f8:	f7f6 ff68 	bl	80002cc <__adddf3>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4620      	mov	r0, r4
 8009402:	4629      	mov	r1, r5
 8009404:	f7f6 ff60 	bl	80002c8 <__aeabi_dsub>
 8009408:	e7c6      	b.n	8009398 <__kernel_sin+0xc8>
 800940a:	bf00      	nop
 800940c:	f3af 8000 	nop.w
 8009410:	55555549 	.word	0x55555549
 8009414:	3fc55555 	.word	0x3fc55555
 8009418:	3fe00000 	.word	0x3fe00000
 800941c:	5acfd57c 	.word	0x5acfd57c
 8009420:	3de5d93a 	.word	0x3de5d93a
 8009424:	8a2b9ceb 	.word	0x8a2b9ceb
 8009428:	3e5ae5e6 	.word	0x3e5ae5e6
 800942c:	57b1fe7d 	.word	0x57b1fe7d
 8009430:	3ec71de3 	.word	0x3ec71de3
 8009434:	19c161d5 	.word	0x19c161d5
 8009438:	3f2a01a0 	.word	0x3f2a01a0
 800943c:	1110f8a6 	.word	0x1110f8a6
 8009440:	3f811111 	.word	0x3f811111
 8009444:	00000000 	.word	0x00000000

08009448 <__ieee754_rem_pio2>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	ec57 6b10 	vmov	r6, r7, d0
 8009450:	4bc5      	ldr	r3, [pc, #788]	@ (8009768 <__ieee754_rem_pio2+0x320>)
 8009452:	b08d      	sub	sp, #52	@ 0x34
 8009454:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009458:	4598      	cmp	r8, r3
 800945a:	4604      	mov	r4, r0
 800945c:	9704      	str	r7, [sp, #16]
 800945e:	d807      	bhi.n	8009470 <__ieee754_rem_pio2+0x28>
 8009460:	2200      	movs	r2, #0
 8009462:	2300      	movs	r3, #0
 8009464:	ed80 0b00 	vstr	d0, [r0]
 8009468:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800946c:	2500      	movs	r5, #0
 800946e:	e028      	b.n	80094c2 <__ieee754_rem_pio2+0x7a>
 8009470:	4bbe      	ldr	r3, [pc, #760]	@ (800976c <__ieee754_rem_pio2+0x324>)
 8009472:	4598      	cmp	r8, r3
 8009474:	d878      	bhi.n	8009568 <__ieee754_rem_pio2+0x120>
 8009476:	9b04      	ldr	r3, [sp, #16]
 8009478:	4dbd      	ldr	r5, [pc, #756]	@ (8009770 <__ieee754_rem_pio2+0x328>)
 800947a:	2b00      	cmp	r3, #0
 800947c:	4630      	mov	r0, r6
 800947e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009730 <__ieee754_rem_pio2+0x2e8>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	4639      	mov	r1, r7
 8009486:	dd38      	ble.n	80094fa <__ieee754_rem_pio2+0xb2>
 8009488:	f7f6 ff1e 	bl	80002c8 <__aeabi_dsub>
 800948c:	45a8      	cmp	r8, r5
 800948e:	4606      	mov	r6, r0
 8009490:	460f      	mov	r7, r1
 8009492:	d01a      	beq.n	80094ca <__ieee754_rem_pio2+0x82>
 8009494:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009738 <__ieee754_rem_pio2+0x2f0>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f6 ff15 	bl	80002c8 <__aeabi_dsub>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4680      	mov	r8, r0
 80094a4:	4689      	mov	r9, r1
 80094a6:	4630      	mov	r0, r6
 80094a8:	4639      	mov	r1, r7
 80094aa:	f7f6 ff0d 	bl	80002c8 <__aeabi_dsub>
 80094ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009738 <__ieee754_rem_pio2+0x2f0>)
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f7f6 ff08 	bl	80002c8 <__aeabi_dsub>
 80094b8:	e9c4 8900 	strd	r8, r9, [r4]
 80094bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80094c0:	2501      	movs	r5, #1
 80094c2:	4628      	mov	r0, r5
 80094c4:	b00d      	add	sp, #52	@ 0x34
 80094c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ca:	a39d      	add	r3, pc, #628	@ (adr r3, 8009740 <__ieee754_rem_pio2+0x2f8>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	f7f6 fefa 	bl	80002c8 <__aeabi_dsub>
 80094d4:	a39c      	add	r3, pc, #624	@ (adr r3, 8009748 <__ieee754_rem_pio2+0x300>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	f7f6 fef3 	bl	80002c8 <__aeabi_dsub>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4680      	mov	r8, r0
 80094e8:	4689      	mov	r9, r1
 80094ea:	4630      	mov	r0, r6
 80094ec:	4639      	mov	r1, r7
 80094ee:	f7f6 feeb 	bl	80002c8 <__aeabi_dsub>
 80094f2:	a395      	add	r3, pc, #596	@ (adr r3, 8009748 <__ieee754_rem_pio2+0x300>)
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	e7dc      	b.n	80094b4 <__ieee754_rem_pio2+0x6c>
 80094fa:	f7f6 fee7 	bl	80002cc <__adddf3>
 80094fe:	45a8      	cmp	r8, r5
 8009500:	4606      	mov	r6, r0
 8009502:	460f      	mov	r7, r1
 8009504:	d018      	beq.n	8009538 <__ieee754_rem_pio2+0xf0>
 8009506:	a38c      	add	r3, pc, #560	@ (adr r3, 8009738 <__ieee754_rem_pio2+0x2f0>)
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	f7f6 fede 	bl	80002cc <__adddf3>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4680      	mov	r8, r0
 8009516:	4689      	mov	r9, r1
 8009518:	4630      	mov	r0, r6
 800951a:	4639      	mov	r1, r7
 800951c:	f7f6 fed4 	bl	80002c8 <__aeabi_dsub>
 8009520:	a385      	add	r3, pc, #532	@ (adr r3, 8009738 <__ieee754_rem_pio2+0x2f0>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f6 fed1 	bl	80002cc <__adddf3>
 800952a:	f04f 35ff 	mov.w	r5, #4294967295
 800952e:	e9c4 8900 	strd	r8, r9, [r4]
 8009532:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009536:	e7c4      	b.n	80094c2 <__ieee754_rem_pio2+0x7a>
 8009538:	a381      	add	r3, pc, #516	@ (adr r3, 8009740 <__ieee754_rem_pio2+0x2f8>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f6 fec5 	bl	80002cc <__adddf3>
 8009542:	a381      	add	r3, pc, #516	@ (adr r3, 8009748 <__ieee754_rem_pio2+0x300>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	4606      	mov	r6, r0
 800954a:	460f      	mov	r7, r1
 800954c:	f7f6 febe 	bl	80002cc <__adddf3>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4680      	mov	r8, r0
 8009556:	4689      	mov	r9, r1
 8009558:	4630      	mov	r0, r6
 800955a:	4639      	mov	r1, r7
 800955c:	f7f6 feb4 	bl	80002c8 <__aeabi_dsub>
 8009560:	a379      	add	r3, pc, #484	@ (adr r3, 8009748 <__ieee754_rem_pio2+0x300>)
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	e7de      	b.n	8009526 <__ieee754_rem_pio2+0xde>
 8009568:	4b82      	ldr	r3, [pc, #520]	@ (8009774 <__ieee754_rem_pio2+0x32c>)
 800956a:	4598      	cmp	r8, r3
 800956c:	f200 80d1 	bhi.w	8009712 <__ieee754_rem_pio2+0x2ca>
 8009570:	f000 f966 	bl	8009840 <fabs>
 8009574:	ec57 6b10 	vmov	r6, r7, d0
 8009578:	a375      	add	r3, pc, #468	@ (adr r3, 8009750 <__ieee754_rem_pio2+0x308>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	4630      	mov	r0, r6
 8009580:	4639      	mov	r1, r7
 8009582:	f7f7 f859 	bl	8000638 <__aeabi_dmul>
 8009586:	4b7c      	ldr	r3, [pc, #496]	@ (8009778 <__ieee754_rem_pio2+0x330>)
 8009588:	2200      	movs	r2, #0
 800958a:	f7f6 fe9f 	bl	80002cc <__adddf3>
 800958e:	f7f7 fb03 	bl	8000b98 <__aeabi_d2iz>
 8009592:	4605      	mov	r5, r0
 8009594:	f7f6 ffe6 	bl	8000564 <__aeabi_i2d>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095a0:	a363      	add	r3, pc, #396	@ (adr r3, 8009730 <__ieee754_rem_pio2+0x2e8>)
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	f7f7 f847 	bl	8000638 <__aeabi_dmul>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4630      	mov	r0, r6
 80095b0:	4639      	mov	r1, r7
 80095b2:	f7f6 fe89 	bl	80002c8 <__aeabi_dsub>
 80095b6:	a360      	add	r3, pc, #384	@ (adr r3, 8009738 <__ieee754_rem_pio2+0x2f0>)
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	4682      	mov	sl, r0
 80095be:	468b      	mov	fp, r1
 80095c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095c4:	f7f7 f838 	bl	8000638 <__aeabi_dmul>
 80095c8:	2d1f      	cmp	r5, #31
 80095ca:	4606      	mov	r6, r0
 80095cc:	460f      	mov	r7, r1
 80095ce:	dc0c      	bgt.n	80095ea <__ieee754_rem_pio2+0x1a2>
 80095d0:	4b6a      	ldr	r3, [pc, #424]	@ (800977c <__ieee754_rem_pio2+0x334>)
 80095d2:	1e6a      	subs	r2, r5, #1
 80095d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d8:	4543      	cmp	r3, r8
 80095da:	d006      	beq.n	80095ea <__ieee754_rem_pio2+0x1a2>
 80095dc:	4632      	mov	r2, r6
 80095de:	463b      	mov	r3, r7
 80095e0:	4650      	mov	r0, sl
 80095e2:	4659      	mov	r1, fp
 80095e4:	f7f6 fe70 	bl	80002c8 <__aeabi_dsub>
 80095e8:	e00e      	b.n	8009608 <__ieee754_rem_pio2+0x1c0>
 80095ea:	463b      	mov	r3, r7
 80095ec:	4632      	mov	r2, r6
 80095ee:	4650      	mov	r0, sl
 80095f0:	4659      	mov	r1, fp
 80095f2:	f7f6 fe69 	bl	80002c8 <__aeabi_dsub>
 80095f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80095fa:	9305      	str	r3, [sp, #20]
 80095fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009600:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009604:	2b10      	cmp	r3, #16
 8009606:	dc02      	bgt.n	800960e <__ieee754_rem_pio2+0x1c6>
 8009608:	e9c4 0100 	strd	r0, r1, [r4]
 800960c:	e039      	b.n	8009682 <__ieee754_rem_pio2+0x23a>
 800960e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009740 <__ieee754_rem_pio2+0x2f8>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009618:	f7f7 f80e 	bl	8000638 <__aeabi_dmul>
 800961c:	4606      	mov	r6, r0
 800961e:	460f      	mov	r7, r1
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4650      	mov	r0, sl
 8009626:	4659      	mov	r1, fp
 8009628:	f7f6 fe4e 	bl	80002c8 <__aeabi_dsub>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4680      	mov	r8, r0
 8009632:	4689      	mov	r9, r1
 8009634:	4650      	mov	r0, sl
 8009636:	4659      	mov	r1, fp
 8009638:	f7f6 fe46 	bl	80002c8 <__aeabi_dsub>
 800963c:	4632      	mov	r2, r6
 800963e:	463b      	mov	r3, r7
 8009640:	f7f6 fe42 	bl	80002c8 <__aeabi_dsub>
 8009644:	a340      	add	r3, pc, #256	@ (adr r3, 8009748 <__ieee754_rem_pio2+0x300>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	4606      	mov	r6, r0
 800964c:	460f      	mov	r7, r1
 800964e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009652:	f7f6 fff1 	bl	8000638 <__aeabi_dmul>
 8009656:	4632      	mov	r2, r6
 8009658:	463b      	mov	r3, r7
 800965a:	f7f6 fe35 	bl	80002c8 <__aeabi_dsub>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4606      	mov	r6, r0
 8009664:	460f      	mov	r7, r1
 8009666:	4640      	mov	r0, r8
 8009668:	4649      	mov	r1, r9
 800966a:	f7f6 fe2d 	bl	80002c8 <__aeabi_dsub>
 800966e:	9a05      	ldr	r2, [sp, #20]
 8009670:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b31      	cmp	r3, #49	@ 0x31
 8009678:	dc20      	bgt.n	80096bc <__ieee754_rem_pio2+0x274>
 800967a:	e9c4 0100 	strd	r0, r1, [r4]
 800967e:	46c2      	mov	sl, r8
 8009680:	46cb      	mov	fp, r9
 8009682:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009686:	4650      	mov	r0, sl
 8009688:	4642      	mov	r2, r8
 800968a:	464b      	mov	r3, r9
 800968c:	4659      	mov	r1, fp
 800968e:	f7f6 fe1b 	bl	80002c8 <__aeabi_dsub>
 8009692:	463b      	mov	r3, r7
 8009694:	4632      	mov	r2, r6
 8009696:	f7f6 fe17 	bl	80002c8 <__aeabi_dsub>
 800969a:	9b04      	ldr	r3, [sp, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80096a2:	f6bf af0e 	bge.w	80094c2 <__ieee754_rem_pio2+0x7a>
 80096a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80096aa:	6063      	str	r3, [r4, #4]
 80096ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80096b0:	f8c4 8000 	str.w	r8, [r4]
 80096b4:	60a0      	str	r0, [r4, #8]
 80096b6:	60e3      	str	r3, [r4, #12]
 80096b8:	426d      	negs	r5, r5
 80096ba:	e702      	b.n	80094c2 <__ieee754_rem_pio2+0x7a>
 80096bc:	a326      	add	r3, pc, #152	@ (adr r3, 8009758 <__ieee754_rem_pio2+0x310>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c6:	f7f6 ffb7 	bl	8000638 <__aeabi_dmul>
 80096ca:	4606      	mov	r6, r0
 80096cc:	460f      	mov	r7, r1
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	4640      	mov	r0, r8
 80096d4:	4649      	mov	r1, r9
 80096d6:	f7f6 fdf7 	bl	80002c8 <__aeabi_dsub>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4682      	mov	sl, r0
 80096e0:	468b      	mov	fp, r1
 80096e2:	4640      	mov	r0, r8
 80096e4:	4649      	mov	r1, r9
 80096e6:	f7f6 fdef 	bl	80002c8 <__aeabi_dsub>
 80096ea:	4632      	mov	r2, r6
 80096ec:	463b      	mov	r3, r7
 80096ee:	f7f6 fdeb 	bl	80002c8 <__aeabi_dsub>
 80096f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8009760 <__ieee754_rem_pio2+0x318>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	4606      	mov	r6, r0
 80096fa:	460f      	mov	r7, r1
 80096fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009700:	f7f6 ff9a 	bl	8000638 <__aeabi_dmul>
 8009704:	4632      	mov	r2, r6
 8009706:	463b      	mov	r3, r7
 8009708:	f7f6 fdde 	bl	80002c8 <__aeabi_dsub>
 800970c:	4606      	mov	r6, r0
 800970e:	460f      	mov	r7, r1
 8009710:	e764      	b.n	80095dc <__ieee754_rem_pio2+0x194>
 8009712:	4b1b      	ldr	r3, [pc, #108]	@ (8009780 <__ieee754_rem_pio2+0x338>)
 8009714:	4598      	cmp	r8, r3
 8009716:	d935      	bls.n	8009784 <__ieee754_rem_pio2+0x33c>
 8009718:	4632      	mov	r2, r6
 800971a:	463b      	mov	r3, r7
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f6 fdd2 	bl	80002c8 <__aeabi_dsub>
 8009724:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009728:	e9c4 0100 	strd	r0, r1, [r4]
 800972c:	e69e      	b.n	800946c <__ieee754_rem_pio2+0x24>
 800972e:	bf00      	nop
 8009730:	54400000 	.word	0x54400000
 8009734:	3ff921fb 	.word	0x3ff921fb
 8009738:	1a626331 	.word	0x1a626331
 800973c:	3dd0b461 	.word	0x3dd0b461
 8009740:	1a600000 	.word	0x1a600000
 8009744:	3dd0b461 	.word	0x3dd0b461
 8009748:	2e037073 	.word	0x2e037073
 800974c:	3ba3198a 	.word	0x3ba3198a
 8009750:	6dc9c883 	.word	0x6dc9c883
 8009754:	3fe45f30 	.word	0x3fe45f30
 8009758:	2e000000 	.word	0x2e000000
 800975c:	3ba3198a 	.word	0x3ba3198a
 8009760:	252049c1 	.word	0x252049c1
 8009764:	397b839a 	.word	0x397b839a
 8009768:	3fe921fb 	.word	0x3fe921fb
 800976c:	4002d97b 	.word	0x4002d97b
 8009770:	3ff921fb 	.word	0x3ff921fb
 8009774:	413921fb 	.word	0x413921fb
 8009778:	3fe00000 	.word	0x3fe00000
 800977c:	0800a524 	.word	0x0800a524
 8009780:	7fefffff 	.word	0x7fefffff
 8009784:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009788:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800978c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009790:	4630      	mov	r0, r6
 8009792:	460f      	mov	r7, r1
 8009794:	f7f7 fa00 	bl	8000b98 <__aeabi_d2iz>
 8009798:	f7f6 fee4 	bl	8000564 <__aeabi_i2d>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80097a8:	f7f6 fd8e 	bl	80002c8 <__aeabi_dsub>
 80097ac:	4b22      	ldr	r3, [pc, #136]	@ (8009838 <__ieee754_rem_pio2+0x3f0>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	f7f6 ff42 	bl	8000638 <__aeabi_dmul>
 80097b4:	460f      	mov	r7, r1
 80097b6:	4606      	mov	r6, r0
 80097b8:	f7f7 f9ee 	bl	8000b98 <__aeabi_d2iz>
 80097bc:	f7f6 fed2 	bl	8000564 <__aeabi_i2d>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4630      	mov	r0, r6
 80097c6:	4639      	mov	r1, r7
 80097c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80097cc:	f7f6 fd7c 	bl	80002c8 <__aeabi_dsub>
 80097d0:	4b19      	ldr	r3, [pc, #100]	@ (8009838 <__ieee754_rem_pio2+0x3f0>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	f7f6 ff30 	bl	8000638 <__aeabi_dmul>
 80097d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80097dc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80097e0:	f04f 0803 	mov.w	r8, #3
 80097e4:	2600      	movs	r6, #0
 80097e6:	2700      	movs	r7, #0
 80097e8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80097ec:	4632      	mov	r2, r6
 80097ee:	463b      	mov	r3, r7
 80097f0:	46c2      	mov	sl, r8
 80097f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80097f6:	f7f7 f987 	bl	8000b08 <__aeabi_dcmpeq>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d1f4      	bne.n	80097e8 <__ieee754_rem_pio2+0x3a0>
 80097fe:	4b0f      	ldr	r3, [pc, #60]	@ (800983c <__ieee754_rem_pio2+0x3f4>)
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	2302      	movs	r3, #2
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	462a      	mov	r2, r5
 8009808:	4653      	mov	r3, sl
 800980a:	4621      	mov	r1, r4
 800980c:	a806      	add	r0, sp, #24
 800980e:	f000 f81f 	bl	8009850 <__kernel_rem_pio2>
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	4605      	mov	r5, r0
 8009818:	f6bf ae53 	bge.w	80094c2 <__ieee754_rem_pio2+0x7a>
 800981c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009824:	e9c4 2300 	strd	r2, r3, [r4]
 8009828:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800982c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009830:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009834:	e740      	b.n	80096b8 <__ieee754_rem_pio2+0x270>
 8009836:	bf00      	nop
 8009838:	41700000 	.word	0x41700000
 800983c:	0800a5a4 	.word	0x0800a5a4

08009840 <fabs>:
 8009840:	ec51 0b10 	vmov	r0, r1, d0
 8009844:	4602      	mov	r2, r0
 8009846:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800984a:	ec43 2b10 	vmov	d0, r2, r3
 800984e:	4770      	bx	lr

08009850 <__kernel_rem_pio2>:
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	ed2d 8b02 	vpush	{d8}
 8009858:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800985c:	f112 0f14 	cmn.w	r2, #20
 8009860:	9306      	str	r3, [sp, #24]
 8009862:	9104      	str	r1, [sp, #16]
 8009864:	4bc2      	ldr	r3, [pc, #776]	@ (8009b70 <__kernel_rem_pio2+0x320>)
 8009866:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009868:	9008      	str	r0, [sp, #32]
 800986a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	9b06      	ldr	r3, [sp, #24]
 8009872:	f103 33ff 	add.w	r3, r3, #4294967295
 8009876:	bfa8      	it	ge
 8009878:	1ed4      	subge	r4, r2, #3
 800987a:	9305      	str	r3, [sp, #20]
 800987c:	bfb2      	itee	lt
 800987e:	2400      	movlt	r4, #0
 8009880:	2318      	movge	r3, #24
 8009882:	fb94 f4f3 	sdivge	r4, r4, r3
 8009886:	f06f 0317 	mvn.w	r3, #23
 800988a:	fb04 3303 	mla	r3, r4, r3, r3
 800988e:	eb03 0b02 	add.w	fp, r3, r2
 8009892:	9b00      	ldr	r3, [sp, #0]
 8009894:	9a05      	ldr	r2, [sp, #20]
 8009896:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8009b60 <__kernel_rem_pio2+0x310>
 800989a:	eb03 0802 	add.w	r8, r3, r2
 800989e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80098a0:	1aa7      	subs	r7, r4, r2
 80098a2:	ae20      	add	r6, sp, #128	@ 0x80
 80098a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80098a8:	2500      	movs	r5, #0
 80098aa:	4545      	cmp	r5, r8
 80098ac:	dd12      	ble.n	80098d4 <__kernel_rem_pio2+0x84>
 80098ae:	9b06      	ldr	r3, [sp, #24]
 80098b0:	aa20      	add	r2, sp, #128	@ 0x80
 80098b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80098b6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80098ba:	2700      	movs	r7, #0
 80098bc:	9b00      	ldr	r3, [sp, #0]
 80098be:	429f      	cmp	r7, r3
 80098c0:	dc2e      	bgt.n	8009920 <__kernel_rem_pio2+0xd0>
 80098c2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8009b60 <__kernel_rem_pio2+0x310>
 80098c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098ce:	46a8      	mov	r8, r5
 80098d0:	2600      	movs	r6, #0
 80098d2:	e01b      	b.n	800990c <__kernel_rem_pio2+0xbc>
 80098d4:	42ef      	cmn	r7, r5
 80098d6:	d407      	bmi.n	80098e8 <__kernel_rem_pio2+0x98>
 80098d8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80098dc:	f7f6 fe42 	bl	8000564 <__aeabi_i2d>
 80098e0:	e8e6 0102 	strd	r0, r1, [r6], #8
 80098e4:	3501      	adds	r5, #1
 80098e6:	e7e0      	b.n	80098aa <__kernel_rem_pio2+0x5a>
 80098e8:	ec51 0b18 	vmov	r0, r1, d8
 80098ec:	e7f8      	b.n	80098e0 <__kernel_rem_pio2+0x90>
 80098ee:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80098f2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80098f6:	f7f6 fe9f 	bl	8000638 <__aeabi_dmul>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009902:	f7f6 fce3 	bl	80002cc <__adddf3>
 8009906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800990a:	3601      	adds	r6, #1
 800990c:	9b05      	ldr	r3, [sp, #20]
 800990e:	429e      	cmp	r6, r3
 8009910:	dded      	ble.n	80098ee <__kernel_rem_pio2+0x9e>
 8009912:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009916:	3701      	adds	r7, #1
 8009918:	ecaa 7b02 	vstmia	sl!, {d7}
 800991c:	3508      	adds	r5, #8
 800991e:	e7cd      	b.n	80098bc <__kernel_rem_pio2+0x6c>
 8009920:	9b00      	ldr	r3, [sp, #0]
 8009922:	f8dd 8000 	ldr.w	r8, [sp]
 8009926:	aa0c      	add	r2, sp, #48	@ 0x30
 8009928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800992c:	930a      	str	r3, [sp, #40]	@ 0x28
 800992e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009930:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009934:	9309      	str	r3, [sp, #36]	@ 0x24
 8009936:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800993a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800993c:	ab98      	add	r3, sp, #608	@ 0x260
 800993e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009942:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009946:	ed8d 7b02 	vstr	d7, [sp, #8]
 800994a:	ac0c      	add	r4, sp, #48	@ 0x30
 800994c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800994e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009952:	46a1      	mov	r9, r4
 8009954:	46c2      	mov	sl, r8
 8009956:	f1ba 0f00 	cmp.w	sl, #0
 800995a:	dc77      	bgt.n	8009a4c <__kernel_rem_pio2+0x1fc>
 800995c:	4658      	mov	r0, fp
 800995e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009962:	f000 fac5 	bl	8009ef0 <scalbn>
 8009966:	ec57 6b10 	vmov	r6, r7, d0
 800996a:	2200      	movs	r2, #0
 800996c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009970:	4630      	mov	r0, r6
 8009972:	4639      	mov	r1, r7
 8009974:	f7f6 fe60 	bl	8000638 <__aeabi_dmul>
 8009978:	ec41 0b10 	vmov	d0, r0, r1
 800997c:	f000 fb34 	bl	8009fe8 <floor>
 8009980:	4b7c      	ldr	r3, [pc, #496]	@ (8009b74 <__kernel_rem_pio2+0x324>)
 8009982:	ec51 0b10 	vmov	r0, r1, d0
 8009986:	2200      	movs	r2, #0
 8009988:	f7f6 fe56 	bl	8000638 <__aeabi_dmul>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4630      	mov	r0, r6
 8009992:	4639      	mov	r1, r7
 8009994:	f7f6 fc98 	bl	80002c8 <__aeabi_dsub>
 8009998:	460f      	mov	r7, r1
 800999a:	4606      	mov	r6, r0
 800999c:	f7f7 f8fc 	bl	8000b98 <__aeabi_d2iz>
 80099a0:	9002      	str	r0, [sp, #8]
 80099a2:	f7f6 fddf 	bl	8000564 <__aeabi_i2d>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4630      	mov	r0, r6
 80099ac:	4639      	mov	r1, r7
 80099ae:	f7f6 fc8b 	bl	80002c8 <__aeabi_dsub>
 80099b2:	f1bb 0f00 	cmp.w	fp, #0
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	dd6c      	ble.n	8009a96 <__kernel_rem_pio2+0x246>
 80099bc:	f108 31ff 	add.w	r1, r8, #4294967295
 80099c0:	ab0c      	add	r3, sp, #48	@ 0x30
 80099c2:	9d02      	ldr	r5, [sp, #8]
 80099c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099c8:	f1cb 0018 	rsb	r0, fp, #24
 80099cc:	fa43 f200 	asr.w	r2, r3, r0
 80099d0:	4415      	add	r5, r2
 80099d2:	4082      	lsls	r2, r0
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80099d8:	9502      	str	r5, [sp, #8]
 80099da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80099de:	f1cb 0217 	rsb	r2, fp, #23
 80099e2:	fa43 f902 	asr.w	r9, r3, r2
 80099e6:	f1b9 0f00 	cmp.w	r9, #0
 80099ea:	dd64      	ble.n	8009ab6 <__kernel_rem_pio2+0x266>
 80099ec:	9b02      	ldr	r3, [sp, #8]
 80099ee:	2200      	movs	r2, #0
 80099f0:	3301      	adds	r3, #1
 80099f2:	9302      	str	r3, [sp, #8]
 80099f4:	4615      	mov	r5, r2
 80099f6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80099fa:	4590      	cmp	r8, r2
 80099fc:	f300 80a1 	bgt.w	8009b42 <__kernel_rem_pio2+0x2f2>
 8009a00:	f1bb 0f00 	cmp.w	fp, #0
 8009a04:	dd07      	ble.n	8009a16 <__kernel_rem_pio2+0x1c6>
 8009a06:	f1bb 0f01 	cmp.w	fp, #1
 8009a0a:	f000 80c1 	beq.w	8009b90 <__kernel_rem_pio2+0x340>
 8009a0e:	f1bb 0f02 	cmp.w	fp, #2
 8009a12:	f000 80c8 	beq.w	8009ba6 <__kernel_rem_pio2+0x356>
 8009a16:	f1b9 0f02 	cmp.w	r9, #2
 8009a1a:	d14c      	bne.n	8009ab6 <__kernel_rem_pio2+0x266>
 8009a1c:	4632      	mov	r2, r6
 8009a1e:	463b      	mov	r3, r7
 8009a20:	4955      	ldr	r1, [pc, #340]	@ (8009b78 <__kernel_rem_pio2+0x328>)
 8009a22:	2000      	movs	r0, #0
 8009a24:	f7f6 fc50 	bl	80002c8 <__aeabi_dsub>
 8009a28:	4606      	mov	r6, r0
 8009a2a:	460f      	mov	r7, r1
 8009a2c:	2d00      	cmp	r5, #0
 8009a2e:	d042      	beq.n	8009ab6 <__kernel_rem_pio2+0x266>
 8009a30:	4658      	mov	r0, fp
 8009a32:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8009b68 <__kernel_rem_pio2+0x318>
 8009a36:	f000 fa5b 	bl	8009ef0 <scalbn>
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	ec53 2b10 	vmov	r2, r3, d0
 8009a42:	f7f6 fc41 	bl	80002c8 <__aeabi_dsub>
 8009a46:	4606      	mov	r6, r0
 8009a48:	460f      	mov	r7, r1
 8009a4a:	e034      	b.n	8009ab6 <__kernel_rem_pio2+0x266>
 8009a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8009b7c <__kernel_rem_pio2+0x32c>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a54:	f7f6 fdf0 	bl	8000638 <__aeabi_dmul>
 8009a58:	f7f7 f89e 	bl	8000b98 <__aeabi_d2iz>
 8009a5c:	f7f6 fd82 	bl	8000564 <__aeabi_i2d>
 8009a60:	4b47      	ldr	r3, [pc, #284]	@ (8009b80 <__kernel_rem_pio2+0x330>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	4606      	mov	r6, r0
 8009a66:	460f      	mov	r7, r1
 8009a68:	f7f6 fde6 	bl	8000638 <__aeabi_dmul>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a74:	f7f6 fc28 	bl	80002c8 <__aeabi_dsub>
 8009a78:	f7f7 f88e 	bl	8000b98 <__aeabi_d2iz>
 8009a7c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009a80:	f849 0b04 	str.w	r0, [r9], #4
 8009a84:	4639      	mov	r1, r7
 8009a86:	4630      	mov	r0, r6
 8009a88:	f7f6 fc20 	bl	80002cc <__adddf3>
 8009a8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a94:	e75f      	b.n	8009956 <__kernel_rem_pio2+0x106>
 8009a96:	d107      	bne.n	8009aa8 <__kernel_rem_pio2+0x258>
 8009a98:	f108 33ff 	add.w	r3, r8, #4294967295
 8009a9c:	aa0c      	add	r2, sp, #48	@ 0x30
 8009a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009aa6:	e79e      	b.n	80099e6 <__kernel_rem_pio2+0x196>
 8009aa8:	4b36      	ldr	r3, [pc, #216]	@ (8009b84 <__kernel_rem_pio2+0x334>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f7f7 f84a 	bl	8000b44 <__aeabi_dcmpge>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d143      	bne.n	8009b3c <__kernel_rem_pio2+0x2ec>
 8009ab4:	4681      	mov	r9, r0
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f7 f823 	bl	8000b08 <__aeabi_dcmpeq>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	f000 80c1 	beq.w	8009c4a <__kernel_rem_pio2+0x3fa>
 8009ac8:	f108 33ff 	add.w	r3, r8, #4294967295
 8009acc:	2200      	movs	r2, #0
 8009ace:	9900      	ldr	r1, [sp, #0]
 8009ad0:	428b      	cmp	r3, r1
 8009ad2:	da70      	bge.n	8009bb6 <__kernel_rem_pio2+0x366>
 8009ad4:	2a00      	cmp	r2, #0
 8009ad6:	f000 808b 	beq.w	8009bf0 <__kernel_rem_pio2+0x3a0>
 8009ada:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ade:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ae0:	f1ab 0b18 	sub.w	fp, fp, #24
 8009ae4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0f6      	beq.n	8009ada <__kernel_rem_pio2+0x28a>
 8009aec:	4658      	mov	r0, fp
 8009aee:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8009b68 <__kernel_rem_pio2+0x318>
 8009af2:	f000 f9fd 	bl	8009ef0 <scalbn>
 8009af6:	f108 0301 	add.w	r3, r8, #1
 8009afa:	00da      	lsls	r2, r3, #3
 8009afc:	9205      	str	r2, [sp, #20]
 8009afe:	ec55 4b10 	vmov	r4, r5, d0
 8009b02:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009b04:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8009b7c <__kernel_rem_pio2+0x32c>
 8009b08:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009b0c:	4646      	mov	r6, r8
 8009b0e:	f04f 0a00 	mov.w	sl, #0
 8009b12:	2e00      	cmp	r6, #0
 8009b14:	f280 80d1 	bge.w	8009cba <__kernel_rem_pio2+0x46a>
 8009b18:	4644      	mov	r4, r8
 8009b1a:	2c00      	cmp	r4, #0
 8009b1c:	f2c0 80ff 	blt.w	8009d1e <__kernel_rem_pio2+0x4ce>
 8009b20:	4b19      	ldr	r3, [pc, #100]	@ (8009b88 <__kernel_rem_pio2+0x338>)
 8009b22:	461f      	mov	r7, r3
 8009b24:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009b26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b2a:	9306      	str	r3, [sp, #24]
 8009b2c:	f04f 0a00 	mov.w	sl, #0
 8009b30:	f04f 0b00 	mov.w	fp, #0
 8009b34:	2600      	movs	r6, #0
 8009b36:	eba8 0504 	sub.w	r5, r8, r4
 8009b3a:	e0e4      	b.n	8009d06 <__kernel_rem_pio2+0x4b6>
 8009b3c:	f04f 0902 	mov.w	r9, #2
 8009b40:	e754      	b.n	80099ec <__kernel_rem_pio2+0x19c>
 8009b42:	f854 3b04 	ldr.w	r3, [r4], #4
 8009b46:	bb0d      	cbnz	r5, 8009b8c <__kernel_rem_pio2+0x33c>
 8009b48:	b123      	cbz	r3, 8009b54 <__kernel_rem_pio2+0x304>
 8009b4a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009b4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b52:	2301      	movs	r3, #1
 8009b54:	3201      	adds	r2, #1
 8009b56:	461d      	mov	r5, r3
 8009b58:	e74f      	b.n	80099fa <__kernel_rem_pio2+0x1aa>
 8009b5a:	bf00      	nop
 8009b5c:	f3af 8000 	nop.w
	...
 8009b6c:	3ff00000 	.word	0x3ff00000
 8009b70:	0800a6f0 	.word	0x0800a6f0
 8009b74:	40200000 	.word	0x40200000
 8009b78:	3ff00000 	.word	0x3ff00000
 8009b7c:	3e700000 	.word	0x3e700000
 8009b80:	41700000 	.word	0x41700000
 8009b84:	3fe00000 	.word	0x3fe00000
 8009b88:	0800a6b0 	.word	0x0800a6b0
 8009b8c:	1acb      	subs	r3, r1, r3
 8009b8e:	e7de      	b.n	8009b4e <__kernel_rem_pio2+0x2fe>
 8009b90:	f108 32ff 	add.w	r2, r8, #4294967295
 8009b94:	ab0c      	add	r3, sp, #48	@ 0x30
 8009b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009b9e:	a90c      	add	r1, sp, #48	@ 0x30
 8009ba0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009ba4:	e737      	b.n	8009a16 <__kernel_rem_pio2+0x1c6>
 8009ba6:	f108 32ff 	add.w	r2, r8, #4294967295
 8009baa:	ab0c      	add	r3, sp, #48	@ 0x30
 8009bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009bb4:	e7f3      	b.n	8009b9e <__kernel_rem_pio2+0x34e>
 8009bb6:	a90c      	add	r1, sp, #48	@ 0x30
 8009bb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	e785      	b.n	8009ace <__kernel_rem_pio2+0x27e>
 8009bc2:	3401      	adds	r4, #1
 8009bc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	d0fa      	beq.n	8009bc2 <__kernel_rem_pio2+0x372>
 8009bcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009bd2:	eb0d 0503 	add.w	r5, sp, r3
 8009bd6:	9b06      	ldr	r3, [sp, #24]
 8009bd8:	aa20      	add	r2, sp, #128	@ 0x80
 8009bda:	4443      	add	r3, r8
 8009bdc:	f108 0701 	add.w	r7, r8, #1
 8009be0:	3d98      	subs	r5, #152	@ 0x98
 8009be2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009be6:	4444      	add	r4, r8
 8009be8:	42bc      	cmp	r4, r7
 8009bea:	da04      	bge.n	8009bf6 <__kernel_rem_pio2+0x3a6>
 8009bec:	46a0      	mov	r8, r4
 8009bee:	e6a2      	b.n	8009936 <__kernel_rem_pio2+0xe6>
 8009bf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bf2:	2401      	movs	r4, #1
 8009bf4:	e7e6      	b.n	8009bc4 <__kernel_rem_pio2+0x374>
 8009bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009bfc:	f7f6 fcb2 	bl	8000564 <__aeabi_i2d>
 8009c00:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8009ec0 <__kernel_rem_pio2+0x670>
 8009c04:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009c08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c10:	46b2      	mov	sl, r6
 8009c12:	f04f 0800 	mov.w	r8, #0
 8009c16:	9b05      	ldr	r3, [sp, #20]
 8009c18:	4598      	cmp	r8, r3
 8009c1a:	dd05      	ble.n	8009c28 <__kernel_rem_pio2+0x3d8>
 8009c1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c20:	3701      	adds	r7, #1
 8009c22:	eca5 7b02 	vstmia	r5!, {d7}
 8009c26:	e7df      	b.n	8009be8 <__kernel_rem_pio2+0x398>
 8009c28:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009c2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009c30:	f7f6 fd02 	bl	8000638 <__aeabi_dmul>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c3c:	f7f6 fb46 	bl	80002cc <__adddf3>
 8009c40:	f108 0801 	add.w	r8, r8, #1
 8009c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c48:	e7e5      	b.n	8009c16 <__kernel_rem_pio2+0x3c6>
 8009c4a:	f1cb 0000 	rsb	r0, fp, #0
 8009c4e:	ec47 6b10 	vmov	d0, r6, r7
 8009c52:	f000 f94d 	bl	8009ef0 <scalbn>
 8009c56:	ec55 4b10 	vmov	r4, r5, d0
 8009c5a:	4b9b      	ldr	r3, [pc, #620]	@ (8009ec8 <__kernel_rem_pio2+0x678>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4620      	mov	r0, r4
 8009c60:	4629      	mov	r1, r5
 8009c62:	f7f6 ff6f 	bl	8000b44 <__aeabi_dcmpge>
 8009c66:	b300      	cbz	r0, 8009caa <__kernel_rem_pio2+0x45a>
 8009c68:	4b98      	ldr	r3, [pc, #608]	@ (8009ecc <__kernel_rem_pio2+0x67c>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	4629      	mov	r1, r5
 8009c70:	f7f6 fce2 	bl	8000638 <__aeabi_dmul>
 8009c74:	f7f6 ff90 	bl	8000b98 <__aeabi_d2iz>
 8009c78:	4606      	mov	r6, r0
 8009c7a:	f7f6 fc73 	bl	8000564 <__aeabi_i2d>
 8009c7e:	4b92      	ldr	r3, [pc, #584]	@ (8009ec8 <__kernel_rem_pio2+0x678>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	f7f6 fcd9 	bl	8000638 <__aeabi_dmul>
 8009c86:	460b      	mov	r3, r1
 8009c88:	4602      	mov	r2, r0
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f7f6 fb1b 	bl	80002c8 <__aeabi_dsub>
 8009c92:	f7f6 ff81 	bl	8000b98 <__aeabi_d2iz>
 8009c96:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c98:	f10b 0b18 	add.w	fp, fp, #24
 8009c9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009ca0:	f108 0801 	add.w	r8, r8, #1
 8009ca4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009ca8:	e720      	b.n	8009aec <__kernel_rem_pio2+0x29c>
 8009caa:	4620      	mov	r0, r4
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7f6 ff73 	bl	8000b98 <__aeabi_d2iz>
 8009cb2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009cb8:	e718      	b.n	8009aec <__kernel_rem_pio2+0x29c>
 8009cba:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cbc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009cc0:	f7f6 fc50 	bl	8000564 <__aeabi_i2d>
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	f7f6 fcb6 	bl	8000638 <__aeabi_dmul>
 8009ccc:	4652      	mov	r2, sl
 8009cce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009cd2:	465b      	mov	r3, fp
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f6 fcae 	bl	8000638 <__aeabi_dmul>
 8009cdc:	3e01      	subs	r6, #1
 8009cde:	4604      	mov	r4, r0
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	e716      	b.n	8009b12 <__kernel_rem_pio2+0x2c2>
 8009ce4:	9906      	ldr	r1, [sp, #24]
 8009ce6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009cea:	9106      	str	r1, [sp, #24]
 8009cec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009cf0:	f7f6 fca2 	bl	8000638 <__aeabi_dmul>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4650      	mov	r0, sl
 8009cfa:	4659      	mov	r1, fp
 8009cfc:	f7f6 fae6 	bl	80002cc <__adddf3>
 8009d00:	3601      	adds	r6, #1
 8009d02:	4682      	mov	sl, r0
 8009d04:	468b      	mov	fp, r1
 8009d06:	9b00      	ldr	r3, [sp, #0]
 8009d08:	429e      	cmp	r6, r3
 8009d0a:	dc01      	bgt.n	8009d10 <__kernel_rem_pio2+0x4c0>
 8009d0c:	42ae      	cmp	r6, r5
 8009d0e:	dde9      	ble.n	8009ce4 <__kernel_rem_pio2+0x494>
 8009d10:	ab48      	add	r3, sp, #288	@ 0x120
 8009d12:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009d16:	e9c5 ab00 	strd	sl, fp, [r5]
 8009d1a:	3c01      	subs	r4, #1
 8009d1c:	e6fd      	b.n	8009b1a <__kernel_rem_pio2+0x2ca>
 8009d1e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	dc0b      	bgt.n	8009d3c <__kernel_rem_pio2+0x4ec>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dc35      	bgt.n	8009d94 <__kernel_rem_pio2+0x544>
 8009d28:	d059      	beq.n	8009dde <__kernel_rem_pio2+0x58e>
 8009d2a:	9b02      	ldr	r3, [sp, #8]
 8009d2c:	f003 0007 	and.w	r0, r3, #7
 8009d30:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009d34:	ecbd 8b02 	vpop	{d8}
 8009d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d1f3      	bne.n	8009d2a <__kernel_rem_pio2+0x4da>
 8009d42:	9b05      	ldr	r3, [sp, #20]
 8009d44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d48:	eb0d 0403 	add.w	r4, sp, r3
 8009d4c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009d50:	4625      	mov	r5, r4
 8009d52:	46c2      	mov	sl, r8
 8009d54:	f1ba 0f00 	cmp.w	sl, #0
 8009d58:	dc69      	bgt.n	8009e2e <__kernel_rem_pio2+0x5de>
 8009d5a:	4645      	mov	r5, r8
 8009d5c:	2d01      	cmp	r5, #1
 8009d5e:	f300 8087 	bgt.w	8009e70 <__kernel_rem_pio2+0x620>
 8009d62:	9c05      	ldr	r4, [sp, #20]
 8009d64:	ab48      	add	r3, sp, #288	@ 0x120
 8009d66:	441c      	add	r4, r3
 8009d68:	2000      	movs	r0, #0
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	f1b8 0f01 	cmp.w	r8, #1
 8009d70:	f300 809c 	bgt.w	8009eac <__kernel_rem_pio2+0x65c>
 8009d74:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8009d78:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8009d7c:	f1b9 0f00 	cmp.w	r9, #0
 8009d80:	f040 80a6 	bne.w	8009ed0 <__kernel_rem_pio2+0x680>
 8009d84:	9b04      	ldr	r3, [sp, #16]
 8009d86:	e9c3 5600 	strd	r5, r6, [r3]
 8009d8a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009d8e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009d92:	e7ca      	b.n	8009d2a <__kernel_rem_pio2+0x4da>
 8009d94:	9d05      	ldr	r5, [sp, #20]
 8009d96:	ab48      	add	r3, sp, #288	@ 0x120
 8009d98:	441d      	add	r5, r3
 8009d9a:	4644      	mov	r4, r8
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	2100      	movs	r1, #0
 8009da0:	2c00      	cmp	r4, #0
 8009da2:	da35      	bge.n	8009e10 <__kernel_rem_pio2+0x5c0>
 8009da4:	f1b9 0f00 	cmp.w	r9, #0
 8009da8:	d038      	beq.n	8009e1c <__kernel_rem_pio2+0x5cc>
 8009daa:	4602      	mov	r2, r0
 8009dac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009db0:	9c04      	ldr	r4, [sp, #16]
 8009db2:	e9c4 2300 	strd	r2, r3, [r4]
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009dbe:	f7f6 fa83 	bl	80002c8 <__aeabi_dsub>
 8009dc2:	ad4a      	add	r5, sp, #296	@ 0x128
 8009dc4:	2401      	movs	r4, #1
 8009dc6:	45a0      	cmp	r8, r4
 8009dc8:	da2b      	bge.n	8009e22 <__kernel_rem_pio2+0x5d2>
 8009dca:	f1b9 0f00 	cmp.w	r9, #0
 8009dce:	d002      	beq.n	8009dd6 <__kernel_rem_pio2+0x586>
 8009dd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	9b04      	ldr	r3, [sp, #16]
 8009dd8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009ddc:	e7a5      	b.n	8009d2a <__kernel_rem_pio2+0x4da>
 8009dde:	9c05      	ldr	r4, [sp, #20]
 8009de0:	ab48      	add	r3, sp, #288	@ 0x120
 8009de2:	441c      	add	r4, r3
 8009de4:	2000      	movs	r0, #0
 8009de6:	2100      	movs	r1, #0
 8009de8:	f1b8 0f00 	cmp.w	r8, #0
 8009dec:	da09      	bge.n	8009e02 <__kernel_rem_pio2+0x5b2>
 8009dee:	f1b9 0f00 	cmp.w	r9, #0
 8009df2:	d002      	beq.n	8009dfa <__kernel_rem_pio2+0x5aa>
 8009df4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009df8:	4619      	mov	r1, r3
 8009dfa:	9b04      	ldr	r3, [sp, #16]
 8009dfc:	e9c3 0100 	strd	r0, r1, [r3]
 8009e00:	e793      	b.n	8009d2a <__kernel_rem_pio2+0x4da>
 8009e02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009e06:	f7f6 fa61 	bl	80002cc <__adddf3>
 8009e0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e0e:	e7eb      	b.n	8009de8 <__kernel_rem_pio2+0x598>
 8009e10:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009e14:	f7f6 fa5a 	bl	80002cc <__adddf3>
 8009e18:	3c01      	subs	r4, #1
 8009e1a:	e7c1      	b.n	8009da0 <__kernel_rem_pio2+0x550>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	e7c6      	b.n	8009db0 <__kernel_rem_pio2+0x560>
 8009e22:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009e26:	f7f6 fa51 	bl	80002cc <__adddf3>
 8009e2a:	3401      	adds	r4, #1
 8009e2c:	e7cb      	b.n	8009dc6 <__kernel_rem_pio2+0x576>
 8009e2e:	ed35 7b02 	vldmdb	r5!, {d7}
 8009e32:	ed8d 7b00 	vstr	d7, [sp]
 8009e36:	ed95 7b02 	vldr	d7, [r5, #8]
 8009e3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e3e:	ec53 2b17 	vmov	r2, r3, d7
 8009e42:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e46:	f7f6 fa41 	bl	80002cc <__adddf3>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4606      	mov	r6, r0
 8009e50:	460f      	mov	r7, r1
 8009e52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e56:	f7f6 fa37 	bl	80002c8 <__aeabi_dsub>
 8009e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e5e:	f7f6 fa35 	bl	80002cc <__adddf3>
 8009e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e66:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009e6a:	e9c5 6700 	strd	r6, r7, [r5]
 8009e6e:	e771      	b.n	8009d54 <__kernel_rem_pio2+0x504>
 8009e70:	ed34 7b02 	vldmdb	r4!, {d7}
 8009e74:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009e78:	ec51 0b17 	vmov	r0, r1, d7
 8009e7c:	4652      	mov	r2, sl
 8009e7e:	465b      	mov	r3, fp
 8009e80:	ed8d 7b00 	vstr	d7, [sp]
 8009e84:	f7f6 fa22 	bl	80002cc <__adddf3>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	460f      	mov	r7, r1
 8009e90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e94:	f7f6 fa18 	bl	80002c8 <__aeabi_dsub>
 8009e98:	4652      	mov	r2, sl
 8009e9a:	465b      	mov	r3, fp
 8009e9c:	f7f6 fa16 	bl	80002cc <__adddf3>
 8009ea0:	3d01      	subs	r5, #1
 8009ea2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ea6:	e9c4 6700 	strd	r6, r7, [r4]
 8009eaa:	e757      	b.n	8009d5c <__kernel_rem_pio2+0x50c>
 8009eac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009eb0:	f7f6 fa0c 	bl	80002cc <__adddf3>
 8009eb4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eb8:	e758      	b.n	8009d6c <__kernel_rem_pio2+0x51c>
 8009eba:	bf00      	nop
 8009ebc:	f3af 8000 	nop.w
	...
 8009ec8:	41700000 	.word	0x41700000
 8009ecc:	3e700000 	.word	0x3e700000
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	9a04      	ldr	r2, [sp, #16]
 8009ed4:	601d      	str	r5, [r3, #0]
 8009ed6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8009eda:	605c      	str	r4, [r3, #4]
 8009edc:	609f      	str	r7, [r3, #8]
 8009ede:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8009ee2:	60d3      	str	r3, [r2, #12]
 8009ee4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ee8:	6110      	str	r0, [r2, #16]
 8009eea:	6153      	str	r3, [r2, #20]
 8009eec:	e71d      	b.n	8009d2a <__kernel_rem_pio2+0x4da>
 8009eee:	bf00      	nop

08009ef0 <scalbn>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	ec55 4b10 	vmov	r4, r5, d0
 8009ef6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009efa:	4606      	mov	r6, r0
 8009efc:	462b      	mov	r3, r5
 8009efe:	b991      	cbnz	r1, 8009f26 <scalbn+0x36>
 8009f00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009f04:	4323      	orrs	r3, r4
 8009f06:	d03b      	beq.n	8009f80 <scalbn+0x90>
 8009f08:	4b33      	ldr	r3, [pc, #204]	@ (8009fd8 <scalbn+0xe8>)
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f7f6 fb92 	bl	8000638 <__aeabi_dmul>
 8009f14:	4b31      	ldr	r3, [pc, #196]	@ (8009fdc <scalbn+0xec>)
 8009f16:	429e      	cmp	r6, r3
 8009f18:	4604      	mov	r4, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	da0f      	bge.n	8009f3e <scalbn+0x4e>
 8009f1e:	a326      	add	r3, pc, #152	@ (adr r3, 8009fb8 <scalbn+0xc8>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	e01e      	b.n	8009f64 <scalbn+0x74>
 8009f26:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009f2a:	4291      	cmp	r1, r2
 8009f2c:	d10b      	bne.n	8009f46 <scalbn+0x56>
 8009f2e:	4622      	mov	r2, r4
 8009f30:	4620      	mov	r0, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 f9ca 	bl	80002cc <__adddf3>
 8009f38:	4604      	mov	r4, r0
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	e020      	b.n	8009f80 <scalbn+0x90>
 8009f3e:	460b      	mov	r3, r1
 8009f40:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009f44:	3936      	subs	r1, #54	@ 0x36
 8009f46:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009f4a:	4296      	cmp	r6, r2
 8009f4c:	dd0d      	ble.n	8009f6a <scalbn+0x7a>
 8009f4e:	2d00      	cmp	r5, #0
 8009f50:	a11b      	add	r1, pc, #108	@ (adr r1, 8009fc0 <scalbn+0xd0>)
 8009f52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f56:	da02      	bge.n	8009f5e <scalbn+0x6e>
 8009f58:	a11b      	add	r1, pc, #108	@ (adr r1, 8009fc8 <scalbn+0xd8>)
 8009f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f5e:	a318      	add	r3, pc, #96	@ (adr r3, 8009fc0 <scalbn+0xd0>)
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	f7f6 fb68 	bl	8000638 <__aeabi_dmul>
 8009f68:	e7e6      	b.n	8009f38 <scalbn+0x48>
 8009f6a:	1872      	adds	r2, r6, r1
 8009f6c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009f70:	428a      	cmp	r2, r1
 8009f72:	dcec      	bgt.n	8009f4e <scalbn+0x5e>
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	dd06      	ble.n	8009f86 <scalbn+0x96>
 8009f78:	f36f 531e 	bfc	r3, #20, #11
 8009f7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009f80:	ec45 4b10 	vmov	d0, r4, r5
 8009f84:	bd70      	pop	{r4, r5, r6, pc}
 8009f86:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009f8a:	da08      	bge.n	8009f9e <scalbn+0xae>
 8009f8c:	2d00      	cmp	r5, #0
 8009f8e:	a10a      	add	r1, pc, #40	@ (adr r1, 8009fb8 <scalbn+0xc8>)
 8009f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f94:	dac3      	bge.n	8009f1e <scalbn+0x2e>
 8009f96:	a10e      	add	r1, pc, #56	@ (adr r1, 8009fd0 <scalbn+0xe0>)
 8009f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f9c:	e7bf      	b.n	8009f1e <scalbn+0x2e>
 8009f9e:	3236      	adds	r2, #54	@ 0x36
 8009fa0:	f36f 531e 	bfc	r3, #20, #11
 8009fa4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009fa8:	4620      	mov	r0, r4
 8009faa:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe0 <scalbn+0xf0>)
 8009fac:	4629      	mov	r1, r5
 8009fae:	2200      	movs	r2, #0
 8009fb0:	e7d8      	b.n	8009f64 <scalbn+0x74>
 8009fb2:	bf00      	nop
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	c2f8f359 	.word	0xc2f8f359
 8009fbc:	01a56e1f 	.word	0x01a56e1f
 8009fc0:	8800759c 	.word	0x8800759c
 8009fc4:	7e37e43c 	.word	0x7e37e43c
 8009fc8:	8800759c 	.word	0x8800759c
 8009fcc:	fe37e43c 	.word	0xfe37e43c
 8009fd0:	c2f8f359 	.word	0xc2f8f359
 8009fd4:	81a56e1f 	.word	0x81a56e1f
 8009fd8:	43500000 	.word	0x43500000
 8009fdc:	ffff3cb0 	.word	0xffff3cb0
 8009fe0:	3c900000 	.word	0x3c900000
 8009fe4:	00000000 	.word	0x00000000

08009fe8 <floor>:
 8009fe8:	ec51 0b10 	vmov	r0, r1, d0
 8009fec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009ff8:	2e13      	cmp	r6, #19
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	4680      	mov	r8, r0
 800a000:	dc34      	bgt.n	800a06c <floor+0x84>
 800a002:	2e00      	cmp	r6, #0
 800a004:	da17      	bge.n	800a036 <floor+0x4e>
 800a006:	a332      	add	r3, pc, #200	@ (adr r3, 800a0d0 <floor+0xe8>)
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f7f6 f95e 	bl	80002cc <__adddf3>
 800a010:	2200      	movs	r2, #0
 800a012:	2300      	movs	r3, #0
 800a014:	f7f6 fda0 	bl	8000b58 <__aeabi_dcmpgt>
 800a018:	b150      	cbz	r0, 800a030 <floor+0x48>
 800a01a:	2c00      	cmp	r4, #0
 800a01c:	da55      	bge.n	800a0ca <floor+0xe2>
 800a01e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a022:	432c      	orrs	r4, r5
 800a024:	2500      	movs	r5, #0
 800a026:	42ac      	cmp	r4, r5
 800a028:	4c2b      	ldr	r4, [pc, #172]	@ (800a0d8 <floor+0xf0>)
 800a02a:	bf08      	it	eq
 800a02c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a030:	4621      	mov	r1, r4
 800a032:	4628      	mov	r0, r5
 800a034:	e023      	b.n	800a07e <floor+0x96>
 800a036:	4f29      	ldr	r7, [pc, #164]	@ (800a0dc <floor+0xf4>)
 800a038:	4137      	asrs	r7, r6
 800a03a:	ea01 0307 	and.w	r3, r1, r7
 800a03e:	4303      	orrs	r3, r0
 800a040:	d01d      	beq.n	800a07e <floor+0x96>
 800a042:	a323      	add	r3, pc, #140	@ (adr r3, 800a0d0 <floor+0xe8>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f7f6 f940 	bl	80002cc <__adddf3>
 800a04c:	2200      	movs	r2, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	f7f6 fd82 	bl	8000b58 <__aeabi_dcmpgt>
 800a054:	2800      	cmp	r0, #0
 800a056:	d0eb      	beq.n	800a030 <floor+0x48>
 800a058:	2c00      	cmp	r4, #0
 800a05a:	bfbe      	ittt	lt
 800a05c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a060:	4133      	asrlt	r3, r6
 800a062:	18e4      	addlt	r4, r4, r3
 800a064:	ea24 0407 	bic.w	r4, r4, r7
 800a068:	2500      	movs	r5, #0
 800a06a:	e7e1      	b.n	800a030 <floor+0x48>
 800a06c:	2e33      	cmp	r6, #51	@ 0x33
 800a06e:	dd0a      	ble.n	800a086 <floor+0x9e>
 800a070:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a074:	d103      	bne.n	800a07e <floor+0x96>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	f7f6 f927 	bl	80002cc <__adddf3>
 800a07e:	ec41 0b10 	vmov	d0, r0, r1
 800a082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a086:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a08a:	f04f 37ff 	mov.w	r7, #4294967295
 800a08e:	40df      	lsrs	r7, r3
 800a090:	4207      	tst	r7, r0
 800a092:	d0f4      	beq.n	800a07e <floor+0x96>
 800a094:	a30e      	add	r3, pc, #56	@ (adr r3, 800a0d0 <floor+0xe8>)
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f7f6 f917 	bl	80002cc <__adddf3>
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f7f6 fd59 	bl	8000b58 <__aeabi_dcmpgt>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d0c2      	beq.n	800a030 <floor+0x48>
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	da0a      	bge.n	800a0c4 <floor+0xdc>
 800a0ae:	2e14      	cmp	r6, #20
 800a0b0:	d101      	bne.n	800a0b6 <floor+0xce>
 800a0b2:	3401      	adds	r4, #1
 800a0b4:	e006      	b.n	800a0c4 <floor+0xdc>
 800a0b6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	40b3      	lsls	r3, r6
 800a0be:	441d      	add	r5, r3
 800a0c0:	4545      	cmp	r5, r8
 800a0c2:	d3f6      	bcc.n	800a0b2 <floor+0xca>
 800a0c4:	ea25 0507 	bic.w	r5, r5, r7
 800a0c8:	e7b2      	b.n	800a030 <floor+0x48>
 800a0ca:	2500      	movs	r5, #0
 800a0cc:	462c      	mov	r4, r5
 800a0ce:	e7af      	b.n	800a030 <floor+0x48>
 800a0d0:	8800759c 	.word	0x8800759c
 800a0d4:	7e37e43c 	.word	0x7e37e43c
 800a0d8:	bff00000 	.word	0xbff00000
 800a0dc:	000fffff 	.word	0x000fffff

0800a0e0 <_init>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	bf00      	nop
 800a0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e6:	bc08      	pop	{r3}
 800a0e8:	469e      	mov	lr, r3
 800a0ea:	4770      	bx	lr

0800a0ec <_fini>:
 800a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ee:	bf00      	nop
 800a0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f2:	bc08      	pop	{r3}
 800a0f4:	469e      	mov	lr, r3
 800a0f6:	4770      	bx	lr
