
Inverter_48-230_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da68  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800dc38  0800dc38  0000ec38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e240  0800e240  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e240  0800e240  0000f240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e248  0800e248  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e248  0800e248  0000f248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e24c  0800e24c  0000f24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800e250  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014430  200001d8  0800e424  000101d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014608  0800e424  00010608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ada2  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a58  00000000  00000000  0002afa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  0002ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b4  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bc1  00000000  00000000  0003127c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5b2  00000000  00000000  0005ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdfd0  00000000  00000000  000783ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001763bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072dc  00000000  00000000  00176404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0017d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dc20 	.word	0x0800dc20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800dc20 	.word	0x0800dc20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <compute_duty_cycle>:

/*************************************************************************/
//  PRIVATE FUNCTIONS
/*************************************************************************/
// duty cycle computation based on control strategy
void compute_duty_cycle(myInverterCtrlStruct *INV, int idx, float sineAmplitude, float udc){
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001002:	edc7 0a00 	vstr	s1, [r7]
	INV->delta_d = (sineAmplitude*sine_wave[idx])/udc;
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fabe 	bl	8000588 <__aeabi_f2d>
 800100c:	4aad      	ldr	r2, [pc, #692]	@ (80012c4 <compute_duty_cycle+0x2d0>)
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	4413      	add	r3, r2
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fb0e 	bl	8000638 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4614      	mov	r4, r2
 8001022:	461d      	mov	r5, r3
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f7ff faaf 	bl	8000588 <__aeabi_f2d>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4620      	mov	r0, r4
 8001030:	4629      	mov	r1, r5
 8001032:	f7ff fc2b 	bl	800088c <__aeabi_ddiv>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fdf3 	bl	8000c28 <__aeabi_d2f>
 8001042:	4602      	mov	r2, r0
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	609a      	str	r2, [r3, #8]
	if(INV->system_ctrl_strategy == SYM){								// symmetrical control strategy
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	2b00      	cmp	r3, #0
 800104e:	f040 808e 	bne.w	800116e <compute_duty_cycle+0x17a>
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	78db      	ldrb	r3, [r3, #3]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d041      	beq.n	80010de <compute_duty_cycle+0xea>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	f083 0301 	eor.w	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d03a      	beq.n	80010de <compute_duty_cycle+0xea>
			INV->d_a = 0.5 + (0.5*INV->delta_d);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa8b 	bl	8000588 <__aeabi_f2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b94      	ldr	r3, [pc, #592]	@ (80012c8 <compute_duty_cycle+0x2d4>)
 8001078:	f7ff fade 	bl	8000638 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4b8f      	ldr	r3, [pc, #572]	@ (80012c8 <compute_duty_cycle+0x2d4>)
 800108a:	f7ff f91f 	bl	80002cc <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fdc7 	bl	8000c28 <__aeabi_d2f>
 800109a:	4602      	mov	r2, r0
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	60da      	str	r2, [r3, #12]
			INV->d_b = 0.5 - (0.5*INV->delta_d);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa6f 	bl	8000588 <__aeabi_f2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b86      	ldr	r3, [pc, #536]	@ (80012c8 <compute_duty_cycle+0x2d4>)
 80010b0:	f7ff fac2 	bl	8000638 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	f04f 0000 	mov.w	r0, #0
 80010bc:	4982      	ldr	r1, [pc, #520]	@ (80012c8 <compute_duty_cycle+0x2d4>)
 80010be:	f7ff f903 	bl	80002c8 <__aeabi_dsub>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fdad 	bl	8000c28 <__aeabi_d2f>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	611a      	str	r2, [r3, #16]
			INV->d_c = 0.0;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	e0ac      	b.n	8001238 <compute_duty_cycle+0x244>
		}
		else if(INV->Leg_B == false && INV->Leg_C == true){				// leg A and leg C switching
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	78db      	ldrb	r3, [r3, #3]
 80010e2:	f083 0301 	eor.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80a5 	beq.w	8001238 <compute_duty_cycle+0x244>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	791b      	ldrb	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80a0 	beq.w	8001238 <compute_duty_cycle+0x244>
			INV->d_a = 0.5 + 0.5*INV->delta_d;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa43 	bl	8000588 <__aeabi_f2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b70      	ldr	r3, [pc, #448]	@ (80012c8 <compute_duty_cycle+0x2d4>)
 8001108:	f7ff fa96 	bl	8000638 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b6b      	ldr	r3, [pc, #428]	@ (80012c8 <compute_duty_cycle+0x2d4>)
 800111a:	f7ff f8d7 	bl	80002cc <__adddf3>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fd7f 	bl	8000c28 <__aeabi_d2f>
 800112a:	4602      	mov	r2, r0
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	60da      	str	r2, [r3, #12]
			INV->d_c = 0.5 - 0.5*INV->delta_d;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa27 	bl	8000588 <__aeabi_f2d>
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b62      	ldr	r3, [pc, #392]	@ (80012c8 <compute_duty_cycle+0x2d4>)
 8001140:	f7ff fa7a 	bl	8000638 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	495e      	ldr	r1, [pc, #376]	@ (80012c8 <compute_duty_cycle+0x2d4>)
 800114e:	f7ff f8bb 	bl	80002c8 <__aeabi_dsub>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fd65 	bl	8000c28 <__aeabi_d2f>
 800115e:	4602      	mov	r2, r0
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	615a      	str	r2, [r3, #20]
			INV->d_b = 0.0;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	e064      	b.n	8001238 <compute_duty_cycle+0x244>
		}
	}
	else{																// totem pole control strategy
		if(INV->Leg_B == true && INV->Leg_C == false){					// leg A and leg B switching
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	78db      	ldrb	r3, [r3, #3]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d02e      	beq.n	80011d4 <compute_duty_cycle+0x1e0>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	791b      	ldrb	r3, [r3, #4]
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d027      	beq.n	80011d4 <compute_duty_cycle+0x1e0>
			if(INV->delta_d > 0.0){										// positive half-wave
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edd3 7a02 	vldr	s15, [r3, #8]
 800118a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	dd0c      	ble.n	80011ae <compute_duty_cycle+0x1ba>
				INV->d_a = INV->delta_d;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	60da      	str	r2, [r3, #12]
				INV->d_b = 0.0;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
				INV->d_c = 0.0;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
			if(INV->delta_d > 0.0){										// positive half-wave
 80011ac:	e044      	b.n	8001238 <compute_duty_cycle+0x244>
			}
			else{														// negative half-wave
				INV->d_a = 1.0 + INV->delta_d;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	edc3 7a03 	vstr	s15, [r3, #12]
				INV->d_b = 1.0;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011c8:	611a      	str	r2, [r3, #16]
				INV->d_c = 0.0;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
			if(INV->delta_d > 0.0){										// positive half-wave
 80011d2:	e031      	b.n	8001238 <compute_duty_cycle+0x244>
			}
		}
		else if(INV->Leg_B == false && INV->Leg_C == true){				// leg A and leg C switching
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	f083 0301 	eor.w	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d02a      	beq.n	8001238 <compute_duty_cycle+0x244>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	791b      	ldrb	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d026      	beq.n	8001238 <compute_duty_cycle+0x244>
			if(INV->delta_d > 0.0){										// positive half-wave
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80011f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	dd0c      	ble.n	8001214 <compute_duty_cycle+0x220>
				INV->d_a = INV->delta_d;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	60da      	str	r2, [r3, #12]
				INV->d_c = 0.0;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
				INV->d_b = 0.0;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	e011      	b.n	8001238 <compute_duty_cycle+0x244>
			}
			else{														// negative half-wave
				INV->d_a = 1 + INV->delta_d;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	edd3 7a02 	vldr	s15, [r3, #8]
 800121a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800121e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	edc3 7a03 	vstr	s15, [r3, #12]
				INV->d_c = 1.0;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800122e:	615a      	str	r2, [r3, #20]
				INV->d_b = 0.0;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
	myInverter.d_b = 0.00;
	myInverter.d_c = 0.40;
#endif

	// duty cycle value saturation
	if(INV->d_a > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_b > DUTY_CYCLE_MAX_VALUE || INV->d_a < DUTY_CYCLE_MIN_VALUE || INV->d_c > DUTY_CYCLE_MAX_VALUE || INV->d_c < DUTY_CYCLE_MIN_VALUE){
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	edd3 7a03 	vldr	s15, [r3, #12]
 800123e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	dc2c      	bgt.n	80012a6 <compute_duty_cycle+0x2b2>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	d424      	bmi.n	80012a6 <compute_duty_cycle+0x2b2>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	dc1a      	bgt.n	80012a6 <compute_duty_cycle+0x2b2>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	edd3 7a03 	vldr	s15, [r3, #12]
 8001276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	d412      	bmi.n	80012a6 <compute_duty_cycle+0x2b2>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	edd3 7a05 	vldr	s15, [r3, #20]
 8001286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800128a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	dc08      	bgt.n	80012a6 <compute_duty_cycle+0x2b2>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	edd3 7a05 	vldr	s15, [r3, #20]
 800129a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d400      	bmi.n	80012a6 <compute_duty_cycle+0x2b2>
		else if(INV->d_c > DUTY_CYCLE_MAX_VALUE)
			INV->d_c = DUTY_CYCLE_MAX_VALUE;
		else if(INV->d_c < DUTY_CYCLE_MIN_VALUE)
			INV->d_c = DUTY_CYCLE_MIN_VALUE;
	}
}
 80012a4:	e057      	b.n	8001356 <compute_duty_cycle+0x362>
		if(INV->d_a > DUTY_CYCLE_MAX_VALUE)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	dd08      	ble.n	80012cc <compute_duty_cycle+0x2d8>
			INV->d_a = DUTY_CYCLE_MAX_VALUE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012c0:	60da      	str	r2, [r3, #12]
}
 80012c2:	e048      	b.n	8001356 <compute_duty_cycle+0x362>
 80012c4:	200001f8 	.word	0x200001f8
 80012c8:	3fe00000 	.word	0x3fe00000
		else if(INV->d_a < DUTY_CYCLE_MIN_VALUE)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80012d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	d504      	bpl.n	80012e6 <compute_duty_cycle+0x2f2>
			INV->d_a = DUTY_CYCLE_MIN_VALUE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
}
 80012e4:	e037      	b.n	8001356 <compute_duty_cycle+0x362>
		else if(INV->d_b > DUTY_CYCLE_MAX_VALUE)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	dd04      	ble.n	8001304 <compute_duty_cycle+0x310>
			INV->d_b = DUTY_CYCLE_MAX_VALUE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001300:	611a      	str	r2, [r3, #16]
}
 8001302:	e028      	b.n	8001356 <compute_duty_cycle+0x362>
		else if(INV->d_b < DUTY_CYCLE_MIN_VALUE)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	edd3 7a04 	vldr	s15, [r3, #16]
 800130a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	d504      	bpl.n	800131e <compute_duty_cycle+0x32a>
			INV->d_b = DUTY_CYCLE_MIN_VALUE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
}
 800131c:	e01b      	b.n	8001356 <compute_duty_cycle+0x362>
		else if(INV->d_c > DUTY_CYCLE_MAX_VALUE)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	edd3 7a05 	vldr	s15, [r3, #20]
 8001324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	dd04      	ble.n	800133c <compute_duty_cycle+0x348>
			INV->d_c = DUTY_CYCLE_MAX_VALUE;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001338:	615a      	str	r2, [r3, #20]
}
 800133a:	e00c      	b.n	8001356 <compute_duty_cycle+0x362>
		else if(INV->d_c < DUTY_CYCLE_MIN_VALUE)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	d400      	bmi.n	800134e <compute_duty_cycle+0x35a>
}
 800134c:	e003      	b.n	8001356 <compute_duty_cycle+0x362>
			INV->d_c = DUTY_CYCLE_MIN_VALUE;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bdb0      	pop	{r4, r5, r7, pc}
 800135e:	bf00      	nop

08001360 <low_pass_filter>:

// Low pas filter
float low_pass_filter(float sample_act, float *sample_buffer) {
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	ed87 0a01 	vstr	s0, [r7, #4]
 800136a:	6038      	str	r0, [r7, #0]
    sample_buffer[sample_idx] = sample_act;
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <low_pass_filter+0x88>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
    sample_idx = (sample_idx + 1) % FILTER_SIZE;
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <low_pass_filter+0x88>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1c59      	adds	r1, r3, #1
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <low_pass_filter+0x8c>)
 8001382:	fb83 2301 	smull	r2, r3, r3, r1
 8001386:	10da      	asrs	r2, r3, #3
 8001388:	17cb      	asrs	r3, r1, #31
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	1aca      	subs	r2, r1, r3
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <low_pass_filter+0x88>)
 8001398:	601a      	str	r2, [r3, #0]

    float sum = 0.0f;
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < FILTER_SIZE; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	e00e      	b.n	80013c4 <low_pass_filter+0x64>
        sum += sample_buffer[i];
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ba:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < FILTER_SIZE; i++) {
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b13      	cmp	r3, #19
 80013c8:	dded      	ble.n	80013a6 <low_pass_filter+0x46>
    }

    return sum / FILTER_SIZE;
 80013ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ce:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80013d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	20000574 	.word	0x20000574
 80013ec:	66666667 	.word	0x66666667

080013f0 <ACCurrentMeasProcessing>:

float ACCurrentMeasProcessing(float ad_volt){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	ed87 0a01 	vstr	s0, [r7, #4]
	float u_diff = ad_volt - ADC_IAC_OFFSET;
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff f8c4 	bl	8000588 <__aeabi_f2d>
 8001400:	a313      	add	r3, pc, #76	@ (adr r3, 8001450 <ACCurrentMeasProcessing+0x60>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7fe ff5f 	bl	80002c8 <__aeabi_dsub>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fc09 	bl	8000c28 <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	60fb      	str	r3, [r7, #12]
	float eq_i = u_diff * GAIN_MEAS_IAC;
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f7ff f8b4 	bl	8000588 <__aeabi_f2d>
 8001420:	a30d      	add	r3, pc, #52	@ (adr r3, 8001458 <ACCurrentMeasProcessing+0x68>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f907 	bl	8000638 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fbf9 	bl	8000c28 <__aeabi_d2f>
 8001436:	4603      	mov	r3, r0
 8001438:	60bb      	str	r3, [r7, #8]
	//eq_i = low_pass_filter(eq_i,iac_buffer);
	return eq_i;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	66666666 	.word	0x66666666
 8001454:	3ffa6666 	.word	0x3ffa6666
 8001458:	eb851eb8 	.word	0xeb851eb8
 800145c:	40495851 	.word	0x40495851

08001460 <ACVoltageMeasProcessing>:

float ACVoltageMeasProcessing(float ad_volt){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	ed87 0a01 	vstr	s0, [r7, #4]
	float u_diff = ad_volt - ADC_OFFSET;
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff f88c 	bl	8000588 <__aeabi_f2d>
 8001470:	a310      	add	r3, pc, #64	@ (adr r3, 80014b4 <ACVoltageMeasProcessing+0x54>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7fe ff27 	bl	80002c8 <__aeabi_dsub>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fbd1 	bl	8000c28 <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	60fb      	str	r3, [r7, #12]
	float eq_uac = u_diff * GAIN_MEAS_UAC;
 800148a:	edd7 7a03 	vldr	s15, [r7, #12]
 800148e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80014b0 <ACVoltageMeasProcessing+0x50>
 8001492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001496:	edc7 7a02 	vstr	s15, [r7, #8]
	//eq_uac = low_pass_filter(eq_uac,uac_buffer);
	return eq_uac;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	ee07 3a90 	vmov	s15, r3
}
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	43c84000 	.word	0x43c84000
 80014b4:	66666666 	.word	0x66666666
 80014b8:	3ffa6666 	.word	0x3ffa6666
 80014bc:	00000000 	.word	0x00000000

080014c0 <DCVoltageMeasProcessing>:

float DCVoltageMeasProcessing(float ad_volt){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	ed87 0a01 	vstr	s0, [r7, #4]
	float u_diff = ad_volt - ADC_UDC_OFFSET;
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff f85c 	bl	8000588 <__aeabi_f2d>
 80014d0:	a316      	add	r3, pc, #88	@ (adr r3, 800152c <DCVoltageMeasProcessing+0x6c>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7fe fef7 	bl	80002c8 <__aeabi_dsub>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fba1 	bl	8000c28 <__aeabi_d2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	60fb      	str	r3, [r7, #12]
	float eq_udc = u_diff * GAIN_MEAS_UDC;
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f7ff f84c 	bl	8000588 <__aeabi_f2d>
 80014f0:	a310      	add	r3, pc, #64	@ (adr r3, 8001534 <DCVoltageMeasProcessing+0x74>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f89f 	bl	8000638 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb91 	bl	8000c28 <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	60bb      	str	r3, [r7, #8]
	eq_udc = low_pass_filter(eq_udc,udc_buffer);
 800150a:	4807      	ldr	r0, [pc, #28]	@ (8001528 <DCVoltageMeasProcessing+0x68>)
 800150c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001510:	f7ff ff26 	bl	8001360 <low_pass_filter>
 8001514:	ed87 0a02 	vstr	s0, [r7, #8]
	return eq_udc;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	ee07 3a90 	vmov	s15, r3
}
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000524 	.word	0x20000524
 800152c:	e147ae14 	.word	0xe147ae14
 8001530:	3ffe147a 	.word	0x3ffe147a
 8001534:	47ae147b 	.word	0x47ae147b
 8001538:	408dd8e1 	.word	0x408dd8e1

0800153c <AnalogMeasRoutine>:

void AnalogMeasRoutine(){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
	float u_meas_uac = ad_volt_float[0];	// ADC voltage level ADC1 CH5	rank 1
 8001542:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <AnalogMeasRoutine+0xf4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
	float u_meas_udc = ad_volt_float[1];	// ADC voltage level ADC2 CH14	rank 1
 8001548:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <AnalogMeasRoutine+0xf4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60bb      	str	r3, [r7, #8]
	float u_meas_iac = ad_volt_float[2];	// ADC voltage level ADC3 CH4	rank 1
 800154e:	4b38      	ldr	r3, [pc, #224]	@ (8001630 <AnalogMeasRoutine+0xf4>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	607b      	str	r3, [r7, #4]

	uac = ACVoltageMeasProcessing(u_meas_uac);
 8001554:	ed97 0a03 	vldr	s0, [r7, #12]
 8001558:	f7ff ff82 	bl	8001460 <ACVoltageMeasProcessing>
 800155c:	eef0 7a40 	vmov.f32	s15, s0
 8001560:	4b34      	ldr	r3, [pc, #208]	@ (8001634 <AnalogMeasRoutine+0xf8>)
 8001562:	edc3 7a00 	vstr	s15, [r3]
	udc = DCVoltageMeasProcessing(u_meas_udc);
 8001566:	ed97 0a02 	vldr	s0, [r7, #8]
 800156a:	f7ff ffa9 	bl	80014c0 <DCVoltageMeasProcessing>
 800156e:	eef0 7a40 	vmov.f32	s15, s0
 8001572:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <AnalogMeasRoutine+0xfc>)
 8001574:	edc3 7a00 	vstr	s15, [r3]
	iac = ACCurrentMeasProcessing(u_meas_iac);
 8001578:	ed97 0a01 	vldr	s0, [r7, #4]
 800157c:	f7ff ff38 	bl	80013f0 <ACCurrentMeasProcessing>
 8001580:	eef0 7a40 	vmov.f32	s15, s0
 8001584:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <AnalogMeasRoutine+0x100>)
 8001586:	edc3 7a00 	vstr	s15, [r3]

	// store measurements in memory to export them
	if( (db_cnt_meas-1)<LOG_MEAS_NB) {
 800158a:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <AnalogMeasRoutine+0x104>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001592:	4293      	cmp	r3, r2
 8001594:	d847      	bhi.n	8001626 <AnalogMeasRoutine+0xea>
		db_meas[db_cnt_meas++] = u_meas_uac;
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <AnalogMeasRoutine+0x104>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	b291      	uxth	r1, r2
 800159e:	4a28      	ldr	r2, [pc, #160]	@ (8001640 <AnalogMeasRoutine+0x104>)
 80015a0:	8011      	strh	r1, [r2, #0]
 80015a2:	4a28      	ldr	r2, [pc, #160]	@ (8001644 <AnalogMeasRoutine+0x108>)
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	601a      	str	r2, [r3, #0]
		db_meas[db_cnt_meas++] = u_meas_udc;
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <AnalogMeasRoutine+0x104>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	b291      	uxth	r1, r2
 80015b4:	4a22      	ldr	r2, [pc, #136]	@ (8001640 <AnalogMeasRoutine+0x104>)
 80015b6:	8011      	strh	r1, [r2, #0]
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <AnalogMeasRoutine+0x108>)
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	601a      	str	r2, [r3, #0]
		db_meas[db_cnt_meas++] = u_meas_iac;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <AnalogMeasRoutine+0x104>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	b291      	uxth	r1, r2
 80015ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001640 <AnalogMeasRoutine+0x104>)
 80015cc:	8011      	strh	r1, [r2, #0]
 80015ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001644 <AnalogMeasRoutine+0x108>)
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	601a      	str	r2, [r3, #0]
		db_meas[db_cnt_meas++] = uac;
 80015d8:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <AnalogMeasRoutine+0x104>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	b291      	uxth	r1, r2
 80015e0:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <AnalogMeasRoutine+0x104>)
 80015e2:	8011      	strh	r1, [r2, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <AnalogMeasRoutine+0xf8>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4916      	ldr	r1, [pc, #88]	@ (8001644 <AnalogMeasRoutine+0x108>)
 80015ec:	0083      	lsls	r3, r0, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	601a      	str	r2, [r3, #0]
		db_meas[db_cnt_meas++] = udc;
 80015f2:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <AnalogMeasRoutine+0x104>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	b291      	uxth	r1, r2
 80015fa:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <AnalogMeasRoutine+0x104>)
 80015fc:	8011      	strh	r1, [r2, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <AnalogMeasRoutine+0xfc>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	490f      	ldr	r1, [pc, #60]	@ (8001644 <AnalogMeasRoutine+0x108>)
 8001606:	0083      	lsls	r3, r0, #2
 8001608:	440b      	add	r3, r1
 800160a:	601a      	str	r2, [r3, #0]
		db_meas[db_cnt_meas++] = iac;
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <AnalogMeasRoutine+0x104>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	b291      	uxth	r1, r2
 8001614:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <AnalogMeasRoutine+0x104>)
 8001616:	8011      	strh	r1, [r2, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <AnalogMeasRoutine+0x100>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4909      	ldr	r1, [pc, #36]	@ (8001644 <AnalogMeasRoutine+0x108>)
 8001620:	0083      	lsls	r3, r0, #2
 8001622:	440b      	add	r3, r1
 8001624:	601a      	str	r2, [r3, #0]
	}
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200143f4 	.word	0x200143f4
 8001634:	2000051c 	.word	0x2000051c
 8001638:	20000518 	.word	0x20000518
 800163c:	20000520 	.word	0x20000520
 8001640:	20013f78 	.word	0x20013f78
 8001644:	20000630 	.word	0x20000630

08001648 <FaultHandlingRoutine>:

void FaultHandlingRoutine(myInverterCtrlStruct *INV){
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_6)){				// gate driver fault
 8001650:	2140      	movs	r1, #64	@ 0x40
 8001652:	480b      	ldr	r0, [pc, #44]	@ (8001680 <FaultHandlingRoutine+0x38>)
 8001654:	f004 f9f0 	bl	8005a38 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <FaultHandlingRoutine+0x1c>
		INV->system_fault = GD_FAULT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2202      	movs	r2, #2
 8001662:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)){				// over current meas fault
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	4806      	ldr	r0, [pc, #24]	@ (8001680 <FaultHandlingRoutine+0x38>)
 8001668:	f004 f9e6 	bl	8005a38 <HAL_GPIO_ReadPin>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <FaultHandlingRoutine+0x30>
		INV->system_fault = CURRENT_MEAS_OCF;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
	}
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020c00 	.word	0x40020c00

08001684 <signalsManagmentRoutine>:


void signalsManagmentRoutine(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	// Fault handling
	FaultHandlingRoutine(&myInverter);
 8001688:	4803      	ldr	r0, [pc, #12]	@ (8001698 <signalsManagmentRoutine+0x14>)
 800168a:	f7ff ffdd 	bl	8001648 <FaultHandlingRoutine>
	// meas handling
	AnalogMeasRoutine();
 800168e:	f7ff ff55 	bl	800153c <AnalogMeasRoutine>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000578 	.word	0x20000578

0800169c <initInverterManagementStructure>:

/*************************************************************************/
//  PUBLIC FUNCTIONS
/*************************************************************************/
// init invetrer managment structure
void initInverterManagementStructure(myInverterConfig config){
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	myInverter.system_fault = NO_ERROR;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
	myInverter.delta_d = 0.0;
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
	myInverter.d_a = 0.0;
 80016b4:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
	myInverter.d_b = 0.0;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
	myInverter.d_c = 0.0;
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
	if(config == CONFIG_A){
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10c      	bne.n	80016ec <initInverterManagementStructure+0x50>
		myInverter.system_ctrl_strategy = SYM;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	705a      	strb	r2, [r3, #1]
		myInverter.Leg_A = true;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016da:	2201      	movs	r2, #1
 80016dc:	709a      	strb	r2, [r3, #2]
		myInverter.Leg_B = true;
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	70da      	strb	r2, [r3, #3]
		myInverter.Leg_C = false;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	711a      	strb	r2, [r3, #4]
		myInverter.system_ctrl_strategy = ASYM;
		myInverter.Leg_A = true;
		myInverter.Leg_B = false;
		myInverter.Leg_C = true;
	}
}
 80016ea:	e00b      	b.n	8001704 <initInverterManagementStructure+0x68>
		myInverter.system_ctrl_strategy = ASYM;
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	705a      	strb	r2, [r3, #1]
		myInverter.Leg_A = true;
 80016f2:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	709a      	strb	r2, [r3, #2]
		myInverter.Leg_B = false;
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <initInverterManagementStructure+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	70da      	strb	r2, [r3, #3]
		myInverter.Leg_C = true;
 80016fe:	4b04      	ldr	r3, [pc, #16]	@ (8001710 <initInverterManagementStructure+0x74>)
 8001700:	2201      	movs	r2, #1
 8001702:	711a      	strb	r2, [r3, #4]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20000578 	.word	0x20000578
 8001714:	00000000 	.word	0x00000000

08001718 <initSineLookupTable>:

// Lookup table init function
void initSineLookupTable(){
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	e027      	b.n	8001774 <initSineLookupTable+0x5c>
		sine_wave[i] = sin(2.0 * M_PI * (double)i / ((double)N));
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7fe ff1d 	bl	8000564 <__aeabi_i2d>
 800172a:	a319      	add	r3, pc, #100	@ (adr r3, 8001790 <initSineLookupTable+0x78>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff82 	bl	8000638 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <initSineLookupTable+0x70>)
 8001742:	f7ff f8a3 	bl	800088c <__aeabi_ddiv>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	ec43 2b17 	vmov	d7, r2, r3
 800174e:	eeb0 0a47 	vmov.f32	s0, s14
 8001752:	eef0 0a67 	vmov.f32	s1, s15
 8001756:	f00b fa3f 	bl	800cbd8 <sin>
 800175a:	eeb0 7a40 	vmov.f32	s14, s0
 800175e:	eef0 7a60 	vmov.f32	s15, s1
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <initSineLookupTable+0x74>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4413      	add	r3, r2
 800176a:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < N; i++) {
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3301      	adds	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b63      	cmp	r3, #99	@ 0x63
 8001778:	ddd4      	ble.n	8001724 <initSineLookupTable+0xc>
	}
}
 800177a:	bf00      	nop
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	40590000 	.word	0x40590000
 800178c:	200001f8 	.word	0x200001f8
 8001790:	54442d18 	.word	0x54442d18
 8001794:	401921fb 	.word	0x401921fb

08001798 <functionalTestRoutine>:

// functional test execution function
void functionalTestRoutine(TmyconvVSI *converter){
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	static int i = 0;
	static int period_counter = 0;

	// signals handling
	signalsManagmentRoutine();
 80017a0:	f7ff ff70 	bl	8001684 <signalsManagmentRoutine>
	/*
	if(myInverter.system_fault != NO_ERROR)
		converter->sm = SMFault;
	 */

	float udc = U_DC;		// fixed DC voltage value
 80017a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <functionalTestRoutine+0x80>)
 80017a6:	60fb      	str	r3, [r7, #12]
	//float udc = u_dc_ref;	// measured DC voltage value
	compute_duty_cycle(&myInverter, i, (float)SINE_AMPL, udc);
 80017a8:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <functionalTestRoutine+0x84>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	edd7 0a03 	vldr	s1, [r7, #12]
 80017b0:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001820 <functionalTestRoutine+0x88>
 80017b4:	4619      	mov	r1, r3
 80017b6:	481b      	ldr	r0, [pc, #108]	@ (8001824 <functionalTestRoutine+0x8c>)
 80017b8:	f7ff fc1c 	bl	8000ff4 <compute_duty_cycle>

	// converter.da used for higher CHx semiconductors
	converter->da[0] = myInverter.d_a;  // Update leg A
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <functionalTestRoutine+0x8c>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	649a      	str	r2, [r3, #72]	@ 0x48
	converter->da[1] = myInverter.d_b;  // Update leg B
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <functionalTestRoutine+0x8c>)
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	64da      	str	r2, [r3, #76]	@ 0x4c
	converter->da[2] = myInverter.d_c;  // Update leg C
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <functionalTestRoutine+0x8c>)
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	651a      	str	r2, [r3, #80]	@ 0x50
	// converter.db used for lower CHxN semiconductors
	converter->db[0] = myInverter.d_a;  // Update leg A
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <functionalTestRoutine+0x8c>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	659a      	str	r2, [r3, #88]	@ 0x58
	converter->db[1] = myInverter.d_b;  // Update leg B
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <functionalTestRoutine+0x8c>)
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	65da      	str	r2, [r3, #92]	@ 0x5c
	converter->db[2] = myInverter.d_c;  // Update leg C
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <functionalTestRoutine+0x8c>)
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	661a      	str	r2, [r3, #96]	@ 0x60


	// index and periods counter management
	i++;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <functionalTestRoutine+0x84>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <functionalTestRoutine+0x84>)
 80017f4:	6013      	str	r3, [r2, #0]
	if(i==N){
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <functionalTestRoutine+0x84>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b64      	cmp	r3, #100	@ 0x64
 80017fc:	d107      	bne.n	800180e <functionalTestRoutine+0x76>
		i=0;
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <functionalTestRoutine+0x84>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
		period_counter++;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <functionalTestRoutine+0x90>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <functionalTestRoutine+0x90>)
 800180c:	6013      	str	r3, [r2, #0]
	}
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	41200000 	.word	0x41200000
 800181c:	20000590 	.word	0x20000590
 8001820:	40f4ad23 	.word	0x40f4ad23
 8001824:	20000578 	.word	0x20000578
 8001828:	20000594 	.word	0x20000594

0800182c <DisplayMessageMeas>:
const char fault_str[] = "!Fault detected!\r\n";
const char stop_str[] = "Stop converter control\r\n";


void DisplayMessageMeas()
{
 800182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001830:	b09d      	sub	sp, #116	@ 0x74
 8001832:	af12      	add	r7, sp, #72	@ 0x48
	if( myconvvsi.sm == SMRun) {
 8001834:	4b3b      	ldr	r3, [pc, #236]	@ (8001924 <DisplayMessageMeas+0xf8>)
 8001836:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800183a:	2b03      	cmp	r3, #3
 800183c:	d16d      	bne.n	800191a <DisplayMessageMeas+0xee>
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
				(int)myconvvsi.k,
 800183e:	4b39      	ldr	r3, [pc, #228]	@ (8001924 <DisplayMessageMeas+0xf8>)
 8001840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 8001844:	461e      	mov	r6, r3
				(double)myconvvsi.umeas[0], (double)myconvvsi.umeas[1], (double)myconvvsi.umeas[2],
 8001846:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <DisplayMessageMeas+0xf8>)
 8001848:	68db      	ldr	r3, [r3, #12]
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe9c 	bl	8000588 <__aeabi_f2d>
 8001850:	e9c7 0108 	strd	r0, r1, [r7, #32]
				(double)myconvvsi.umeas[0], (double)myconvvsi.umeas[1], (double)myconvvsi.umeas[2],
 8001854:	4b33      	ldr	r3, [pc, #204]	@ (8001924 <DisplayMessageMeas+0xf8>)
 8001856:	691b      	ldr	r3, [r3, #16]
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe95 	bl	8000588 <__aeabi_f2d>
 800185e:	e9c7 0106 	strd	r0, r1, [r7, #24]
				(double)myconvvsi.umeas[0], (double)myconvvsi.umeas[1], (double)myconvvsi.umeas[2],
 8001862:	4b30      	ldr	r3, [pc, #192]	@ (8001924 <DisplayMessageMeas+0xf8>)
 8001864:	695b      	ldr	r3, [r3, #20]
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe8e 	bl	8000588 <__aeabi_f2d>
 800186c:	e9c7 0104 	strd	r0, r1, [r7, #16]
				(double)myconvvsi.ilemf[0], (double)myconvvsi.ilemf[1], (double)myconvvsi.ilemf[2],
 8001870:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <DisplayMessageMeas+0xf8>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe87 	bl	8000588 <__aeabi_f2d>
 800187a:	e9c7 0102 	strd	r0, r1, [r7, #8]
				(double)myconvvsi.ilemf[0], (double)myconvvsi.ilemf[1], (double)myconvvsi.ilemf[2],
 800187e:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <DisplayMessageMeas+0xf8>)
 8001880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe80 	bl	8000588 <__aeabi_f2d>
 8001888:	e9c7 0100 	strd	r0, r1, [r7]
				(double)myconvvsi.ilemf[0], (double)myconvvsi.ilemf[1], (double)myconvvsi.ilemf[2],
 800188c:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <DisplayMessageMeas+0xf8>)
 800188e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe79 	bl	8000588 <__aeabi_f2d>
 8001896:	4682      	mov	sl, r0
 8001898:	468b      	mov	fp, r1
				(double)myconvvsi.ilegf[0], (double)myconvvsi.ilegf[1], (double)myconvvsi.ilegf[2]
 800189a:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <DisplayMessageMeas+0xf8>)
 800189c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe72 	bl	8000588 <__aeabi_f2d>
 80018a4:	4680      	mov	r8, r0
 80018a6:	4689      	mov	r9, r1
				(double)myconvvsi.ilegf[0], (double)myconvvsi.ilegf[1], (double)myconvvsi.ilegf[2]
 80018a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <DisplayMessageMeas+0xf8>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe6b 	bl	8000588 <__aeabi_f2d>
 80018b2:	4604      	mov	r4, r0
 80018b4:	460d      	mov	r5, r1
				(double)myconvvsi.ilegf[0], (double)myconvvsi.ilegf[1], (double)myconvvsi.ilegf[2]
 80018b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <DisplayMessageMeas+0xf8>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
		sprintf( (char *)uart3txbuffer, "%d u123 = %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g %.4g\r\n",
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fe64 	bl	8000588 <__aeabi_f2d>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80018c8:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 80018cc:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80018d0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 80018d4:	ed97 7b00 	vldr	d7, [r7]
 80018d8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80018dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80018e0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80018e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018ec:	ed97 7b06 	vldr	d7, [r7, #24]
 80018f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80018f4:	ed97 7b08 	vldr	d7, [r7, #32]
 80018f8:	ed8d 7b00 	vstr	d7, [sp]
 80018fc:	4632      	mov	r2, r6
 80018fe:	490a      	ldr	r1, [pc, #40]	@ (8001928 <DisplayMessageMeas+0xfc>)
 8001900:	480a      	ldr	r0, [pc, #40]	@ (800192c <DisplayMessageMeas+0x100>)
 8001902:	f009 f837 	bl	800a974 <siprintf>
																												  );
		HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)strlen( (char *)uart3txbuffer));
 8001906:	4809      	ldr	r0, [pc, #36]	@ (800192c <DisplayMessageMeas+0x100>)
 8001908:	f7fe fcd2 	bl	80002b0 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	b29b      	uxth	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	4906      	ldr	r1, [pc, #24]	@ (800192c <DisplayMessageMeas+0x100>)
 8001914:	4806      	ldr	r0, [pc, #24]	@ (8001930 <DisplayMessageMeas+0x104>)
 8001916:	f006 ff7d 	bl	8008814 <HAL_UART_Transmit_DMA>
	}
}
 800191a:	bf00      	nop
 800191c:	372c      	adds	r7, #44	@ 0x2c
 800191e:	46bd      	mov	sp, r7
 8001920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001924:	20014404 	.word	0x20014404
 8001928:	0800dc38 	.word	0x0800dc38
 800192c:	200005ac 	.word	0x200005ac
 8001930:	200142d0 	.word	0x200142d0

08001934 <DisplayMessageInit>:


void DisplayMessageInit()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	sprintf( (char *)uart3txbuffer, start_str);
 8001938:	4905      	ldr	r1, [pc, #20]	@ (8001950 <DisplayMessageInit+0x1c>)
 800193a:	4806      	ldr	r0, [pc, #24]	@ (8001954 <DisplayMessageInit+0x20>)
 800193c:	f009 f81a 	bl	800a974 <siprintf>
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_str)-1);
 8001940:	2218      	movs	r2, #24
 8001942:	4904      	ldr	r1, [pc, #16]	@ (8001954 <DisplayMessageInit+0x20>)
 8001944:	4804      	ldr	r0, [pc, #16]	@ (8001958 <DisplayMessageInit+0x24>)
 8001946:	f006 ff65 	bl	8008814 <HAL_UART_Transmit_DMA>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800dc74 	.word	0x0800dc74
 8001954:	200005ac 	.word	0x200005ac
 8001958:	200142d0 	.word	0x200142d0

0800195c <DisplayMessageRun>:


void DisplayMessageRun()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	sprintf( (char *)uart3txbuffer, start_pwm_str);
 8001960:	4905      	ldr	r1, [pc, #20]	@ (8001978 <DisplayMessageRun+0x1c>)
 8001962:	4806      	ldr	r0, [pc, #24]	@ (800197c <DisplayMessageRun+0x20>)
 8001964:	f009 f806 	bl	800a974 <siprintf>
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(start_pwm_str)-1);
 8001968:	220e      	movs	r2, #14
 800196a:	4904      	ldr	r1, [pc, #16]	@ (800197c <DisplayMessageRun+0x20>)
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <DisplayMessageRun+0x24>)
 800196e:	f006 ff51 	bl	8008814 <HAL_UART_Transmit_DMA>
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	0800dc90 	.word	0x0800dc90
 800197c:	200005ac 	.word	0x200005ac
 8001980:	200142d0 	.word	0x200142d0

08001984 <DisplayMessageFault>:


void DisplayMessageFault()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	sprintf( (char *)uart3txbuffer, fault_str);
 8001988:	4905      	ldr	r1, [pc, #20]	@ (80019a0 <DisplayMessageFault+0x1c>)
 800198a:	4806      	ldr	r0, [pc, #24]	@ (80019a4 <DisplayMessageFault+0x20>)
 800198c:	f008 fff2 	bl	800a974 <siprintf>
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(fault_str)-1);
 8001990:	2212      	movs	r2, #18
 8001992:	4904      	ldr	r1, [pc, #16]	@ (80019a4 <DisplayMessageFault+0x20>)
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <DisplayMessageFault+0x24>)
 8001996:	f006 ff3d 	bl	8008814 <HAL_UART_Transmit_DMA>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	0800dca0 	.word	0x0800dca0
 80019a4:	200005ac 	.word	0x200005ac
 80019a8:	200142d0 	.word	0x200142d0

080019ac <DisplayMessageStop>:


void DisplayMessageStop()
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	sprintf( (char *)uart3txbuffer, stop_str);
 80019b0:	4905      	ldr	r1, [pc, #20]	@ (80019c8 <DisplayMessageStop+0x1c>)
 80019b2:	4806      	ldr	r0, [pc, #24]	@ (80019cc <DisplayMessageStop+0x20>)
 80019b4:	f008 ffde 	bl	800a974 <siprintf>
	HAL_UART_Transmit_DMA( &huart3, (uint8_t *)&uart3txbuffer[0], (uint16_t)sizeof(stop_str)-1);
 80019b8:	2218      	movs	r2, #24
 80019ba:	4904      	ldr	r1, [pc, #16]	@ (80019cc <DisplayMessageStop+0x20>)
 80019bc:	4804      	ldr	r0, [pc, #16]	@ (80019d0 <DisplayMessageStop+0x24>)
 80019be:	f006 ff29 	bl	8008814 <HAL_UART_Transmit_DMA>
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	0800dcb4 	.word	0x0800dcb4
 80019cc:	200005ac 	.word	0x200005ac
 80019d0:	200142d0 	.word	0x200142d0

080019d4 <huart3TxCpltCallback>:

static TCBStatus huart3Txstatus, huart3Rxstatus;


void huart3TxCpltCallback(struct __UART_HandleTypeDef *huart)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	huart3Txstatus.cnt++;
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <huart3TxCpltCallback+0x20>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <huart3TxCpltCallback+0x20>)
 80019e4:	6013      	str	r3, [r2, #0]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000610 	.word	0x20000610

080019f8 <huart3RxCpltCallback>:
uint8_t db_buffer_uart3[LENGTH_DB_BUFFER_UART3+2];
uint16_t db_cnt_buffer_uart3 = 0;


void huart3RxCpltCallback(struct __UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	huart3Rxstatus.cnt++;
 8001a00:	4bc1      	ldr	r3, [pc, #772]	@ (8001d08 <huart3RxCpltCallback+0x310>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	4ac0      	ldr	r2, [pc, #768]	@ (8001d08 <huart3RxCpltCallback+0x310>)
 8001a08:	6013      	str	r3, [r2, #0]

	// process the character coming from uart

	db_buffer_uart3[db_cnt_buffer_uart3++] = uart3rxbuffer[0];
 8001a0a:	4bc0      	ldr	r3, [pc, #768]	@ (8001d0c <huart3RxCpltCallback+0x314>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	b291      	uxth	r1, r2
 8001a12:	4abe      	ldr	r2, [pc, #760]	@ (8001d0c <huart3RxCpltCallback+0x314>)
 8001a14:	8011      	strh	r1, [r2, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4bbd      	ldr	r3, [pc, #756]	@ (8001d10 <huart3RxCpltCallback+0x318>)
 8001a1a:	7819      	ldrb	r1, [r3, #0]
 8001a1c:	4bbd      	ldr	r3, [pc, #756]	@ (8001d14 <huart3RxCpltCallback+0x31c>)
 8001a1e:	5499      	strb	r1, [r3, r2]
	if( db_cnt_buffer_uart3 >= LENGTH_DB_BUFFER_UART3)
 8001a20:	4bba      	ldr	r3, [pc, #744]	@ (8001d0c <huart3RxCpltCallback+0x314>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	2b13      	cmp	r3, #19
 8001a26:	d902      	bls.n	8001a2e <huart3RxCpltCallback+0x36>
		db_cnt_buffer_uart3 = 0;
 8001a28:	4bb8      	ldr	r3, [pc, #736]	@ (8001d0c <huart3RxCpltCallback+0x314>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]

	switch( uart3rxbuffer[0]) {
 8001a2e:	4bb8      	ldr	r3, [pc, #736]	@ (8001d10 <huart3RxCpltCallback+0x318>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	3b2b      	subs	r3, #43	@ 0x2b
 8001a34:	2b48      	cmp	r3, #72	@ 0x48
 8001a36:	f200 81a6 	bhi.w	8001d86 <huart3RxCpltCallback+0x38e>
 8001a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a40 <huart3RxCpltCallback+0x48>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001b79 	.word	0x08001b79
 8001a44:	08001d87 	.word	0x08001d87
 8001a48:	08001bbd 	.word	0x08001bbd
 8001a4c:	08001d87 	.word	0x08001d87
 8001a50:	08001d87 	.word	0x08001d87
 8001a54:	08001d87 	.word	0x08001d87
 8001a58:	08001b79 	.word	0x08001b79
 8001a5c:	08001bbd 	.word	0x08001bbd
 8001a60:	08001d87 	.word	0x08001d87
 8001a64:	08001d87 	.word	0x08001d87
 8001a68:	08001d49 	.word	0x08001d49
 8001a6c:	08001d65 	.word	0x08001d65
 8001a70:	08001d87 	.word	0x08001d87
 8001a74:	08001d87 	.word	0x08001d87
 8001a78:	08001d87 	.word	0x08001d87
 8001a7c:	08001d87 	.word	0x08001d87
 8001a80:	08001d87 	.word	0x08001d87
 8001a84:	08001d87 	.word	0x08001d87
 8001a88:	08001d87 	.word	0x08001d87
 8001a8c:	08001d87 	.word	0x08001d87
 8001a90:	08001d87 	.word	0x08001d87
 8001a94:	08001d87 	.word	0x08001d87
 8001a98:	08001d87 	.word	0x08001d87
 8001a9c:	08001d87 	.word	0x08001d87
 8001aa0:	08001d87 	.word	0x08001d87
 8001aa4:	08001d87 	.word	0x08001d87
 8001aa8:	08001d87 	.word	0x08001d87
 8001aac:	08001d87 	.word	0x08001d87
 8001ab0:	08001d87 	.word	0x08001d87
 8001ab4:	08001d87 	.word	0x08001d87
 8001ab8:	08001d87 	.word	0x08001d87
 8001abc:	08001d87 	.word	0x08001d87
 8001ac0:	08001d87 	.word	0x08001d87
 8001ac4:	08001d87 	.word	0x08001d87
 8001ac8:	08001d87 	.word	0x08001d87
 8001acc:	08001d87 	.word	0x08001d87
 8001ad0:	08001d87 	.word	0x08001d87
 8001ad4:	08001d87 	.word	0x08001d87
 8001ad8:	08001d87 	.word	0x08001d87
 8001adc:	08001d87 	.word	0x08001d87
 8001ae0:	08001d87 	.word	0x08001d87
 8001ae4:	08001d87 	.word	0x08001d87
 8001ae8:	08001d87 	.word	0x08001d87
 8001aec:	08001d87 	.word	0x08001d87
 8001af0:	08001d87 	.word	0x08001d87
 8001af4:	08001d87 	.word	0x08001d87
 8001af8:	08001d87 	.word	0x08001d87
 8001afc:	08001d87 	.word	0x08001d87
 8001b00:	08001d87 	.word	0x08001d87
 8001b04:	08001d87 	.word	0x08001d87
 8001b08:	08001d87 	.word	0x08001d87
 8001b0c:	08001d87 	.word	0x08001d87
 8001b10:	08001d87 	.word	0x08001d87
 8001b14:	08001d87 	.word	0x08001d87
 8001b18:	08001d87 	.word	0x08001d87
 8001b1c:	08001d87 	.word	0x08001d87
 8001b20:	08001d87 	.word	0x08001d87
 8001b24:	08001d87 	.word	0x08001d87
 8001b28:	08001d87 	.word	0x08001d87
 8001b2c:	08001c75 	.word	0x08001c75
 8001b30:	08001cbf 	.word	0x08001cbf
 8001b34:	08001d87 	.word	0x08001d87
 8001b38:	08001d87 	.word	0x08001d87
 8001b3c:	08001d87 	.word	0x08001d87
 8001b40:	08001d87 	.word	0x08001d87
 8001b44:	08001d87 	.word	0x08001d87
 8001b48:	08001c3b 	.word	0x08001c3b
 8001b4c:	08001d87 	.word	0x08001d87
 8001b50:	08001d87 	.word	0x08001d87
 8001b54:	08001bf7 	.word	0x08001bf7
 8001b58:	08001d87 	.word	0x08001d87
 8001b5c:	08001b65 	.word	0x08001b65
 8001b60:	08001b6f 	.word	0x08001b6f
	case 'r':
		myconvvsi.signal_run = true;
 8001b64:	4b6c      	ldr	r3, [pc, #432]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		break;
 8001b6c:	e10b      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
	case 's':
		myconvvsi.signal_stop = true;
 8001b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
		break;
 8001b76:	e106      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
	case '+':
	case '1':
		if( myconvvsi.ref<0.95)
 8001b78:	4b67      	ldr	r3, [pc, #412]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fd03 	bl	8000588 <__aeabi_f2d>
 8001b82:	a357      	add	r3, pc, #348	@ (adr r3, 8001ce0 <huart3RxCpltCallback+0x2e8>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe ffc8 	bl	8000b1c <__aeabi_dcmplt>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d100      	bne.n	8001b94 <huart3RxCpltCallback+0x19c>
			myconvvsi.ref += 0.01;
		break;
 8001b92:	e0f8      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
			myconvvsi.ref += 0.01;
 8001b94:	4b60      	ldr	r3, [pc, #384]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001b96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcf5 	bl	8000588 <__aeabi_f2d>
 8001b9e:	a352      	add	r3, pc, #328	@ (adr r3, 8001ce8 <huart3RxCpltCallback+0x2f0>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fb92 	bl	80002cc <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7ff f83a 	bl	8000c28 <__aeabi_d2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a58      	ldr	r2, [pc, #352]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001bb8:	6793      	str	r3, [r2, #120]	@ 0x78
		break;
 8001bba:	e0e4      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
	case '-':
	case '2':
		if( myconvvsi.ref>0.0)
 8001bbc:	4b56      	ldr	r3, [pc, #344]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001bbe:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8001bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	dc00      	bgt.n	8001bce <huart3RxCpltCallback+0x1d6>
			myconvvsi.ref -= 0.01;
		break;
 8001bcc:	e0db      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
			myconvvsi.ref -= 0.01;
 8001bce:	4b52      	ldr	r3, [pc, #328]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fcd8 	bl	8000588 <__aeabi_f2d>
 8001bd8:	a343      	add	r3, pc, #268	@ (adr r3, 8001ce8 <huart3RxCpltCallback+0x2f0>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fb73 	bl	80002c8 <__aeabi_dsub>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7ff f81d 	bl	8000c28 <__aeabi_d2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a49      	ldr	r2, [pc, #292]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001bf2:	6793      	str	r3, [r2, #120]	@ 0x78
		break;
 8001bf4:	e0c7      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
	case 'p':
		if( myconvvsi.ref0<0.45)
 8001bf6:	4b48      	ldr	r3, [pc, #288]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fcc4 	bl	8000588 <__aeabi_f2d>
 8001c00:	a33b      	add	r3, pc, #236	@ (adr r3, 8001cf0 <huart3RxCpltCallback+0x2f8>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe ff89 	bl	8000b1c <__aeabi_dcmplt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d100      	bne.n	8001c12 <huart3RxCpltCallback+0x21a>
			myconvvsi.ref0 += 0.01;
		break;
 8001c10:	e0b9      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
			myconvvsi.ref0 += 0.01;
 8001c12:	4b41      	ldr	r3, [pc, #260]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fcb6 	bl	8000588 <__aeabi_f2d>
 8001c1c:	a332      	add	r3, pc, #200	@ (adr r3, 8001ce8 <huart3RxCpltCallback+0x2f0>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fb53 	bl	80002cc <__adddf3>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe fffb 	bl	8000c28 <__aeabi_d2f>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4a38      	ldr	r2, [pc, #224]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001c36:	67d3      	str	r3, [r2, #124]	@ 0x7c
		break;
 8001c38:	e0a5      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
	case 'm':
		if( myconvvsi.ref0>0.0)
 8001c3a:	4b37      	ldr	r3, [pc, #220]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001c3c:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8001c40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	dc00      	bgt.n	8001c4c <huart3RxCpltCallback+0x254>
			myconvvsi.ref0 -= 0.01;
		break;
 8001c4a:	e09c      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
			myconvvsi.ref0 -= 0.01;
 8001c4c:	4b32      	ldr	r3, [pc, #200]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc99 	bl	8000588 <__aeabi_f2d>
 8001c56:	a324      	add	r3, pc, #144	@ (adr r3, 8001ce8 <huart3RxCpltCallback+0x2f0>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fb34 	bl	80002c8 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffde 	bl	8000c28 <__aeabi_d2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001c70:	67d3      	str	r3, [r2, #124]	@ 0x7c
		break;
 8001c72:	e088      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
	case 'f':
		if( myconvvsi.ref1<0.1)
 8001c74:	4b28      	ldr	r3, [pc, #160]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc84 	bl	8000588 <__aeabi_f2d>
 8001c80:	a31d      	add	r3, pc, #116	@ (adr r3, 8001cf8 <huart3RxCpltCallback+0x300>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe ff49 	bl	8000b1c <__aeabi_dcmplt>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d100      	bne.n	8001c92 <huart3RxCpltCallback+0x29a>
			myconvvsi.ref1 += 0.01;
		break;
 8001c90:	e079      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
			myconvvsi.ref1 += 0.01;
 8001c92:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc75 	bl	8000588 <__aeabi_f2d>
 8001c9e:	a312      	add	r3, pc, #72	@ (adr r3, 8001ce8 <huart3RxCpltCallback+0x2f0>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fb12 	bl	80002cc <__adddf3>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ffba 	bl	8000c28 <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001cb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
		break;
 8001cbc:	e063      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
	case 'g':
		if( myconvvsi.ref1>-0.1)
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <huart3RxCpltCallback+0x320>)
 8001cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc5f 	bl	8000588 <__aeabi_f2d>
 8001cca:	a30d      	add	r3, pc, #52	@ (adr r3, 8001d00 <huart3RxCpltCallback+0x308>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	f7fe ff42 	bl	8000b58 <__aeabi_dcmpgt>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d120      	bne.n	8001d1c <huart3RxCpltCallback+0x324>
			myconvvsi.ref1 -= 0.01;
		break;
 8001cda:	e054      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	66666666 	.word	0x66666666
 8001ce4:	3fee6666 	.word	0x3fee6666
 8001ce8:	47ae147b 	.word	0x47ae147b
 8001cec:	3f847ae1 	.word	0x3f847ae1
 8001cf0:	cccccccd 	.word	0xcccccccd
 8001cf4:	3fdccccc 	.word	0x3fdccccc
 8001cf8:	9999999a 	.word	0x9999999a
 8001cfc:	3fb99999 	.word	0x3fb99999
 8001d00:	9999999a 	.word	0x9999999a
 8001d04:	bfb99999 	.word	0xbfb99999
 8001d08:	20000614 	.word	0x20000614
 8001d0c:	2000062e 	.word	0x2000062e
 8001d10:	20000598 	.word	0x20000598
 8001d14:	20000618 	.word	0x20000618
 8001d18:	20014404 	.word	0x20014404
			myconvvsi.ref1 -= 0.01;
 8001d1c:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <huart3RxCpltCallback+0x3a8>)
 8001d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc30 	bl	8000588 <__aeabi_f2d>
 8001d28:	a31b      	add	r3, pc, #108	@ (adr r3, 8001d98 <huart3RxCpltCallback+0x3a0>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe facb 	bl	80002c8 <__aeabi_dsub>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe ff75 	bl	8000c28 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a17      	ldr	r2, [pc, #92]	@ (8001da0 <huart3RxCpltCallback+0x3a8>)
 8001d42:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
		break;
 8001d46:	e01e      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
	case '5':
		if( myconvvsi.mode<2)
 8001d48:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <huart3RxCpltCallback+0x3a8>)
 8001d4a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d816      	bhi.n	8001d80 <huart3RxCpltCallback+0x388>
			myconvvsi.mode++;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <huart3RxCpltCallback+0x3a8>)
 8001d54:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b10      	ldr	r3, [pc, #64]	@ (8001da0 <huart3RxCpltCallback+0x3a8>)
 8001d5e:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
		break;
 8001d62:	e00d      	b.n	8001d80 <huart3RxCpltCallback+0x388>
	case '6':
		if( myconvvsi.mode>0)
 8001d64:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <huart3RxCpltCallback+0x3a8>)
 8001d66:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <huart3RxCpltCallback+0x38c>
			myconvvsi.mode--;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <huart3RxCpltCallback+0x3a8>)
 8001d70:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <huart3RxCpltCallback+0x3a8>)
 8001d7a:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
		break;
 8001d7e:	e001      	b.n	8001d84 <huart3RxCpltCallback+0x38c>
		break;
 8001d80:	bf00      	nop
 8001d82:	e000      	b.n	8001d86 <huart3RxCpltCallback+0x38e>
		break;
 8001d84:	bf00      	nop
	default:
		;
	}
	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 8001d86:	2201      	movs	r2, #1
 8001d88:	4906      	ldr	r1, [pc, #24]	@ (8001da4 <huart3RxCpltCallback+0x3ac>)
 8001d8a:	4807      	ldr	r0, [pc, #28]	@ (8001da8 <huart3RxCpltCallback+0x3b0>)
 8001d8c:	f006 fcfe 	bl	800878c <HAL_UART_Receive_IT>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	47ae147b 	.word	0x47ae147b
 8001d9c:	3f847ae1 	.word	0x3f847ae1
 8001da0:	20014404 	.word	0x20014404
 8001da4:	20000598 	.word	0x20000598
 8001da8:	200142d0 	.word	0x200142d0

08001dac <InitDisplayUartConsole>:


void InitDisplayUartConsole()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	huart3.TxCpltCallback = huart3TxCpltCallback;
 8001db0:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <InitDisplayUartConsole+0x24>)
 8001db2:	4a08      	ldr	r2, [pc, #32]	@ (8001dd4 <InitDisplayUartConsole+0x28>)
 8001db4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	huart3.RxCpltCallback = huart3RxCpltCallback;
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <InitDisplayUartConsole+0x24>)
 8001dba:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <InitDisplayUartConsole+0x2c>)
 8001dbc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	HAL_UART_Receive_IT(&huart3, &uart3rxbuffer[0], 1);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4906      	ldr	r1, [pc, #24]	@ (8001ddc <InitDisplayUartConsole+0x30>)
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <InitDisplayUartConsole+0x24>)
 8001dc6:	f006 fce1 	bl	800878c <HAL_UART_Receive_IT>
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200142d0 	.word	0x200142d0
 8001dd4:	080019d5 	.word	0x080019d5
 8001dd8:	080019f9 	.word	0x080019f9
 8001ddc:	20000598 	.word	0x20000598

08001de0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001de4:	f3bf 8f4f 	dsb	sy
}
 8001de8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dea:	f3bf 8f6f 	isb	sy
}
 8001dee:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <SCB_EnableICache+0x48>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e04:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <SCB_EnableICache+0x48>)
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	4a07      	ldr	r2, [pc, #28]	@ (8001e28 <SCB_EnableICache+0x48>)
 8001e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e10:	f3bf 8f4f 	dsb	sy
}
 8001e14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e16:	f3bf 8f6f 	isb	sy
}
 8001e1a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001e30:	f7ff ffd6 	bl	8001de0 <SCB_EnableICache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e34:	f002 f8be 	bl	8003fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  //__HAL_RCC_DBGMCU_CLK_DISABLE();
  //HAL_RCC_DBGMCU_CLK_DISABLE();

  DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM1_STOP|DBGMCU_APB2_FZ_DBG_TIM8_STOP;
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <main+0x5c>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4a12      	ldr	r2, [pc, #72]	@ (8001e88 <main+0x5c>)
 8001e3e:	f043 0303 	orr.w	r3, r3, #3
 8001e42:	60d3      	str	r3, [r2, #12]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e44:	f000 f822 	bl	8001e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e48:	f000 fcba 	bl	80027c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e4c:	f000 fc86 	bl	800275c <MX_DMA_Init>
  MX_ADC1_Init();
 8001e50:	f000 f88a 	bl	8001f68 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001e54:	f000 fa66 	bl	8002324 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001e58:	f000 fc50 	bl	80026fc <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8001e5c:	f000 f8ee 	bl	800203c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001e60:	f000 f936 	bl	80020d0 <MX_ADC3_Init>
  MX_TIM8_Init();
 8001e64:	f000 fb78 	bl	8002558 <MX_TIM8_Init>
  MX_I2C1_Init();
 8001e68:	f000 f9dc 	bl	8002224 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001e6c:	f000 f97a 	bl	8002164 <MX_CAN1_Init>
  MX_I2C2_Init();
 8001e70:	f000 fa18 	bl	80022a4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001e74:	f000 fb0a 	bl	800248c <MX_TIM2_Init>
  MX_DAC_Init();
 8001e78:	f000 f9aa 	bl	80021d0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  InitConverterControlSystemPeripherals();
 8001e7c:	f000 feda 	bl	8002c34 <InitConverterControlSystemPeripherals>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	IdleProcess();
 8001e80:	f001 fac6 	bl	8003410 <IdleProcess>
  {
 8001e84:	bf00      	nop
 8001e86:	e7fb      	b.n	8001e80 <main+0x54>
 8001e88:	e0042000 	.word	0xe0042000

08001e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b094      	sub	sp, #80	@ 0x50
 8001e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	2230      	movs	r2, #48	@ 0x30
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f008 fdcf 	bl	800aa3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <SystemClock_Config+0xd4>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f60 <SystemClock_Config+0xd4>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <SystemClock_Config+0xd4>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec8:	4b26      	ldr	r3, [pc, #152]	@ (8001f64 <SystemClock_Config+0xd8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a25      	ldr	r2, [pc, #148]	@ (8001f64 <SystemClock_Config+0xd8>)
 8001ece:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b23      	ldr	r3, [pc, #140]	@ (8001f64 <SystemClock_Config+0xd8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ee4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eea:	2302      	movs	r3, #2
 8001eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001ef8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001efc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001efe:	2302      	movs	r3, #2
 8001f00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f06:	f107 0320 	add.w	r3, r7, #32
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 ff3e 	bl	8005d8c <HAL_RCC_OscConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001f16:	f000 fda5 	bl	8002a64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f1a:	f003 fee7 	bl	8005cec <HAL_PWREx_EnableOverDrive>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001f24:	f000 fd9e 	bl	8002a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f28:	230f      	movs	r3, #15
 8001f2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	2106      	movs	r1, #6
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 f9c4 	bl	80062d4 <HAL_RCC_ClockConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001f52:	f000 fd87 	bl	8002a64 <Error_Handler>
  }
}
 8001f56:	bf00      	nop
 8001f58:	3750      	adds	r7, #80	@ 0x50
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40007000 	.word	0x40007000

08001f68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f86:	4b2b      	ldr	r3, [pc, #172]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001f88:	4a2b      	ldr	r2, [pc, #172]	@ (8002038 <MX_ADC1_Init+0xd0>)
 8001f8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001f8c:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001f8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f94:	4b27      	ldr	r3, [pc, #156]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fa0:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fa6:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001fae:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001fb8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001fd2:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fd8:	4816      	ldr	r0, [pc, #88]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001fda:	f002 f843 	bl	8004064 <HAL_ADC_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001fe4:	f000 fd3e 	bl	8002a64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 8001fe8:	2316      	movs	r3, #22
 8001fea:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8001fec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ff0:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	480d      	ldr	r0, [pc, #52]	@ (8002034 <MX_ADC1_Init+0xcc>)
 8001ffe:	f002 fbd9 	bl	80047b4 <HAL_ADCEx_MultiModeConfigChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8002008:	f000 fd2c 	bl	8002a64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800200c:	2305      	movs	r3, #5
 800200e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002010:	2301      	movs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002014:	2301      	movs	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MX_ADC1_Init+0xcc>)
 800201e:	f002 f8a5 	bl	800416c <HAL_ADC_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002028:	f000 fd1c 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20013f7c 	.word	0x20013f7c
 8002038:	40012000 	.word	0x40012000

0800203c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002042:	463b      	mov	r3, r7
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800204e:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 8002050:	4a1e      	ldr	r2, [pc, #120]	@ (80020cc <MX_ADC2_Init+0x90>)
 8002052:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002054:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 8002056:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800205a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800205c:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002062:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 8002064:	2201      	movs	r2, #1
 8002066:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002076:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 800207e:	2201      	movs	r2, #1
 8002080:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002082:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002090:	480d      	ldr	r0, [pc, #52]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 8002092:	f001 ffe7 	bl	8004064 <HAL_ADC_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800209c:	f000 fce2 	bl	8002a64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80020a0:	230e      	movs	r3, #14
 80020a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80020a8:	2301      	movs	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80020ac:	463b      	mov	r3, r7
 80020ae:	4619      	mov	r1, r3
 80020b0:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <MX_ADC2_Init+0x8c>)
 80020b2:	f002 f85b 	bl	800416c <HAL_ADC_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80020bc:	f000 fcd2 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20013fe0 	.word	0x20013fe0
 80020cc:	40012100 	.word	0x40012100

080020d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020d6:	463b      	mov	r3, r7
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <MX_ADC3_Init+0x8c>)
 80020e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002160 <MX_ADC3_Init+0x90>)
 80020e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80020e8:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_ADC3_Init+0x8c>)
 80020ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_ADC3_Init+0x8c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	@ (800215c <MX_ADC3_Init+0x8c>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80020fc:	4b17      	ldr	r3, [pc, #92]	@ (800215c <MX_ADC3_Init+0x8c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <MX_ADC3_Init+0x8c>)
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <MX_ADC3_Init+0x8c>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <MX_ADC3_Init+0x8c>)
 8002112:	2201      	movs	r2, #1
 8002114:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <MX_ADC3_Init+0x8c>)
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800211e:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <MX_ADC3_Init+0x8c>)
 8002120:	2200      	movs	r2, #0
 8002122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002124:	480d      	ldr	r0, [pc, #52]	@ (800215c <MX_ADC3_Init+0x8c>)
 8002126:	f001 ff9d 	bl	8004064 <HAL_ADC_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8002130:	f000 fc98 	bl	8002a64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002134:	2304      	movs	r3, #4
 8002136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002138:	2301      	movs	r3, #1
 800213a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800213c:	2301      	movs	r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002140:	463b      	mov	r3, r7
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <MX_ADC3_Init+0x8c>)
 8002146:	f002 f811 	bl	800416c <HAL_ADC_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8002150:	f000 fc88 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20014044 	.word	0x20014044
 8002160:	40012200 	.word	0x40012200

08002164 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002168:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <MX_CAN1_Init+0x64>)
 800216a:	4a18      	ldr	r2, [pc, #96]	@ (80021cc <MX_CAN1_Init+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800216e:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <MX_CAN1_Init+0x64>)
 8002170:	2210      	movs	r2, #16
 8002172:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <MX_CAN1_Init+0x64>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <MX_CAN1_Init+0x64>)
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <MX_CAN1_Init+0x64>)
 8002182:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002186:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002188:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <MX_CAN1_Init+0x64>)
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <MX_CAN1_Init+0x64>)
 8002190:	2200      	movs	r2, #0
 8002192:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <MX_CAN1_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <MX_CAN1_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80021a0:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <MX_CAN1_Init+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <MX_CAN1_Init+0x64>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <MX_CAN1_Init+0x64>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80021b2:	4805      	ldr	r0, [pc, #20]	@ (80021c8 <MX_CAN1_Init+0x64>)
 80021b4:	f002 fbba 	bl	800492c <HAL_CAN_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80021be:	f000 fc51 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20014108 	.word	0x20014108
 80021cc:	40006400 	.word	0x40006400

080021d0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80021d6:	463b      	mov	r3, r7
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80021de:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <MX_DAC_Init+0x4c>)
 80021e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002220 <MX_DAC_Init+0x50>)
 80021e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80021e4:	480d      	ldr	r0, [pc, #52]	@ (800221c <MX_DAC_Init+0x4c>)
 80021e6:	f002 fdae 	bl	8004d46 <HAL_DAC_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80021f0:	f000 fc38 	bl	8002a64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021fc:	463b      	mov	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	@ (800221c <MX_DAC_Init+0x4c>)
 8002204:	f002 fe13 	bl	8004e2e <HAL_DAC_ConfigChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800220e:	f000 fc29 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20014130 	.word	0x20014130
 8002220:	40007400 	.word	0x40007400

08002224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <MX_I2C1_Init+0x74>)
 800222a:	4a1c      	ldr	r2, [pc, #112]	@ (800229c <MX_I2C1_Init+0x78>)
 800222c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <MX_I2C1_Init+0x74>)
 8002230:	4a1b      	ldr	r2, [pc, #108]	@ (80022a0 <MX_I2C1_Init+0x7c>)
 8002232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002234:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <MX_I2C1_Init+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800223a:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <MX_I2C1_Init+0x74>)
 800223c:	2201      	movs	r2, #1
 800223e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <MX_I2C1_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002246:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <MX_I2C1_Init+0x74>)
 8002248:	2200      	movs	r2, #0
 800224a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <MX_I2C1_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <MX_I2C1_Init+0x74>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <MX_I2C1_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800225e:	480e      	ldr	r0, [pc, #56]	@ (8002298 <MX_I2C1_Init+0x74>)
 8002260:	f003 fc1c 	bl	8005a9c <HAL_I2C_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800226a:	f000 fbfb 	bl	8002a64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800226e:	2100      	movs	r1, #0
 8002270:	4809      	ldr	r0, [pc, #36]	@ (8002298 <MX_I2C1_Init+0x74>)
 8002272:	f003 fca3 	bl	8005bbc <HAL_I2CEx_ConfigAnalogFilter>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800227c:	f000 fbf2 	bl	8002a64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002280:	2100      	movs	r1, #0
 8002282:	4805      	ldr	r0, [pc, #20]	@ (8002298 <MX_I2C1_Init+0x74>)
 8002284:	f003 fce5 	bl	8005c52 <HAL_I2CEx_ConfigDigitalFilter>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800228e:	f000 fbe9 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20014144 	.word	0x20014144
 800229c:	40005400 	.word	0x40005400
 80022a0:	00c0eaff 	.word	0x00c0eaff

080022a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022aa:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <MX_I2C2_Init+0x78>)
 80022ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002320 <MX_I2C2_Init+0x7c>)
 80022b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80022b4:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022ba:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022bc:	2201      	movs	r2, #1
 80022be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c0:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022cc:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d2:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022de:	480e      	ldr	r0, [pc, #56]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022e0:	f003 fbdc 	bl	8005a9c <HAL_I2C_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80022ea:	f000 fbbb 	bl	8002a64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022ee:	2100      	movs	r1, #0
 80022f0:	4809      	ldr	r0, [pc, #36]	@ (8002318 <MX_I2C2_Init+0x74>)
 80022f2:	f003 fc63 	bl	8005bbc <HAL_I2CEx_ConfigAnalogFilter>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80022fc:	f000 fbb2 	bl	8002a64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002300:	2100      	movs	r1, #0
 8002302:	4805      	ldr	r0, [pc, #20]	@ (8002318 <MX_I2C2_Init+0x74>)
 8002304:	f003 fca5 	bl	8005c52 <HAL_I2CEx_ConfigDigitalFilter>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800230e:	f000 fba9 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20014198 	.word	0x20014198
 800231c:	40005800 	.word	0x40005800
 8002320:	00c0eaff 	.word	0x00c0eaff

08002324 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b096      	sub	sp, #88	@ 0x58
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002336:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	222c      	movs	r2, #44	@ 0x2c
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f008 fb74 	bl	800aa3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002356:	4b4b      	ldr	r3, [pc, #300]	@ (8002484 <MX_TIM1_Init+0x160>)
 8002358:	4a4b      	ldr	r2, [pc, #300]	@ (8002488 <MX_TIM1_Init+0x164>)
 800235a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800235c:	4b49      	ldr	r3, [pc, #292]	@ (8002484 <MX_TIM1_Init+0x160>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002362:	4b48      	ldr	r3, [pc, #288]	@ (8002484 <MX_TIM1_Init+0x160>)
 8002364:	2220      	movs	r2, #32
 8002366:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002368:	4b46      	ldr	r3, [pc, #280]	@ (8002484 <MX_TIM1_Init+0x160>)
 800236a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800236e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	4b44      	ldr	r3, [pc, #272]	@ (8002484 <MX_TIM1_Init+0x160>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002376:	4b43      	ldr	r3, [pc, #268]	@ (8002484 <MX_TIM1_Init+0x160>)
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b41      	ldr	r3, [pc, #260]	@ (8002484 <MX_TIM1_Init+0x160>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002382:	4840      	ldr	r0, [pc, #256]	@ (8002484 <MX_TIM1_Init+0x160>)
 8002384:	f004 fe84 	bl	8007090 <HAL_TIM_PWM_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800238e:	f000 fb69 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002392:	2310      	movs	r3, #16
 8002394:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8002396:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800239a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023a4:	4619      	mov	r1, r3
 80023a6:	4837      	ldr	r0, [pc, #220]	@ (8002484 <MX_TIM1_Init+0x160>)
 80023a8:	f006 f842 	bl	8008430 <HAL_TIMEx_MasterConfigSynchronization>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80023b2:	f000 fb57 	bl	8002a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b6:	2360      	movs	r3, #96	@ 0x60
 80023b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023be:	2300      	movs	r3, #0
 80023c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023d6:	2200      	movs	r2, #0
 80023d8:	4619      	mov	r1, r3
 80023da:	482a      	ldr	r0, [pc, #168]	@ (8002484 <MX_TIM1_Init+0x160>)
 80023dc:	f005 f94a 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80023e6:	f000 fb3d 	bl	8002a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023ee:	2204      	movs	r2, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4824      	ldr	r0, [pc, #144]	@ (8002484 <MX_TIM1_Init+0x160>)
 80023f4:	f005 f93e 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80023fe:	f000 fb31 	bl	8002a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002402:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002406:	2208      	movs	r2, #8
 8002408:	4619      	mov	r1, r3
 800240a:	481e      	ldr	r0, [pc, #120]	@ (8002484 <MX_TIM1_Init+0x160>)
 800240c:	f005 f932 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002416:	f000 fb25 	bl	8002a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800241a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800241e:	220c      	movs	r2, #12
 8002420:	4619      	mov	r1, r3
 8002422:	4818      	ldr	r0, [pc, #96]	@ (8002484 <MX_TIM1_Init+0x160>)
 8002424:	f005 f926 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800242e:	f000 fb19 	bl	8002a64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 230;
 800243e:	23e6      	movs	r3, #230	@ 0xe6
 8002440:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002446:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800244a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 1;
 800244c:	2301      	movs	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002454:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4807      	ldr	r0, [pc, #28]	@ (8002484 <MX_TIM1_Init+0x160>)
 8002468:	f006 f870 	bl	800854c <HAL_TIMEx_ConfigBreakDeadTime>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8002472:	f000 faf7 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002476:	4803      	ldr	r0, [pc, #12]	@ (8002484 <MX_TIM1_Init+0x160>)
 8002478:	f001 fae2 	bl	8003a40 <HAL_TIM_MspPostInit>

}
 800247c:	bf00      	nop
 800247e:	3758      	adds	r7, #88	@ 0x58
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200141ec 	.word	0x200141ec
 8002488:	40010000 	.word	0x40010000

0800248c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	@ 0x28
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800249e:	463b      	mov	r3, r7
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
 80024ac:	615a      	str	r2, [r3, #20]
 80024ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024b0:	4b28      	ldr	r3, [pc, #160]	@ (8002554 <MX_TIM2_Init+0xc8>)
 80024b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80024b8:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <MX_TIM2_Init+0xc8>)
 80024ba:	2263      	movs	r2, #99	@ 0x63
 80024bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024be:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <MX_TIM2_Init+0xc8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 80024c4:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <MX_TIM2_Init+0xc8>)
 80024c6:	22c7      	movs	r2, #199	@ 0xc7
 80024c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ca:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <MX_TIM2_Init+0xc8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d0:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <MX_TIM2_Init+0xc8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024d6:	481f      	ldr	r0, [pc, #124]	@ (8002554 <MX_TIM2_Init+0xc8>)
 80024d8:	f004 fdda 	bl	8007090 <HAL_TIM_PWM_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80024e2:	f000 fabf 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4619      	mov	r1, r3
 80024f4:	4817      	ldr	r0, [pc, #92]	@ (8002554 <MX_TIM2_Init+0xc8>)
 80024f6:	f005 ff9b 	bl	8008430 <HAL_TIMEx_MasterConfigSynchronization>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002500:	f000 fab0 	bl	8002a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002504:	2360      	movs	r3, #96	@ 0x60
 8002506:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 8002508:	2364      	movs	r3, #100	@ 0x64
 800250a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	2208      	movs	r2, #8
 8002518:	4619      	mov	r1, r3
 800251a:	480e      	ldr	r0, [pc, #56]	@ (8002554 <MX_TIM2_Init+0xc8>)
 800251c:	f005 f8aa 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002526:	f000 fa9d 	bl	8002a64 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800252e:	463b      	mov	r3, r7
 8002530:	220c      	movs	r2, #12
 8002532:	4619      	mov	r1, r3
 8002534:	4807      	ldr	r0, [pc, #28]	@ (8002554 <MX_TIM2_Init+0xc8>)
 8002536:	f005 f89d 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002540:	f000 fa90 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002544:	4803      	ldr	r0, [pc, #12]	@ (8002554 <MX_TIM2_Init+0xc8>)
 8002546:	f001 fa7b 	bl	8003a40 <HAL_TIM_MspPostInit>

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	@ 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20014238 	.word	0x20014238

08002558 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b09a      	sub	sp, #104	@ 0x68
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800255e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	615a      	str	r2, [r3, #20]
 800258c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800258e:	463b      	mov	r3, r7
 8002590:	222c      	movs	r2, #44	@ 0x2c
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f008 fa52 	bl	800aa3e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800259a:	4b56      	ldr	r3, [pc, #344]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 800259c:	4a56      	ldr	r2, [pc, #344]	@ (80026f8 <MX_TIM8_Init+0x1a0>)
 800259e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025a0:	4b54      	ldr	r3, [pc, #336]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80025a6:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80025a8:	2220      	movs	r2, #32
 80025aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 80025ac:	4b51      	ldr	r3, [pc, #324]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80025ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80025b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b4:	4b4f      	ldr	r3, [pc, #316]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025ba:	4b4e      	ldr	r3, [pc, #312]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c0:	4b4c      	ldr	r3, [pc, #304]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80025c6:	484b      	ldr	r0, [pc, #300]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80025c8:	f004 fc9a 	bl	8006f00 <HAL_TIM_Base_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80025d2:	f000 fa47 	bl	8002a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80025d6:	4847      	ldr	r0, [pc, #284]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80025d8:	f004 fd5a 	bl	8007090 <HAL_TIM_PWM_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80025e2:	f000 fa3f 	bl	8002a64 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80025e6:	2306      	movs	r3, #6
 80025e8:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80025ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025f2:	4619      	mov	r1, r3
 80025f4:	483f      	ldr	r0, [pc, #252]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80025f6:	f005 f951 	bl	800789c <HAL_TIM_SlaveConfigSynchro>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM8_Init+0xac>
  {
    Error_Handler();
 8002600:	f000 fa30 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002610:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002614:	4619      	mov	r1, r3
 8002616:	4837      	ldr	r0, [pc, #220]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 8002618:	f005 ff0a 	bl	8008430 <HAL_TIMEx_MasterConfigSynchronization>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 8002622:	f000 fa1f 	bl	8002a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002626:	2360      	movs	r3, #96	@ 0x60
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262e:	2300      	movs	r3, #0
 8002630:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002632:	2300      	movs	r3, #0
 8002634:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002642:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002646:	2200      	movs	r2, #0
 8002648:	4619      	mov	r1, r3
 800264a:	482a      	ldr	r0, [pc, #168]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 800264c:	f005 f812 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8002656:	f000 fa05 	bl	8002a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800265a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800265e:	2204      	movs	r2, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4824      	ldr	r0, [pc, #144]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 8002664:	f005 f806 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM8_Init+0x11a>
  {
    Error_Handler();
 800266e:	f000 f9f9 	bl	8002a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002672:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002676:	2208      	movs	r2, #8
 8002678:	4619      	mov	r1, r3
 800267a:	481e      	ldr	r0, [pc, #120]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 800267c:	f004 fffa 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM8_Init+0x132>
  {
    Error_Handler();
 8002686:	f000 f9ed 	bl	8002a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800268a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800268e:	220c      	movs	r2, #12
 8002690:	4619      	mov	r1, r3
 8002692:	4818      	ldr	r0, [pc, #96]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 8002694:	f004 ffee 	bl	8007674 <HAL_TIM_PWM_ConfigChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 800269e:	f000 f9e1 	bl	8002a64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 230;
 80026ae:	23e6      	movs	r3, #230	@ 0xe6
 80026b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 1;
 80026bc:	2301      	movs	r3, #1
 80026be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80026d2:	463b      	mov	r3, r7
 80026d4:	4619      	mov	r1, r3
 80026d6:	4807      	ldr	r0, [pc, #28]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80026d8:	f005 ff38 	bl	800854c <HAL_TIMEx_ConfigBreakDeadTime>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 80026e2:	f000 f9bf 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80026e6:	4803      	ldr	r0, [pc, #12]	@ (80026f4 <MX_TIM8_Init+0x19c>)
 80026e8:	f001 f9aa 	bl	8003a40 <HAL_TIM_MspPostInit>

}
 80026ec:	bf00      	nop
 80026ee:	3768      	adds	r7, #104	@ 0x68
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20014284 	.word	0x20014284
 80026f8:	40010400 	.word	0x40010400

080026fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002700:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 8002702:	4a15      	ldr	r2, [pc, #84]	@ (8002758 <MX_USART3_UART_Init+0x5c>)
 8002704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002706:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 8002708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800270c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800271a:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002732:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002738:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800273e:	4805      	ldr	r0, [pc, #20]	@ (8002754 <MX_USART3_UART_Init+0x58>)
 8002740:	f005 ffc6 	bl	80086d0 <HAL_UART_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800274a:	f000 f98b 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200142d0 	.word	0x200142d0
 8002758:	40004800 	.word	0x40004800

0800275c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002762:	4b16      	ldr	r3, [pc, #88]	@ (80027bc <MX_DMA_Init+0x60>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a15      	ldr	r2, [pc, #84]	@ (80027bc <MX_DMA_Init+0x60>)
 8002768:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <MX_DMA_Init+0x60>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <MX_DMA_Init+0x60>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a0f      	ldr	r2, [pc, #60]	@ (80027bc <MX_DMA_Init+0x60>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <MX_DMA_Init+0x60>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	200f      	movs	r0, #15
 8002798:	f002 fa9f 	bl	8004cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800279c:	200f      	movs	r0, #15
 800279e:	f002 fab8 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	203c      	movs	r0, #60	@ 0x3c
 80027a8:	f002 fa97 	bl	8004cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80027ac:	203c      	movs	r0, #60	@ 0x3c
 80027ae:	f002 fab0 	bl	8004d12 <HAL_NVIC_EnableIRQ>

}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800

080027c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08e      	sub	sp, #56	@ 0x38
 80027c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027d6:	4b9b      	ldr	r3, [pc, #620]	@ (8002a44 <MX_GPIO_Init+0x284>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	4a9a      	ldr	r2, [pc, #616]	@ (8002a44 <MX_GPIO_Init+0x284>)
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e2:	4b98      	ldr	r3, [pc, #608]	@ (8002a44 <MX_GPIO_Init+0x284>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ee:	4b95      	ldr	r3, [pc, #596]	@ (8002a44 <MX_GPIO_Init+0x284>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	4a94      	ldr	r2, [pc, #592]	@ (8002a44 <MX_GPIO_Init+0x284>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fa:	4b92      	ldr	r3, [pc, #584]	@ (8002a44 <MX_GPIO_Init+0x284>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002806:	4b8f      	ldr	r3, [pc, #572]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a8e      	ldr	r2, [pc, #568]	@ (8002a44 <MX_GPIO_Init+0x284>)
 800280c:	f043 0320 	orr.w	r3, r3, #32
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b8c      	ldr	r3, [pc, #560]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800281e:	4b89      	ldr	r3, [pc, #548]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a88      	ldr	r2, [pc, #544]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b86      	ldr	r3, [pc, #536]	@ (8002a44 <MX_GPIO_Init+0x284>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	4b83      	ldr	r3, [pc, #524]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4a82      	ldr	r2, [pc, #520]	@ (8002a44 <MX_GPIO_Init+0x284>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4b80      	ldr	r3, [pc, #512]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a7c      	ldr	r2, [pc, #496]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a44 <MX_GPIO_Init+0x284>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002866:	4b77      	ldr	r3, [pc, #476]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	4a76      	ldr	r2, [pc, #472]	@ (8002a44 <MX_GPIO_Init+0x284>)
 800286c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002870:	6313      	str	r3, [r2, #48]	@ 0x30
 8002872:	4b74      	ldr	r3, [pc, #464]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800287e:	4b71      	ldr	r3, [pc, #452]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a70      	ldr	r2, [pc, #448]	@ (8002a44 <MX_GPIO_Init+0x284>)
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a44 <MX_GPIO_Init+0x284>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002896:	2200      	movs	r2, #0
 8002898:	2181      	movs	r1, #129	@ 0x81
 800289a:	486b      	ldr	r0, [pc, #428]	@ (8002a48 <MX_GPIO_Init+0x288>)
 800289c:	f003 f8e4 	bl	8005a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 80028a0:	2200      	movs	r2, #0
 80028a2:	f64c 4118 	movw	r1, #52248	@ 0xcc18
 80028a6:	4869      	ldr	r0, [pc, #420]	@ (8002a4c <MX_GPIO_Init+0x28c>)
 80028a8:	f003 f8de 	bl	8005a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE7 PE15 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_15|GPIO_PIN_0
 80028ac:	f248 038b 	movw	r3, #32907	@ 0x808b
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028be:	4619      	mov	r1, r3
 80028c0:	4863      	ldr	r0, [pc, #396]	@ (8002a50 <MX_GPIO_Init+0x290>)
 80028c2:	f002 ff0d 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80028c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80028d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028da:	4619      	mov	r1, r3
 80028dc:	485d      	ldr	r0, [pc, #372]	@ (8002a54 <MX_GPIO_Init+0x294>)
 80028de:	f002 feff 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80028e2:	f64f 0304 	movw	r3, #63492	@ 0xf804
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f4:	4619      	mov	r1, r3
 80028f6:	4858      	ldr	r0, [pc, #352]	@ (8002a58 <MX_GPIO_Init+0x298>)
 80028f8:	f002 fef2 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80028fc:	2381      	movs	r3, #129	@ 0x81
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002900:	2301      	movs	r3, #1
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002910:	4619      	mov	r1, r3
 8002912:	484d      	ldr	r0, [pc, #308]	@ (8002a48 <MX_GPIO_Init+0x288>)
 8002914:	f002 fee4 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 USB_OverCurrent_Pin
                           PG8 PG9 PG10 PG12
                           PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002918:	f24d 73ff 	movw	r3, #55295	@ 0xd7ff
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|USB_OverCurrent_Pin
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291e:	2300      	movs	r3, #0
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800292a:	4619      	mov	r1, r3
 800292c:	484b      	ldr	r0, [pc, #300]	@ (8002a5c <MX_GPIO_Init+0x29c>)
 800292e:	f002 fed7 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8002932:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002938:	2300      	movs	r3, #0
 800293a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002944:	4619      	mov	r1, r3
 8002946:	4840      	ldr	r0, [pc, #256]	@ (8002a48 <MX_GPIO_Init+0x288>)
 8002948:	f002 feca 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800294c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295a:	2303      	movs	r3, #3
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800295e:	230b      	movs	r3, #11
 8002960:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002966:	4619      	mov	r1, r3
 8002968:	4837      	ldr	r0, [pc, #220]	@ (8002a48 <MX_GPIO_Init+0x288>)
 800296a:	f002 feb9 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 800296e:	f64c 4318 	movw	r3, #52248	@ 0xcc18
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002974:	2301      	movs	r3, #1
 8002976:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297c:	2300      	movs	r3, #0
 800297e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002984:	4619      	mov	r1, r3
 8002986:	4831      	ldr	r0, [pc, #196]	@ (8002a4c <MX_GPIO_Init+0x28c>)
 8002988:	f002 feaa 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800298c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299a:	2303      	movs	r3, #3
 800299c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800299e:	230a      	movs	r3, #10
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a6:	4619      	mov	r1, r3
 80029a8:	482d      	ldr	r0, [pc, #180]	@ (8002a60 <MX_GPIO_Init+0x2a0>)
 80029aa:	f002 fe99 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c0:	4619      	mov	r1, r3
 80029c2:	4827      	ldr	r0, [pc, #156]	@ (8002a60 <MX_GPIO_Init+0x2a0>)
 80029c4:	f002 fe8c 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029da:	4619      	mov	r1, r3
 80029dc:	481d      	ldr	r0, [pc, #116]	@ (8002a54 <MX_GPIO_Init+0x294>)
 80029de:	f002 fe7f 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029e2:	23e4      	movs	r3, #228	@ 0xe4
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029f2:	4619      	mov	r1, r3
 80029f4:	4815      	ldr	r0, [pc, #84]	@ (8002a4c <MX_GPIO_Init+0x28c>)
 80029f6:	f002 fe73 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80029fa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a0c:	230b      	movs	r3, #11
 8002a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a14:	4619      	mov	r1, r3
 8002a16:	4811      	ldr	r0, [pc, #68]	@ (8002a5c <MX_GPIO_Init+0x29c>)
 8002a18:	f002 fe62 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a1c:	2330      	movs	r3, #48	@ 0x30
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a34:	4619      	mov	r1, r3
 8002a36:	4804      	ldr	r0, [pc, #16]	@ (8002a48 <MX_GPIO_Init+0x288>)
 8002a38:	f002 fe52 	bl	80056e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a3c:	bf00      	nop
 8002a3e:	3738      	adds	r7, #56	@ 0x38
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40021400 	.word	0x40021400
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40020000 	.word	0x40020000

08002a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a68:	b672      	cpsid	i
}
 8002a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <Error_Handler+0x8>

08002a70 <RunControlAtEachSamplingPeriodEx1>:


int counter = 0;

void RunControlAtEachSamplingPeriodEx1()
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
	counter = counter + 1;
 8002a74:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <RunControlAtEachSamplingPeriodEx1+0x18>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	4a03      	ldr	r2, [pc, #12]	@ (8002a88 <RunControlAtEachSamplingPeriodEx1+0x18>)
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	200143e4 	.word	0x200143e4
 8002a8c:	00000000 	.word	0x00000000

08002a90 <StartPWMFan>:
};



void StartPWMFan()
{
 8002a90:	b598      	push	{r3, r4, r7, lr}
 8002a92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a94:	2108      	movs	r1, #8
 8002a96:	481c      	ldr	r0, [pc, #112]	@ (8002b08 <StartPWMFan+0x78>)
 8002a98:	f004 fb52 	bl	8007140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002a9c:	210c      	movs	r1, #12
 8002a9e:	481a      	ldr	r0, [pc, #104]	@ (8002b08 <StartPWMFan+0x78>)
 8002aa0:	f004 fb4e 	bl	8007140 <HAL_TIM_PWM_Start>
	TIM2->CCR3 = TIM2->ARR*0.01;
 8002aa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd4a 	bl	8000544 <__aeabi_ui2d>
 8002ab0:	a313      	add	r3, pc, #76	@ (adr r3, 8002b00 <StartPWMFan+0x70>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fd fdbf 	bl	8000638 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7fe f88f 	bl	8000be8 <__aeabi_d2uiz>
 8002aca:	4603      	mov	r3, r0
 8002acc:	63e3      	str	r3, [r4, #60]	@ 0x3c
	TIM2->CCR3 = TIM2->ARR*0.01;
 8002ace:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd35 	bl	8000544 <__aeabi_ui2d>
 8002ada:	a309      	add	r3, pc, #36	@ (adr r3, 8002b00 <StartPWMFan+0x70>)
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f7fd fdaa 	bl	8000638 <__aeabi_dmul>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7fe f87a 	bl	8000be8 <__aeabi_d2uiz>
 8002af4:	4603      	mov	r3, r0
 8002af6:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8002af8:	bf00      	nop
 8002afa:	bd98      	pop	{r3, r4, r7, pc}
 8002afc:	f3af 8000 	nop.w
 8002b00:	47ae147b 	.word	0x47ae147b
 8002b04:	3f847ae1 	.word	0x3f847ae1
 8002b08:	20014238 	.word	0x20014238

08002b0c <StartPWM>:


void StartPWM()
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002b10:	2100      	movs	r1, #0
 8002b12:	4822      	ldr	r0, [pc, #136]	@ (8002b9c <StartPWM+0x90>)
 8002b14:	f004 fb14 	bl	8007140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002b18:	2104      	movs	r1, #4
 8002b1a:	4820      	ldr	r0, [pc, #128]	@ (8002b9c <StartPWM+0x90>)
 8002b1c:	f004 fb10 	bl	8007140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002b20:	2108      	movs	r1, #8
 8002b22:	481e      	ldr	r0, [pc, #120]	@ (8002b9c <StartPWM+0x90>)
 8002b24:	f004 fb0c 	bl	8007140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002b28:	210c      	movs	r1, #12
 8002b2a:	481c      	ldr	r0, [pc, #112]	@ (8002b9c <StartPWM+0x90>)
 8002b2c:	f004 fb08 	bl	8007140 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8002b30:	2100      	movs	r1, #0
 8002b32:	481a      	ldr	r0, [pc, #104]	@ (8002b9c <StartPWM+0x90>)
 8002b34:	f005 fb5c 	bl	80081f0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8002b38:	2104      	movs	r1, #4
 8002b3a:	4818      	ldr	r0, [pc, #96]	@ (8002b9c <StartPWM+0x90>)
 8002b3c:	f005 fb58 	bl	80081f0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8002b40:	2108      	movs	r1, #8
 8002b42:	4816      	ldr	r0, [pc, #88]	@ (8002b9c <StartPWM+0x90>)
 8002b44:	f005 fb54 	bl	80081f0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8002b48:	210c      	movs	r1, #12
 8002b4a:	4814      	ldr	r0, [pc, #80]	@ (8002b9c <StartPWM+0x90>)
 8002b4c:	f005 fb50 	bl	80081f0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_5);
 8002b50:	2110      	movs	r1, #16
 8002b52:	4812      	ldr	r0, [pc, #72]	@ (8002b9c <StartPWM+0x90>)
 8002b54:	f004 faf4 	bl	8007140 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4811      	ldr	r0, [pc, #68]	@ (8002ba0 <StartPWM+0x94>)
 8002b5c:	f004 faf0 	bl	8007140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002b60:	2104      	movs	r1, #4
 8002b62:	480f      	ldr	r0, [pc, #60]	@ (8002ba0 <StartPWM+0x94>)
 8002b64:	f004 faec 	bl	8007140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002b68:	2108      	movs	r1, #8
 8002b6a:	480d      	ldr	r0, [pc, #52]	@ (8002ba0 <StartPWM+0x94>)
 8002b6c:	f004 fae8 	bl	8007140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002b70:	210c      	movs	r1, #12
 8002b72:	480b      	ldr	r0, [pc, #44]	@ (8002ba0 <StartPWM+0x94>)
 8002b74:	f004 fae4 	bl	8007140 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4809      	ldr	r0, [pc, #36]	@ (8002ba0 <StartPWM+0x94>)
 8002b7c:	f005 fb38 	bl	80081f0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002b80:	2104      	movs	r1, #4
 8002b82:	4807      	ldr	r0, [pc, #28]	@ (8002ba0 <StartPWM+0x94>)
 8002b84:	f005 fb34 	bl	80081f0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002b88:	2108      	movs	r1, #8
 8002b8a:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <StartPWM+0x94>)
 8002b8c:	f005 fb30 	bl	80081f0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 8002b90:	2110      	movs	r1, #16
 8002b92:	4803      	ldr	r0, [pc, #12]	@ (8002ba0 <StartPWM+0x94>)
 8002b94:	f004 fad4 	bl	8007140 <HAL_TIM_PWM_Start>
}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20014284 	.word	0x20014284
 8002ba0:	200141ec 	.word	0x200141ec

08002ba4 <StopPWM>:


void StopPWM()
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4820      	ldr	r0, [pc, #128]	@ (8002c2c <StopPWM+0x88>)
 8002bac:	f004 fbc2 	bl	8007334 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	481e      	ldr	r0, [pc, #120]	@ (8002c2c <StopPWM+0x88>)
 8002bb4:	f004 fbbe 	bl	8007334 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8002bb8:	2108      	movs	r1, #8
 8002bba:	481c      	ldr	r0, [pc, #112]	@ (8002c2c <StopPWM+0x88>)
 8002bbc:	f004 fbba 	bl	8007334 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
 8002bc0:	210c      	movs	r1, #12
 8002bc2:	481a      	ldr	r0, [pc, #104]	@ (8002c2c <StopPWM+0x88>)
 8002bc4:	f004 fbb6 	bl	8007334 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4818      	ldr	r0, [pc, #96]	@ (8002c2c <StopPWM+0x88>)
 8002bcc:	f005 fbd2 	bl	8008374 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	4816      	ldr	r0, [pc, #88]	@ (8002c2c <StopPWM+0x88>)
 8002bd4:	f005 fbce 	bl	8008374 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8002bd8:	2108      	movs	r1, #8
 8002bda:	4814      	ldr	r0, [pc, #80]	@ (8002c2c <StopPWM+0x88>)
 8002bdc:	f005 fbca 	bl	8008374 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_4);
 8002be0:	210c      	movs	r1, #12
 8002be2:	4812      	ldr	r0, [pc, #72]	@ (8002c2c <StopPWM+0x88>)
 8002be4:	f005 fbc6 	bl	8008374 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002be8:	2100      	movs	r1, #0
 8002bea:	4811      	ldr	r0, [pc, #68]	@ (8002c30 <StopPWM+0x8c>)
 8002bec:	f004 fba2 	bl	8007334 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	480f      	ldr	r0, [pc, #60]	@ (8002c30 <StopPWM+0x8c>)
 8002bf4:	f004 fb9e 	bl	8007334 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002bf8:	2108      	movs	r1, #8
 8002bfa:	480d      	ldr	r0, [pc, #52]	@ (8002c30 <StopPWM+0x8c>)
 8002bfc:	f004 fb9a 	bl	8007334 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8002c00:	210c      	movs	r1, #12
 8002c02:	480b      	ldr	r0, [pc, #44]	@ (8002c30 <StopPWM+0x8c>)
 8002c04:	f004 fb96 	bl	8007334 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4809      	ldr	r0, [pc, #36]	@ (8002c30 <StopPWM+0x8c>)
 8002c0c:	f005 fbb2 	bl	8008374 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002c10:	2104      	movs	r1, #4
 8002c12:	4807      	ldr	r0, [pc, #28]	@ (8002c30 <StopPWM+0x8c>)
 8002c14:	f005 fbae 	bl	8008374 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8002c18:	2108      	movs	r1, #8
 8002c1a:	4805      	ldr	r0, [pc, #20]	@ (8002c30 <StopPWM+0x8c>)
 8002c1c:	f005 fbaa 	bl	8008374 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 8002c20:	210c      	movs	r1, #12
 8002c22:	4803      	ldr	r0, [pc, #12]	@ (8002c30 <StopPWM+0x8c>)
 8002c24:	f005 fba6 	bl	8008374 <HAL_TIMEx_PWMN_Stop>
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20014284 	.word	0x20014284
 8002c30:	200141ec 	.word	0x200141ec

08002c34 <InitConverterControlSystemPeripherals>:


void InitConverterControlSystemPeripherals()
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
	// Init ADC

	hadc1.ConvCpltCallback = ADCCompleteCallback;
 8002c38:	4b27      	ldr	r3, [pc, #156]	@ (8002cd8 <InitConverterControlSystemPeripherals+0xa4>)
 8002c3a:	4a28      	ldr	r2, [pc, #160]	@ (8002cdc <InitConverterControlSystemPeripherals+0xa8>)
 8002c3c:	649a      	str	r2, [r3, #72]	@ 0x48
	hadc1.ConvHalfCpltCallback = ADCHalfCompleteCallback;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	@ (8002cd8 <InitConverterControlSystemPeripherals+0xa4>)
 8002c40:	4a27      	ldr	r2, [pc, #156]	@ (8002ce0 <InitConverterControlSystemPeripherals+0xac>)
 8002c42:	64da      	str	r2, [r3, #76]	@ 0x4c
	hadc1.ErrorCallback = ADCErrorCallback;
 8002c44:	4b24      	ldr	r3, [pc, #144]	@ (8002cd8 <InitConverterControlSystemPeripherals+0xa4>)
 8002c46:	4a27      	ldr	r2, [pc, #156]	@ (8002ce4 <InitConverterControlSystemPeripherals+0xb0>)
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54

	__HAL_ADC_ENABLE(&hadc3);
 8002c4a:	4b27      	ldr	r3, [pc, #156]	@ (8002ce8 <InitConverterControlSystemPeripherals+0xb4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	4b25      	ldr	r3, [pc, #148]	@ (8002ce8 <InitConverterControlSystemPeripherals+0xb4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc2);
 8002c5a:	4b24      	ldr	r3, [pc, #144]	@ (8002cec <InitConverterControlSystemPeripherals+0xb8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	4b22      	ldr	r3, [pc, #136]	@ (8002cec <InitConverterControlSystemPeripherals+0xb8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc1);
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <InitConverterControlSystemPeripherals+0xa4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <InitConverterControlSystemPeripherals+0xa4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE_IT(&hadc1, ( ADC_IT_OVR));
 8002c7a:	4b17      	ldr	r3, [pc, #92]	@ (8002cd8 <InitConverterControlSystemPeripherals+0xa4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <InitConverterControlSystemPeripherals+0xa4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c88:	605a      	str	r2, [r3, #4]
	__HAL_ADC_ENABLE_IT(&hadc2, ( ADC_IT_OVR));
 8002c8a:	4b18      	ldr	r3, [pc, #96]	@ (8002cec <InitConverterControlSystemPeripherals+0xb8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4b16      	ldr	r3, [pc, #88]	@ (8002cec <InitConverterControlSystemPeripherals+0xb8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c98:	605a      	str	r2, [r3, #4]
	__HAL_ADC_ENABLE_IT(&hadc3, ( ADC_IT_OVR));
 8002c9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <InitConverterControlSystemPeripherals+0xb4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <InitConverterControlSystemPeripherals+0xb4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002ca8:	605a      	str	r2, [r3, #4]

	// Launch DMA to be ready to receive next AD values

	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)&ad_dma_buffer[0], NB_AD_VALUES);
 8002caa:	2203      	movs	r2, #3
 8002cac:	4910      	ldr	r1, [pc, #64]	@ (8002cf0 <InitConverterControlSystemPeripherals+0xbc>)
 8002cae:	480a      	ldr	r0, [pc, #40]	@ (8002cd8 <InitConverterControlSystemPeripherals+0xa4>)
 8002cb0:	f001 fcac 	bl	800460c <HAL_ADCEx_MultiModeStart_DMA>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	480f      	ldr	r0, [pc, #60]	@ (8002cf4 <InitConverterControlSystemPeripherals+0xc0>)
 8002cb8:	f002 f867 	bl	8004d8a <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	480d      	ldr	r0, [pc, #52]	@ (8002cf4 <InitConverterControlSystemPeripherals+0xc0>)
 8002cc0:	f002 f863 	bl	8004d8a <HAL_DAC_Start>

	// Init Timer 1 and 8

	HAL_TIM_Base_Start(&htim8);
 8002cc4:	480c      	ldr	r0, [pc, #48]	@ (8002cf8 <InitConverterControlSystemPeripherals+0xc4>)
 8002cc6:	f004 f973 	bl	8006fb0 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim1);
 8002cca:	480c      	ldr	r0, [pc, #48]	@ (8002cfc <InitConverterControlSystemPeripherals+0xc8>)
 8002ccc:	f004 f970 	bl	8006fb0 <HAL_TIM_Base_Start>

	// Init UART for communicating with PC

	InitDisplayUartConsole();
 8002cd0:	f7ff f86c 	bl	8001dac <InitDisplayUartConsole>
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20013f7c 	.word	0x20013f7c
 8002cdc:	08002d61 	.word	0x08002d61
 8002ce0:	080032f1 	.word	0x080032f1
 8002ce4:	080032cd 	.word	0x080032cd
 8002ce8:	20014044 	.word	0x20014044
 8002cec:	20013fe0 	.word	0x20013fe0
 8002cf0:	200143ec 	.word	0x200143ec
 8002cf4:	20014130 	.word	0x20014130
 8002cf8:	20014284 	.word	0x20014284
 8002cfc:	200141ec 	.word	0x200141ec

08002d00 <InitControlProcess>:
#define GAIN_U_MEAS 54.0
#define GAIN_I_MEAS_LEM (2000.0/75.0)


void InitControlProcess()
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
	for( uint16_t k_tmp=0; k_tmp<4; k_tmp++) {
 8002d06:	2300      	movs	r3, #0
 8002d08:	80fb      	strh	r3, [r7, #6]
 8002d0a:	e00a      	b.n	8002d22 <InitControlProcess+0x22>
		myconvvsi.da[k_tmp] = 0;
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <InitControlProcess+0x58>)
 8002d10:	3312      	adds	r3, #18
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
	for( uint16_t k_tmp=0; k_tmp<4; k_tmp++) {
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	80fb      	strh	r3, [r7, #6]
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d9f1      	bls.n	8002d0c <InitControlProcess+0xc>
	}
	for( uint16_t k_tmp=0; k_tmp<4; k_tmp++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	80bb      	strh	r3, [r7, #4]
 8002d2c:	e00a      	b.n	8002d44 <InitControlProcess+0x44>
		myconvvsi.db[k_tmp] = 0;
 8002d2e:	88bb      	ldrh	r3, [r7, #4]
 8002d30:	4a09      	ldr	r2, [pc, #36]	@ (8002d58 <InitControlProcess+0x58>)
 8002d32:	3316      	adds	r3, #22
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
	for( uint16_t k_tmp=0; k_tmp<4; k_tmp++) {
 8002d3e:	88bb      	ldrh	r3, [r7, #4]
 8002d40:	3301      	adds	r3, #1
 8002d42:	80bb      	strh	r3, [r7, #4]
 8002d44:	88bb      	ldrh	r3, [r7, #4]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d9f1      	bls.n	8002d2e <InitControlProcess+0x2e>
	}
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	20014404 	.word	0x20014404
 8002d5c:	00000000 	.word	0x00000000

08002d60 <ADCCompleteCallback>:
#ifdef CONVERTER_PLEXI
GPIO_PinState pin_state = 0;
#endif

void ADCCompleteCallback(ADC_HandleTypeDef* hadc)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	db_ADCCompleteCallback++;
 8002d68:	4bab      	ldr	r3, [pc, #684]	@ (8003018 <ADCCompleteCallback+0x2b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4aaa      	ldr	r2, [pc, #680]	@ (8003018 <ADCCompleteCallback+0x2b8>)
 8002d70:	6013      	str	r3, [r2, #0]
	pin_state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
#endif

	// convert 12 bit integer values to the voltage measured at input of ADC

	for( uint16_t k_tmp=0; k_tmp<3*AD_RANK; k_tmp++) {
 8002d72:	2300      	movs	r3, #0
 8002d74:	81fb      	strh	r3, [r7, #14]
 8002d76:	e01f      	b.n	8002db8 <ADCCompleteCallback+0x58>
		ad_volt_float[k_tmp] = 3.3/4096.0*(float)ad_dma_buffer[k_tmp];
 8002d78:	89fb      	ldrh	r3, [r7, #14]
 8002d7a:	4aa8      	ldr	r2, [pc, #672]	@ (800301c <ADCCompleteCallback+0x2bc>)
 8002d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d88:	ee17 0a90 	vmov	r0, s15
 8002d8c:	f7fd fbfc 	bl	8000588 <__aeabi_f2d>
 8002d90:	a39d      	add	r3, pc, #628	@ (adr r3, 8003008 <ADCCompleteCallback+0x2a8>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fd fc4f 	bl	8000638 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	89fc      	ldrh	r4, [r7, #14]
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	f7fd ff40 	bl	8000c28 <__aeabi_d2f>
 8002da8:	4602      	mov	r2, r0
 8002daa:	499d      	ldr	r1, [pc, #628]	@ (8003020 <ADCCompleteCallback+0x2c0>)
 8002dac:	00a3      	lsls	r3, r4, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	601a      	str	r2, [r3, #0]
	for( uint16_t k_tmp=0; k_tmp<3*AD_RANK; k_tmp++) {
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	3301      	adds	r3, #1
 8002db6:	81fb      	strh	r3, [r7, #14]
 8002db8:	89fb      	ldrh	r3, [r7, #14]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d9dc      	bls.n	8002d78 <ADCCompleteCallback+0x18>
	}

	// Run state machine

	switch(myconvvsi.sm) {
 8002dbe:	4b99      	ldr	r3, [pc, #612]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002dc0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	f200 8136 	bhi.w	8003036 <ADCCompleteCallback+0x2d6>
 8002dca:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd0 <ADCCompleteCallback+0x70>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002df5 	.word	0x08002df5
 8002dd4:	08002e35 	.word	0x08002e35
 8002dd8:	08002e69 	.word	0x08002e69
 8002ddc:	08002e99 	.word	0x08002e99
 8002de0:	08002ec7 	.word	0x08002ec7
 8002de4:	08002fab 	.word	0x08002fab
 8002de8:	08003037 	.word	0x08003037
 8002dec:	08002fbd 	.word	0x08002fbd
 8002df0:	08002fcf 	.word	0x08002fcf

	// Initialize control system and move to next state

	case SMInit:
		myconvvsi.k = 0;
 8002df4:	4b8b      	ldr	r3, [pc, #556]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		InitControlProcess();
 8002dfc:	f7ff ff80 	bl	8002d00 <InitControlProcess>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);		// reset cmd
 8002e00:	2200      	movs	r2, #0
 8002e02:	2108      	movs	r1, #8
 8002e04:	4888      	ldr	r0, [pc, #544]	@ (8003028 <ADCCompleteCallback+0x2c8>)
 8002e06:	f002 fe2f 	bl	8005a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);		// set 0 to Vi- (not used)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2110      	movs	r1, #16
 8002e0e:	4886      	ldr	r0, [pc, #536]	@ (8003028 <ADCCompleteCallback+0x2c8>)
 8002e10:	f002 fe2a 	bl	8005a68 <HAL_GPIO_WritePin>
		DisplayMessageInit();
 8002e14:	f7fe fd8e 	bl	8001934 <DisplayMessageInit>
		StartPWMFan();
 8002e18:	f7ff fe3a 	bl	8002a90 <StartPWMFan>
		initInverterManagementStructure(inverterConfiguration);
 8002e1c:	4b83      	ldr	r3, [pc, #524]	@ (800302c <ADCCompleteCallback+0x2cc>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fc3b 	bl	800169c <initInverterManagementStructure>
		initSineLookupTable();
 8002e26:	f7fe fc77 	bl	8001718 <initSineLookupTable>
		myconvvsi.sm = SMWaitForRun;
 8002e2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		break;
 8002e32:	e100      	b.n	8003036 <ADCCompleteCallback+0x2d6>

	// Wait for the user to give the start order from the PC via USB and UART

	case SMWaitForRun:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);			// reset clear cmd
 8002e34:	2201      	movs	r2, #1
 8002e36:	2108      	movs	r1, #8
 8002e38:	487b      	ldr	r0, [pc, #492]	@ (8003028 <ADCCompleteCallback+0x2c8>)
 8002e3a:	f002 fe15 	bl	8005a68 <HAL_GPIO_WritePin>
		if( myconvvsi.signal_run) {
 8002e3e:	4b79      	ldr	r3, [pc, #484]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e40:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80d6 	beq.w	8002ff6 <ADCCompleteCallback+0x296>
			myconvvsi.sm = SMStartPWM;
 8002e4a:	4b76      	ldr	r3, [pc, #472]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			myconvvsi.k = 0;
 8002e52:	4b74      	ldr	r3, [pc, #464]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			myconvvsi.signal_run = false;
 8002e5a:	4b72      	ldr	r3, [pc, #456]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
			DisplayMessageRun();
 8002e62:	f7fe fd7b 	bl	800195c <DisplayMessageRun>
		}
		break;
 8002e66:	e0c6      	b.n	8002ff6 <ADCCompleteCallback+0x296>

	case SMStartPWM:
		if( myconvvsi.k == 1) {
 8002e68:	4b6e      	ldr	r3, [pc, #440]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <ADCCompleteCallback+0x118>
			StartPWM();
 8002e72:	f7ff fe4b 	bl	8002b0c <StartPWM>

		} else if( myconvvsi.k > 800) { // 10 -> 200
			myconvvsi.k = 0;
			myconvvsi.sm = SMRun;
		}
		break;
 8002e76:	e0c0      	b.n	8002ffa <ADCCompleteCallback+0x29a>
		} else if( myconvvsi.k > 800) { // 10 -> 200
 8002e78:	4b6a      	ldr	r3, [pc, #424]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e7e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8002e82:	f240 80ba 	bls.w	8002ffa <ADCCompleteCallback+0x29a>
			myconvvsi.k = 0;
 8002e86:	4b67      	ldr	r3, [pc, #412]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			myconvvsi.sm = SMRun;
 8002e8e:	4b65      	ldr	r3, [pc, #404]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e90:	2203      	movs	r2, #3
 8002e92:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		break;
 8002e96:	e0b0      	b.n	8002ffa <ADCCompleteCallback+0x29a>

	case SMRun:
		if( myconvvsi.signal_stop) {
 8002e98:	4b62      	ldr	r3, [pc, #392]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002e9a:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <ADCCompleteCallback+0x15a>
			myconvvsi.k = 0;
 8002ea2:	4b60      	ldr	r3, [pc, #384]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			myconvvsi.sm = SMSoftStop;
 8002eaa:	4b5e      	ldr	r3, [pc, #376]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002eac:	2204      	movs	r2, #4
 8002eae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			myconvvsi.signal_stop = false;
 8002eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
		if( pin_state != GPIO_PIN_SET) {
			myconvvsi.sm = SMFault;
		}
#endif

		functionalTestRoutine(&myconvvsi);
 8002eba:	485a      	ldr	r0, [pc, #360]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002ebc:	f7fe fc6c 	bl	8001798 <functionalTestRoutine>

		// call you control function here

		RunControlAtEachSamplingPeriodEx1();
 8002ec0:	f7ff fdd6 	bl	8002a70 <RunControlAtEachSamplingPeriodEx1>
		break;
 8002ec4:	e0b7      	b.n	8003036 <ADCCompleteCallback+0x2d6>

	case SMSoftStop:
		if( myconvvsi.ref0 > 0) {
 8002ec6:	4b57      	ldr	r3, [pc, #348]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002ec8:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8002ecc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed4:	dd24      	ble.n	8002f20 <ADCCompleteCallback+0x1c0>
			myconvvsi.k = 0;
 8002ed6:	4b53      	ldr	r3, [pc, #332]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			myconvvsi.ref0 -= 0.002;
 8002ede:	4b51      	ldr	r3, [pc, #324]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fb50 	bl	8000588 <__aeabi_f2d>
 8002ee8:	a349      	add	r3, pc, #292	@ (adr r3, 8003010 <ADCCompleteCallback+0x2b0>)
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	f7fd f9eb 	bl	80002c8 <__aeabi_dsub>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f7fd fe95 	bl	8000c28 <__aeabi_d2f>
 8002efe:	4603      	mov	r3, r0
 8002f00:	4a48      	ldr	r2, [pc, #288]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f02:	67d3      	str	r3, [r2, #124]	@ 0x7c
			if( myconvvsi.ref0 < 0) {
 8002f04:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f06:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8002f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f12:	d400      	bmi.n	8002f16 <ADCCompleteCallback+0x1b6>
#ifdef CONVERTER_PLEXI
		if( pin_state != GPIO_PIN_SET) {
			myconvvsi.sm = SMFault;
		}
#endif
		break;
 8002f14:	e073      	b.n	8002ffe <ADCCompleteCallback+0x29e>
				myconvvsi.ref0 = 0;
 8002f16:	4b43      	ldr	r3, [pc, #268]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	67da      	str	r2, [r3, #124]	@ 0x7c
		break;
 8002f1e:	e06e      	b.n	8002ffe <ADCCompleteCallback+0x29e>
		} else if( myconvvsi.ref>0) {
 8002f20:	4b40      	ldr	r3, [pc, #256]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f22:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8002f26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	dd24      	ble.n	8002f7a <ADCCompleteCallback+0x21a>
			myconvvsi.k = 0;
 8002f30:	4b3c      	ldr	r3, [pc, #240]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			myconvvsi.ref -= 0.002;
 8002f38:	4b3a      	ldr	r3, [pc, #232]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fb23 	bl	8000588 <__aeabi_f2d>
 8002f42:	a333      	add	r3, pc, #204	@ (adr r3, 8003010 <ADCCompleteCallback+0x2b0>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd f9be 	bl	80002c8 <__aeabi_dsub>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	f7fd fe68 	bl	8000c28 <__aeabi_d2f>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4a32      	ldr	r2, [pc, #200]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f5c:	6793      	str	r3, [r2, #120]	@ 0x78
			if( myconvvsi.ref < 0) {
 8002f5e:	4b31      	ldr	r3, [pc, #196]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f60:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8002f64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6c:	d400      	bmi.n	8002f70 <ADCCompleteCallback+0x210>
		break;
 8002f6e:	e046      	b.n	8002ffe <ADCCompleteCallback+0x29e>
				myconvvsi.ref = 0;
 8002f70:	4b2c      	ldr	r3, [pc, #176]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	679a      	str	r2, [r3, #120]	@ 0x78
		break;
 8002f78:	e041      	b.n	8002ffe <ADCCompleteCallback+0x29e>
		} else if(myconvvsi.k>10){
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f80:	2b0a      	cmp	r3, #10
 8002f82:	d908      	bls.n	8002f96 <ADCCompleteCallback+0x236>
			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002f84:	2100      	movs	r1, #0
 8002f86:	482a      	ldr	r0, [pc, #168]	@ (8003030 <ADCCompleteCallback+0x2d0>)
 8002f88:	f004 f9d4 	bl	8007334 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8002f8c:	2108      	movs	r1, #8
 8002f8e:	4828      	ldr	r0, [pc, #160]	@ (8003030 <ADCCompleteCallback+0x2d0>)
 8002f90:	f004 f9d0 	bl	8007334 <HAL_TIM_PWM_Stop>
		break;
 8002f94:	e033      	b.n	8002ffe <ADCCompleteCallback+0x29e>
		} else if(myconvvsi.k>15){
 8002f96:	4b23      	ldr	r3, [pc, #140]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f9c:	2b0f      	cmp	r3, #15
 8002f9e:	d92e      	bls.n	8002ffe <ADCCompleteCallback+0x29e>
			myconvvsi.sm = SMStop;
 8002fa0:	4b20      	ldr	r3, [pc, #128]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		break;
 8002fa8:	e029      	b.n	8002ffe <ADCCompleteCallback+0x29e>

	case SMFault:
		StopPWM();
 8002faa:	f7ff fdfb 	bl	8002ba4 <StopPWM>
		DisplayMessageFault();
 8002fae:	f7fe fce9 	bl	8001984 <DisplayMessageFault>
		myconvvsi.sm = SMFaultSignal;
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002fb4:	2206      	movs	r2, #6
 8002fb6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		break;
 8002fba:	e03c      	b.n	8003036 <ADCCompleteCallback+0x2d6>

	case SMFaultSignal:
		break;

	case SMStop:
		StopPWM();
 8002fbc:	f7ff fdf2 	bl	8002ba4 <StopPWM>
		DisplayMessageStop();
 8002fc0:	f7fe fcf4 	bl	80019ac <DisplayMessageStop>
		myconvvsi.sm = SMStopSignal;
 8002fc4:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		break;
 8002fcc:	e033      	b.n	8003036 <ADCCompleteCallback+0x2d6>

	case SMStopSignal:
		if( myconvvsi.signal_run) {
 8002fce:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002fd0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02d      	beq.n	8003034 <ADCCompleteCallback+0x2d4>
			myconvvsi.sm = SMStartPWM;
 8002fd8:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			myconvvsi.k = 0;
 8002fe0:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			myconvvsi.signal_run = false;
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <ADCCompleteCallback+0x2c4>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
			DisplayMessageRun();
 8002ff0:	f7fe fcb4 	bl	800195c <DisplayMessageRun>
		}
		break;
 8002ff4:	e01e      	b.n	8003034 <ADCCompleteCallback+0x2d4>
		break;
 8002ff6:	bf00      	nop
 8002ff8:	e01d      	b.n	8003036 <ADCCompleteCallback+0x2d6>
		break;
 8002ffa:	bf00      	nop
 8002ffc:	e01b      	b.n	8003036 <ADCCompleteCallback+0x2d6>
		break;
 8002ffe:	bf00      	nop
 8003000:	e019      	b.n	8003036 <ADCCompleteCallback+0x2d6>
 8003002:	bf00      	nop
 8003004:	f3af 8000 	nop.w
 8003008:	66666666 	.word	0x66666666
 800300c:	3f4a6666 	.word	0x3f4a6666
 8003010:	d2f1a9fc 	.word	0xd2f1a9fc
 8003014:	3f60624d 	.word	0x3f60624d
 8003018:	20014494 	.word	0x20014494
 800301c:	200143ec 	.word	0x200143ec
 8003020:	200143f4 	.word	0x200143f4
 8003024:	20014404 	.word	0x20014404
 8003028:	40020c00 	.word	0x40020c00
 800302c:	200143e8 	.word	0x200143e8
 8003030:	20014284 	.word	0x20014284
		break;
 8003034:	bf00      	nop
	}

	// Apply duty cycles on Timer 1

	float arr = TIM1->ARR+1;
 8003036:	4ba1      	ldr	r3, [pc, #644]	@ (80032bc <ADCCompleteCallback+0x55c>)
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	3301      	adds	r3, #1
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003044:	edc7 7a02 	vstr	s15, [r7, #8]

	TIM1->CCR1 = arr * myconvvsi.da[0]+0.5;
 8003048:	4b9d      	ldr	r3, [pc, #628]	@ (80032c0 <ADCCompleteCallback+0x560>)
 800304a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800304e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	ee17 0a90 	vmov	r0, s15
 800305a:	f7fd fa95 	bl	8000588 <__aeabi_f2d>
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	4b98      	ldr	r3, [pc, #608]	@ (80032c4 <ADCCompleteCallback+0x564>)
 8003064:	f7fd f932 	bl	80002cc <__adddf3>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4c93      	ldr	r4, [pc, #588]	@ (80032bc <ADCCompleteCallback+0x55c>)
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	f7fd fdb9 	bl	8000be8 <__aeabi_d2uiz>
 8003076:	4603      	mov	r3, r0
 8003078:	6363      	str	r3, [r4, #52]	@ 0x34
	TIM1->CCR2 = arr * myconvvsi.da[1]+0.5;
 800307a:	4b91      	ldr	r3, [pc, #580]	@ (80032c0 <ADCCompleteCallback+0x560>)
 800307c:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8003080:	edd7 7a02 	vldr	s15, [r7, #8]
 8003084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003088:	ee17 0a90 	vmov	r0, s15
 800308c:	f7fd fa7c 	bl	8000588 <__aeabi_f2d>
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	4b8b      	ldr	r3, [pc, #556]	@ (80032c4 <ADCCompleteCallback+0x564>)
 8003096:	f7fd f919 	bl	80002cc <__adddf3>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4c87      	ldr	r4, [pc, #540]	@ (80032bc <ADCCompleteCallback+0x55c>)
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fda0 	bl	8000be8 <__aeabi_d2uiz>
 80030a8:	4603      	mov	r3, r0
 80030aa:	63a3      	str	r3, [r4, #56]	@ 0x38
	TIM1->CCR3 = arr * myconvvsi.da[2]+0.5;
 80030ac:	4b84      	ldr	r3, [pc, #528]	@ (80032c0 <ADCCompleteCallback+0x560>)
 80030ae:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80030b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	ee17 0a90 	vmov	r0, s15
 80030be:	f7fd fa63 	bl	8000588 <__aeabi_f2d>
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	4b7f      	ldr	r3, [pc, #508]	@ (80032c4 <ADCCompleteCallback+0x564>)
 80030c8:	f7fd f900 	bl	80002cc <__adddf3>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4c7a      	ldr	r4, [pc, #488]	@ (80032bc <ADCCompleteCallback+0x55c>)
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7fd fd87 	bl	8000be8 <__aeabi_d2uiz>
 80030da:	4603      	mov	r3, r0
 80030dc:	63e3      	str	r3, [r4, #60]	@ 0x3c
	TIM1->CCR4 = arr * myconvvsi.da[3]+0.5;
 80030de:	4b78      	ldr	r3, [pc, #480]	@ (80032c0 <ADCCompleteCallback+0x560>)
 80030e0:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80030e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80030e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ec:	ee17 0a90 	vmov	r0, s15
 80030f0:	f7fd fa4a 	bl	8000588 <__aeabi_f2d>
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	4b72      	ldr	r3, [pc, #456]	@ (80032c4 <ADCCompleteCallback+0x564>)
 80030fa:	f7fd f8e7 	bl	80002cc <__adddf3>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4c6e      	ldr	r4, [pc, #440]	@ (80032bc <ADCCompleteCallback+0x55c>)
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f7fd fd6e 	bl	8000be8 <__aeabi_d2uiz>
 800310c:	4603      	mov	r3, r0
 800310e:	6423      	str	r3, [r4, #64]	@ 0x40
	TIM1->CCR5 = arr * myconvvsi.da[2]+0.5;
 8003110:	4b6b      	ldr	r3, [pc, #428]	@ (80032c0 <ADCCompleteCallback+0x560>)
 8003112:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003116:	edd7 7a02 	vldr	s15, [r7, #8]
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	ee17 0a90 	vmov	r0, s15
 8003122:	f7fd fa31 	bl	8000588 <__aeabi_f2d>
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	4b66      	ldr	r3, [pc, #408]	@ (80032c4 <ADCCompleteCallback+0x564>)
 800312c:	f7fd f8ce 	bl	80002cc <__adddf3>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4c61      	ldr	r4, [pc, #388]	@ (80032bc <ADCCompleteCallback+0x55c>)
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f7fd fd55 	bl	8000be8 <__aeabi_d2uiz>
 800313e:	4603      	mov	r3, r0
 8003140:	65a3      	str	r3, [r4, #88]	@ 0x58
	TIM1->CCR6 = arr * myconvvsi.da[3]+0.5;
 8003142:	4b5f      	ldr	r3, [pc, #380]	@ (80032c0 <ADCCompleteCallback+0x560>)
 8003144:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8003148:	edd7 7a02 	vldr	s15, [r7, #8]
 800314c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003150:	ee17 0a90 	vmov	r0, s15
 8003154:	f7fd fa18 	bl	8000588 <__aeabi_f2d>
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	4b59      	ldr	r3, [pc, #356]	@ (80032c4 <ADCCompleteCallback+0x564>)
 800315e:	f7fd f8b5 	bl	80002cc <__adddf3>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4c55      	ldr	r4, [pc, #340]	@ (80032bc <ADCCompleteCallback+0x55c>)
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	f7fd fd3c 	bl	8000be8 <__aeabi_d2uiz>
 8003170:	4603      	mov	r3, r0
 8003172:	65e3      	str	r3, [r4, #92]	@ 0x5c

	// Apply duty cycles on Timer 8

	TIM8->CCR1 = arr * myconvvsi.db[0]+0.5;
 8003174:	4b52      	ldr	r3, [pc, #328]	@ (80032c0 <ADCCompleteCallback+0x560>)
 8003176:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800317a:	edd7 7a02 	vldr	s15, [r7, #8]
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	ee17 0a90 	vmov	r0, s15
 8003186:	f7fd f9ff 	bl	8000588 <__aeabi_f2d>
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	4b4d      	ldr	r3, [pc, #308]	@ (80032c4 <ADCCompleteCallback+0x564>)
 8003190:	f7fd f89c 	bl	80002cc <__adddf3>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4c4b      	ldr	r4, [pc, #300]	@ (80032c8 <ADCCompleteCallback+0x568>)
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fd23 	bl	8000be8 <__aeabi_d2uiz>
 80031a2:	4603      	mov	r3, r0
 80031a4:	6363      	str	r3, [r4, #52]	@ 0x34
	TIM8->CCR2 = arr * myconvvsi.db[1]+0.5;
 80031a6:	4b46      	ldr	r3, [pc, #280]	@ (80032c0 <ADCCompleteCallback+0x560>)
 80031a8:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80031ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80031b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b4:	ee17 0a90 	vmov	r0, s15
 80031b8:	f7fd f9e6 	bl	8000588 <__aeabi_f2d>
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	4b40      	ldr	r3, [pc, #256]	@ (80032c4 <ADCCompleteCallback+0x564>)
 80031c2:	f7fd f883 	bl	80002cc <__adddf3>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4c3f      	ldr	r4, [pc, #252]	@ (80032c8 <ADCCompleteCallback+0x568>)
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fd fd0a 	bl	8000be8 <__aeabi_d2uiz>
 80031d4:	4603      	mov	r3, r0
 80031d6:	63a3      	str	r3, [r4, #56]	@ 0x38
	TIM8->CCR3 = arr * myconvvsi.db[2]+0.5;
 80031d8:	4b39      	ldr	r3, [pc, #228]	@ (80032c0 <ADCCompleteCallback+0x560>)
 80031da:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80031de:	edd7 7a02 	vldr	s15, [r7, #8]
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	ee17 0a90 	vmov	r0, s15
 80031ea:	f7fd f9cd 	bl	8000588 <__aeabi_f2d>
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <ADCCompleteCallback+0x564>)
 80031f4:	f7fd f86a 	bl	80002cc <__adddf3>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4c32      	ldr	r4, [pc, #200]	@ (80032c8 <ADCCompleteCallback+0x568>)
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	f7fd fcf1 	bl	8000be8 <__aeabi_d2uiz>
 8003206:	4603      	mov	r3, r0
 8003208:	63e3      	str	r3, [r4, #60]	@ 0x3c
	TIM8->CCR4 = arr * myconvvsi.db[3]+0.5;
 800320a:	4b2d      	ldr	r3, [pc, #180]	@ (80032c0 <ADCCompleteCallback+0x560>)
 800320c:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8003210:	edd7 7a02 	vldr	s15, [r7, #8]
 8003214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003218:	ee17 0a90 	vmov	r0, s15
 800321c:	f7fd f9b4 	bl	8000588 <__aeabi_f2d>
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	4b27      	ldr	r3, [pc, #156]	@ (80032c4 <ADCCompleteCallback+0x564>)
 8003226:	f7fd f851 	bl	80002cc <__adddf3>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4c26      	ldr	r4, [pc, #152]	@ (80032c8 <ADCCompleteCallback+0x568>)
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f7fd fcd8 	bl	8000be8 <__aeabi_d2uiz>
 8003238:	4603      	mov	r3, r0
 800323a:	6423      	str	r3, [r4, #64]	@ 0x40
	TIM8->CCR5 = arr * myconvvsi.db[2]+0.5;
 800323c:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <ADCCompleteCallback+0x560>)
 800323e:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8003242:	edd7 7a02 	vldr	s15, [r7, #8]
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324a:	ee17 0a90 	vmov	r0, s15
 800324e:	f7fd f99b 	bl	8000588 <__aeabi_f2d>
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <ADCCompleteCallback+0x564>)
 8003258:	f7fd f838 	bl	80002cc <__adddf3>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4c19      	ldr	r4, [pc, #100]	@ (80032c8 <ADCCompleteCallback+0x568>)
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	f7fd fcbf 	bl	8000be8 <__aeabi_d2uiz>
 800326a:	4603      	mov	r3, r0
 800326c:	65a3      	str	r3, [r4, #88]	@ 0x58
	TIM8->CCR6 = arr * myconvvsi.db[3]+0.5;
 800326e:	4b14      	ldr	r3, [pc, #80]	@ (80032c0 <ADCCompleteCallback+0x560>)
 8003270:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8003274:	edd7 7a02 	vldr	s15, [r7, #8]
 8003278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327c:	ee17 0a90 	vmov	r0, s15
 8003280:	f7fd f982 	bl	8000588 <__aeabi_f2d>
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	4b0e      	ldr	r3, [pc, #56]	@ (80032c4 <ADCCompleteCallback+0x564>)
 800328a:	f7fd f81f 	bl	80002cc <__adddf3>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4c0d      	ldr	r4, [pc, #52]	@ (80032c8 <ADCCompleteCallback+0x568>)
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f7fd fca6 	bl	8000be8 <__aeabi_d2uiz>
 800329c:	4603      	mov	r3, r0
 800329e:	65e3      	str	r3, [r4, #92]	@ 0x5c

	// Log measurements

	LogMeasurementsExample();
 80032a0:	f000 f84a 	bl	8003338 <LogMeasurementsExample>

	// Increase time index

	myconvvsi.k++;
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <ADCCompleteCallback+0x560>)
 80032a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032aa:	3301      	adds	r3, #1
 80032ac:	4a04      	ldr	r2, [pc, #16]	@ (80032c0 <ADCCompleteCallback+0x560>)
 80032ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40010000 	.word	0x40010000
 80032c0:	20014404 	.word	0x20014404
 80032c4:	3fe00000 	.word	0x3fe00000
 80032c8:	40010400 	.word	0x40010400

080032cc <ADCErrorCallback>:


uint32_t db_ADCErrorCallback = 0;

void ADCErrorCallback(ADC_HandleTypeDef* hadc)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	db_ADCErrorCallback++;
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <ADCErrorCallback+0x20>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <ADCErrorCallback+0x20>)
 80032dc:	6013      	str	r3, [r2, #0]
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20014498 	.word	0x20014498

080032f0 <ADCHalfCompleteCallback>:


uint32_t db_ADCHalfCompleteCallback = 0;

void ADCHalfCompleteCallback(ADC_HandleTypeDef* hadc)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	db_ADCHalfCompleteCallback++;
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <ADCHalfCompleteCallback+0x20>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	4a04      	ldr	r2, [pc, #16]	@ (8003310 <ADCHalfCompleteCallback+0x20>)
 8003300:	6013      	str	r3, [r2, #0]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2001449c 	.word	0x2001449c

08003314 <HAL_ADC_ConvCpltCallback>:
uint32_t db_HAL_ADC_ConvCpltCallback = 0;

// Required because Ex do not use the callback

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	db_HAL_ADC_ConvCpltCallback++;
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_ADC_ConvCpltCallback+0x20>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a04      	ldr	r2, [pc, #16]	@ (8003334 <HAL_ADC_ConvCpltCallback+0x20>)
 8003324:	6013      	str	r3, [r2, #0]
	ADCCompleteCallback( hadc);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff fd1a 	bl	8002d60 <ADCCompleteCallback>
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200144a0 	.word	0x200144a0

08003338 <LogMeasurementsExample>:


void LogMeasurementsExample()
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
	// log measurements

	if( myconvvsi.sm>=SMStartPWM) {
 800333e:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <LogMeasurementsExample+0x30>)
 8003340:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8003344:	2b01      	cmp	r3, #1
 8003346:	d908      	bls.n	800335a <LogMeasurementsExample+0x22>
		for( uint16_t k_tmp=0; k_tmp<NB_AD_VALUES; k_tmp++) {
 8003348:	2300      	movs	r3, #0
 800334a:	80fb      	strh	r3, [r7, #6]
 800334c:	e002      	b.n	8003354 <LogMeasurementsExample+0x1c>
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	3301      	adds	r3, #1
 8003352:	80fb      	strh	r3, [r7, #6]
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d9f9      	bls.n	800334e <LogMeasurementsExample+0x16>
			//	db_meas[db_cnt_meas++] = ad_volt_float[k_tmp];
			}
		}
	}

}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20014404 	.word	0x20014404

0800336c <HAL_IncTick>:
int db_HAL_IncTick = 0;
int blink = 0;


void HAL_IncTick()
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8003370:	4b22      	ldr	r3, [pc, #136]	@ (80033fc <HAL_IncTick+0x90>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <HAL_IncTick+0x94>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4413      	add	r3, r2
 800337c:	4a20      	ldr	r2, [pc, #128]	@ (8003400 <HAL_IncTick+0x94>)
 800337e:	6013      	str	r3, [r2, #0]
	db_HAL_IncTick++;
 8003380:	4b20      	ldr	r3, [pc, #128]	@ (8003404 <HAL_IncTick+0x98>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3301      	adds	r3, #1
 8003386:	4a1f      	ldr	r2, [pc, #124]	@ (8003404 <HAL_IncTick+0x98>)
 8003388:	6013      	str	r3, [r2, #0]
	blink++;
 800338a:	4b1f      	ldr	r3, [pc, #124]	@ (8003408 <HAL_IncTick+0x9c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	4a1d      	ldr	r2, [pc, #116]	@ (8003408 <HAL_IncTick+0x9c>)
 8003392:	6013      	str	r3, [r2, #0]
	if(blink>1000) {
 8003394:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <HAL_IncTick+0x9c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800339c:	dd05      	ble.n	80033aa <HAL_IncTick+0x3e>
		blink = 0;
 800339e:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <HAL_IncTick+0x9c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
		DisplayMessageMeas();
 80033a4:	f7fe fa42 	bl	800182c <DisplayMessageMeas>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
	}

}
 80033a8:	e025      	b.n	80033f6 <HAL_IncTick+0x8a>
	} else if( blink>500) {
 80033aa:	4b17      	ldr	r3, [pc, #92]	@ (8003408 <HAL_IncTick+0x9c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80033b2:	dd10      	ble.n	80033d6 <HAL_IncTick+0x6a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80033b4:	2201      	movs	r2, #1
 80033b6:	2101      	movs	r1, #1
 80033b8:	4814      	ldr	r0, [pc, #80]	@ (800340c <HAL_IncTick+0xa0>)
 80033ba:	f002 fb55 	bl	8005a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80033be:	2201      	movs	r2, #1
 80033c0:	2180      	movs	r1, #128	@ 0x80
 80033c2:	4812      	ldr	r0, [pc, #72]	@ (800340c <HAL_IncTick+0xa0>)
 80033c4:	f002 fb50 	bl	8005a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80033c8:	2201      	movs	r2, #1
 80033ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033ce:	480f      	ldr	r0, [pc, #60]	@ (800340c <HAL_IncTick+0xa0>)
 80033d0:	f002 fb4a 	bl	8005a68 <HAL_GPIO_WritePin>
}
 80033d4:	e00f      	b.n	80033f6 <HAL_IncTick+0x8a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2101      	movs	r1, #1
 80033da:	480c      	ldr	r0, [pc, #48]	@ (800340c <HAL_IncTick+0xa0>)
 80033dc:	f002 fb44 	bl	8005a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	@ 0x80
 80033e4:	4809      	ldr	r0, [pc, #36]	@ (800340c <HAL_IncTick+0xa0>)
 80033e6:	f002 fb3f 	bl	8005a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80033ea:	2200      	movs	r2, #0
 80033ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033f0:	4806      	ldr	r0, [pc, #24]	@ (800340c <HAL_IncTick+0xa0>)
 80033f2:	f002 fb39 	bl	8005a68 <HAL_GPIO_WritePin>
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000008 	.word	0x20000008
 8003400:	200144b8 	.word	0x200144b8
 8003404:	200144a4 	.word	0x200144a4
 8003408:	200144a8 	.word	0x200144a8
 800340c:	40020400 	.word	0x40020400

08003410 <IdleProcess>:


uint32_t db_IdleProcess;

void IdleProcess()
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
	db_IdleProcess++;
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <IdleProcess+0x18>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	4a03      	ldr	r2, [pc, #12]	@ (8003428 <IdleProcess+0x18>)
 800341c:	6013      	str	r3, [r2, #0]
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	200144ac 	.word	0x200144ac

0800342c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	4b0f      	ldr	r3, [pc, #60]	@ (8003470 <HAL_MspInit+0x44>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	4a0e      	ldr	r2, [pc, #56]	@ (8003470 <HAL_MspInit+0x44>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343c:	6413      	str	r3, [r2, #64]	@ 0x40
 800343e:	4b0c      	ldr	r3, [pc, #48]	@ (8003470 <HAL_MspInit+0x44>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	4b09      	ldr	r3, [pc, #36]	@ (8003470 <HAL_MspInit+0x44>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	4a08      	ldr	r2, [pc, #32]	@ (8003470 <HAL_MspInit+0x44>)
 8003450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003454:	6453      	str	r3, [r2, #68]	@ 0x44
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <HAL_MspInit+0x44>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800

08003474 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b094      	sub	sp, #80	@ 0x50
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4aa0      	ldr	r2, [pc, #640]	@ (8003714 <HAL_ADC_MspInit+0x2a0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	f040 8085 	bne.w	80035a2 <HAL_ADC_MspInit+0x12e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003498:	4b9f      	ldr	r3, [pc, #636]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 800349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349c:	4a9e      	ldr	r2, [pc, #632]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80034a4:	4b9c      	ldr	r3, [pc, #624]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b0:	4b99      	ldr	r3, [pc, #612]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	4a98      	ldr	r2, [pc, #608]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034b6:	f043 0304 	orr.w	r3, r3, #4
 80034ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80034bc:	4b96      	ldr	r3, [pc, #600]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c8:	4b93      	ldr	r3, [pc, #588]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	4a92      	ldr	r2, [pc, #584]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d4:	4b90      	ldr	r3, [pc, #576]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	4a8c      	ldr	r2, [pc, #560]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ec:	4b8a      	ldr	r3, [pc, #552]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80034f8:	232f      	movs	r3, #47	@ 0x2f
 80034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034fc:	2303      	movs	r3, #3
 80034fe:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003504:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003508:	4619      	mov	r1, r3
 800350a:	4884      	ldr	r0, [pc, #528]	@ (800371c <HAL_ADC_MspInit+0x2a8>)
 800350c:	f002 f8e8 	bl	80056e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003510:	236f      	movs	r3, #111	@ 0x6f
 8003512:	63fb      	str	r3, [r7, #60]	@ 0x3c
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003514:	2303      	movs	r3, #3
 8003516:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003520:	4619      	mov	r1, r3
 8003522:	487f      	ldr	r0, [pc, #508]	@ (8003720 <HAL_ADC_MspInit+0x2ac>)
 8003524:	f002 f8dc 	bl	80056e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003528:	2302      	movs	r3, #2
 800352a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800352c:	2303      	movs	r3, #3
 800352e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003534:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003538:	4619      	mov	r1, r3
 800353a:	487a      	ldr	r0, [pc, #488]	@ (8003724 <HAL_ADC_MspInit+0x2b0>)
 800353c:	f002 f8d0 	bl	80056e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003540:	4b79      	ldr	r3, [pc, #484]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 8003542:	4a7a      	ldr	r2, [pc, #488]	@ (800372c <HAL_ADC_MspInit+0x2b8>)
 8003544:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003546:	4b78      	ldr	r3, [pc, #480]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 8003548:	2200      	movs	r2, #0
 800354a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800354c:	4b76      	ldr	r3, [pc, #472]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003552:	4b75      	ldr	r3, [pc, #468]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003558:	4b73      	ldr	r3, [pc, #460]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 800355a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800355e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003560:	4b71      	ldr	r3, [pc, #452]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 8003562:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003566:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003568:	4b6f      	ldr	r3, [pc, #444]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 800356a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800356e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003570:	4b6d      	ldr	r3, [pc, #436]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 8003572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003576:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003578:	4b6b      	ldr	r3, [pc, #428]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 800357a:	2200      	movs	r2, #0
 800357c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800357e:	4b6a      	ldr	r3, [pc, #424]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 8003580:	2200      	movs	r2, #0
 8003582:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003584:	4868      	ldr	r0, [pc, #416]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 8003586:	f001 fca1 	bl	8004ecc <HAL_DMA_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8003590:	f7ff fa68 	bl	8002a64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a64      	ldr	r2, [pc, #400]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 8003598:	639a      	str	r2, [r3, #56]	@ 0x38
 800359a:	4a63      	ldr	r2, [pc, #396]	@ (8003728 <HAL_ADC_MspInit+0x2b4>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80035a0:	e0b3      	b.n	800370a <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a62      	ldr	r2, [pc, #392]	@ (8003730 <HAL_ADC_MspInit+0x2bc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d154      	bne.n	8003656 <HAL_ADC_MspInit+0x1e2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80035ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b0:	4a59      	ldr	r2, [pc, #356]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b8:	4b57      	ldr	r3, [pc, #348]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c4:	4b54      	ldr	r3, [pc, #336]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c8:	4a53      	ldr	r2, [pc, #332]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d0:	4b51      	ldr	r3, [pc, #324]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f4:	4b48      	ldr	r3, [pc, #288]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	4a47      	ldr	r2, [pc, #284]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80035fa:	f043 0302 	orr.w	r3, r3, #2
 80035fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003600:	4b45      	ldr	r3, [pc, #276]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800360c:	233f      	movs	r3, #63	@ 0x3f
 800360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003610:	2303      	movs	r3, #3
 8003612:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003618:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800361c:	4619      	mov	r1, r3
 800361e:	483f      	ldr	r0, [pc, #252]	@ (800371c <HAL_ADC_MspInit+0x2a8>)
 8003620:	f002 f85e 	bl	80056e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003624:	234f      	movs	r3, #79	@ 0x4f
 8003626:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003628:	2303      	movs	r3, #3
 800362a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003630:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003634:	4619      	mov	r1, r3
 8003636:	483a      	ldr	r0, [pc, #232]	@ (8003720 <HAL_ADC_MspInit+0x2ac>)
 8003638:	f002 f852 	bl	80056e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800363c:	2302      	movs	r3, #2
 800363e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003640:	2303      	movs	r3, #3
 8003642:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003648:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800364c:	4619      	mov	r1, r3
 800364e:	4835      	ldr	r0, [pc, #212]	@ (8003724 <HAL_ADC_MspInit+0x2b0>)
 8003650:	f002 f846 	bl	80056e0 <HAL_GPIO_Init>
}
 8003654:	e059      	b.n	800370a <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC3)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a36      	ldr	r2, [pc, #216]	@ (8003734 <HAL_ADC_MspInit+0x2c0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d154      	bne.n	800370a <HAL_ADC_MspInit+0x296>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003660:	4b2d      	ldr	r3, [pc, #180]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 8003662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003664:	4a2c      	ldr	r2, [pc, #176]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 8003666:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800366a:	6453      	str	r3, [r2, #68]	@ 0x44
 800366c:	4b2a      	ldr	r3, [pc, #168]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 800366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003678:	4b27      	ldr	r3, [pc, #156]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	4a26      	ldr	r2, [pc, #152]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 800367e:	f043 0320 	orr.w	r3, r3, #32
 8003682:	6313      	str	r3, [r2, #48]	@ 0x30
 8003684:	4b24      	ldr	r3, [pc, #144]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003690:	4b21      	ldr	r3, [pc, #132]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	4a20      	ldr	r2, [pc, #128]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6313      	str	r3, [r2, #48]	@ 0x30
 800369c:	4b1e      	ldr	r3, [pc, #120]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b4:	4b18      	ldr	r3, [pc, #96]	@ (8003718 <HAL_ADC_MspInit+0x2a4>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80036c0:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 80036c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036c6:	2303      	movs	r3, #3
 80036c8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80036d2:	4619      	mov	r1, r3
 80036d4:	4818      	ldr	r0, [pc, #96]	@ (8003738 <HAL_ADC_MspInit+0x2c4>)
 80036d6:	f002 f803 	bl	80056e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80036da:	230f      	movs	r3, #15
 80036dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036de:	2303      	movs	r3, #3
 80036e0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80036ea:	4619      	mov	r1, r3
 80036ec:	480b      	ldr	r0, [pc, #44]	@ (800371c <HAL_ADC_MspInit+0x2a8>)
 80036ee:	f001 fff7 	bl	80056e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80036f2:	230f      	movs	r3, #15
 80036f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f6:	2303      	movs	r3, #3
 80036f8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003702:	4619      	mov	r1, r3
 8003704:	4806      	ldr	r0, [pc, #24]	@ (8003720 <HAL_ADC_MspInit+0x2ac>)
 8003706:	f001 ffeb 	bl	80056e0 <HAL_GPIO_Init>
}
 800370a:	bf00      	nop
 800370c:	3750      	adds	r7, #80	@ 0x50
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40012000 	.word	0x40012000
 8003718:	40023800 	.word	0x40023800
 800371c:	40020800 	.word	0x40020800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	200140a8 	.word	0x200140a8
 800372c:	40026470 	.word	0x40026470
 8003730:	40012100 	.word	0x40012100
 8003734:	40012200 	.word	0x40012200
 8003738:	40021400 	.word	0x40021400

0800373c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	@ 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a17      	ldr	r2, [pc, #92]	@ (80037b8 <HAL_CAN_MspInit+0x7c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d127      	bne.n	80037ae <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800375e:	4b17      	ldr	r3, [pc, #92]	@ (80037bc <HAL_CAN_MspInit+0x80>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	4a16      	ldr	r2, [pc, #88]	@ (80037bc <HAL_CAN_MspInit+0x80>)
 8003764:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003768:	6413      	str	r3, [r2, #64]	@ 0x40
 800376a:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <HAL_CAN_MspInit+0x80>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003776:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <HAL_CAN_MspInit+0x80>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	4a10      	ldr	r2, [pc, #64]	@ (80037bc <HAL_CAN_MspInit+0x80>)
 800377c:	f043 0308 	orr.w	r3, r3, #8
 8003780:	6313      	str	r3, [r2, #48]	@ 0x30
 8003782:	4b0e      	ldr	r3, [pc, #56]	@ (80037bc <HAL_CAN_MspInit+0x80>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800378e:	2303      	movs	r3, #3
 8003790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003792:	2302      	movs	r3, #2
 8003794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379a:	2303      	movs	r3, #3
 800379c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800379e:	2309      	movs	r3, #9
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	4619      	mov	r1, r3
 80037a8:	4805      	ldr	r0, [pc, #20]	@ (80037c0 <HAL_CAN_MspInit+0x84>)
 80037aa:	f001 ff99 	bl	80056e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80037ae:	bf00      	nop
 80037b0:	3728      	adds	r7, #40	@ 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40006400 	.word	0x40006400
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020c00 	.word	0x40020c00

080037c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	@ 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a15      	ldr	r2, [pc, #84]	@ (8003838 <HAL_DAC_MspInit+0x74>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d123      	bne.n	800382e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80037e6:	4b15      	ldr	r3, [pc, #84]	@ (800383c <HAL_DAC_MspInit+0x78>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	4a14      	ldr	r2, [pc, #80]	@ (800383c <HAL_DAC_MspInit+0x78>)
 80037ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f2:	4b12      	ldr	r3, [pc, #72]	@ (800383c <HAL_DAC_MspInit+0x78>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fe:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <HAL_DAC_MspInit+0x78>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	4a0e      	ldr	r2, [pc, #56]	@ (800383c <HAL_DAC_MspInit+0x78>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6313      	str	r3, [r2, #48]	@ 0x30
 800380a:	4b0c      	ldr	r3, [pc, #48]	@ (800383c <HAL_DAC_MspInit+0x78>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003816:	2310      	movs	r3, #16
 8003818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800381a:	2303      	movs	r3, #3
 800381c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003822:	f107 0314 	add.w	r3, r7, #20
 8003826:	4619      	mov	r1, r3
 8003828:	4805      	ldr	r0, [pc, #20]	@ (8003840 <HAL_DAC_MspInit+0x7c>)
 800382a:	f001 ff59 	bl	80056e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800382e:	bf00      	nop
 8003830:	3728      	adds	r7, #40	@ 0x28
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40007400 	.word	0x40007400
 800383c:	40023800 	.word	0x40023800
 8003840:	40020000 	.word	0x40020000

08003844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b0ac      	sub	sp, #176	@ 0xb0
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800385c:	f107 0318 	add.w	r3, r7, #24
 8003860:	2284      	movs	r2, #132	@ 0x84
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f007 f8ea 	bl	800aa3e <memset>
  if(hi2c->Instance==I2C1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a43      	ldr	r2, [pc, #268]	@ (800397c <HAL_I2C_MspInit+0x138>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d13d      	bne.n	80038f0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003874:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003878:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800387a:	2300      	movs	r3, #0
 800387c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800387e:	f107 0318 	add.w	r3, r7, #24
 8003882:	4618      	mov	r0, r3
 8003884:	f002 ff4c 	bl	8006720 <HAL_RCCEx_PeriphCLKConfig>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800388e:	f7ff f8e9 	bl	8002a64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003892:	4b3b      	ldr	r3, [pc, #236]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	4a3a      	ldr	r2, [pc, #232]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	6313      	str	r3, [r2, #48]	@ 0x30
 800389e:	4b38      	ldr	r3, [pc, #224]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80038aa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80038ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038b2:	2312      	movs	r3, #18
 80038b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038be:	2303      	movs	r3, #3
 80038c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038c4:	2304      	movs	r3, #4
 80038c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80038ce:	4619      	mov	r1, r3
 80038d0:	482c      	ldr	r0, [pc, #176]	@ (8003984 <HAL_I2C_MspInit+0x140>)
 80038d2:	f001 ff05 	bl	80056e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 80038dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e2:	4b27      	ldr	r3, [pc, #156]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80038ee:	e041      	b.n	8003974 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a24      	ldr	r2, [pc, #144]	@ (8003988 <HAL_I2C_MspInit+0x144>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d13c      	bne.n	8003974 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80038fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003906:	f107 0318 	add.w	r3, r7, #24
 800390a:	4618      	mov	r0, r3
 800390c:	f002 ff08 	bl	8006720 <HAL_RCCEx_PeriphCLKConfig>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003916:	f7ff f8a5 	bl	8002a64 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800391a:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	4a18      	ldr	r2, [pc, #96]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 8003920:	f043 0320 	orr.w	r3, r3, #32
 8003924:	6313      	str	r3, [r2, #48]	@ 0x30
 8003926:	4b16      	ldr	r3, [pc, #88]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003932:	2303      	movs	r3, #3
 8003934:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003938:	2312      	movs	r3, #18
 800393a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003944:	2303      	movs	r3, #3
 8003946:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800394a:	2304      	movs	r3, #4
 800394c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003950:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003954:	4619      	mov	r1, r3
 8003956:	480d      	ldr	r0, [pc, #52]	@ (800398c <HAL_I2C_MspInit+0x148>)
 8003958:	f001 fec2 	bl	80056e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800395c:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	4a07      	ldr	r2, [pc, #28]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 8003962:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003966:	6413      	str	r3, [r2, #64]	@ 0x40
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_I2C_MspInit+0x13c>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
}
 8003974:	bf00      	nop
 8003976:	37b0      	adds	r7, #176	@ 0xb0
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40005400 	.word	0x40005400
 8003980:	40023800 	.word	0x40023800
 8003984:	40020400 	.word	0x40020400
 8003988:	40005800 	.word	0x40005800
 800398c:	40021400 	.word	0x40021400

08003990 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a13      	ldr	r2, [pc, #76]	@ (80039ec <HAL_TIM_PWM_MspInit+0x5c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d10c      	bne.n	80039bc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039a2:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <HAL_TIM_PWM_MspInit+0x60>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a6:	4a12      	ldr	r2, [pc, #72]	@ (80039f0 <HAL_TIM_PWM_MspInit+0x60>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ae:	4b10      	ldr	r3, [pc, #64]	@ (80039f0 <HAL_TIM_PWM_MspInit+0x60>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80039ba:	e010      	b.n	80039de <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c4:	d10b      	bne.n	80039de <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039c6:	4b0a      	ldr	r3, [pc, #40]	@ (80039f0 <HAL_TIM_PWM_MspInit+0x60>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	4a09      	ldr	r2, [pc, #36]	@ (80039f0 <HAL_TIM_PWM_MspInit+0x60>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d2:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <HAL_TIM_PWM_MspInit+0x60>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40023800 	.word	0x40023800

080039f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <HAL_TIM_Base_MspInit+0x44>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d113      	bne.n	8003a2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a06:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <HAL_TIM_Base_MspInit+0x48>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a3c <HAL_TIM_Base_MspInit+0x48>)
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a12:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <HAL_TIM_Base_MspInit+0x48>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 7, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2107      	movs	r1, #7
 8003a22:	202d      	movs	r0, #45	@ 0x2d
 8003a24:	f001 f959 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003a28:	202d      	movs	r0, #45	@ 0x2d
 8003a2a:	f001 f972 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40010400 	.word	0x40010400
 8003a3c:	40023800 	.word	0x40023800

08003a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	@ 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 031c 	add.w	r3, r7, #28
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a51      	ldr	r2, [pc, #324]	@ (8003ba4 <HAL_TIM_MspPostInit+0x164>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d11d      	bne.n	8003a9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a62:	4b51      	ldr	r3, [pc, #324]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	4a50      	ldr	r2, [pc, #320]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003a68:	f043 0310 	orr.w	r3, r3, #16
 8003a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a7a:	f44f 43be 	mov.w	r3, #24320	@ 0x5f00
 8003a7e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	2302      	movs	r3, #2
 8003a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	4619      	mov	r1, r3
 8003a96:	4845      	ldr	r0, [pc, #276]	@ (8003bac <HAL_TIM_MspPostInit+0x16c>)
 8003a98:	f001 fe22 	bl	80056e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003a9c:	e07d      	b.n	8003b9a <HAL_TIM_MspPostInit+0x15a>
  else if(htim->Instance==TIM2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa6:	d11d      	bne.n	8003ae4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	4a3e      	ldr	r2, [pc, #248]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ac0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ac6:	2312      	movs	r3, #18
 8003ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad6:	f107 031c 	add.w	r3, r7, #28
 8003ada:	4619      	mov	r1, r3
 8003adc:	4834      	ldr	r0, [pc, #208]	@ (8003bb0 <HAL_TIM_MspPostInit+0x170>)
 8003ade:	f001 fdff 	bl	80056e0 <HAL_GPIO_Init>
}
 8003ae2:	e05a      	b.n	8003b9a <HAL_TIM_MspPostInit+0x15a>
  else if(htim->Instance==TIM8)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a32      	ldr	r2, [pc, #200]	@ (8003bb4 <HAL_TIM_MspPostInit+0x174>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d155      	bne.n	8003b9a <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aee:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003afa:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b06:	4b28      	ldr	r3, [pc, #160]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	4a27      	ldr	r2, [pc, #156]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b12:	4b25      	ldr	r3, [pc, #148]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	4a21      	ldr	r2, [pc, #132]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ba8 <HAL_TIM_MspPostInit+0x168>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b36:	2380      	movs	r3, #128	@ 0x80
 8003b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b42:	2300      	movs	r3, #0
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b46:	2303      	movs	r3, #3
 8003b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4a:	f107 031c 	add.w	r3, r7, #28
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4819      	ldr	r0, [pc, #100]	@ (8003bb8 <HAL_TIM_MspPostInit+0x178>)
 8003b52:	f001 fdc5 	bl	80056e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003b56:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4619      	mov	r1, r3
 8003b72:	480f      	ldr	r0, [pc, #60]	@ (8003bb0 <HAL_TIM_MspPostInit+0x170>)
 8003b74:	f001 fdb4 	bl	80056e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003b78:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b86:	2300      	movs	r3, #0
 8003b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	4619      	mov	r1, r3
 8003b94:	4809      	ldr	r0, [pc, #36]	@ (8003bbc <HAL_TIM_MspPostInit+0x17c>)
 8003b96:	f001 fda3 	bl	80056e0 <HAL_GPIO_Init>
}
 8003b9a:	bf00      	nop
 8003b9c:	3730      	adds	r7, #48	@ 0x30
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40020400 	.word	0x40020400
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40020800 	.word	0x40020800

08003bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b0aa      	sub	sp, #168	@ 0xa8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bd8:	f107 0310 	add.w	r3, r7, #16
 8003bdc:	2284      	movs	r2, #132	@ 0x84
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f006 ff2c 	bl	800aa3e <memset>
  if(huart->Instance==USART3)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a3d      	ldr	r2, [pc, #244]	@ (8003ce0 <HAL_UART_MspInit+0x120>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d172      	bne.n	8003cd6 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bf4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bfa:	f107 0310 	add.w	r3, r7, #16
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fd8e 	bl	8006720 <HAL_RCCEx_PeriphCLKConfig>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003c0a:	f7fe ff2b 	bl	8002a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c0e:	4b35      	ldr	r3, [pc, #212]	@ (8003ce4 <HAL_UART_MspInit+0x124>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	4a34      	ldr	r2, [pc, #208]	@ (8003ce4 <HAL_UART_MspInit+0x124>)
 8003c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1a:	4b32      	ldr	r3, [pc, #200]	@ (8003ce4 <HAL_UART_MspInit+0x124>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c26:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce4 <HAL_UART_MspInit+0x124>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	4a2e      	ldr	r2, [pc, #184]	@ (8003ce4 <HAL_UART_MspInit+0x124>)
 8003c2c:	f043 0308 	orr.w	r3, r3, #8
 8003c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c32:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <HAL_UART_MspInit+0x124>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003c3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c52:	2303      	movs	r3, #3
 8003c54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c58:	2307      	movs	r3, #7
 8003c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c5e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c62:	4619      	mov	r1, r3
 8003c64:	4820      	ldr	r0, [pc, #128]	@ (8003ce8 <HAL_UART_MspInit+0x128>)
 8003c66:	f001 fd3b 	bl	80056e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003c6c:	4a20      	ldr	r2, [pc, #128]	@ (8003cf0 <HAL_UART_MspInit+0x130>)
 8003c6e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8003c70:	4b1e      	ldr	r3, [pc, #120]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003c72:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8003c76:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c78:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003c7a:	2240      	movs	r2, #64	@ 0x40
 8003c7c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c84:	4b19      	ldr	r3, [pc, #100]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c8a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c8c:	4b17      	ldr	r3, [pc, #92]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c92:	4b16      	ldr	r3, [pc, #88]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c9e:	4b13      	ldr	r3, [pc, #76]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003caa:	4810      	ldr	r0, [pc, #64]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003cac:	f001 f90e 	bl	8004ecc <HAL_DMA_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8003cb6:	f7fe fed5 	bl	8002a64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003cbe:	671a      	str	r2, [r3, #112]	@ 0x70
 8003cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8003cec <HAL_UART_MspInit+0x12c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2100      	movs	r1, #0
 8003cca:	2027      	movs	r0, #39	@ 0x27
 8003ccc:	f001 f805 	bl	8004cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003cd0:	2027      	movs	r0, #39	@ 0x27
 8003cd2:	f001 f81e 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003cd6:	bf00      	nop
 8003cd8:	37a8      	adds	r7, #168	@ 0xa8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40004800 	.word	0x40004800
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020c00 	.word	0x40020c00
 8003cec:	20014384 	.word	0x20014384
 8003cf0:	40026070 	.word	0x40026070

08003cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <NMI_Handler+0x4>

08003cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <HardFault_Handler+0x4>

08003d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <MemManage_Handler+0x4>

08003d0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <BusFault_Handler+0x4>

08003d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <UsageFault_Handler+0x4>

08003d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d4a:	f7ff fb0f 	bl	800336c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003d58:	4802      	ldr	r0, [pc, #8]	@ (8003d64 <DMA1_Stream4_IRQHandler+0x10>)
 8003d5a:	f001 fa57 	bl	800520c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20014384 	.word	0x20014384

08003d68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d6c:	4802      	ldr	r0, [pc, #8]	@ (8003d78 <USART3_IRQHandler+0x10>)
 8003d6e:	f004 fdcd 	bl	800890c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200142d0 	.word	0x200142d0

08003d7c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003d80:	4802      	ldr	r0, [pc, #8]	@ (8003d8c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003d82:	f003 fb57 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  //Tim14Handler();

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20014284 	.word	0x20014284

08003d90 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	db_DMA2_Stream4_IRQHandler++;
 8003d94:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <DMA2_Stream4_IRQHandler+0x18>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	4a03      	ldr	r2, [pc, #12]	@ (8003da8 <DMA2_Stream4_IRQHandler+0x18>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d9e:	4803      	ldr	r0, [pc, #12]	@ (8003dac <DMA2_Stream4_IRQHandler+0x1c>)
 8003da0:	f001 fa34 	bl	800520c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200144b0 	.word	0x200144b0
 8003dac:	200140a8 	.word	0x200140a8

08003db0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
	return 1;
 8003db4:	2301      	movs	r3, #1
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_kill>:

int _kill(int pid, int sig)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003dca:	f006 fe8b 	bl	800aae4 <__errno>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2216      	movs	r2, #22
 8003dd2:	601a      	str	r2, [r3, #0]
	return -1;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_exit>:

void _exit (int status)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003de8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ffe7 	bl	8003dc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003df2:	bf00      	nop
 8003df4:	e7fd      	b.n	8003df2 <_exit+0x12>

08003df6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e00a      	b.n	8003e1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e08:	f3af 8000 	nop.w
 8003e0c:	4601      	mov	r1, r0
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	60ba      	str	r2, [r7, #8]
 8003e14:	b2ca      	uxtb	r2, r1
 8003e16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	dbf0      	blt.n	8003e08 <_read+0x12>
	}

return len;
 8003e26:	687b      	ldr	r3, [r7, #4]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e009      	b.n	8003e56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	60ba      	str	r2, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3301      	adds	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	dbf1      	blt.n	8003e42 <_write+0x12>
	}
	return len;
 8003e5e:	687b      	ldr	r3, [r7, #4]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_close>:

int _close(int file)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	return -1;
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e90:	605a      	str	r2, [r3, #4]
	return 0;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_isatty>:

int _isatty(int file)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	return 1;
 8003ea8:	2301      	movs	r3, #1
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
	return 0;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ed8:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <_sbrk+0x5c>)
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <_sbrk+0x60>)
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee4:	4b13      	ldr	r3, [pc, #76]	@ (8003f34 <_sbrk+0x64>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eec:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <_sbrk+0x64>)
 8003eee:	4a12      	ldr	r2, [pc, #72]	@ (8003f38 <_sbrk+0x68>)
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ef2:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <_sbrk+0x64>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d207      	bcs.n	8003f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f00:	f006 fdf0 	bl	800aae4 <__errno>
 8003f04:	4603      	mov	r3, r0
 8003f06:	220c      	movs	r2, #12
 8003f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	e009      	b.n	8003f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f10:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <_sbrk+0x64>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f16:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <_sbrk+0x64>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	4a05      	ldr	r2, [pc, #20]	@ (8003f34 <_sbrk+0x64>)
 8003f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20050000 	.word	0x20050000
 8003f30:	00000400 	.word	0x00000400
 8003f34:	200144b4 	.word	0x200144b4
 8003f38:	20014608 	.word	0x20014608

08003f3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <SystemInit+0x20>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	4a05      	ldr	r2, [pc, #20]	@ (8003f5c <SystemInit+0x20>)
 8003f48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f64:	480d      	ldr	r0, [pc, #52]	@ (8003f9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f66:	490e      	ldr	r1, [pc, #56]	@ (8003fa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f68:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f6c:	e002      	b.n	8003f74 <LoopCopyDataInit>

08003f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f72:	3304      	adds	r3, #4

08003f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f78:	d3f9      	bcc.n	8003f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8003fa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8003fac <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f80:	e001      	b.n	8003f86 <LoopFillZerobss>

08003f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f84:	3204      	adds	r2, #4

08003f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f88:	d3fb      	bcc.n	8003f82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f8a:	f7ff ffd7 	bl	8003f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f8e:	f006 fdaf 	bl	800aaf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f92:	f7fd ff4b 	bl	8001e2c <main>
  bx  lr    
 8003f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fa0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003fa4:	0800e250 	.word	0x0800e250
  ldr r2, =_sbss
 8003fa8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003fac:	20014608 	.word	0x20014608

08003fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fb0:	e7fe      	b.n	8003fb0 <ADC_IRQHandler>
	...

08003fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <HAL_Init+0x34>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <HAL_Init+0x34>)
 8003fbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fc2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fc4:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <HAL_Init+0x34>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a07      	ldr	r2, [pc, #28]	@ (8003fe8 <HAL_Init+0x34>)
 8003fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	f000 fe77 	bl	8004cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fd6:	2006      	movs	r0, #6
 8003fd8:	f000 f808 	bl	8003fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fdc:	f7ff fa26 	bl	800342c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023c00 	.word	0x40023c00

08003fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ff4:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <HAL_InitTick+0x54>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b12      	ldr	r3, [pc, #72]	@ (8004044 <HAL_InitTick+0x58>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004002:	fbb3 f3f1 	udiv	r3, r3, r1
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fe8f 	bl	8004d2e <HAL_SYSTICK_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e00e      	b.n	8004038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b0f      	cmp	r3, #15
 800401e:	d80a      	bhi.n	8004036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004020:	2200      	movs	r2, #0
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	f000 fe57 	bl	8004cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800402c:	4a06      	ldr	r2, [pc, #24]	@ (8004048 <HAL_InitTick+0x5c>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000000 	.word	0x20000000
 8004044:	20000008 	.word	0x20000008
 8004048:	20000004 	.word	0x20000004

0800404c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return uwTick;
 8004050:	4b03      	ldr	r3, [pc, #12]	@ (8004060 <HAL_GetTick+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	200144b8 	.word	0x200144b8

08004064 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e048      	b.n	800410c <HAL_ADC_Init+0xa8>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d120      	bne.n	80040c4 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a23      	ldr	r2, [pc, #140]	@ (8004114 <HAL_ADC_Init+0xb0>)
 8004086:	649a      	str	r2, [r3, #72]	@ 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a23      	ldr	r2, [pc, #140]	@ (8004118 <HAL_ADC_Init+0xb4>)
 800408c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a22      	ldr	r2, [pc, #136]	@ (800411c <HAL_ADC_Init+0xb8>)
 8004092:	651a      	str	r2, [r3, #80]	@ 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a22      	ldr	r2, [pc, #136]	@ (8004120 <HAL_ADC_Init+0xbc>)
 8004098:	655a      	str	r2, [r3, #84]	@ 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a21      	ldr	r2, [pc, #132]	@ (8004124 <HAL_ADC_Init+0xc0>)
 800409e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (hadc->MspInitCallback == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004128 <HAL_ADC_Init+0xc4>)
 80040ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <HAL_ADC_Init+0x9a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040d4:	4b15      	ldr	r3, [pc, #84]	@ (800412c <HAL_ADC_Init+0xc8>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	f043 0202 	orr.w	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f999 	bl	8004418 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	f023 0303 	bic.w	r3, r3, #3
 80040f4:	f043 0201 	orr.w	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80040fc:	e001      	b.n	8004102 <HAL_ADC_Init+0x9e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	08003315 	.word	0x08003315
 8004118:	08004131 	.word	0x08004131
 800411c:	08004145 	.word	0x08004145
 8004120:	08004159 	.word	0x08004159
 8004124:	080047a1 	.word	0x080047a1
 8004128:	08003475 	.word	0x08003475
 800412c:	ffffeefd 	.word	0xffffeefd

08004130 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x1c>
 8004184:	2302      	movs	r3, #2
 8004186:	e136      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x28a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b09      	cmp	r3, #9
 8004196:	d93a      	bls.n	800420e <HAL_ADC_ConfigChannel+0xa2>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041a0:	d035      	beq.n	800420e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68d9      	ldr	r1, [r3, #12]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	3b1e      	subs	r3, #30
 80041b8:	2207      	movs	r2, #7
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	400a      	ands	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a8d      	ldr	r2, [pc, #564]	@ (8004404 <HAL_ADC_ConfigChannel+0x298>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10a      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68d9      	ldr	r1, [r3, #12]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	061a      	lsls	r2, r3, #24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041e6:	e035      	b.n	8004254 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4618      	mov	r0, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4403      	add	r3, r0
 8004200:	3b1e      	subs	r3, #30
 8004202:	409a      	lsls	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800420c:	e022      	b.n	8004254 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6919      	ldr	r1, [r3, #16]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	4613      	mov	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	2207      	movs	r2, #7
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43da      	mvns	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	400a      	ands	r2, r1
 8004230:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6919      	ldr	r1, [r3, #16]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	4618      	mov	r0, r3
 8004244:	4603      	mov	r3, r0
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4403      	add	r3, r0
 800424a:	409a      	lsls	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d824      	bhi.n	80042a6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	3b05      	subs	r3, #5
 800426e:	221f      	movs	r2, #31
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43da      	mvns	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	400a      	ands	r2, r1
 800427c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	4618      	mov	r0, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	3b05      	subs	r3, #5
 8004298:	fa00 f203 	lsl.w	r2, r0, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80042a4:	e04c      	b.n	8004340 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d824      	bhi.n	80042f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	3b23      	subs	r3, #35	@ 0x23
 80042c0:	221f      	movs	r2, #31
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43da      	mvns	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	400a      	ands	r2, r1
 80042ce:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4618      	mov	r0, r3
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	3b23      	subs	r3, #35	@ 0x23
 80042ea:	fa00 f203 	lsl.w	r2, r0, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80042f6:	e023      	b.n	8004340 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	3b41      	subs	r3, #65	@ 0x41
 800430a:	221f      	movs	r2, #31
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43da      	mvns	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	400a      	ands	r2, r1
 8004318:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	4618      	mov	r0, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	3b41      	subs	r3, #65	@ 0x41
 8004334:	fa00 f203 	lsl.w	r2, r0, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a30      	ldr	r2, [pc, #192]	@ (8004408 <HAL_ADC_ConfigChannel+0x29c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10a      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1f4>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004352:	d105      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004354:	4b2d      	ldr	r3, [pc, #180]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a2c      	ldr	r2, [pc, #176]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 800435a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800435e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a28      	ldr	r2, [pc, #160]	@ (8004408 <HAL_ADC_ConfigChannel+0x29c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10f      	bne.n	800438a <HAL_ADC_ConfigChannel+0x21e>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b12      	cmp	r3, #18
 8004370:	d10b      	bne.n	800438a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004372:	4b26      	ldr	r3, [pc, #152]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4a25      	ldr	r2, [pc, #148]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004378:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800437c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800437e:	4b23      	ldr	r3, [pc, #140]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a22      	ldr	r2, [pc, #136]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 8004384:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004388:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <HAL_ADC_ConfigChannel+0x29c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d12b      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x280>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1a      	ldr	r2, [pc, #104]	@ (8004404 <HAL_ADC_ConfigChannel+0x298>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <HAL_ADC_ConfigChannel+0x23a>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b11      	cmp	r3, #17
 80043a4:	d122      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80043a6:	4b19      	ldr	r3, [pc, #100]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4a18      	ldr	r2, [pc, #96]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 80043ac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80043b0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80043b2:	4b16      	ldr	r3, [pc, #88]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4a15      	ldr	r2, [pc, #84]	@ (800440c <HAL_ADC_ConfigChannel+0x2a0>)
 80043b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a10      	ldr	r2, [pc, #64]	@ (8004404 <HAL_ADC_ConfigChannel+0x298>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d111      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80043c8:	4b11      	ldr	r3, [pc, #68]	@ (8004410 <HAL_ADC_ConfigChannel+0x2a4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a11      	ldr	r2, [pc, #68]	@ (8004414 <HAL_ADC_ConfigChannel+0x2a8>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0c9a      	lsrs	r2, r3, #18
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80043de:	e002      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f9      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	10000012 	.word	0x10000012
 8004408:	40012000 	.word	0x40012000
 800440c:	40012300 	.word	0x40012300
 8004410:	20000000 	.word	0x20000000
 8004414:	431bde83 	.word	0x431bde83

08004418 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004420:	4b78      	ldr	r3, [pc, #480]	@ (8004604 <ADC_Init+0x1ec>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a77      	ldr	r2, [pc, #476]	@ (8004604 <ADC_Init+0x1ec>)
 8004426:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800442a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800442c:	4b75      	ldr	r3, [pc, #468]	@ (8004604 <ADC_Init+0x1ec>)
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4973      	ldr	r1, [pc, #460]	@ (8004604 <ADC_Init+0x1ec>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	021a      	lsls	r2, r3, #8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800446c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800448e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6899      	ldr	r1, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	4a58      	ldr	r2, [pc, #352]	@ (8004608 <ADC_Init+0x1f0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d022      	beq.n	80044f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80044dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	e00f      	b.n	8004512 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004510:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0202 	bic.w	r2, r2, #2
 8004520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6899      	ldr	r1, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	005a      	lsls	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01b      	beq.n	8004578 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800454e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800455e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	3b01      	subs	r3, #1
 800456c:	035a      	lsls	r2, r3, #13
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	e007      	b.n	8004588 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004586:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004596:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	051a      	lsls	r2, r3, #20
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6899      	ldr	r1, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045ca:	025a      	lsls	r2, r3, #9
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	029a      	lsls	r2, r3, #10
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40012300 	.word	0x40012300
 8004608:	0f000001 	.word	0x0f000001

0800460c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 8004626:	2302      	movs	r3, #2
 8004628:	e0a5      	b.n	8004776 <HAL_ADCEx_MultiModeStart_DMA+0x16a>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d018      	beq.n	8004672 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004650:	4b4b      	ldr	r3, [pc, #300]	@ (8004780 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a4b      	ldr	r2, [pc, #300]	@ (8004784 <HAL_ADCEx_MultiModeStart_DMA+0x178>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0c9a      	lsrs	r2, r3, #18
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004664:	e002      	b.n	800466c <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	3b01      	subs	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f9      	bne.n	8004666 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b01      	cmp	r3, #1
 800467e:	d16d      	bne.n	800475c <HAL_ADCEx_MultiModeStart_DMA+0x150>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004684:	4b40      	ldr	r3, [pc, #256]	@ (8004788 <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 8004686:	4013      	ands	r3, r2
 8004688:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_ADCEx_MultiModeStart_DMA+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ba:	d106      	bne.n	80046ca <HAL_ADCEx_MultiModeStart_DMA+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c0:	f023 0206 	bic.w	r2, r3, #6
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80046c8:	e002      	b.n	80046d0 <HAL_ADCEx_MultiModeStart_DMA+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	4a2b      	ldr	r2, [pc, #172]	@ (800478c <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 80046de:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004790 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80046e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ec:	4a29      	ldr	r2, [pc, #164]	@ (8004794 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80046ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0202 	mvn.w	r2, #2
 80046f8:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004708:	605a      	str	r2, [r3, #4]
    
    if (hadc->Init.DMAContinuousRequests != DISABLE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <HAL_ADCEx_MultiModeStart_DMA+0x116>
    {
      /* Enable the selected ADC DMA request after last transfer */
      ADC->CCR |= ADC_CCR_DDS;
 8004714:	4b20      	ldr	r3, [pc, #128]	@ (8004798 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a1f      	ldr	r2, [pc, #124]	@ (8004798 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 800471a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800471e:	6053      	str	r3, [r2, #4]
 8004720:	e005      	b.n	800472e <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      ADC->CCR &= ~ADC_CCR_DDS;
 8004722:	4b1d      	ldr	r3, [pc, #116]	@ (8004798 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4a1c      	ldr	r2, [pc, #112]	@ (8004798 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8004728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800472c:	6053      	str	r3, [r2, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4919      	ldr	r1, [pc, #100]	@ (800479c <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8004738:	f000 fc76 	bl	8005028 <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d114      	bne.n	8004774 <HAL_ADCEx_MultiModeStart_DMA+0x168>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	e00b      	b.n	8004774 <HAL_ADCEx_MultiModeStart_DMA+0x168>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	f043 0210 	orr.w	r2, r3, #16
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476c:	f043 0201 	orr.w	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000000 	.word	0x20000000
 8004784:	431bde83 	.word	0x431bde83
 8004788:	fffff8fe 	.word	0xfffff8fe
 800478c:	0800483d 	.word	0x0800483d
 8004790:	080048e3 	.word	0x080048e3
 8004794:	080048ff 	.word	0x080048ff
 8004798:	40012300 	.word	0x40012300
 800479c:	40012308 	.word	0x40012308

080047a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e02f      	b.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 80047d4:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4a17      	ldr	r2, [pc, #92]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 80047da:	f023 031f 	bic.w	r3, r3, #31
 80047de:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->Mode;
 80047e0:	4b15      	ldr	r3, [pc, #84]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4913      	ldr	r1, [pc, #76]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	604b      	str	r3, [r1, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 80047ee:	4b12      	ldr	r3, [pc, #72]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4a11      	ldr	r2, [pc, #68]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 80047f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80047f8:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 80047fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	490d      	ldr	r1, [pc, #52]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
  
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4a0a      	ldr	r2, [pc, #40]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 800480e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004812:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8004814:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4906      	ldr	r1, [pc, #24]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40012300 	.word	0x40012300

0800483c <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004852:	2b00      	cmp	r3, #0
 8004854:	d13c      	bne.n	80048d0 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d12b      	bne.n	80048c8 <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004874:	2b00      	cmp	r3, #0
 8004876:	d127      	bne.n	80048c8 <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004890:	2b00      	cmp	r3, #0
 8004892:	d119      	bne.n	80048c8 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0220 	bic.w	r2, r2, #32
 80048a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	f043 0201 	orr.w	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7fe fd23 	bl	8003314 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80048ce:	e004      	b.n	80048da <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7ff fc1d 	bl	8004130 <HAL_ADC_ConvHalfCpltCallback>
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2240      	movs	r2, #64	@ 0x40
 8004910:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	f043 0204 	orr.w	r2, r3, #4
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	645a      	str	r2, [r3, #68]	@ 0x44
    HAL_ADC_ErrorCallback(hadc); 
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff fc1a 	bl	8004158 <HAL_ADC_ErrorCallback>
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0ed      	b.n	8004b1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fe fef6 	bl	800373c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004960:	f7ff fb74 	bl	800404c <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004966:	e012      	b.n	800498e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004968:	f7ff fb70 	bl	800404c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b0a      	cmp	r3, #10
 8004974:	d90b      	bls.n	800498e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2205      	movs	r2, #5
 8004986:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e0c5      	b.n	8004b1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0e5      	beq.n	8004968 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0202 	bic.w	r2, r2, #2
 80049aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ac:	f7ff fb4e 	bl	800404c <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049b2:	e012      	b.n	80049da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049b4:	f7ff fb4a 	bl	800404c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b0a      	cmp	r3, #10
 80049c0:	d90b      	bls.n	80049da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2205      	movs	r2, #5
 80049d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e09f      	b.n	8004b1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e5      	bne.n	80049b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7e1b      	ldrb	r3, [r3, #24]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d108      	bne.n	8004a02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e007      	b.n	8004a12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	7e5b      	ldrb	r3, [r3, #25]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d108      	bne.n	8004a2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e007      	b.n	8004a3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	7e9b      	ldrb	r3, [r3, #26]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d108      	bne.n	8004a56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0220 	orr.w	r2, r2, #32
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e007      	b.n	8004a66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0220 	bic.w	r2, r2, #32
 8004a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7edb      	ldrb	r3, [r3, #27]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d108      	bne.n	8004a80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0210 	bic.w	r2, r2, #16
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e007      	b.n	8004a90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0210 	orr.w	r2, r2, #16
 8004a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7f1b      	ldrb	r3, [r3, #28]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d108      	bne.n	8004aaa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e007      	b.n	8004aba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0208 	bic.w	r2, r2, #8
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	7f5b      	ldrb	r3, [r3, #29]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d108      	bne.n	8004ad4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0204 	orr.w	r2, r2, #4
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e007      	b.n	8004ae4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0204 	bic.w	r2, r2, #4
 8004ae2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	ea42 0103 	orr.w	r1, r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	1e5a      	subs	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <__NVIC_SetPriorityGrouping>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b34:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <__NVIC_SetPriorityGrouping+0x40>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b40:	4013      	ands	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b52:	4a04      	ldr	r2, [pc, #16]	@ (8004b64 <__NVIC_SetPriorityGrouping+0x40>)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	60d3      	str	r3, [r2, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00
 8004b68:	05fa0000 	.word	0x05fa0000

08004b6c <__NVIC_GetPriorityGrouping>:
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b70:	4b04      	ldr	r3, [pc, #16]	@ (8004b84 <__NVIC_GetPriorityGrouping+0x18>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f003 0307 	and.w	r3, r3, #7
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <__NVIC_EnableIRQ>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	db0b      	blt.n	8004bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	f003 021f 	and.w	r2, r3, #31
 8004ba0:	4907      	ldr	r1, [pc, #28]	@ (8004bc0 <__NVIC_EnableIRQ+0x38>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2001      	movs	r0, #1
 8004baa:	fa00 f202 	lsl.w	r2, r0, r2
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000e100 	.word	0xe000e100

08004bc4 <__NVIC_SetPriority>:
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	6039      	str	r1, [r7, #0]
 8004bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	db0a      	blt.n	8004bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	490c      	ldr	r1, [pc, #48]	@ (8004c10 <__NVIC_SetPriority+0x4c>)
 8004bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be2:	0112      	lsls	r2, r2, #4
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	440b      	add	r3, r1
 8004be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bec:	e00a      	b.n	8004c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4908      	ldr	r1, [pc, #32]	@ (8004c14 <__NVIC_SetPriority+0x50>)
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	3b04      	subs	r3, #4
 8004bfc:	0112      	lsls	r2, r2, #4
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	440b      	add	r3, r1
 8004c02:	761a      	strb	r2, [r3, #24]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	e000e100 	.word	0xe000e100
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <NVIC_EncodePriority>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	@ 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f1c3 0307 	rsb	r3, r3, #7
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	bf28      	it	cs
 8004c36:	2304      	movcs	r3, #4
 8004c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	2b06      	cmp	r3, #6
 8004c40:	d902      	bls.n	8004c48 <NVIC_EncodePriority+0x30>
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	3b03      	subs	r3, #3
 8004c46:	e000      	b.n	8004c4a <NVIC_EncodePriority+0x32>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43da      	mvns	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	401a      	ands	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c60:	f04f 31ff 	mov.w	r1, #4294967295
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6a:	43d9      	mvns	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c70:	4313      	orrs	r3, r2
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3724      	adds	r7, #36	@ 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c90:	d301      	bcc.n	8004c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c92:	2301      	movs	r3, #1
 8004c94:	e00f      	b.n	8004cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <SysTick_Config+0x40>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c9e:	210f      	movs	r1, #15
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	f7ff ff8e 	bl	8004bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <SysTick_Config+0x40>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cae:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <SysTick_Config+0x40>)
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	e000e010 	.word	0xe000e010

08004cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff29 	bl	8004b24 <__NVIC_SetPriorityGrouping>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cec:	f7ff ff3e 	bl	8004b6c <__NVIC_GetPriorityGrouping>
 8004cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	6978      	ldr	r0, [r7, #20]
 8004cf8:	f7ff ff8e 	bl	8004c18 <NVIC_EncodePriority>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d02:	4611      	mov	r1, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff5d 	bl	8004bc4 <__NVIC_SetPriority>
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	4603      	mov	r3, r0
 8004d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff31 	bl	8004b88 <__NVIC_EnableIRQ>
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff ffa2 	bl	8004c80 <SysTick_Config>
 8004d3c:	4603      	mov	r3, r0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e014      	b.n	8004d82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	791b      	ldrb	r3, [r3, #4]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fe fd2b 	bl	80037c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	795b      	ldrb	r3, [r3, #5]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_DAC_Start+0x16>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e040      	b.n	8004e22 <HAL_DAC_Start+0x98>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2201      	movs	r2, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10f      	bne.n	8004dea <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004dd4:	2b3c      	cmp	r3, #60	@ 0x3c
 8004dd6:	d11d      	bne.n	8004e14 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	e014      	b.n	8004e14 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	213c      	movs	r1, #60	@ 0x3c
 8004dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d107      	bne.n	8004e14 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0202 	orr.w	r2, r2, #2
 8004e12:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b087      	sub	sp, #28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	795b      	ldrb	r3, [r3, #5]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_DAC_ConfigChannel+0x18>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e03c      	b.n	8004ec0 <HAL_DAC_ConfigChannel+0x92>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6819      	ldr	r1, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	22c0      	movs	r2, #192	@ 0xc0
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43da      	mvns	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	400a      	ands	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ed8:	f7ff f8b8 	bl	800404c <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e099      	b.n	800501c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f08:	e00f      	b.n	8004f2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f0a:	f7ff f89f 	bl	800404c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b05      	cmp	r3, #5
 8004f16:	d908      	bls.n	8004f2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2203      	movs	r2, #3
 8004f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e078      	b.n	800501c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e8      	bne.n	8004f0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4b38      	ldr	r3, [pc, #224]	@ (8005024 <HAL_DMA_Init+0x158>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d107      	bne.n	8004f94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d117      	bne.n	8004fee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00e      	beq.n	8004fee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb09 	bl	80055e8 <DMA_CheckFifoParam>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2240      	movs	r2, #64	@ 0x40
 8004fe0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004fea:	2301      	movs	r3, #1
 8004fec:	e016      	b.n	800501c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fac0 	bl	800557c <DMA_CalcBaseAndBitshift>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005004:	223f      	movs	r2, #63	@ 0x3f
 8005006:	409a      	lsls	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	f010803f 	.word	0xf010803f

08005028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_DMA_Start_IT+0x26>
 800504a:	2302      	movs	r3, #2
 800504c:	e048      	b.n	80050e0 <HAL_DMA_Start_IT+0xb8>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d137      	bne.n	80050d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2202      	movs	r2, #2
 8005066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fa52 	bl	8005520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005080:	223f      	movs	r2, #63	@ 0x3f
 8005082:	409a      	lsls	r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0216 	orr.w	r2, r2, #22
 8005096:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80050a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0208 	orr.w	r2, r2, #8
 80050be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e005      	b.n	80050de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050da:	2302      	movs	r3, #2
 80050dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050de:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050f6:	f7fe ffa9 	bl	800404c <HAL_GetTick>
 80050fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d008      	beq.n	800511a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2280      	movs	r2, #128	@ 0x80
 800510c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e052      	b.n	80051c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0216 	bic.w	r2, r2, #22
 8005128:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005138:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <HAL_DMA_Abort+0x62>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0208 	bic.w	r2, r2, #8
 8005158:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800516a:	e013      	b.n	8005194 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800516c:	f7fe ff6e 	bl	800404c <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b05      	cmp	r3, #5
 8005178:	d90c      	bls.n	8005194 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2203      	movs	r2, #3
 8005184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e015      	b.n	80051c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e4      	bne.n	800516c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a6:	223f      	movs	r2, #63	@ 0x3f
 80051a8:	409a      	lsls	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d004      	beq.n	80051e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2280      	movs	r2, #128	@ 0x80
 80051e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e00c      	b.n	8005200 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2205      	movs	r2, #5
 80051ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005218:	4b8e      	ldr	r3, [pc, #568]	@ (8005454 <HAL_DMA_IRQHandler+0x248>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a8e      	ldr	r2, [pc, #568]	@ (8005458 <HAL_DMA_IRQHandler+0x24c>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	0a9b      	lsrs	r3, r3, #10
 8005224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005236:	2208      	movs	r2, #8
 8005238:	409a      	lsls	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01a      	beq.n	8005278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d013      	beq.n	8005278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005264:	2208      	movs	r2, #8
 8005266:	409a      	lsls	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005270:	f043 0201 	orr.w	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527c:	2201      	movs	r2, #1
 800527e:	409a      	lsls	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d012      	beq.n	80052ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00b      	beq.n	80052ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529a:	2201      	movs	r2, #1
 800529c:	409a      	lsls	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a6:	f043 0202 	orr.w	r2, r3, #2
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b2:	2204      	movs	r2, #4
 80052b4:	409a      	lsls	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4013      	ands	r3, r2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d012      	beq.n	80052e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d0:	2204      	movs	r2, #4
 80052d2:	409a      	lsls	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052dc:	f043 0204 	orr.w	r2, r3, #4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e8:	2210      	movs	r2, #16
 80052ea:	409a      	lsls	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d043      	beq.n	800537c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d03c      	beq.n	800537c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005306:	2210      	movs	r2, #16
 8005308:	409a      	lsls	r2, r3
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d018      	beq.n	800534e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d108      	bne.n	800533c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d024      	beq.n	800537c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
 800533a:	e01f      	b.n	800537c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01b      	beq.n	800537c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
 800534c:	e016      	b.n	800537c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d107      	bne.n	800536c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0208 	bic.w	r2, r2, #8
 800536a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005380:	2220      	movs	r2, #32
 8005382:	409a      	lsls	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4013      	ands	r3, r2
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 808f 	beq.w	80054ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8087 	beq.w	80054ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a2:	2220      	movs	r2, #32
 80053a4:	409a      	lsls	r2, r3
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d136      	bne.n	8005424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0216 	bic.w	r2, r2, #22
 80053c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <HAL_DMA_IRQHandler+0x1da>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0208 	bic.w	r2, r2, #8
 80053f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fa:	223f      	movs	r2, #63	@ 0x3f
 80053fc:	409a      	lsls	r2, r3
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005416:	2b00      	cmp	r3, #0
 8005418:	d07e      	beq.n	8005518 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	4798      	blx	r3
        }
        return;
 8005422:	e079      	b.n	8005518 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01d      	beq.n	800546e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10d      	bne.n	800545c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005444:	2b00      	cmp	r3, #0
 8005446:	d031      	beq.n	80054ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
 8005450:	e02c      	b.n	80054ac <HAL_DMA_IRQHandler+0x2a0>
 8005452:	bf00      	nop
 8005454:	20000000 	.word	0x20000000
 8005458:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d023      	beq.n	80054ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4798      	blx	r3
 800546c:	e01e      	b.n	80054ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10f      	bne.n	800549c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0210 	bic.w	r2, r2, #16
 800548a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d032      	beq.n	800551a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d022      	beq.n	8005506 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2205      	movs	r2, #5
 80054c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	3301      	adds	r3, #1
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d307      	bcc.n	80054f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f2      	bne.n	80054d8 <HAL_DMA_IRQHandler+0x2cc>
 80054f2:	e000      	b.n	80054f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80054f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	4798      	blx	r3
 8005516:	e000      	b.n	800551a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005518:	bf00      	nop
    }
  }
}
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800553c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b40      	cmp	r3, #64	@ 0x40
 800554c:	d108      	bne.n	8005560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800555e:	e007      	b.n	8005570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	3b10      	subs	r3, #16
 800558c:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <DMA_CalcBaseAndBitshift+0x60>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	091b      	lsrs	r3, r3, #4
 8005594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005596:	4a12      	ldr	r2, [pc, #72]	@ (80055e0 <DMA_CalcBaseAndBitshift+0x64>)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d908      	bls.n	80055bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	4b0c      	ldr	r3, [pc, #48]	@ (80055e4 <DMA_CalcBaseAndBitshift+0x68>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	1d1a      	adds	r2, r3, #4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80055ba:	e006      	b.n	80055ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	4b08      	ldr	r3, [pc, #32]	@ (80055e4 <DMA_CalcBaseAndBitshift+0x68>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	aaaaaaab 	.word	0xaaaaaaab
 80055e0:	0800dce8 	.word	0x0800dce8
 80055e4:	fffffc00 	.word	0xfffffc00

080055e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d11f      	bne.n	8005642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d856      	bhi.n	80056b6 <DMA_CheckFifoParam+0xce>
 8005608:	a201      	add	r2, pc, #4	@ (adr r2, 8005610 <DMA_CheckFifoParam+0x28>)
 800560a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560e:	bf00      	nop
 8005610:	08005621 	.word	0x08005621
 8005614:	08005633 	.word	0x08005633
 8005618:	08005621 	.word	0x08005621
 800561c:	080056b7 	.word	0x080056b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d046      	beq.n	80056ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005630:	e043      	b.n	80056ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800563a:	d140      	bne.n	80056be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005640:	e03d      	b.n	80056be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800564a:	d121      	bne.n	8005690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b03      	cmp	r3, #3
 8005650:	d837      	bhi.n	80056c2 <DMA_CheckFifoParam+0xda>
 8005652:	a201      	add	r2, pc, #4	@ (adr r2, 8005658 <DMA_CheckFifoParam+0x70>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	08005669 	.word	0x08005669
 800565c:	0800566f 	.word	0x0800566f
 8005660:	08005669 	.word	0x08005669
 8005664:	08005681 	.word	0x08005681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
      break;
 800566c:	e030      	b.n	80056d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d025      	beq.n	80056c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800567e:	e022      	b.n	80056c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005688:	d11f      	bne.n	80056ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800568e:	e01c      	b.n	80056ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d903      	bls.n	800569e <DMA_CheckFifoParam+0xb6>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d003      	beq.n	80056a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800569c:	e018      	b.n	80056d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
      break;
 80056a2:	e015      	b.n	80056d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00e      	beq.n	80056ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      break;
 80056b4:	e00b      	b.n	80056ce <DMA_CheckFifoParam+0xe6>
      break;
 80056b6:	bf00      	nop
 80056b8:	e00a      	b.n	80056d0 <DMA_CheckFifoParam+0xe8>
      break;
 80056ba:	bf00      	nop
 80056bc:	e008      	b.n	80056d0 <DMA_CheckFifoParam+0xe8>
      break;
 80056be:	bf00      	nop
 80056c0:	e006      	b.n	80056d0 <DMA_CheckFifoParam+0xe8>
      break;
 80056c2:	bf00      	nop
 80056c4:	e004      	b.n	80056d0 <DMA_CheckFifoParam+0xe8>
      break;
 80056c6:	bf00      	nop
 80056c8:	e002      	b.n	80056d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80056ca:	bf00      	nop
 80056cc:	e000      	b.n	80056d0 <DMA_CheckFifoParam+0xe8>
      break;
 80056ce:	bf00      	nop
    }
  } 
  
  return status; 
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop

080056e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b089      	sub	sp, #36	@ 0x24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056f2:	2300      	movs	r3, #0
 80056f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	e175      	b.n	80059ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005700:	2201      	movs	r2, #1
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4013      	ands	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	429a      	cmp	r2, r3
 800571a:	f040 8164 	bne.w	80059e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b01      	cmp	r3, #1
 8005728:	d005      	beq.n	8005736 <HAL_GPIO_Init+0x56>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d130      	bne.n	8005798 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	2203      	movs	r2, #3
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4013      	ands	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800576c:	2201      	movs	r2, #1
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	f003 0201 	and.w	r2, r3, #1
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4313      	orrs	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d017      	beq.n	80057d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	2203      	movs	r2, #3
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4013      	ands	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d123      	bne.n	8005828 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	08da      	lsrs	r2, r3, #3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3208      	adds	r2, #8
 80057e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	220f      	movs	r2, #15
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	4013      	ands	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4313      	orrs	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	08da      	lsrs	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3208      	adds	r2, #8
 8005822:	69b9      	ldr	r1, [r7, #24]
 8005824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	2203      	movs	r2, #3
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	43db      	mvns	r3, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f003 0203 	and.w	r2, r3, #3
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80be 	beq.w	80059e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586a:	4b66      	ldr	r3, [pc, #408]	@ (8005a04 <HAL_GPIO_Init+0x324>)
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	4a65      	ldr	r2, [pc, #404]	@ (8005a04 <HAL_GPIO_Init+0x324>)
 8005870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005874:	6453      	str	r3, [r2, #68]	@ 0x44
 8005876:	4b63      	ldr	r3, [pc, #396]	@ (8005a04 <HAL_GPIO_Init+0x324>)
 8005878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005882:	4a61      	ldr	r2, [pc, #388]	@ (8005a08 <HAL_GPIO_Init+0x328>)
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	3302      	adds	r3, #2
 800588a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	220f      	movs	r2, #15
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a58      	ldr	r2, [pc, #352]	@ (8005a0c <HAL_GPIO_Init+0x32c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d037      	beq.n	800591e <HAL_GPIO_Init+0x23e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a57      	ldr	r2, [pc, #348]	@ (8005a10 <HAL_GPIO_Init+0x330>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d031      	beq.n	800591a <HAL_GPIO_Init+0x23a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a56      	ldr	r2, [pc, #344]	@ (8005a14 <HAL_GPIO_Init+0x334>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d02b      	beq.n	8005916 <HAL_GPIO_Init+0x236>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a55      	ldr	r2, [pc, #340]	@ (8005a18 <HAL_GPIO_Init+0x338>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d025      	beq.n	8005912 <HAL_GPIO_Init+0x232>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a54      	ldr	r2, [pc, #336]	@ (8005a1c <HAL_GPIO_Init+0x33c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01f      	beq.n	800590e <HAL_GPIO_Init+0x22e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a53      	ldr	r2, [pc, #332]	@ (8005a20 <HAL_GPIO_Init+0x340>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d019      	beq.n	800590a <HAL_GPIO_Init+0x22a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a52      	ldr	r2, [pc, #328]	@ (8005a24 <HAL_GPIO_Init+0x344>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_GPIO_Init+0x226>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a51      	ldr	r2, [pc, #324]	@ (8005a28 <HAL_GPIO_Init+0x348>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00d      	beq.n	8005902 <HAL_GPIO_Init+0x222>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a50      	ldr	r2, [pc, #320]	@ (8005a2c <HAL_GPIO_Init+0x34c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d007      	beq.n	80058fe <HAL_GPIO_Init+0x21e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005a30 <HAL_GPIO_Init+0x350>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <HAL_GPIO_Init+0x21a>
 80058f6:	2309      	movs	r3, #9
 80058f8:	e012      	b.n	8005920 <HAL_GPIO_Init+0x240>
 80058fa:	230a      	movs	r3, #10
 80058fc:	e010      	b.n	8005920 <HAL_GPIO_Init+0x240>
 80058fe:	2308      	movs	r3, #8
 8005900:	e00e      	b.n	8005920 <HAL_GPIO_Init+0x240>
 8005902:	2307      	movs	r3, #7
 8005904:	e00c      	b.n	8005920 <HAL_GPIO_Init+0x240>
 8005906:	2306      	movs	r3, #6
 8005908:	e00a      	b.n	8005920 <HAL_GPIO_Init+0x240>
 800590a:	2305      	movs	r3, #5
 800590c:	e008      	b.n	8005920 <HAL_GPIO_Init+0x240>
 800590e:	2304      	movs	r3, #4
 8005910:	e006      	b.n	8005920 <HAL_GPIO_Init+0x240>
 8005912:	2303      	movs	r3, #3
 8005914:	e004      	b.n	8005920 <HAL_GPIO_Init+0x240>
 8005916:	2302      	movs	r3, #2
 8005918:	e002      	b.n	8005920 <HAL_GPIO_Init+0x240>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_GPIO_Init+0x240>
 800591e:	2300      	movs	r3, #0
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	f002 0203 	and.w	r2, r2, #3
 8005926:	0092      	lsls	r2, r2, #2
 8005928:	4093      	lsls	r3, r2
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005930:	4935      	ldr	r1, [pc, #212]	@ (8005a08 <HAL_GPIO_Init+0x328>)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	089b      	lsrs	r3, r3, #2
 8005936:	3302      	adds	r3, #2
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800593e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	43db      	mvns	r3, r3
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4013      	ands	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005962:	4a34      	ldr	r2, [pc, #208]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005968:	4b32      	ldr	r3, [pc, #200]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800598c:	4a29      	ldr	r2, [pc, #164]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005992:	4b28      	ldr	r3, [pc, #160]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059e0:	4a14      	ldr	r2, [pc, #80]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	f67f ae86 	bls.w	8005700 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3724      	adds	r7, #36	@ 0x24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800
 8005a08:	40013800 	.word	0x40013800
 8005a0c:	40020000 	.word	0x40020000
 8005a10:	40020400 	.word	0x40020400
 8005a14:	40020800 	.word	0x40020800
 8005a18:	40020c00 	.word	0x40020c00
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	40021400 	.word	0x40021400
 8005a24:	40021800 	.word	0x40021800
 8005a28:	40021c00 	.word	0x40021c00
 8005a2c:	40022000 	.word	0x40022000
 8005a30:	40022400 	.word	0x40022400
 8005a34:	40013c00 	.word	0x40013c00

08005a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	887b      	ldrh	r3, [r7, #2]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
 8005a54:	e001      	b.n	8005a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	807b      	strh	r3, [r7, #2]
 8005a74:	4613      	mov	r3, r2
 8005a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a78:	787b      	ldrb	r3, [r7, #1]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a84:	e003      	b.n	8005a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a86:	887b      	ldrh	r3, [r7, #2]
 8005a88:	041a      	lsls	r2, r3, #16
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	619a      	str	r2, [r3, #24]
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e07f      	b.n	8005bae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fd febe 	bl	8003844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2224      	movs	r2, #36	@ 0x24
 8005acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0201 	bic.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005aec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005afc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d107      	bne.n	8005b16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b12:	609a      	str	r2, [r3, #8]
 8005b14:	e006      	b.n	8005b24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d104      	bne.n	8005b36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6859      	ldr	r1, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb8 <HAL_I2C_Init+0x11c>)
 8005b42:	430b      	orrs	r3, r1
 8005b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69d9      	ldr	r1, [r3, #28]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	02008000 	.word	0x02008000

08005bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d138      	bne.n	8005c44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e032      	b.n	8005c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2224      	movs	r2, #36	@ 0x24
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6819      	ldr	r1, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e000      	b.n	8005c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d139      	bne.n	8005cdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e033      	b.n	8005cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2224      	movs	r2, #36	@ 0x24
 8005c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ca4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e000      	b.n	8005cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cdc:	2302      	movs	r3, #2
  }
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cf6:	4b23      	ldr	r3, [pc, #140]	@ (8005d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	4a22      	ldr	r2, [pc, #136]	@ (8005d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d02:	4b20      	ldr	r3, [pc, #128]	@ (8005d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1d      	ldr	r2, [pc, #116]	@ (8005d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d1a:	f7fe f997 	bl	800404c <HAL_GetTick>
 8005d1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d20:	e009      	b.n	8005d36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d22:	f7fe f993 	bl	800404c <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d30:	d901      	bls.n	8005d36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e022      	b.n	8005d7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d36:	4b14      	ldr	r3, [pc, #80]	@ (8005d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d42:	d1ee      	bne.n	8005d22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d44:	4b10      	ldr	r3, [pc, #64]	@ (8005d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a0f      	ldr	r2, [pc, #60]	@ (8005d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d50:	f7fe f97c 	bl	800404c <HAL_GetTick>
 8005d54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d56:	e009      	b.n	8005d6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d58:	f7fe f978 	bl	800404c <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d66:	d901      	bls.n	8005d6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e007      	b.n	8005d7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d6c:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d78:	d1ee      	bne.n	8005d58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40023800 	.word	0x40023800
 8005d88:	40007000 	.word	0x40007000

08005d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005d94:	2300      	movs	r3, #0
 8005d96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e291      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8087 	beq.w	8005ebe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005db0:	4b96      	ldr	r3, [pc, #600]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d00c      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dbc:	4b93      	ldr	r3, [pc, #588]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 030c 	and.w	r3, r3, #12
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d112      	bne.n	8005dee <HAL_RCC_OscConfig+0x62>
 8005dc8:	4b90      	ldr	r3, [pc, #576]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd6:	4b8d      	ldr	r3, [pc, #564]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d06c      	beq.n	8005ebc <HAL_RCC_OscConfig+0x130>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d168      	bne.n	8005ebc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e26b      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x7a>
 8005df8:	4b84      	ldr	r3, [pc, #528]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a83      	ldr	r2, [pc, #524]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e02e      	b.n	8005e64 <HAL_RCC_OscConfig+0xd8>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x9c>
 8005e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7e      	ldr	r2, [pc, #504]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b7c      	ldr	r3, [pc, #496]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a7b      	ldr	r2, [pc, #492]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e01d      	b.n	8005e64 <HAL_RCC_OscConfig+0xd8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0xc0>
 8005e32:	4b76      	ldr	r3, [pc, #472]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a75      	ldr	r2, [pc, #468]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b73      	ldr	r3, [pc, #460]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a72      	ldr	r2, [pc, #456]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e00b      	b.n	8005e64 <HAL_RCC_OscConfig+0xd8>
 8005e4c:	4b6f      	ldr	r3, [pc, #444]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a6e      	ldr	r2, [pc, #440]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4b6c      	ldr	r3, [pc, #432]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d013      	beq.n	8005e94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6c:	f7fe f8ee 	bl	800404c <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e74:	f7fe f8ea 	bl	800404c <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	@ 0x64
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e21f      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e86:	4b61      	ldr	r3, [pc, #388]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0xe8>
 8005e92:	e014      	b.n	8005ebe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fe f8da 	bl	800404c <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fe f8d6 	bl	800404c <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b64      	cmp	r3, #100	@ 0x64
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e20b      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eae:	4b57      	ldr	r3, [pc, #348]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x110>
 8005eba:	e000      	b.n	8005ebe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d069      	beq.n	8005f9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eca:	4b50      	ldr	r3, [pc, #320]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 030c 	and.w	r3, r3, #12
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d11c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x190>
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d116      	bne.n	8005f1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eee:	4b47      	ldr	r3, [pc, #284]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_RCC_OscConfig+0x17a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e1df      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	4b41      	ldr	r3, [pc, #260]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	493d      	ldr	r1, [pc, #244]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1a:	e040      	b.n	8005f9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d023      	beq.n	8005f6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f24:	4b39      	ldr	r3, [pc, #228]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a38      	ldr	r2, [pc, #224]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fe f88c 	bl	800404c <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f38:	f7fe f888 	bl	800404c <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e1bd      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f4a:	4b30      	ldr	r3, [pc, #192]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b2d      	ldr	r3, [pc, #180]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4929      	ldr	r1, [pc, #164]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]
 8005f6a:	e018      	b.n	8005f9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f6c:	4b27      	ldr	r3, [pc, #156]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a26      	ldr	r2, [pc, #152]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f78:	f7fe f868 	bl	800404c <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f80:	f7fe f864 	bl	800404c <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e199      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f92:	4b1e      	ldr	r3, [pc, #120]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f0      	bne.n	8005f80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d038      	beq.n	800601c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d019      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb2:	4b16      	ldr	r3, [pc, #88]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb6:	4a15      	ldr	r2, [pc, #84]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbe:	f7fe f845 	bl	800404c <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc6:	f7fe f841 	bl	800404c <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e176      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x23a>
 8005fe4:	e01a      	b.n	800601c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe6:	4b09      	ldr	r3, [pc, #36]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fea:	4a08      	ldr	r2, [pc, #32]	@ (800600c <HAL_RCC_OscConfig+0x280>)
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff2:	f7fe f82b 	bl	800404c <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ffa:	f7fe f827 	bl	800404c <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d903      	bls.n	8006010 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e15c      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
 800600c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006010:	4b91      	ldr	r3, [pc, #580]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 8006012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1ee      	bne.n	8005ffa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80a4 	beq.w	8006172 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800602a:	4b8b      	ldr	r3, [pc, #556]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10d      	bne.n	8006052 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006036:	4b88      	ldr	r3, [pc, #544]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	4a87      	ldr	r2, [pc, #540]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 800603c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006040:	6413      	str	r3, [r2, #64]	@ 0x40
 8006042:	4b85      	ldr	r3, [pc, #532]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604e:	2301      	movs	r3, #1
 8006050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006052:	4b82      	ldr	r3, [pc, #520]	@ (800625c <HAL_RCC_OscConfig+0x4d0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d118      	bne.n	8006090 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800605e:	4b7f      	ldr	r3, [pc, #508]	@ (800625c <HAL_RCC_OscConfig+0x4d0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a7e      	ldr	r2, [pc, #504]	@ (800625c <HAL_RCC_OscConfig+0x4d0>)
 8006064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800606a:	f7fd ffef 	bl	800404c <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006072:	f7fd ffeb 	bl	800404c <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b64      	cmp	r3, #100	@ 0x64
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e120      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006084:	4b75      	ldr	r3, [pc, #468]	@ (800625c <HAL_RCC_OscConfig+0x4d0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d106      	bne.n	80060a6 <HAL_RCC_OscConfig+0x31a>
 8006098:	4b6f      	ldr	r3, [pc, #444]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800609c:	4a6e      	ldr	r2, [pc, #440]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060a4:	e02d      	b.n	8006102 <HAL_RCC_OscConfig+0x376>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <HAL_RCC_OscConfig+0x33c>
 80060ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b2:	4a69      	ldr	r2, [pc, #420]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ba:	4b67      	ldr	r3, [pc, #412]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060be:	4a66      	ldr	r2, [pc, #408]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060c0:	f023 0304 	bic.w	r3, r3, #4
 80060c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c6:	e01c      	b.n	8006102 <HAL_RCC_OscConfig+0x376>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b05      	cmp	r3, #5
 80060ce:	d10c      	bne.n	80060ea <HAL_RCC_OscConfig+0x35e>
 80060d0:	4b61      	ldr	r3, [pc, #388]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d4:	4a60      	ldr	r2, [pc, #384]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060d6:	f043 0304 	orr.w	r3, r3, #4
 80060da:	6713      	str	r3, [r2, #112]	@ 0x70
 80060dc:	4b5e      	ldr	r3, [pc, #376]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e0:	4a5d      	ldr	r2, [pc, #372]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e8:	e00b      	b.n	8006102 <HAL_RCC_OscConfig+0x376>
 80060ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ee:	4a5a      	ldr	r2, [pc, #360]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f6:	4b58      	ldr	r3, [pc, #352]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fa:	4a57      	ldr	r2, [pc, #348]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80060fc:	f023 0304 	bic.w	r3, r3, #4
 8006100:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d015      	beq.n	8006136 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610a:	f7fd ff9f 	bl	800404c <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006110:	e00a      	b.n	8006128 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006112:	f7fd ff9b 	bl	800404c <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006120:	4293      	cmp	r3, r2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e0ce      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006128:	4b4b      	ldr	r3, [pc, #300]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 800612a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0ee      	beq.n	8006112 <HAL_RCC_OscConfig+0x386>
 8006134:	e014      	b.n	8006160 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006136:	f7fd ff89 	bl	800404c <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800613c:	e00a      	b.n	8006154 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613e:	f7fd ff85 	bl	800404c <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800614c:	4293      	cmp	r3, r2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e0b8      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006154:	4b40      	ldr	r3, [pc, #256]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 8006156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1ee      	bne.n	800613e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d105      	bne.n	8006172 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006166:	4b3c      	ldr	r3, [pc, #240]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	4a3b      	ldr	r2, [pc, #236]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 800616c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006170:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 80a4 	beq.w	80062c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800617c:	4b36      	ldr	r3, [pc, #216]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f003 030c 	and.w	r3, r3, #12
 8006184:	2b08      	cmp	r3, #8
 8006186:	d06b      	beq.n	8006260 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d149      	bne.n	8006224 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006190:	4b31      	ldr	r3, [pc, #196]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a30      	ldr	r2, [pc, #192]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 8006196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800619a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7fd ff56 	bl	800404c <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a4:	f7fd ff52 	bl	800404c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e087      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b6:	4b28      	ldr	r3, [pc, #160]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69da      	ldr	r2, [r3, #28]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	019b      	lsls	r3, r3, #6
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	3b01      	subs	r3, #1
 80061dc:	041b      	lsls	r3, r3, #16
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	061b      	lsls	r3, r3, #24
 80061e6:	4313      	orrs	r3, r2
 80061e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80061ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f0:	4b19      	ldr	r3, [pc, #100]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a18      	ldr	r2, [pc, #96]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 80061f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fc:	f7fd ff26 	bl	800404c <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006204:	f7fd ff22 	bl	800404c <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e057      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006216:	4b10      	ldr	r3, [pc, #64]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0x478>
 8006222:	e04f      	b.n	80062c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006224:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a0b      	ldr	r2, [pc, #44]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 800622a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800622e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fd ff0c 	bl	800404c <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006238:	f7fd ff08 	bl	800404c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e03d      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624a:	4b03      	ldr	r3, [pc, #12]	@ (8006258 <HAL_RCC_OscConfig+0x4cc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x4ac>
 8006256:	e035      	b.n	80062c4 <HAL_RCC_OscConfig+0x538>
 8006258:	40023800 	.word	0x40023800
 800625c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006260:	4b1b      	ldr	r3, [pc, #108]	@ (80062d0 <HAL_RCC_OscConfig+0x544>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d028      	beq.n	80062c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006278:	429a      	cmp	r2, r3
 800627a:	d121      	bne.n	80062c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006286:	429a      	cmp	r2, r3
 8006288:	d11a      	bne.n	80062c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006290:	4013      	ands	r3, r2
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006296:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006298:	4293      	cmp	r3, r2
 800629a:	d111      	bne.n	80062c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	3b01      	subs	r3, #1
 80062aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d107      	bne.n	80062c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80062bc:	429a      	cmp	r2, r3
 80062be:	d001      	beq.n	80062c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	40023800 	.word	0x40023800

080062d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0d0      	b.n	800648e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062ec:	4b6a      	ldr	r3, [pc, #424]	@ (8006498 <HAL_RCC_ClockConfig+0x1c4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d910      	bls.n	800631c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fa:	4b67      	ldr	r3, [pc, #412]	@ (8006498 <HAL_RCC_ClockConfig+0x1c4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f023 020f 	bic.w	r2, r3, #15
 8006302:	4965      	ldr	r1, [pc, #404]	@ (8006498 <HAL_RCC_ClockConfig+0x1c4>)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	4313      	orrs	r3, r2
 8006308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800630a:	4b63      	ldr	r3, [pc, #396]	@ (8006498 <HAL_RCC_ClockConfig+0x1c4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d001      	beq.n	800631c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0b8      	b.n	800648e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d020      	beq.n	800636a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006334:	4b59      	ldr	r3, [pc, #356]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4a58      	ldr	r2, [pc, #352]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 800633a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800633e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800634c:	4b53      	ldr	r3, [pc, #332]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	4a52      	ldr	r2, [pc, #328]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 8006352:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006356:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006358:	4b50      	ldr	r3, [pc, #320]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	494d      	ldr	r1, [pc, #308]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 8006366:	4313      	orrs	r3, r2
 8006368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d040      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d107      	bne.n	800638e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637e:	4b47      	ldr	r3, [pc, #284]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d115      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e07f      	b.n	800648e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006396:	4b41      	ldr	r3, [pc, #260]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e073      	b.n	800648e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a6:	4b3d      	ldr	r3, [pc, #244]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e06b      	b.n	800648e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063b6:	4b39      	ldr	r3, [pc, #228]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 0203 	bic.w	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	4936      	ldr	r1, [pc, #216]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063c8:	f7fd fe40 	bl	800404c <HAL_GetTick>
 80063cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ce:	e00a      	b.n	80063e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063d0:	f7fd fe3c 	bl	800404c <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e053      	b.n	800648e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e6:	4b2d      	ldr	r3, [pc, #180]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 020c 	and.w	r2, r3, #12
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d1eb      	bne.n	80063d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063f8:	4b27      	ldr	r3, [pc, #156]	@ (8006498 <HAL_RCC_ClockConfig+0x1c4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d210      	bcs.n	8006428 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b24      	ldr	r3, [pc, #144]	@ (8006498 <HAL_RCC_ClockConfig+0x1c4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f023 020f 	bic.w	r2, r3, #15
 800640e:	4922      	ldr	r1, [pc, #136]	@ (8006498 <HAL_RCC_ClockConfig+0x1c4>)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	4313      	orrs	r3, r2
 8006414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006416:	4b20      	ldr	r3, [pc, #128]	@ (8006498 <HAL_RCC_ClockConfig+0x1c4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d001      	beq.n	8006428 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e032      	b.n	800648e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006434:	4b19      	ldr	r3, [pc, #100]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	4916      	ldr	r1, [pc, #88]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 8006442:	4313      	orrs	r3, r2
 8006444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006452:	4b12      	ldr	r3, [pc, #72]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	490e      	ldr	r1, [pc, #56]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 8006462:	4313      	orrs	r3, r2
 8006464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006466:	f000 f821 	bl	80064ac <HAL_RCC_GetSysClockFreq>
 800646a:	4602      	mov	r2, r0
 800646c:	4b0b      	ldr	r3, [pc, #44]	@ (800649c <HAL_RCC_ClockConfig+0x1c8>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	091b      	lsrs	r3, r3, #4
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	490a      	ldr	r1, [pc, #40]	@ (80064a0 <HAL_RCC_ClockConfig+0x1cc>)
 8006478:	5ccb      	ldrb	r3, [r1, r3]
 800647a:	fa22 f303 	lsr.w	r3, r2, r3
 800647e:	4a09      	ldr	r2, [pc, #36]	@ (80064a4 <HAL_RCC_ClockConfig+0x1d0>)
 8006480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006482:	4b09      	ldr	r3, [pc, #36]	@ (80064a8 <HAL_RCC_ClockConfig+0x1d4>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4618      	mov	r0, r3
 8006488:	f7fd fdb0 	bl	8003fec <HAL_InitTick>

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40023c00 	.word	0x40023c00
 800649c:	40023800 	.word	0x40023800
 80064a0:	0800dcd0 	.word	0x0800dcd0
 80064a4:	20000000 	.word	0x20000000
 80064a8:	20000004 	.word	0x20000004

080064ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b0:	b094      	sub	sp, #80	@ 0x50
 80064b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b8:	2300      	movs	r3, #0
 80064ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064bc:	2300      	movs	r3, #0
 80064be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064c4:	4b79      	ldr	r3, [pc, #484]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x200>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 030c 	and.w	r3, r3, #12
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d00d      	beq.n	80064ec <HAL_RCC_GetSysClockFreq+0x40>
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	f200 80e1 	bhi.w	8006698 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_RCC_GetSysClockFreq+0x34>
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d003      	beq.n	80064e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80064de:	e0db      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064e0:	4b73      	ldr	r3, [pc, #460]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80064e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064e4:	e0db      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064e6:	4b73      	ldr	r3, [pc, #460]	@ (80066b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80064e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064ea:	e0d8      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064ec:	4b6f      	ldr	r3, [pc, #444]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x200>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064f6:	4b6d      	ldr	r3, [pc, #436]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x200>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d063      	beq.n	80065ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006502:	4b6a      	ldr	r3, [pc, #424]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x200>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	099b      	lsrs	r3, r3, #6
 8006508:	2200      	movs	r2, #0
 800650a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800650c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800650e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006514:	633b      	str	r3, [r7, #48]	@ 0x30
 8006516:	2300      	movs	r3, #0
 8006518:	637b      	str	r3, [r7, #52]	@ 0x34
 800651a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800651e:	4622      	mov	r2, r4
 8006520:	462b      	mov	r3, r5
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f04f 0100 	mov.w	r1, #0
 800652a:	0159      	lsls	r1, r3, #5
 800652c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006530:	0150      	lsls	r0, r2, #5
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4621      	mov	r1, r4
 8006538:	1a51      	subs	r1, r2, r1
 800653a:	6139      	str	r1, [r7, #16]
 800653c:	4629      	mov	r1, r5
 800653e:	eb63 0301 	sbc.w	r3, r3, r1
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006550:	4659      	mov	r1, fp
 8006552:	018b      	lsls	r3, r1, #6
 8006554:	4651      	mov	r1, sl
 8006556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800655a:	4651      	mov	r1, sl
 800655c:	018a      	lsls	r2, r1, #6
 800655e:	4651      	mov	r1, sl
 8006560:	ebb2 0801 	subs.w	r8, r2, r1
 8006564:	4659      	mov	r1, fp
 8006566:	eb63 0901 	sbc.w	r9, r3, r1
 800656a:	f04f 0200 	mov.w	r2, #0
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800657a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800657e:	4690      	mov	r8, r2
 8006580:	4699      	mov	r9, r3
 8006582:	4623      	mov	r3, r4
 8006584:	eb18 0303 	adds.w	r3, r8, r3
 8006588:	60bb      	str	r3, [r7, #8]
 800658a:	462b      	mov	r3, r5
 800658c:	eb49 0303 	adc.w	r3, r9, r3
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800659e:	4629      	mov	r1, r5
 80065a0:	024b      	lsls	r3, r1, #9
 80065a2:	4621      	mov	r1, r4
 80065a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065a8:	4621      	mov	r1, r4
 80065aa:	024a      	lsls	r2, r1, #9
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b2:	2200      	movs	r2, #0
 80065b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065bc:	f7fa fb84 	bl	8000cc8 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4613      	mov	r3, r2
 80065c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c8:	e058      	b.n	800667c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ca:	4b38      	ldr	r3, [pc, #224]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x200>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	099b      	lsrs	r3, r3, #6
 80065d0:	2200      	movs	r2, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	4611      	mov	r1, r2
 80065d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065da:	623b      	str	r3, [r7, #32]
 80065dc:	2300      	movs	r3, #0
 80065de:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065e4:	4642      	mov	r2, r8
 80065e6:	464b      	mov	r3, r9
 80065e8:	f04f 0000 	mov.w	r0, #0
 80065ec:	f04f 0100 	mov.w	r1, #0
 80065f0:	0159      	lsls	r1, r3, #5
 80065f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065f6:	0150      	lsls	r0, r2, #5
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4641      	mov	r1, r8
 80065fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006602:	4649      	mov	r1, r9
 8006604:	eb63 0b01 	sbc.w	fp, r3, r1
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006614:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006618:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800661c:	ebb2 040a 	subs.w	r4, r2, sl
 8006620:	eb63 050b 	sbc.w	r5, r3, fp
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	00eb      	lsls	r3, r5, #3
 800662e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006632:	00e2      	lsls	r2, r4, #3
 8006634:	4614      	mov	r4, r2
 8006636:	461d      	mov	r5, r3
 8006638:	4643      	mov	r3, r8
 800663a:	18e3      	adds	r3, r4, r3
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	464b      	mov	r3, r9
 8006640:	eb45 0303 	adc.w	r3, r5, r3
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006652:	4629      	mov	r1, r5
 8006654:	028b      	lsls	r3, r1, #10
 8006656:	4621      	mov	r1, r4
 8006658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800665c:	4621      	mov	r1, r4
 800665e:	028a      	lsls	r2, r1, #10
 8006660:	4610      	mov	r0, r2
 8006662:	4619      	mov	r1, r3
 8006664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006666:	2200      	movs	r2, #0
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	61fa      	str	r2, [r7, #28]
 800666c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006670:	f7fa fb2a 	bl	8000cc8 <__aeabi_uldivmod>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4613      	mov	r3, r2
 800667a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800667c:	4b0b      	ldr	r3, [pc, #44]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x200>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	0c1b      	lsrs	r3, r3, #16
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	3301      	adds	r3, #1
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800668c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800668e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006690:	fbb2 f3f3 	udiv	r3, r2, r3
 8006694:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006696:	e002      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800669a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800669c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800669e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3750      	adds	r7, #80	@ 0x50
 80066a4:	46bd      	mov	sp, r7
 80066a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800
 80066b0:	00f42400 	.word	0x00f42400
 80066b4:	007a1200 	.word	0x007a1200

080066b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066bc:	4b03      	ldr	r3, [pc, #12]	@ (80066cc <HAL_RCC_GetHCLKFreq+0x14>)
 80066be:	681b      	ldr	r3, [r3, #0]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000000 	.word	0x20000000

080066d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066d4:	f7ff fff0 	bl	80066b8 <HAL_RCC_GetHCLKFreq>
 80066d8:	4602      	mov	r2, r0
 80066da:	4b05      	ldr	r3, [pc, #20]	@ (80066f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	0a9b      	lsrs	r3, r3, #10
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	4903      	ldr	r1, [pc, #12]	@ (80066f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066e6:	5ccb      	ldrb	r3, [r1, r3]
 80066e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40023800 	.word	0x40023800
 80066f4:	0800dce0 	.word	0x0800dce0

080066f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066fc:	f7ff ffdc 	bl	80066b8 <HAL_RCC_GetHCLKFreq>
 8006700:	4602      	mov	r2, r0
 8006702:	4b05      	ldr	r3, [pc, #20]	@ (8006718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	0b5b      	lsrs	r3, r3, #13
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	4903      	ldr	r1, [pc, #12]	@ (800671c <HAL_RCC_GetPCLK2Freq+0x24>)
 800670e:	5ccb      	ldrb	r3, [r1, r3]
 8006710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006714:	4618      	mov	r0, r3
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40023800 	.word	0x40023800
 800671c:	0800dce0 	.word	0x0800dce0

08006720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d012      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006748:	4b69      	ldr	r3, [pc, #420]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	4a68      	ldr	r2, [pc, #416]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800674e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006752:	6093      	str	r3, [r2, #8]
 8006754:	4b66      	ldr	r3, [pc, #408]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675c:	4964      	ldr	r1, [pc, #400]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675e:	4313      	orrs	r3, r2
 8006760:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800676a:	2301      	movs	r3, #1
 800676c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d017      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800677a:	4b5d      	ldr	r3, [pc, #372]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006780:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006788:	4959      	ldr	r1, [pc, #356]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006794:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006798:	d101      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800679a:	2301      	movs	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80067a6:	2301      	movs	r3, #1
 80067a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d017      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067b6:	4b4e      	ldr	r3, [pc, #312]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c4:	494a      	ldr	r1, [pc, #296]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067d4:	d101      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80067d6:	2301      	movs	r3, #1
 80067d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80067e2:	2301      	movs	r3, #1
 80067e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80067f2:	2301      	movs	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 808b 	beq.w	800691a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006804:	4b3a      	ldr	r3, [pc, #232]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	4a39      	ldr	r2, [pc, #228]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800680a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800680e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006810:	4b37      	ldr	r3, [pc, #220]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800681c:	4b35      	ldr	r3, [pc, #212]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a34      	ldr	r2, [pc, #208]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006828:	f7fd fc10 	bl	800404c <HAL_GetTick>
 800682c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800682e:	e008      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006830:	f7fd fc0c 	bl	800404c <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b64      	cmp	r3, #100	@ 0x64
 800683c:	d901      	bls.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e357      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006842:	4b2c      	ldr	r3, [pc, #176]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0f0      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800684e:	4b28      	ldr	r3, [pc, #160]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006856:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d035      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	429a      	cmp	r2, r3
 800686a:	d02e      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800686c:	4b20      	ldr	r3, [pc, #128]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800686e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006874:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006876:	4b1e      	ldr	r3, [pc, #120]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687a:	4a1d      	ldr	r2, [pc, #116]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800687c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006880:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006882:	4b1b      	ldr	r3, [pc, #108]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006886:	4a1a      	ldr	r2, [pc, #104]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800688c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800688e:	4a18      	ldr	r2, [pc, #96]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006894:	4b16      	ldr	r3, [pc, #88]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b01      	cmp	r3, #1
 800689e:	d114      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7fd fbd4 	bl	800404c <HAL_GetTick>
 80068a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a6:	e00a      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a8:	f7fd fbd0 	bl	800404c <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d901      	bls.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e319      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068be:	4b0c      	ldr	r3, [pc, #48]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0ee      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068d6:	d111      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80068d8:	4b05      	ldr	r3, [pc, #20]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80068e4:	4b04      	ldr	r3, [pc, #16]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80068e6:	400b      	ands	r3, r1
 80068e8:	4901      	ldr	r1, [pc, #4]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	608b      	str	r3, [r1, #8]
 80068ee:	e00b      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80068f0:	40023800 	.word	0x40023800
 80068f4:	40007000 	.word	0x40007000
 80068f8:	0ffffcff 	.word	0x0ffffcff
 80068fc:	4baa      	ldr	r3, [pc, #680]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4aa9      	ldr	r2, [pc, #676]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006902:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006906:	6093      	str	r3, [r2, #8]
 8006908:	4ba7      	ldr	r3, [pc, #668]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800690a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006914:	49a4      	ldr	r1, [pc, #656]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006916:	4313      	orrs	r3, r2
 8006918:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b00      	cmp	r3, #0
 8006924:	d010      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006926:	4ba0      	ldr	r3, [pc, #640]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800692c:	4a9e      	ldr	r2, [pc, #632]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800692e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006932:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006936:	4b9c      	ldr	r3, [pc, #624]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006938:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006940:	4999      	ldr	r1, [pc, #612]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006954:	4b94      	ldr	r3, [pc, #592]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006962:	4991      	ldr	r1, [pc, #580]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006976:	4b8c      	ldr	r3, [pc, #560]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800697c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006984:	4988      	ldr	r1, [pc, #544]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006998:	4b83      	ldr	r3, [pc, #524]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069a6:	4980      	ldr	r1, [pc, #512]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069ba:	4b7b      	ldr	r3, [pc, #492]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c8:	4977      	ldr	r1, [pc, #476]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069dc:	4b72      	ldr	r3, [pc, #456]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e2:	f023 0203 	bic.w	r2, r3, #3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	496f      	ldr	r1, [pc, #444]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069fe:	4b6a      	ldr	r3, [pc, #424]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a04:	f023 020c 	bic.w	r2, r3, #12
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a0c:	4966      	ldr	r1, [pc, #408]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a20:	4b61      	ldr	r3, [pc, #388]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a2e:	495e      	ldr	r1, [pc, #376]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a42:	4b59      	ldr	r3, [pc, #356]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a50:	4955      	ldr	r1, [pc, #340]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a64:	4b50      	ldr	r3, [pc, #320]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a72:	494d      	ldr	r1, [pc, #308]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006a86:	4b48      	ldr	r3, [pc, #288]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a94:	4944      	ldr	r1, [pc, #272]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab6:	493c      	ldr	r1, [pc, #240]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006aca:	4b37      	ldr	r3, [pc, #220]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ad8:	4933      	ldr	r1, [pc, #204]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006aec:	4b2e      	ldr	r3, [pc, #184]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006afa:	492b      	ldr	r1, [pc, #172]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d011      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006b0e:	4b26      	ldr	r3, [pc, #152]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b14:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b1c:	4922      	ldr	r1, [pc, #136]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b2c:	d101      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b4e:	4b16      	ldr	r3, [pc, #88]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5c:	4912      	ldr	r1, [pc, #72]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00b      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b70:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b80:	4909      	ldr	r1, [pc, #36]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d006      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 80d9 	beq.w	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b9c:	4b02      	ldr	r3, [pc, #8]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a01      	ldr	r2, [pc, #4]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ba6:	e001      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bae:	f7fd fa4d 	bl	800404c <HAL_GetTick>
 8006bb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bb6:	f7fd fa49 	bl	800404c <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b64      	cmp	r3, #100	@ 0x64
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e194      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f0      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d021      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d11d      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006be8:	4b64      	ldr	r3, [pc, #400]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bee:	0c1b      	lsrs	r3, r3, #16
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006bf6:	4b61      	ldr	r3, [pc, #388]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bfc:	0e1b      	lsrs	r3, r3, #24
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	019a      	lsls	r2, r3, #6
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	041b      	lsls	r3, r3, #16
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	061b      	lsls	r3, r3, #24
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	071b      	lsls	r3, r3, #28
 8006c1c:	4957      	ldr	r1, [pc, #348]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c38:	d00a      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d02e      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c4e:	d129      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006c50:	4b4a      	ldr	r3, [pc, #296]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c56:	0c1b      	lsrs	r3, r3, #16
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c5e:	4b47      	ldr	r3, [pc, #284]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c64:	0f1b      	lsrs	r3, r3, #28
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	019a      	lsls	r2, r3, #6
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	061b      	lsls	r3, r3, #24
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	071b      	lsls	r3, r3, #28
 8006c84:	493d      	ldr	r1, [pc, #244]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c92:	f023 021f 	bic.w	r2, r3, #31
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	4937      	ldr	r1, [pc, #220]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01d      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006cb0:	4b32      	ldr	r3, [pc, #200]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cb6:	0e1b      	lsrs	r3, r3, #24
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cc4:	0f1b      	lsrs	r3, r3, #28
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	019a      	lsls	r2, r3, #6
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	041b      	lsls	r3, r3, #16
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	071b      	lsls	r3, r3, #28
 8006ce4:	4925      	ldr	r1, [pc, #148]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d011      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	019a      	lsls	r2, r3, #6
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	061b      	lsls	r3, r3, #24
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	071b      	lsls	r3, r3, #28
 8006d14:	4919      	ldr	r1, [pc, #100]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d1c:	4b17      	ldr	r3, [pc, #92]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a16      	ldr	r2, [pc, #88]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d28:	f7fd f990 	bl	800404c <HAL_GetTick>
 8006d2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d30:	f7fd f98c 	bl	800404c <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b64      	cmp	r3, #100	@ 0x64
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e0d7      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d42:	4b0e      	ldr	r3, [pc, #56]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	f040 80cd 	bne.w	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d56:	4b09      	ldr	r3, [pc, #36]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a08      	ldr	r2, [pc, #32]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d62:	f7fd f973 	bl	800404c <HAL_GetTick>
 8006d66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d68:	e00a      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d6a:	f7fd f96f 	bl	800404c <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b64      	cmp	r3, #100	@ 0x64
 8006d76:	d903      	bls.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e0ba      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006d7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d80:	4b5e      	ldr	r3, [pc, #376]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d8c:	d0ed      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d02e      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d12a      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006db6:	4b51      	ldr	r3, [pc, #324]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dbc:	0c1b      	lsrs	r3, r3, #16
 8006dbe:	f003 0303 	and.w	r3, r3, #3
 8006dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dca:	0f1b      	lsrs	r3, r3, #28
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	019a      	lsls	r2, r3, #6
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	041b      	lsls	r3, r3, #16
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	061b      	lsls	r3, r3, #24
 8006de4:	431a      	orrs	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	071b      	lsls	r3, r3, #28
 8006dea:	4944      	ldr	r1, [pc, #272]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006df2:	4b42      	ldr	r3, [pc, #264]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006df8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e00:	3b01      	subs	r3, #1
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	493d      	ldr	r1, [pc, #244]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d022      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e20:	d11d      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e22:	4b36      	ldr	r3, [pc, #216]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e28:	0e1b      	lsrs	r3, r3, #24
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e30:	4b32      	ldr	r3, [pc, #200]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e36:	0f1b      	lsrs	r3, r3, #28
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	019a      	lsls	r2, r3, #6
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	061b      	lsls	r3, r3, #24
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	071b      	lsls	r3, r3, #28
 8006e56:	4929      	ldr	r1, [pc, #164]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d028      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e6a:	4b24      	ldr	r3, [pc, #144]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e70:	0e1b      	lsrs	r3, r3, #24
 8006e72:	f003 030f 	and.w	r3, r3, #15
 8006e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006e78:	4b20      	ldr	r3, [pc, #128]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7e:	0c1b      	lsrs	r3, r3, #16
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	019a      	lsls	r2, r3, #6
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	041b      	lsls	r3, r3, #16
 8006e90:	431a      	orrs	r2, r3
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	061b      	lsls	r3, r3, #24
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	071b      	lsls	r3, r3, #28
 8006e9e:	4917      	ldr	r1, [pc, #92]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ea6:	4b15      	ldr	r3, [pc, #84]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	4911      	ldr	r1, [pc, #68]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec8:	f7fd f8c0 	bl	800404c <HAL_GetTick>
 8006ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ed0:	f7fd f8bc 	bl	800404c <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b64      	cmp	r3, #100	@ 0x64
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e007      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ee2:	4b06      	ldr	r3, [pc, #24]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eee:	d1ef      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3720      	adds	r7, #32
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40023800 	.word	0x40023800

08006f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e049      	b.n	8006fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fc fd64 	bl	80039f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f000 fd20 	bl	8007984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d001      	beq.n	8006fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e04c      	b.n	8007062 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a26      	ldr	r2, [pc, #152]	@ (8007070 <HAL_TIM_Base_Start+0xc0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d022      	beq.n	8007020 <HAL_TIM_Base_Start+0x70>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe2:	d01d      	beq.n	8007020 <HAL_TIM_Base_Start+0x70>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a22      	ldr	r2, [pc, #136]	@ (8007074 <HAL_TIM_Base_Start+0xc4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d018      	beq.n	8007020 <HAL_TIM_Base_Start+0x70>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a21      	ldr	r2, [pc, #132]	@ (8007078 <HAL_TIM_Base_Start+0xc8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d013      	beq.n	8007020 <HAL_TIM_Base_Start+0x70>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800707c <HAL_TIM_Base_Start+0xcc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00e      	beq.n	8007020 <HAL_TIM_Base_Start+0x70>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1e      	ldr	r2, [pc, #120]	@ (8007080 <HAL_TIM_Base_Start+0xd0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d009      	beq.n	8007020 <HAL_TIM_Base_Start+0x70>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1c      	ldr	r2, [pc, #112]	@ (8007084 <HAL_TIM_Base_Start+0xd4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d004      	beq.n	8007020 <HAL_TIM_Base_Start+0x70>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1b      	ldr	r2, [pc, #108]	@ (8007088 <HAL_TIM_Base_Start+0xd8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d115      	bne.n	800704c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	4b19      	ldr	r3, [pc, #100]	@ (800708c <HAL_TIM_Base_Start+0xdc>)
 8007028:	4013      	ands	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b06      	cmp	r3, #6
 8007030:	d015      	beq.n	800705e <HAL_TIM_Base_Start+0xae>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007038:	d011      	beq.n	800705e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0201 	orr.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704a:	e008      	b.n	800705e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e000      	b.n	8007060 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40010000 	.word	0x40010000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40010400 	.word	0x40010400
 8007084:	40014000 	.word	0x40014000
 8007088:	40001800 	.word	0x40001800
 800708c:	00010007 	.word	0x00010007

08007090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e049      	b.n	8007136 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fc fc6a 	bl	8003990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f000 fc58 	bl	8007984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d109      	bne.n	8007164 <HAL_TIM_PWM_Start+0x24>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b01      	cmp	r3, #1
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	e03c      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b04      	cmp	r3, #4
 8007168:	d109      	bne.n	800717e <HAL_TIM_PWM_Start+0x3e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b01      	cmp	r3, #1
 8007174:	bf14      	ite	ne
 8007176:	2301      	movne	r3, #1
 8007178:	2300      	moveq	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	e02f      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b08      	cmp	r3, #8
 8007182:	d109      	bne.n	8007198 <HAL_TIM_PWM_Start+0x58>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	bf14      	ite	ne
 8007190:	2301      	movne	r3, #1
 8007192:	2300      	moveq	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	e022      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b0c      	cmp	r3, #12
 800719c:	d109      	bne.n	80071b2 <HAL_TIM_PWM_Start+0x72>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	bf14      	ite	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	2300      	moveq	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	e015      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b10      	cmp	r3, #16
 80071b6:	d109      	bne.n	80071cc <HAL_TIM_PWM_Start+0x8c>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	bf14      	ite	ne
 80071c4:	2301      	movne	r3, #1
 80071c6:	2300      	moveq	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	e008      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e092      	b.n	800730c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <HAL_TIM_PWM_Start+0xb6>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071f4:	e023      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Start+0xc6>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007204:	e01b      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Start+0xd6>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007214:	e013      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b0c      	cmp	r3, #12
 800721a:	d104      	bne.n	8007226 <HAL_TIM_PWM_Start+0xe6>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007224:	e00b      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b10      	cmp	r3, #16
 800722a:	d104      	bne.n	8007236 <HAL_TIM_PWM_Start+0xf6>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007234:	e003      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2201      	movs	r2, #1
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 ffad 	bl	80081a6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a30      	ldr	r2, [pc, #192]	@ (8007314 <HAL_TIM_PWM_Start+0x1d4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d004      	beq.n	8007260 <HAL_TIM_PWM_Start+0x120>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a2f      	ldr	r2, [pc, #188]	@ (8007318 <HAL_TIM_PWM_Start+0x1d8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d101      	bne.n	8007264 <HAL_TIM_PWM_Start+0x124>
 8007260:	2301      	movs	r3, #1
 8007262:	e000      	b.n	8007266 <HAL_TIM_PWM_Start+0x126>
 8007264:	2300      	movs	r3, #0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007278:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a25      	ldr	r2, [pc, #148]	@ (8007314 <HAL_TIM_PWM_Start+0x1d4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d022      	beq.n	80072ca <HAL_TIM_PWM_Start+0x18a>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728c:	d01d      	beq.n	80072ca <HAL_TIM_PWM_Start+0x18a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a22      	ldr	r2, [pc, #136]	@ (800731c <HAL_TIM_PWM_Start+0x1dc>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d018      	beq.n	80072ca <HAL_TIM_PWM_Start+0x18a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a20      	ldr	r2, [pc, #128]	@ (8007320 <HAL_TIM_PWM_Start+0x1e0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d013      	beq.n	80072ca <HAL_TIM_PWM_Start+0x18a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007324 <HAL_TIM_PWM_Start+0x1e4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00e      	beq.n	80072ca <HAL_TIM_PWM_Start+0x18a>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a19      	ldr	r2, [pc, #100]	@ (8007318 <HAL_TIM_PWM_Start+0x1d8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d009      	beq.n	80072ca <HAL_TIM_PWM_Start+0x18a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007328 <HAL_TIM_PWM_Start+0x1e8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d004      	beq.n	80072ca <HAL_TIM_PWM_Start+0x18a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a19      	ldr	r2, [pc, #100]	@ (800732c <HAL_TIM_PWM_Start+0x1ec>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d115      	bne.n	80072f6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	4b17      	ldr	r3, [pc, #92]	@ (8007330 <HAL_TIM_PWM_Start+0x1f0>)
 80072d2:	4013      	ands	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b06      	cmp	r3, #6
 80072da:	d015      	beq.n	8007308 <HAL_TIM_PWM_Start+0x1c8>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e2:	d011      	beq.n	8007308 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f4:	e008      	b.n	8007308 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0201 	orr.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e000      	b.n	800730a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	40010000 	.word	0x40010000
 8007318:	40010400 	.word	0x40010400
 800731c:	40000400 	.word	0x40000400
 8007320:	40000800 	.word	0x40000800
 8007324:	40000c00 	.word	0x40000c00
 8007328:	40014000 	.word	0x40014000
 800732c:	40001800 	.word	0x40001800
 8007330:	00010007 	.word	0x00010007

08007334 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2200      	movs	r2, #0
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 ff2d 	bl	80081a6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a36      	ldr	r2, [pc, #216]	@ (800742c <HAL_TIM_PWM_Stop+0xf8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_TIM_PWM_Stop+0x2c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a35      	ldr	r2, [pc, #212]	@ (8007430 <HAL_TIM_PWM_Stop+0xfc>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d101      	bne.n	8007364 <HAL_TIM_PWM_Stop+0x30>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <HAL_TIM_PWM_Stop+0x32>
 8007364:	2300      	movs	r3, #0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d017      	beq.n	800739a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6a1a      	ldr	r2, [r3, #32]
 8007370:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007374:	4013      	ands	r3, r2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10f      	bne.n	800739a <HAL_TIM_PWM_Stop+0x66>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6a1a      	ldr	r2, [r3, #32]
 8007380:	f240 4344 	movw	r3, #1092	@ 0x444
 8007384:	4013      	ands	r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <HAL_TIM_PWM_Stop+0x66>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007398:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6a1a      	ldr	r2, [r3, #32]
 80073a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10f      	bne.n	80073ca <HAL_TIM_PWM_Stop+0x96>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6a1a      	ldr	r2, [r3, #32]
 80073b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80073b4:	4013      	ands	r3, r2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d107      	bne.n	80073ca <HAL_TIM_PWM_Stop+0x96>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <HAL_TIM_PWM_Stop+0xa6>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073d8:	e023      	b.n	8007422 <HAL_TIM_PWM_Stop+0xee>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d104      	bne.n	80073ea <HAL_TIM_PWM_Stop+0xb6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073e8:	e01b      	b.n	8007422 <HAL_TIM_PWM_Stop+0xee>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d104      	bne.n	80073fa <HAL_TIM_PWM_Stop+0xc6>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073f8:	e013      	b.n	8007422 <HAL_TIM_PWM_Stop+0xee>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b0c      	cmp	r3, #12
 80073fe:	d104      	bne.n	800740a <HAL_TIM_PWM_Stop+0xd6>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007408:	e00b      	b.n	8007422 <HAL_TIM_PWM_Stop+0xee>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b10      	cmp	r3, #16
 800740e:	d104      	bne.n	800741a <HAL_TIM_PWM_Stop+0xe6>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007418:	e003      	b.n	8007422 <HAL_TIM_PWM_Stop+0xee>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	40010000 	.word	0x40010000
 8007430:	40010400 	.word	0x40010400

08007434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b02      	cmp	r3, #2
 8007448:	d122      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d11b      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0202 	mvn.w	r2, #2
 8007460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa66 	bl	8007948 <HAL_TIM_IC_CaptureCallback>
 800747c:	e005      	b.n	800748a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa58 	bl	8007934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa69 	bl	800795c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b04      	cmp	r3, #4
 800749c:	d122      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d11b      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0204 	mvn.w	r2, #4
 80074b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa3c 	bl	8007948 <HAL_TIM_IC_CaptureCallback>
 80074d0:	e005      	b.n	80074de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa2e 	bl	8007934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa3f 	bl	800795c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d122      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d11b      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0208 	mvn.w	r2, #8
 8007508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa12 	bl	8007948 <HAL_TIM_IC_CaptureCallback>
 8007524:	e005      	b.n	8007532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa04 	bl	8007934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa15 	bl	800795c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d122      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b10      	cmp	r3, #16
 8007552:	d11b      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0210 	mvn.w	r2, #16
 800755c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2208      	movs	r2, #8
 8007562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f9e8 	bl	8007948 <HAL_TIM_IC_CaptureCallback>
 8007578:	e005      	b.n	8007586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9da 	bl	8007934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f9eb 	bl	800795c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0201 	mvn.w	r2, #1
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9b4 	bl	8007920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c2:	2b80      	cmp	r3, #128	@ 0x80
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d0:	2b80      	cmp	r3, #128	@ 0x80
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80075dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 f83c 	bl	800865c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075f2:	d10e      	bne.n	8007612 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fe:	2b80      	cmp	r3, #128	@ 0x80
 8007600:	d107      	bne.n	8007612 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800760a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f82f 	bl	8008670 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761c:	2b40      	cmp	r3, #64	@ 0x40
 800761e:	d10e      	bne.n	800763e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762a:	2b40      	cmp	r3, #64	@ 0x40
 800762c:	d107      	bne.n	800763e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f999 	bl	8007970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b20      	cmp	r3, #32
 800764a:	d10e      	bne.n	800766a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b20      	cmp	r3, #32
 8007658:	d107      	bne.n	800766a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f06f 0220 	mvn.w	r2, #32
 8007662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 ffef 	bl	8008648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800766a:	bf00      	nop
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800768e:	2302      	movs	r3, #2
 8007690:	e0ff      	b.n	8007892 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b14      	cmp	r3, #20
 800769e:	f200 80f0 	bhi.w	8007882 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076a2:	a201      	add	r2, pc, #4	@ (adr r2, 80076a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	08007883 	.word	0x08007883
 80076b0:	08007883 	.word	0x08007883
 80076b4:	08007883 	.word	0x08007883
 80076b8:	0800773d 	.word	0x0800773d
 80076bc:	08007883 	.word	0x08007883
 80076c0:	08007883 	.word	0x08007883
 80076c4:	08007883 	.word	0x08007883
 80076c8:	0800777f 	.word	0x0800777f
 80076cc:	08007883 	.word	0x08007883
 80076d0:	08007883 	.word	0x08007883
 80076d4:	08007883 	.word	0x08007883
 80076d8:	080077bf 	.word	0x080077bf
 80076dc:	08007883 	.word	0x08007883
 80076e0:	08007883 	.word	0x08007883
 80076e4:	08007883 	.word	0x08007883
 80076e8:	08007801 	.word	0x08007801
 80076ec:	08007883 	.word	0x08007883
 80076f0:	08007883 	.word	0x08007883
 80076f4:	08007883 	.word	0x08007883
 80076f8:	08007841 	.word	0x08007841
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f9de 	bl	8007ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0208 	orr.w	r2, r2, #8
 8007716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0204 	bic.w	r2, r2, #4
 8007726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6999      	ldr	r1, [r3, #24]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	619a      	str	r2, [r3, #24]
      break;
 800773a:	e0a5      	b.n	8007888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fa30 	bl	8007ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6999      	ldr	r1, [r3, #24]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	021a      	lsls	r2, r3, #8
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	619a      	str	r2, [r3, #24]
      break;
 800777c:	e084      	b.n	8007888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fa87 	bl	8007c98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0208 	orr.w	r2, r2, #8
 8007798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0204 	bic.w	r2, r2, #4
 80077a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69d9      	ldr	r1, [r3, #28]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	61da      	str	r2, [r3, #28]
      break;
 80077bc:	e064      	b.n	8007888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fadd 	bl	8007d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69d9      	ldr	r1, [r3, #28]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	021a      	lsls	r2, r3, #8
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	61da      	str	r2, [r3, #28]
      break;
 80077fe:	e043      	b.n	8007888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68b9      	ldr	r1, [r7, #8]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fb14 	bl	8007e34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0208 	orr.w	r2, r2, #8
 800781a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0204 	bic.w	r2, r2, #4
 800782a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	691a      	ldr	r2, [r3, #16]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800783e:	e023      	b.n	8007888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fb46 	bl	8007ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800785a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800786a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	021a      	lsls	r2, r3, #8
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007880:	e002      	b.n	8007888 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]
      break;
 8007886:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop

0800789c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e031      	b.n	8007918 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fb5a 	bl	8007f80 <TIM_SlaveTimer_SetConfig>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d009      	beq.n	80078e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e018      	b.n	8007918 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68da      	ldr	r2, [r3, #12]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007904:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a40      	ldr	r2, [pc, #256]	@ (8007a98 <TIM_Base_SetConfig+0x114>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d013      	beq.n	80079c4 <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a2:	d00f      	beq.n	80079c4 <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a3d      	ldr	r2, [pc, #244]	@ (8007a9c <TIM_Base_SetConfig+0x118>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00b      	beq.n	80079c4 <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a3c      	ldr	r2, [pc, #240]	@ (8007aa0 <TIM_Base_SetConfig+0x11c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d007      	beq.n	80079c4 <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a3b      	ldr	r2, [pc, #236]	@ (8007aa4 <TIM_Base_SetConfig+0x120>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a3a      	ldr	r2, [pc, #232]	@ (8007aa8 <TIM_Base_SetConfig+0x124>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d108      	bne.n	80079d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a2f      	ldr	r2, [pc, #188]	@ (8007a98 <TIM_Base_SetConfig+0x114>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d02b      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e4:	d027      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2c      	ldr	r2, [pc, #176]	@ (8007a9c <TIM_Base_SetConfig+0x118>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d023      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2b      	ldr	r2, [pc, #172]	@ (8007aa0 <TIM_Base_SetConfig+0x11c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d01f      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa4 <TIM_Base_SetConfig+0x120>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d01b      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a29      	ldr	r2, [pc, #164]	@ (8007aa8 <TIM_Base_SetConfig+0x124>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d017      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a28      	ldr	r2, [pc, #160]	@ (8007aac <TIM_Base_SetConfig+0x128>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a27      	ldr	r2, [pc, #156]	@ (8007ab0 <TIM_Base_SetConfig+0x12c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00f      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a26      	ldr	r2, [pc, #152]	@ (8007ab4 <TIM_Base_SetConfig+0x130>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00b      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a25      	ldr	r2, [pc, #148]	@ (8007ab8 <TIM_Base_SetConfig+0x134>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d007      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a24      	ldr	r2, [pc, #144]	@ (8007abc <TIM_Base_SetConfig+0x138>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d003      	beq.n	8007a36 <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a23      	ldr	r2, [pc, #140]	@ (8007ac0 <TIM_Base_SetConfig+0x13c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d108      	bne.n	8007a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a98 <TIM_Base_SetConfig+0x114>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d003      	beq.n	8007a7c <TIM_Base_SetConfig+0xf8>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a0c      	ldr	r2, [pc, #48]	@ (8007aa8 <TIM_Base_SetConfig+0x124>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d103      	bne.n	8007a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	615a      	str	r2, [r3, #20]
}
 8007a8a:	bf00      	nop
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40010000 	.word	0x40010000
 8007a9c:	40000400 	.word	0x40000400
 8007aa0:	40000800 	.word	0x40000800
 8007aa4:	40000c00 	.word	0x40000c00
 8007aa8:	40010400 	.word	0x40010400
 8007aac:	40014000 	.word	0x40014000
 8007ab0:	40014400 	.word	0x40014400
 8007ab4:	40014800 	.word	0x40014800
 8007ab8:	40001800 	.word	0x40001800
 8007abc:	40001c00 	.word	0x40001c00
 8007ac0:	40002000 	.word	0x40002000

08007ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f023 0201 	bic.w	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4b2b      	ldr	r3, [pc, #172]	@ (8007b9c <TIM_OC1_SetConfig+0xd8>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f023 0302 	bic.w	r3, r3, #2
 8007b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a21      	ldr	r2, [pc, #132]	@ (8007ba0 <TIM_OC1_SetConfig+0xdc>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d003      	beq.n	8007b28 <TIM_OC1_SetConfig+0x64>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a20      	ldr	r2, [pc, #128]	@ (8007ba4 <TIM_OC1_SetConfig+0xe0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d10c      	bne.n	8007b42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f023 0308 	bic.w	r3, r3, #8
 8007b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f023 0304 	bic.w	r3, r3, #4
 8007b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a16      	ldr	r2, [pc, #88]	@ (8007ba0 <TIM_OC1_SetConfig+0xdc>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d003      	beq.n	8007b52 <TIM_OC1_SetConfig+0x8e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a15      	ldr	r2, [pc, #84]	@ (8007ba4 <TIM_OC1_SetConfig+0xe0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d111      	bne.n	8007b76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	621a      	str	r2, [r3, #32]
}
 8007b90:	bf00      	nop
 8007b92:	371c      	adds	r7, #28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	fffeff8f 	.word	0xfffeff8f
 8007ba0:	40010000 	.word	0x40010000
 8007ba4:	40010400 	.word	0x40010400

08007ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	f023 0210 	bic.w	r2, r3, #16
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8007c8c <TIM_OC2_SetConfig+0xe4>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0320 	bic.w	r3, r3, #32
 8007bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a23      	ldr	r2, [pc, #140]	@ (8007c90 <TIM_OC2_SetConfig+0xe8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_OC2_SetConfig+0x68>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a22      	ldr	r2, [pc, #136]	@ (8007c94 <TIM_OC2_SetConfig+0xec>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d10d      	bne.n	8007c2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a18      	ldr	r2, [pc, #96]	@ (8007c90 <TIM_OC2_SetConfig+0xe8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_OC2_SetConfig+0x94>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a17      	ldr	r2, [pc, #92]	@ (8007c94 <TIM_OC2_SetConfig+0xec>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d113      	bne.n	8007c64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	621a      	str	r2, [r3, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	feff8fff 	.word	0xfeff8fff
 8007c90:	40010000 	.word	0x40010000
 8007c94:	40010400 	.word	0x40010400

08007c98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8007d78 <TIM_OC3_SetConfig+0xe0>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0303 	bic.w	r3, r3, #3
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a22      	ldr	r2, [pc, #136]	@ (8007d7c <TIM_OC3_SetConfig+0xe4>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d003      	beq.n	8007cfe <TIM_OC3_SetConfig+0x66>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a21      	ldr	r2, [pc, #132]	@ (8007d80 <TIM_OC3_SetConfig+0xe8>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d10d      	bne.n	8007d1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a17      	ldr	r2, [pc, #92]	@ (8007d7c <TIM_OC3_SetConfig+0xe4>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d003      	beq.n	8007d2a <TIM_OC3_SetConfig+0x92>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a16      	ldr	r2, [pc, #88]	@ (8007d80 <TIM_OC3_SetConfig+0xe8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d113      	bne.n	8007d52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	011b      	lsls	r3, r3, #4
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	621a      	str	r2, [r3, #32]
}
 8007d6c:	bf00      	nop
 8007d6e:	371c      	adds	r7, #28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	fffeff8f 	.word	0xfffeff8f
 8007d7c:	40010000 	.word	0x40010000
 8007d80:	40010400 	.word	0x40010400

08007d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4b1e      	ldr	r3, [pc, #120]	@ (8007e28 <TIM_OC4_SetConfig+0xa4>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	031b      	lsls	r3, r3, #12
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a13      	ldr	r2, [pc, #76]	@ (8007e2c <TIM_OC4_SetConfig+0xa8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d003      	beq.n	8007dec <TIM_OC4_SetConfig+0x68>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a12      	ldr	r2, [pc, #72]	@ (8007e30 <TIM_OC4_SetConfig+0xac>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d109      	bne.n	8007e00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	019b      	lsls	r3, r3, #6
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	feff8fff 	.word	0xfeff8fff
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40010400 	.word	0x40010400

08007e34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007ecc <TIM_OC5_SetConfig+0x98>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	041b      	lsls	r3, r3, #16
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a12      	ldr	r2, [pc, #72]	@ (8007ed0 <TIM_OC5_SetConfig+0x9c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d003      	beq.n	8007e92 <TIM_OC5_SetConfig+0x5e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a11      	ldr	r2, [pc, #68]	@ (8007ed4 <TIM_OC5_SetConfig+0xa0>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d109      	bne.n	8007ea6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	621a      	str	r2, [r3, #32]
}
 8007ec0:	bf00      	nop
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	fffeff8f 	.word	0xfffeff8f
 8007ed0:	40010000 	.word	0x40010000
 8007ed4:	40010400 	.word	0x40010400

08007ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	4b1c      	ldr	r3, [pc, #112]	@ (8007f74 <TIM_OC6_SetConfig+0x9c>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	021b      	lsls	r3, r3, #8
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	051b      	lsls	r3, r3, #20
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a13      	ldr	r2, [pc, #76]	@ (8007f78 <TIM_OC6_SetConfig+0xa0>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d003      	beq.n	8007f38 <TIM_OC6_SetConfig+0x60>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a12      	ldr	r2, [pc, #72]	@ (8007f7c <TIM_OC6_SetConfig+0xa4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d109      	bne.n	8007f4c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	029b      	lsls	r3, r3, #10
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	621a      	str	r2, [r3, #32]
}
 8007f66:	bf00      	nop
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	feff8fff 	.word	0xfeff8fff
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40010400 	.word	0x40010400

08007f80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f9c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4b3e      	ldr	r3, [pc, #248]	@ (80080a4 <TIM_SlaveTimer_SetConfig+0x124>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	2b70      	cmp	r3, #112	@ 0x70
 8007fc8:	d01a      	beq.n	8008000 <TIM_SlaveTimer_SetConfig+0x80>
 8007fca:	2b70      	cmp	r3, #112	@ 0x70
 8007fcc:	d860      	bhi.n	8008090 <TIM_SlaveTimer_SetConfig+0x110>
 8007fce:	2b60      	cmp	r3, #96	@ 0x60
 8007fd0:	d054      	beq.n	800807c <TIM_SlaveTimer_SetConfig+0xfc>
 8007fd2:	2b60      	cmp	r3, #96	@ 0x60
 8007fd4:	d85c      	bhi.n	8008090 <TIM_SlaveTimer_SetConfig+0x110>
 8007fd6:	2b50      	cmp	r3, #80	@ 0x50
 8007fd8:	d046      	beq.n	8008068 <TIM_SlaveTimer_SetConfig+0xe8>
 8007fda:	2b50      	cmp	r3, #80	@ 0x50
 8007fdc:	d858      	bhi.n	8008090 <TIM_SlaveTimer_SetConfig+0x110>
 8007fde:	2b40      	cmp	r3, #64	@ 0x40
 8007fe0:	d019      	beq.n	8008016 <TIM_SlaveTimer_SetConfig+0x96>
 8007fe2:	2b40      	cmp	r3, #64	@ 0x40
 8007fe4:	d854      	bhi.n	8008090 <TIM_SlaveTimer_SetConfig+0x110>
 8007fe6:	2b30      	cmp	r3, #48	@ 0x30
 8007fe8:	d055      	beq.n	8008096 <TIM_SlaveTimer_SetConfig+0x116>
 8007fea:	2b30      	cmp	r3, #48	@ 0x30
 8007fec:	d850      	bhi.n	8008090 <TIM_SlaveTimer_SetConfig+0x110>
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	d051      	beq.n	8008096 <TIM_SlaveTimer_SetConfig+0x116>
 8007ff2:	2b20      	cmp	r3, #32
 8007ff4:	d84c      	bhi.n	8008090 <TIM_SlaveTimer_SetConfig+0x110>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d04d      	beq.n	8008096 <TIM_SlaveTimer_SetConfig+0x116>
 8007ffa:	2b10      	cmp	r3, #16
 8007ffc:	d04b      	beq.n	8008096 <TIM_SlaveTimer_SetConfig+0x116>
 8007ffe:	e047      	b.n	8008090 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008010:	f000 f8a9 	bl	8008166 <TIM_ETR_SetConfig>
      break;
 8008014:	e040      	b.n	8008098 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b05      	cmp	r3, #5
 800801c:	d101      	bne.n	8008022 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e03b      	b.n	800809a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6a1a      	ldr	r2, [r3, #32]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0201 	bic.w	r2, r2, #1
 8008038:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008048:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	4313      	orrs	r3, r2
 8008054:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	621a      	str	r2, [r3, #32]
      break;
 8008066:	e017      	b.n	8008098 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008074:	461a      	mov	r2, r3
 8008076:	f000 f817 	bl	80080a8 <TIM_TI1_ConfigInputStage>
      break;
 800807a:	e00d      	b.n	8008098 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008088:	461a      	mov	r2, r3
 800808a:	f000 f83c 	bl	8008106 <TIM_TI2_ConfigInputStage>
      break;
 800808e:	e003      	b.n	8008098 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	75fb      	strb	r3, [r7, #23]
      break;
 8008094:	e000      	b.n	8008098 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008096:	bf00      	nop
  }

  return status;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	fffefff8 	.word	0xfffefff8

080080a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	f023 0201 	bic.w	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4313      	orrs	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f023 030a 	bic.w	r3, r3, #10
 80080e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	621a      	str	r2, [r3, #32]
}
 80080fa:	bf00      	nop
 80080fc:	371c      	adds	r7, #28
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008106:	b480      	push	{r7}
 8008108:	b087      	sub	sp, #28
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f023 0210 	bic.w	r2, r3, #16
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	031b      	lsls	r3, r3, #12
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	4313      	orrs	r3, r2
 800813a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	621a      	str	r2, [r3, #32]
}
 800815a:	bf00      	nop
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008166:	b480      	push	{r7}
 8008168:	b087      	sub	sp, #28
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
 8008172:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008180:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	021a      	lsls	r2, r3, #8
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	431a      	orrs	r2, r3
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	4313      	orrs	r3, r2
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	609a      	str	r2, [r3, #8]
}
 800819a:	bf00      	nop
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b087      	sub	sp, #28
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	2201      	movs	r2, #1
 80081ba:	fa02 f303 	lsl.w	r3, r2, r3
 80081be:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a1a      	ldr	r2, [r3, #32]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	43db      	mvns	r3, r3
 80081c8:	401a      	ands	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a1a      	ldr	r2, [r3, #32]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f003 031f 	and.w	r3, r3, #31
 80081d8:	6879      	ldr	r1, [r7, #4]
 80081da:	fa01 f303 	lsl.w	r3, r1, r3
 80081de:	431a      	orrs	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	621a      	str	r2, [r3, #32]
}
 80081e4:	bf00      	nop
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d109      	bne.n	8008214 <HAL_TIMEx_PWMN_Start+0x24>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b01      	cmp	r3, #1
 800820a:	bf14      	ite	ne
 800820c:	2301      	movne	r3, #1
 800820e:	2300      	moveq	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	e022      	b.n	800825a <HAL_TIMEx_PWMN_Start+0x6a>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b04      	cmp	r3, #4
 8008218:	d109      	bne.n	800822e <HAL_TIMEx_PWMN_Start+0x3e>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b01      	cmp	r3, #1
 8008224:	bf14      	ite	ne
 8008226:	2301      	movne	r3, #1
 8008228:	2300      	moveq	r3, #0
 800822a:	b2db      	uxtb	r3, r3
 800822c:	e015      	b.n	800825a <HAL_TIMEx_PWMN_Start+0x6a>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b08      	cmp	r3, #8
 8008232:	d109      	bne.n	8008248 <HAL_TIMEx_PWMN_Start+0x58>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b01      	cmp	r3, #1
 800823e:	bf14      	ite	ne
 8008240:	2301      	movne	r3, #1
 8008242:	2300      	moveq	r3, #0
 8008244:	b2db      	uxtb	r3, r3
 8008246:	e008      	b.n	800825a <HAL_TIMEx_PWMN_Start+0x6a>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	bf14      	ite	ne
 8008254:	2301      	movne	r3, #1
 8008256:	2300      	moveq	r3, #0
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e073      	b.n	800834a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <HAL_TIMEx_PWMN_Start+0x82>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008270:	e013      	b.n	800829a <HAL_TIMEx_PWMN_Start+0xaa>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b04      	cmp	r3, #4
 8008276:	d104      	bne.n	8008282 <HAL_TIMEx_PWMN_Start+0x92>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008280:	e00b      	b.n	800829a <HAL_TIMEx_PWMN_Start+0xaa>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b08      	cmp	r3, #8
 8008286:	d104      	bne.n	8008292 <HAL_TIMEx_PWMN_Start+0xa2>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008290:	e003      	b.n	800829a <HAL_TIMEx_PWMN_Start+0xaa>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2202      	movs	r2, #2
 8008296:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2204      	movs	r2, #4
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f9ee 	bl	8008684 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a25      	ldr	r2, [pc, #148]	@ (8008354 <HAL_TIMEx_PWMN_Start+0x164>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d022      	beq.n	8008308 <HAL_TIMEx_PWMN_Start+0x118>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ca:	d01d      	beq.n	8008308 <HAL_TIMEx_PWMN_Start+0x118>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a21      	ldr	r2, [pc, #132]	@ (8008358 <HAL_TIMEx_PWMN_Start+0x168>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d018      	beq.n	8008308 <HAL_TIMEx_PWMN_Start+0x118>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a20      	ldr	r2, [pc, #128]	@ (800835c <HAL_TIMEx_PWMN_Start+0x16c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d013      	beq.n	8008308 <HAL_TIMEx_PWMN_Start+0x118>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008360 <HAL_TIMEx_PWMN_Start+0x170>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00e      	beq.n	8008308 <HAL_TIMEx_PWMN_Start+0x118>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008364 <HAL_TIMEx_PWMN_Start+0x174>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d009      	beq.n	8008308 <HAL_TIMEx_PWMN_Start+0x118>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008368 <HAL_TIMEx_PWMN_Start+0x178>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d004      	beq.n	8008308 <HAL_TIMEx_PWMN_Start+0x118>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1a      	ldr	r2, [pc, #104]	@ (800836c <HAL_TIMEx_PWMN_Start+0x17c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d115      	bne.n	8008334 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	4b18      	ldr	r3, [pc, #96]	@ (8008370 <HAL_TIMEx_PWMN_Start+0x180>)
 8008310:	4013      	ands	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b06      	cmp	r3, #6
 8008318:	d015      	beq.n	8008346 <HAL_TIMEx_PWMN_Start+0x156>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008320:	d011      	beq.n	8008346 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0201 	orr.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008332:	e008      	b.n	8008346 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e000      	b.n	8008348 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	40010000 	.word	0x40010000
 8008358:	40000400 	.word	0x40000400
 800835c:	40000800 	.word	0x40000800
 8008360:	40000c00 	.word	0x40000c00
 8008364:	40010400 	.word	0x40010400
 8008368:	40014000 	.word	0x40014000
 800836c:	40001800 	.word	0x40001800
 8008370:	00010007 	.word	0x00010007

08008374 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f97c 	bl	8008684 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6a1a      	ldr	r2, [r3, #32]
 8008392:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008396:	4013      	ands	r3, r2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10f      	bne.n	80083bc <HAL_TIMEx_PWMN_Stop+0x48>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6a1a      	ldr	r2, [r3, #32]
 80083a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80083a6:	4013      	ands	r3, r2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d107      	bne.n	80083bc <HAL_TIMEx_PWMN_Stop+0x48>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6a1a      	ldr	r2, [r3, #32]
 80083c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80083c6:	4013      	ands	r3, r2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10f      	bne.n	80083ec <HAL_TIMEx_PWMN_Stop+0x78>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6a1a      	ldr	r2, [r3, #32]
 80083d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d107      	bne.n	80083ec <HAL_TIMEx_PWMN_Stop+0x78>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0201 	bic.w	r2, r2, #1
 80083ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d104      	bne.n	80083fc <HAL_TIMEx_PWMN_Stop+0x88>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083fa:	e013      	b.n	8008424 <HAL_TIMEx_PWMN_Stop+0xb0>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d104      	bne.n	800840c <HAL_TIMEx_PWMN_Stop+0x98>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800840a:	e00b      	b.n	8008424 <HAL_TIMEx_PWMN_Stop+0xb0>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b08      	cmp	r3, #8
 8008410:	d104      	bne.n	800841c <HAL_TIMEx_PWMN_Stop+0xa8>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800841a:	e003      	b.n	8008424 <HAL_TIMEx_PWMN_Stop+0xb0>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008444:	2302      	movs	r3, #2
 8008446:	e06d      	b.n	8008524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a30      	ldr	r2, [pc, #192]	@ (8008530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a2f      	ldr	r2, [pc, #188]	@ (8008534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d108      	bne.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008494:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a20      	ldr	r2, [pc, #128]	@ (8008530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d022      	beq.n	80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ba:	d01d      	beq.n	80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008538 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d018      	beq.n	80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a1c      	ldr	r2, [pc, #112]	@ (800853c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d013      	beq.n	80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008540 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00e      	beq.n	80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a15      	ldr	r2, [pc, #84]	@ (8008534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d009      	beq.n	80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a16      	ldr	r2, [pc, #88]	@ (8008544 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d004      	beq.n	80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a15      	ldr	r2, [pc, #84]	@ (8008548 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d10c      	bne.n	8008512 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	4313      	orrs	r3, r2
 8008508:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	40010000 	.word	0x40010000
 8008534:	40010400 	.word	0x40010400
 8008538:	40000400 	.word	0x40000400
 800853c:	40000800 	.word	0x40000800
 8008540:	40000c00 	.word	0x40000c00
 8008544:	40014000 	.word	0x40014000
 8008548:	40001800 	.word	0x40001800

0800854c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008564:	2302      	movs	r3, #2
 8008566:	e065      	b.n	8008634 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	4313      	orrs	r3, r2
 800858a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4313      	orrs	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	041b      	lsls	r3, r3, #16
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a16      	ldr	r2, [pc, #88]	@ (8008640 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d004      	beq.n	80085f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a14      	ldr	r2, [pc, #80]	@ (8008644 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d115      	bne.n	8008622 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008600:	051b      	lsls	r3, r3, #20
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	40010000 	.word	0x40010000
 8008644:	40010400 	.word	0x40010400

08008648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	2204      	movs	r2, #4
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1a      	ldr	r2, [r3, #32]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	43db      	mvns	r3, r3
 80086a6:	401a      	ands	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a1a      	ldr	r2, [r3, #32]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f003 031f 	and.w	r3, r3, #31
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	fa01 f303 	lsl.w	r3, r1, r3
 80086bc:	431a      	orrs	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	621a      	str	r2, [r3, #32]
}
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e04e      	b.n	8008780 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d114      	bne.n	8008714 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fc42 	bl	8008f7c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d103      	bne.n	800870a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a20      	ldr	r2, [pc, #128]	@ (8008788 <HAL_UART_Init+0xb8>)
 8008706:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2224      	movs	r2, #36	@ 0x24
 8008718:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0201 	bic.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fc66 	bl	8008ffc <UART_SetConfig>
 8008730:	4603      	mov	r3, r0
 8008732:	2b01      	cmp	r3, #1
 8008734:	d101      	bne.n	800873a <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e022      	b.n	8008780 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 febe 	bl	80094c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0201 	orr.w	r2, r2, #1
 8008776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 ff45 	bl	8009608 <UART_CheckIdleState>
 800877e:	4603      	mov	r3, r0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	08003bc1 	.word	0x08003bc1

0800878c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08a      	sub	sp, #40	@ 0x28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087a0:	2b20      	cmp	r3, #32
 80087a2:	d132      	bne.n	800880a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <HAL_UART_Receive_IT+0x24>
 80087aa:	88fb      	ldrh	r3, [r7, #6]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e02b      	b.n	800880c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d018      	beq.n	80087fa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	613b      	str	r3, [r7, #16]
   return(result);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e6:	623b      	str	r3, [r7, #32]
 80087e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ea:	69f9      	ldr	r1, [r7, #28]
 80087ec:	6a3a      	ldr	r2, [r7, #32]
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e6      	bne.n	80087c8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	461a      	mov	r2, r3
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 ffff 	bl	8009804 <UART_Start_Receive_IT>
 8008806:	4603      	mov	r3, r0
 8008808:	e000      	b.n	800880c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800880a:	2302      	movs	r3, #2
  }
}
 800880c:	4618      	mov	r0, r3
 800880e:	3728      	adds	r7, #40	@ 0x28
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08a      	sub	sp, #40	@ 0x28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008826:	2b20      	cmp	r3, #32
 8008828:	d165      	bne.n	80088f6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <HAL_UART_Transmit_DMA+0x22>
 8008830:	88fb      	ldrh	r3, [r7, #6]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e05e      	b.n	80088f8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	88fa      	ldrh	r2, [r7, #6]
 8008844:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	88fa      	ldrh	r2, [r7, #6]
 800884c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2221      	movs	r2, #33	@ 0x21
 800885c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008862:	2b00      	cmp	r3, #0
 8008864:	d027      	beq.n	80088b6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800886a:	4a25      	ldr	r2, [pc, #148]	@ (8008900 <HAL_UART_Transmit_DMA+0xec>)
 800886c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008872:	4a24      	ldr	r2, [pc, #144]	@ (8008904 <HAL_UART_Transmit_DMA+0xf0>)
 8008874:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800887a:	4a23      	ldr	r2, [pc, #140]	@ (8008908 <HAL_UART_Transmit_DMA+0xf4>)
 800887c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008882:	2200      	movs	r2, #0
 8008884:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800888e:	4619      	mov	r1, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3328      	adds	r3, #40	@ 0x28
 8008896:	461a      	mov	r2, r3
 8008898:	88fb      	ldrh	r3, [r7, #6]
 800889a:	f7fc fbc5 	bl	8005028 <HAL_DMA_Start_IT>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d008      	beq.n	80088b6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2210      	movs	r2, #16
 80088a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e020      	b.n	80088f8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2240      	movs	r2, #64	@ 0x40
 80088bc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3308      	adds	r3, #8
 80088c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	e853 3f00 	ldrex	r3, [r3]
 80088cc:	613b      	str	r3, [r7, #16]
   return(result);
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3308      	adds	r3, #8
 80088dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088de:	623a      	str	r2, [r7, #32]
 80088e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	69f9      	ldr	r1, [r7, #28]
 80088e4:	6a3a      	ldr	r2, [r7, #32]
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e5      	bne.n	80088be <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	e000      	b.n	80088f8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80088f6:	2302      	movs	r3, #2
  }
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3728      	adds	r7, #40	@ 0x28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	08009aa5 	.word	0x08009aa5
 8008904:	08009b3f 	.word	0x08009b3f
 8008908:	08009b5f 	.word	0x08009b5f

0800890c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b0ba      	sub	sp, #232	@ 0xe8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008932:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008936:	f640 030f 	movw	r3, #2063	@ 0x80f
 800893a:	4013      	ands	r3, r2
 800893c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008944:	2b00      	cmp	r3, #0
 8008946:	d115      	bne.n	8008974 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800894c:	f003 0320 	and.w	r3, r3, #32
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00f      	beq.n	8008974 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008958:	f003 0320 	and.w	r3, r3, #32
 800895c:	2b00      	cmp	r3, #0
 800895e:	d009      	beq.n	8008974 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 82a1 	beq.w	8008eac <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
      }
      return;
 8008972:	e29b      	b.n	8008eac <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 811d 	beq.w	8008bb8 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800897e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800898a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800898e:	4b88      	ldr	r3, [pc, #544]	@ (8008bb0 <HAL_UART_IRQHandler+0x2a4>)
 8008990:	4013      	ands	r3, r2
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 8110 	beq.w	8008bb8 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d011      	beq.n	80089c8 <HAL_UART_IRQHandler+0xbc>
 80089a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2201      	movs	r2, #1
 80089b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089be:	f043 0201 	orr.w	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d011      	beq.n	80089f8 <HAL_UART_IRQHandler+0xec>
 80089d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2202      	movs	r2, #2
 80089e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ee:	f043 0204 	orr.w	r2, r3, #4
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d011      	beq.n	8008a28 <HAL_UART_IRQHandler+0x11c>
 8008a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2204      	movs	r2, #4
 8008a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a1e:	f043 0202 	orr.w	r2, r3, #2
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2c:	f003 0308 	and.w	r3, r3, #8
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d017      	beq.n	8008a64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00b      	beq.n	8008a64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2208      	movs	r2, #8
 8008a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a5a:	f043 0208 	orr.w	r2, r3, #8
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d012      	beq.n	8008a96 <HAL_UART_IRQHandler+0x18a>
 8008a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00c      	beq.n	8008a96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a8c:	f043 0220 	orr.w	r2, r3, #32
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8207 	beq.w	8008eb0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00d      	beq.n	8008aca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d007      	beq.n	8008aca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ade:	2b40      	cmp	r3, #64	@ 0x40
 8008ae0:	d005      	beq.n	8008aee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ae6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d053      	beq.n	8008b96 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 ff74 	bl	80099dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008afe:	2b40      	cmp	r3, #64	@ 0x40
 8008b00:	d143      	bne.n	8008b8a <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3308      	adds	r3, #8
 8008b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1d9      	bne.n	8008b02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d013      	beq.n	8008b7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b5a:	4a16      	ldr	r2, [pc, #88]	@ (8008bb4 <HAL_UART_IRQHandler+0x2a8>)
 8008b5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fc fb30 	bl	80051c8 <HAL_DMA_Abort_IT>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d01d      	beq.n	8008baa <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008b78:	4610      	mov	r0, r2
 8008b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b7c:	e015      	b.n	8008baa <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b88:	e00f      	b.n	8008baa <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b94:	e009      	b.n	8008baa <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008ba8:	e182      	b.n	8008eb0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008baa:	bf00      	nop
    return;
 8008bac:	e180      	b.n	8008eb0 <HAL_UART_IRQHandler+0x5a4>
 8008bae:	bf00      	nop
 8008bb0:	04000120 	.word	0x04000120
 8008bb4:	08009be1 	.word	0x08009be1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	f040 8150 	bne.w	8008e62 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 8149 	beq.w	8008e62 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd4:	f003 0310 	and.w	r3, r3, #16
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 8142 	beq.w	8008e62 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2210      	movs	r2, #16
 8008be4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf0:	2b40      	cmp	r3, #64	@ 0x40
 8008bf2:	f040 80b8 	bne.w	8008d66 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 8154 	beq.w	8008eb4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c16:	429a      	cmp	r2, r3
 8008c18:	f080 814c 	bcs.w	8008eb4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c30:	f000 8086 	beq.w	8008d40 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c40:	e853 3f00 	ldrex	r3, [r3]
 8008c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1da      	bne.n	8008c34 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3308      	adds	r3, #8
 8008c84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008c8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c90:	f023 0301 	bic.w	r3, r3, #1
 8008c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ca2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008cb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e1      	bne.n	8008c7e <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008cde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ce4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e3      	bne.n	8008cba <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d10:	f023 0310 	bic.w	r3, r3, #16
 8008d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e4      	bne.n	8008d00 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fc f9d4 	bl	80050e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	f8b2 1058 	ldrh.w	r1, [r2, #88]	@ 0x58
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	f8b2 205a 	ldrh.w	r2, [r2, #90]	@ 0x5a
 8008d58:	b292      	uxth	r2, r2
 8008d5a:	1a8a      	subs	r2, r1, r2
 8008d5c:	b292      	uxth	r2, r2
 8008d5e:	4611      	mov	r1, r2
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d64:	e0a6      	b.n	8008eb4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 8098 	beq.w	8008eb8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8008d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 8093 	beq.w	8008eb8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008da6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008db6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dbc:	e841 2300 	strex	r3, r2, [r1]
 8008dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e4      	bne.n	8008d92 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3308      	adds	r3, #8
 8008dce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	e853 3f00 	ldrex	r3, [r3]
 8008dd6:	623b      	str	r3, [r7, #32]
   return(result);
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	f023 0301 	bic.w	r3, r3, #1
 8008dde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3308      	adds	r3, #8
 8008de8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008dec:	633a      	str	r2, [r7, #48]	@ 0x30
 8008dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e3      	bne.n	8008dc8 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f023 0310 	bic.w	r3, r3, #16
 8008e28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	461a      	mov	r2, r3
 8008e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008e36:	61fb      	str	r3, [r7, #28]
 8008e38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	69b9      	ldr	r1, [r7, #24]
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	617b      	str	r3, [r7, #20]
   return(result);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e4      	bne.n	8008e14 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008e56:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e60:	e02a      	b.n	8008eb8 <HAL_UART_IRQHandler+0x5ac>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00e      	beq.n	8008e8c <HAL_UART_IRQHandler+0x580>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d008      	beq.n	8008e8c <HAL_UART_IRQHandler+0x580>
  {
    if (huart->TxISR != NULL)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01c      	beq.n	8008ebc <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
    }
    return;
 8008e8a:	e017      	b.n	8008ebc <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d012      	beq.n	8008ebe <HAL_UART_IRQHandler+0x5b2>
 8008e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00c      	beq.n	8008ebe <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 feb3 	bl	8009c10 <UART_EndTransmit_IT>
    return;
 8008eaa:	e008      	b.n	8008ebe <HAL_UART_IRQHandler+0x5b2>
      return;
 8008eac:	bf00      	nop
 8008eae:	e006      	b.n	8008ebe <HAL_UART_IRQHandler+0x5b2>
    return;
 8008eb0:	bf00      	nop
 8008eb2:	e004      	b.n	8008ebe <HAL_UART_IRQHandler+0x5b2>
      return;
 8008eb4:	bf00      	nop
 8008eb6:	e002      	b.n	8008ebe <HAL_UART_IRQHandler+0x5b2>
      return;
 8008eb8:	bf00      	nop
 8008eba:	e000      	b.n	8008ebe <HAL_UART_IRQHandler+0x5b2>
    return;
 8008ebc:	bf00      	nop
  }

}
 8008ebe:	37e8      	adds	r7, #232	@ 0xe8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a14      	ldr	r2, [pc, #80]	@ (8008fd8 <UART_InitCallbacksToDefault+0x5c>)
 8008f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a13      	ldr	r2, [pc, #76]	@ (8008fdc <UART_InitCallbacksToDefault+0x60>)
 8008f90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a12      	ldr	r2, [pc, #72]	@ (8008fe0 <UART_InitCallbacksToDefault+0x64>)
 8008f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a11      	ldr	r2, [pc, #68]	@ (8008fe4 <UART_InitCallbacksToDefault+0x68>)
 8008fa0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a10      	ldr	r2, [pc, #64]	@ (8008fe8 <UART_InitCallbacksToDefault+0x6c>)
 8008fa8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a0f      	ldr	r2, [pc, #60]	@ (8008fec <UART_InitCallbacksToDefault+0x70>)
 8008fb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff0 <UART_InitCallbacksToDefault+0x74>)
 8008fb8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8008ff4 <UART_InitCallbacksToDefault+0x78>)
 8008fc0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ff8 <UART_InitCallbacksToDefault+0x7c>)
 8008fc8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	08008ed9 	.word	0x08008ed9
 8008fdc:	08008ec5 	.word	0x08008ec5
 8008fe0:	08008f01 	.word	0x08008f01
 8008fe4:	08008eed 	.word	0x08008eed
 8008fe8:	08008f15 	.word	0x08008f15
 8008fec:	08008f29 	.word	0x08008f29
 8008ff0:	08008f3d 	.word	0x08008f3d
 8008ff4:	08008f51 	.word	0x08008f51
 8008ff8:	08008f65 	.word	0x08008f65

08008ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	4313      	orrs	r3, r2
 800901e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4ba6      	ldr	r3, [pc, #664]	@ (80092c0 <UART_SetConfig+0x2c4>)
 8009028:	4013      	ands	r3, r2
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	6812      	ldr	r2, [r2, #0]
 800902e:	6979      	ldr	r1, [r7, #20]
 8009030:	430b      	orrs	r3, r1
 8009032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	430a      	orrs	r2, r1
 800906c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a94      	ldr	r2, [pc, #592]	@ (80092c4 <UART_SetConfig+0x2c8>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d120      	bne.n	80090ba <UART_SetConfig+0xbe>
 8009078:	4b93      	ldr	r3, [pc, #588]	@ (80092c8 <UART_SetConfig+0x2cc>)
 800907a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907e:	f003 0303 	and.w	r3, r3, #3
 8009082:	2b03      	cmp	r3, #3
 8009084:	d816      	bhi.n	80090b4 <UART_SetConfig+0xb8>
 8009086:	a201      	add	r2, pc, #4	@ (adr r2, 800908c <UART_SetConfig+0x90>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	0800909d 	.word	0x0800909d
 8009090:	080090a9 	.word	0x080090a9
 8009094:	080090a3 	.word	0x080090a3
 8009098:	080090af 	.word	0x080090af
 800909c:	2301      	movs	r3, #1
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	e150      	b.n	8009344 <UART_SetConfig+0x348>
 80090a2:	2302      	movs	r3, #2
 80090a4:	77fb      	strb	r3, [r7, #31]
 80090a6:	e14d      	b.n	8009344 <UART_SetConfig+0x348>
 80090a8:	2304      	movs	r3, #4
 80090aa:	77fb      	strb	r3, [r7, #31]
 80090ac:	e14a      	b.n	8009344 <UART_SetConfig+0x348>
 80090ae:	2308      	movs	r3, #8
 80090b0:	77fb      	strb	r3, [r7, #31]
 80090b2:	e147      	b.n	8009344 <UART_SetConfig+0x348>
 80090b4:	2310      	movs	r3, #16
 80090b6:	77fb      	strb	r3, [r7, #31]
 80090b8:	e144      	b.n	8009344 <UART_SetConfig+0x348>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a83      	ldr	r2, [pc, #524]	@ (80092cc <UART_SetConfig+0x2d0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d132      	bne.n	800912a <UART_SetConfig+0x12e>
 80090c4:	4b80      	ldr	r3, [pc, #512]	@ (80092c8 <UART_SetConfig+0x2cc>)
 80090c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ca:	f003 030c 	and.w	r3, r3, #12
 80090ce:	2b0c      	cmp	r3, #12
 80090d0:	d828      	bhi.n	8009124 <UART_SetConfig+0x128>
 80090d2:	a201      	add	r2, pc, #4	@ (adr r2, 80090d8 <UART_SetConfig+0xdc>)
 80090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d8:	0800910d 	.word	0x0800910d
 80090dc:	08009125 	.word	0x08009125
 80090e0:	08009125 	.word	0x08009125
 80090e4:	08009125 	.word	0x08009125
 80090e8:	08009119 	.word	0x08009119
 80090ec:	08009125 	.word	0x08009125
 80090f0:	08009125 	.word	0x08009125
 80090f4:	08009125 	.word	0x08009125
 80090f8:	08009113 	.word	0x08009113
 80090fc:	08009125 	.word	0x08009125
 8009100:	08009125 	.word	0x08009125
 8009104:	08009125 	.word	0x08009125
 8009108:	0800911f 	.word	0x0800911f
 800910c:	2300      	movs	r3, #0
 800910e:	77fb      	strb	r3, [r7, #31]
 8009110:	e118      	b.n	8009344 <UART_SetConfig+0x348>
 8009112:	2302      	movs	r3, #2
 8009114:	77fb      	strb	r3, [r7, #31]
 8009116:	e115      	b.n	8009344 <UART_SetConfig+0x348>
 8009118:	2304      	movs	r3, #4
 800911a:	77fb      	strb	r3, [r7, #31]
 800911c:	e112      	b.n	8009344 <UART_SetConfig+0x348>
 800911e:	2308      	movs	r3, #8
 8009120:	77fb      	strb	r3, [r7, #31]
 8009122:	e10f      	b.n	8009344 <UART_SetConfig+0x348>
 8009124:	2310      	movs	r3, #16
 8009126:	77fb      	strb	r3, [r7, #31]
 8009128:	e10c      	b.n	8009344 <UART_SetConfig+0x348>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a68      	ldr	r2, [pc, #416]	@ (80092d0 <UART_SetConfig+0x2d4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d120      	bne.n	8009176 <UART_SetConfig+0x17a>
 8009134:	4b64      	ldr	r3, [pc, #400]	@ (80092c8 <UART_SetConfig+0x2cc>)
 8009136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800913a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800913e:	2b30      	cmp	r3, #48	@ 0x30
 8009140:	d013      	beq.n	800916a <UART_SetConfig+0x16e>
 8009142:	2b30      	cmp	r3, #48	@ 0x30
 8009144:	d814      	bhi.n	8009170 <UART_SetConfig+0x174>
 8009146:	2b20      	cmp	r3, #32
 8009148:	d009      	beq.n	800915e <UART_SetConfig+0x162>
 800914a:	2b20      	cmp	r3, #32
 800914c:	d810      	bhi.n	8009170 <UART_SetConfig+0x174>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <UART_SetConfig+0x15c>
 8009152:	2b10      	cmp	r3, #16
 8009154:	d006      	beq.n	8009164 <UART_SetConfig+0x168>
 8009156:	e00b      	b.n	8009170 <UART_SetConfig+0x174>
 8009158:	2300      	movs	r3, #0
 800915a:	77fb      	strb	r3, [r7, #31]
 800915c:	e0f2      	b.n	8009344 <UART_SetConfig+0x348>
 800915e:	2302      	movs	r3, #2
 8009160:	77fb      	strb	r3, [r7, #31]
 8009162:	e0ef      	b.n	8009344 <UART_SetConfig+0x348>
 8009164:	2304      	movs	r3, #4
 8009166:	77fb      	strb	r3, [r7, #31]
 8009168:	e0ec      	b.n	8009344 <UART_SetConfig+0x348>
 800916a:	2308      	movs	r3, #8
 800916c:	77fb      	strb	r3, [r7, #31]
 800916e:	e0e9      	b.n	8009344 <UART_SetConfig+0x348>
 8009170:	2310      	movs	r3, #16
 8009172:	77fb      	strb	r3, [r7, #31]
 8009174:	e0e6      	b.n	8009344 <UART_SetConfig+0x348>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a56      	ldr	r2, [pc, #344]	@ (80092d4 <UART_SetConfig+0x2d8>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d120      	bne.n	80091c2 <UART_SetConfig+0x1c6>
 8009180:	4b51      	ldr	r3, [pc, #324]	@ (80092c8 <UART_SetConfig+0x2cc>)
 8009182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009186:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800918a:	2bc0      	cmp	r3, #192	@ 0xc0
 800918c:	d013      	beq.n	80091b6 <UART_SetConfig+0x1ba>
 800918e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009190:	d814      	bhi.n	80091bc <UART_SetConfig+0x1c0>
 8009192:	2b80      	cmp	r3, #128	@ 0x80
 8009194:	d009      	beq.n	80091aa <UART_SetConfig+0x1ae>
 8009196:	2b80      	cmp	r3, #128	@ 0x80
 8009198:	d810      	bhi.n	80091bc <UART_SetConfig+0x1c0>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <UART_SetConfig+0x1a8>
 800919e:	2b40      	cmp	r3, #64	@ 0x40
 80091a0:	d006      	beq.n	80091b0 <UART_SetConfig+0x1b4>
 80091a2:	e00b      	b.n	80091bc <UART_SetConfig+0x1c0>
 80091a4:	2300      	movs	r3, #0
 80091a6:	77fb      	strb	r3, [r7, #31]
 80091a8:	e0cc      	b.n	8009344 <UART_SetConfig+0x348>
 80091aa:	2302      	movs	r3, #2
 80091ac:	77fb      	strb	r3, [r7, #31]
 80091ae:	e0c9      	b.n	8009344 <UART_SetConfig+0x348>
 80091b0:	2304      	movs	r3, #4
 80091b2:	77fb      	strb	r3, [r7, #31]
 80091b4:	e0c6      	b.n	8009344 <UART_SetConfig+0x348>
 80091b6:	2308      	movs	r3, #8
 80091b8:	77fb      	strb	r3, [r7, #31]
 80091ba:	e0c3      	b.n	8009344 <UART_SetConfig+0x348>
 80091bc:	2310      	movs	r3, #16
 80091be:	77fb      	strb	r3, [r7, #31]
 80091c0:	e0c0      	b.n	8009344 <UART_SetConfig+0x348>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a44      	ldr	r2, [pc, #272]	@ (80092d8 <UART_SetConfig+0x2dc>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d125      	bne.n	8009218 <UART_SetConfig+0x21c>
 80091cc:	4b3e      	ldr	r3, [pc, #248]	@ (80092c8 <UART_SetConfig+0x2cc>)
 80091ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091da:	d017      	beq.n	800920c <UART_SetConfig+0x210>
 80091dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091e0:	d817      	bhi.n	8009212 <UART_SetConfig+0x216>
 80091e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e6:	d00b      	beq.n	8009200 <UART_SetConfig+0x204>
 80091e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ec:	d811      	bhi.n	8009212 <UART_SetConfig+0x216>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <UART_SetConfig+0x1fe>
 80091f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091f6:	d006      	beq.n	8009206 <UART_SetConfig+0x20a>
 80091f8:	e00b      	b.n	8009212 <UART_SetConfig+0x216>
 80091fa:	2300      	movs	r3, #0
 80091fc:	77fb      	strb	r3, [r7, #31]
 80091fe:	e0a1      	b.n	8009344 <UART_SetConfig+0x348>
 8009200:	2302      	movs	r3, #2
 8009202:	77fb      	strb	r3, [r7, #31]
 8009204:	e09e      	b.n	8009344 <UART_SetConfig+0x348>
 8009206:	2304      	movs	r3, #4
 8009208:	77fb      	strb	r3, [r7, #31]
 800920a:	e09b      	b.n	8009344 <UART_SetConfig+0x348>
 800920c:	2308      	movs	r3, #8
 800920e:	77fb      	strb	r3, [r7, #31]
 8009210:	e098      	b.n	8009344 <UART_SetConfig+0x348>
 8009212:	2310      	movs	r3, #16
 8009214:	77fb      	strb	r3, [r7, #31]
 8009216:	e095      	b.n	8009344 <UART_SetConfig+0x348>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a2f      	ldr	r2, [pc, #188]	@ (80092dc <UART_SetConfig+0x2e0>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d125      	bne.n	800926e <UART_SetConfig+0x272>
 8009222:	4b29      	ldr	r3, [pc, #164]	@ (80092c8 <UART_SetConfig+0x2cc>)
 8009224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009228:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800922c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009230:	d017      	beq.n	8009262 <UART_SetConfig+0x266>
 8009232:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009236:	d817      	bhi.n	8009268 <UART_SetConfig+0x26c>
 8009238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800923c:	d00b      	beq.n	8009256 <UART_SetConfig+0x25a>
 800923e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009242:	d811      	bhi.n	8009268 <UART_SetConfig+0x26c>
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <UART_SetConfig+0x254>
 8009248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800924c:	d006      	beq.n	800925c <UART_SetConfig+0x260>
 800924e:	e00b      	b.n	8009268 <UART_SetConfig+0x26c>
 8009250:	2301      	movs	r3, #1
 8009252:	77fb      	strb	r3, [r7, #31]
 8009254:	e076      	b.n	8009344 <UART_SetConfig+0x348>
 8009256:	2302      	movs	r3, #2
 8009258:	77fb      	strb	r3, [r7, #31]
 800925a:	e073      	b.n	8009344 <UART_SetConfig+0x348>
 800925c:	2304      	movs	r3, #4
 800925e:	77fb      	strb	r3, [r7, #31]
 8009260:	e070      	b.n	8009344 <UART_SetConfig+0x348>
 8009262:	2308      	movs	r3, #8
 8009264:	77fb      	strb	r3, [r7, #31]
 8009266:	e06d      	b.n	8009344 <UART_SetConfig+0x348>
 8009268:	2310      	movs	r3, #16
 800926a:	77fb      	strb	r3, [r7, #31]
 800926c:	e06a      	b.n	8009344 <UART_SetConfig+0x348>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a1b      	ldr	r2, [pc, #108]	@ (80092e0 <UART_SetConfig+0x2e4>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d138      	bne.n	80092ea <UART_SetConfig+0x2ee>
 8009278:	4b13      	ldr	r3, [pc, #76]	@ (80092c8 <UART_SetConfig+0x2cc>)
 800927a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800927e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009282:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009286:	d017      	beq.n	80092b8 <UART_SetConfig+0x2bc>
 8009288:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800928c:	d82a      	bhi.n	80092e4 <UART_SetConfig+0x2e8>
 800928e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009292:	d00b      	beq.n	80092ac <UART_SetConfig+0x2b0>
 8009294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009298:	d824      	bhi.n	80092e4 <UART_SetConfig+0x2e8>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <UART_SetConfig+0x2aa>
 800929e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a2:	d006      	beq.n	80092b2 <UART_SetConfig+0x2b6>
 80092a4:	e01e      	b.n	80092e4 <UART_SetConfig+0x2e8>
 80092a6:	2300      	movs	r3, #0
 80092a8:	77fb      	strb	r3, [r7, #31]
 80092aa:	e04b      	b.n	8009344 <UART_SetConfig+0x348>
 80092ac:	2302      	movs	r3, #2
 80092ae:	77fb      	strb	r3, [r7, #31]
 80092b0:	e048      	b.n	8009344 <UART_SetConfig+0x348>
 80092b2:	2304      	movs	r3, #4
 80092b4:	77fb      	strb	r3, [r7, #31]
 80092b6:	e045      	b.n	8009344 <UART_SetConfig+0x348>
 80092b8:	2308      	movs	r3, #8
 80092ba:	77fb      	strb	r3, [r7, #31]
 80092bc:	e042      	b.n	8009344 <UART_SetConfig+0x348>
 80092be:	bf00      	nop
 80092c0:	efff69f3 	.word	0xefff69f3
 80092c4:	40011000 	.word	0x40011000
 80092c8:	40023800 	.word	0x40023800
 80092cc:	40004400 	.word	0x40004400
 80092d0:	40004800 	.word	0x40004800
 80092d4:	40004c00 	.word	0x40004c00
 80092d8:	40005000 	.word	0x40005000
 80092dc:	40011400 	.word	0x40011400
 80092e0:	40007800 	.word	0x40007800
 80092e4:	2310      	movs	r3, #16
 80092e6:	77fb      	strb	r3, [r7, #31]
 80092e8:	e02c      	b.n	8009344 <UART_SetConfig+0x348>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a72      	ldr	r2, [pc, #456]	@ (80094b8 <UART_SetConfig+0x4bc>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d125      	bne.n	8009340 <UART_SetConfig+0x344>
 80092f4:	4b71      	ldr	r3, [pc, #452]	@ (80094bc <UART_SetConfig+0x4c0>)
 80092f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80092fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009302:	d017      	beq.n	8009334 <UART_SetConfig+0x338>
 8009304:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009308:	d817      	bhi.n	800933a <UART_SetConfig+0x33e>
 800930a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800930e:	d00b      	beq.n	8009328 <UART_SetConfig+0x32c>
 8009310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009314:	d811      	bhi.n	800933a <UART_SetConfig+0x33e>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <UART_SetConfig+0x326>
 800931a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800931e:	d006      	beq.n	800932e <UART_SetConfig+0x332>
 8009320:	e00b      	b.n	800933a <UART_SetConfig+0x33e>
 8009322:	2300      	movs	r3, #0
 8009324:	77fb      	strb	r3, [r7, #31]
 8009326:	e00d      	b.n	8009344 <UART_SetConfig+0x348>
 8009328:	2302      	movs	r3, #2
 800932a:	77fb      	strb	r3, [r7, #31]
 800932c:	e00a      	b.n	8009344 <UART_SetConfig+0x348>
 800932e:	2304      	movs	r3, #4
 8009330:	77fb      	strb	r3, [r7, #31]
 8009332:	e007      	b.n	8009344 <UART_SetConfig+0x348>
 8009334:	2308      	movs	r3, #8
 8009336:	77fb      	strb	r3, [r7, #31]
 8009338:	e004      	b.n	8009344 <UART_SetConfig+0x348>
 800933a:	2310      	movs	r3, #16
 800933c:	77fb      	strb	r3, [r7, #31]
 800933e:	e001      	b.n	8009344 <UART_SetConfig+0x348>
 8009340:	2310      	movs	r3, #16
 8009342:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800934c:	d15b      	bne.n	8009406 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800934e:	7ffb      	ldrb	r3, [r7, #31]
 8009350:	2b08      	cmp	r3, #8
 8009352:	d828      	bhi.n	80093a6 <UART_SetConfig+0x3aa>
 8009354:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <UART_SetConfig+0x360>)
 8009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935a:	bf00      	nop
 800935c:	08009381 	.word	0x08009381
 8009360:	08009389 	.word	0x08009389
 8009364:	08009391 	.word	0x08009391
 8009368:	080093a7 	.word	0x080093a7
 800936c:	08009397 	.word	0x08009397
 8009370:	080093a7 	.word	0x080093a7
 8009374:	080093a7 	.word	0x080093a7
 8009378:	080093a7 	.word	0x080093a7
 800937c:	0800939f 	.word	0x0800939f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009380:	f7fd f9a6 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 8009384:	61b8      	str	r0, [r7, #24]
        break;
 8009386:	e013      	b.n	80093b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009388:	f7fd f9b6 	bl	80066f8 <HAL_RCC_GetPCLK2Freq>
 800938c:	61b8      	str	r0, [r7, #24]
        break;
 800938e:	e00f      	b.n	80093b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009390:	4b4b      	ldr	r3, [pc, #300]	@ (80094c0 <UART_SetConfig+0x4c4>)
 8009392:	61bb      	str	r3, [r7, #24]
        break;
 8009394:	e00c      	b.n	80093b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009396:	f7fd f889 	bl	80064ac <HAL_RCC_GetSysClockFreq>
 800939a:	61b8      	str	r0, [r7, #24]
        break;
 800939c:	e008      	b.n	80093b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800939e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093a2:	61bb      	str	r3, [r7, #24]
        break;
 80093a4:	e004      	b.n	80093b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	77bb      	strb	r3, [r7, #30]
        break;
 80093ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d074      	beq.n	80094a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	005a      	lsls	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	085b      	lsrs	r3, r3, #1
 80093c0:	441a      	add	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2b0f      	cmp	r3, #15
 80093d0:	d916      	bls.n	8009400 <UART_SetConfig+0x404>
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093d8:	d212      	bcs.n	8009400 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	f023 030f 	bic.w	r3, r3, #15
 80093e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	085b      	lsrs	r3, r3, #1
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	f003 0307 	and.w	r3, r3, #7
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	89fb      	ldrh	r3, [r7, #14]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	89fa      	ldrh	r2, [r7, #14]
 80093fc:	60da      	str	r2, [r3, #12]
 80093fe:	e04f      	b.n	80094a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	77bb      	strb	r3, [r7, #30]
 8009404:	e04c      	b.n	80094a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009406:	7ffb      	ldrb	r3, [r7, #31]
 8009408:	2b08      	cmp	r3, #8
 800940a:	d828      	bhi.n	800945e <UART_SetConfig+0x462>
 800940c:	a201      	add	r2, pc, #4	@ (adr r2, 8009414 <UART_SetConfig+0x418>)
 800940e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009412:	bf00      	nop
 8009414:	08009439 	.word	0x08009439
 8009418:	08009441 	.word	0x08009441
 800941c:	08009449 	.word	0x08009449
 8009420:	0800945f 	.word	0x0800945f
 8009424:	0800944f 	.word	0x0800944f
 8009428:	0800945f 	.word	0x0800945f
 800942c:	0800945f 	.word	0x0800945f
 8009430:	0800945f 	.word	0x0800945f
 8009434:	08009457 	.word	0x08009457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009438:	f7fd f94a 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 800943c:	61b8      	str	r0, [r7, #24]
        break;
 800943e:	e013      	b.n	8009468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009440:	f7fd f95a 	bl	80066f8 <HAL_RCC_GetPCLK2Freq>
 8009444:	61b8      	str	r0, [r7, #24]
        break;
 8009446:	e00f      	b.n	8009468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009448:	4b1d      	ldr	r3, [pc, #116]	@ (80094c0 <UART_SetConfig+0x4c4>)
 800944a:	61bb      	str	r3, [r7, #24]
        break;
 800944c:	e00c      	b.n	8009468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800944e:	f7fd f82d 	bl	80064ac <HAL_RCC_GetSysClockFreq>
 8009452:	61b8      	str	r0, [r7, #24]
        break;
 8009454:	e008      	b.n	8009468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800945a:	61bb      	str	r3, [r7, #24]
        break;
 800945c:	e004      	b.n	8009468 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	77bb      	strb	r3, [r7, #30]
        break;
 8009466:	bf00      	nop
    }

    if (pclk != 0U)
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d018      	beq.n	80094a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	085a      	lsrs	r2, r3, #1
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	441a      	add	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009480:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b0f      	cmp	r3, #15
 8009486:	d909      	bls.n	800949c <UART_SetConfig+0x4a0>
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800948e:	d205      	bcs.n	800949c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	b29a      	uxth	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	60da      	str	r2, [r3, #12]
 800949a:	e001      	b.n	80094a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80094ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	40007c00 	.word	0x40007c00
 80094bc:	40023800 	.word	0x40023800
 80094c0:	00f42400 	.word	0x00f42400

080094c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009514:	f003 0304 	and.w	r3, r3, #4
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009536:	f003 0308 	and.w	r3, r3, #8
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00a      	beq.n	8009576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	430a      	orrs	r2, r1
 8009574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800957a:	f003 0320 	and.w	r3, r3, #32
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00a      	beq.n	8009598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d01a      	beq.n	80095da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095c2:	d10a      	bne.n	80095da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	605a      	str	r2, [r3, #4]
  }
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af02      	add	r7, sp, #8
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009618:	f7fa fd18 	bl	800404c <HAL_GetTick>
 800961c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0308 	and.w	r3, r3, #8
 8009628:	2b08      	cmp	r3, #8
 800962a:	d10e      	bne.n	800964a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800962c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f81b 	bl	8009676 <UART_WaitOnFlagUntilTimeout>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e011      	b.n	800966e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b09c      	sub	sp, #112	@ 0x70
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	603b      	str	r3, [r7, #0]
 8009682:	4613      	mov	r3, r2
 8009684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009686:	e0a7      	b.n	80097d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	f000 80a3 	beq.w	80097d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009692:	f7fa fcdb 	bl	800404c <HAL_GetTick>
 8009696:	4602      	mov	r2, r0
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800969e:	429a      	cmp	r2, r3
 80096a0:	d302      	bcc.n	80096a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80096a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d13f      	bne.n	8009728 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80096bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096c8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80096cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80096d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e6      	bne.n	80096a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3308      	adds	r3, #8
 80096e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ec:	f023 0301 	bic.w	r3, r3, #1
 80096f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3308      	adds	r3, #8
 80096f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096fa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80096fc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1e5      	bne.n	80096da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2220      	movs	r2, #32
 8009712:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2220      	movs	r2, #32
 8009718:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e068      	b.n	80097fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	2b00      	cmp	r3, #0
 8009734:	d050      	beq.n	80097d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009744:	d148      	bne.n	80097d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800974e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800975e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009760:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009764:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800976e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009770:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e6      	bne.n	8009750 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	613b      	str	r3, [r7, #16]
   return(result);
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f023 0301 	bic.w	r3, r3, #1
 8009798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3308      	adds	r3, #8
 80097a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80097a2:	623a      	str	r2, [r7, #32]
 80097a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	69f9      	ldr	r1, [r7, #28]
 80097a8:	6a3a      	ldr	r2, [r7, #32]
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e5      	bne.n	8009782 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2220      	movs	r2, #32
 80097c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e010      	b.n	80097fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	69da      	ldr	r2, [r3, #28]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	4013      	ands	r3, r2
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	bf0c      	ite	eq
 80097e8:	2301      	moveq	r3, #1
 80097ea:	2300      	movne	r3, #0
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	f43f af48 	beq.w	8009688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3770      	adds	r7, #112	@ 0x70
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009804:	b480      	push	{r7}
 8009806:	b097      	sub	sp, #92	@ 0x5c
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	4613      	mov	r3, r2
 8009810:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	88fa      	ldrh	r2, [r7, #6]
 800981c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	88fa      	ldrh	r2, [r7, #6]
 8009824:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009836:	d10e      	bne.n	8009856 <UART_Start_Receive_IT+0x52>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d105      	bne.n	800984c <UART_Start_Receive_IT+0x48>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009846:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800984a:	e02d      	b.n	80098a8 <UART_Start_Receive_IT+0xa4>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	22ff      	movs	r2, #255	@ 0xff
 8009850:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009854:	e028      	b.n	80098a8 <UART_Start_Receive_IT+0xa4>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10d      	bne.n	800987a <UART_Start_Receive_IT+0x76>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d104      	bne.n	8009870 <UART_Start_Receive_IT+0x6c>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	22ff      	movs	r2, #255	@ 0xff
 800986a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800986e:	e01b      	b.n	80098a8 <UART_Start_Receive_IT+0xa4>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	227f      	movs	r2, #127	@ 0x7f
 8009874:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009878:	e016      	b.n	80098a8 <UART_Start_Receive_IT+0xa4>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009882:	d10d      	bne.n	80098a0 <UART_Start_Receive_IT+0x9c>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <UART_Start_Receive_IT+0x92>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	227f      	movs	r2, #127	@ 0x7f
 8009890:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009894:	e008      	b.n	80098a8 <UART_Start_Receive_IT+0xa4>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	223f      	movs	r2, #63	@ 0x3f
 800989a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800989e:	e003      	b.n	80098a8 <UART_Start_Receive_IT+0xa4>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2222      	movs	r2, #34	@ 0x22
 80098b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3308      	adds	r3, #8
 80098be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ca:	f043 0301 	orr.w	r3, r3, #1
 80098ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3308      	adds	r3, #8
 80098d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80098da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80098de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098e0:	e841 2300 	strex	r3, r2, [r1]
 80098e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80098e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1e5      	bne.n	80098b8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f4:	d107      	bne.n	8009906 <UART_Start_Receive_IT+0x102>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d103      	bne.n	8009906 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4a21      	ldr	r2, [pc, #132]	@ (8009988 <UART_Start_Receive_IT+0x184>)
 8009902:	669a      	str	r2, [r3, #104]	@ 0x68
 8009904:	e002      	b.n	800990c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	4a20      	ldr	r2, [pc, #128]	@ (800998c <UART_Start_Receive_IT+0x188>)
 800990a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d019      	beq.n	8009948 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009924:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009928:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009932:	637b      	str	r3, [r7, #52]	@ 0x34
 8009934:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009938:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e6      	bne.n	8009914 <UART_Start_Receive_IT+0x110>
 8009946:	e018      	b.n	800997a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	613b      	str	r3, [r7, #16]
   return(result);
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f043 0320 	orr.w	r3, r3, #32
 800995c:	653b      	str	r3, [r7, #80]	@ 0x50
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009966:	623b      	str	r3, [r7, #32]
 8009968:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	69f9      	ldr	r1, [r7, #28]
 800996c:	6a3a      	ldr	r2, [r7, #32]
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	61bb      	str	r3, [r7, #24]
   return(result);
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e6      	bne.n	8009948 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	375c      	adds	r7, #92	@ 0x5c
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	08009dd7 	.word	0x08009dd7
 800998c:	08009c69 	.word	0x08009c69

08009990 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009990:	b480      	push	{r7}
 8009992:	b089      	sub	sp, #36	@ 0x24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	e853 3f00 	ldrex	r3, [r3]
 80099a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80099ac:	61fb      	str	r3, [r7, #28]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	61bb      	str	r3, [r7, #24]
 80099b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	6979      	ldr	r1, [r7, #20]
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	613b      	str	r3, [r7, #16]
   return(result);
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e6      	bne.n	8009998 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80099d0:	bf00      	nop
 80099d2:	3724      	adds	r7, #36	@ 0x24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b095      	sub	sp, #84	@ 0x54
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ec:	e853 3f00 	ldrex	r3, [r3]
 80099f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e6      	bne.n	80099e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	f023 0301 	bic.w	r3, r3, #1
 8009a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3308      	adds	r3, #8
 8009a34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a3e:	e841 2300 	strex	r3, r2, [r1]
 8009a42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1e5      	bne.n	8009a16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d118      	bne.n	8009a84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	e853 3f00 	ldrex	r3, [r3]
 8009a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	f023 0310 	bic.w	r3, r3, #16
 8009a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a70:	61bb      	str	r3, [r7, #24]
 8009a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a74:	6979      	ldr	r1, [r7, #20]
 8009a76:	69ba      	ldr	r2, [r7, #24]
 8009a78:	e841 2300 	strex	r3, r2, [r1]
 8009a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1e6      	bne.n	8009a52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009a98:	bf00      	nop
 8009a9a:	3754      	adds	r7, #84	@ 0x54
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b090      	sub	sp, #64	@ 0x40
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aba:	d037      	beq.n	8009b2c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3308      	adds	r3, #8
 8009aca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ae4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aec:	e841 2300 	strex	r3, r2, [r1]
 8009af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e5      	bne.n	8009ac4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b16:	61fb      	str	r3, [r7, #28]
 8009b18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	69b9      	ldr	r1, [r7, #24]
 8009b1c:	69fa      	ldr	r2, [r7, #28]
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	617b      	str	r3, [r7, #20]
   return(result);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e6      	bne.n	8009af8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b2a:	e004      	b.n	8009b36 <UART_DMATransmitCplt+0x92>
    huart->TxCpltCallback(huart);
 8009b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b32:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009b34:	4798      	blx	r3
}
 8009b36:	bf00      	nop
 8009b38:	3740      	adds	r7, #64	@ 0x40
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b56:	bf00      	nop
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b086      	sub	sp, #24
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b70:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b78:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b84:	2b80      	cmp	r3, #128	@ 0x80
 8009b86:	d109      	bne.n	8009b9c <UART_DMAError+0x3e>
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	2b21      	cmp	r3, #33	@ 0x21
 8009b8c:	d106      	bne.n	8009b9c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009b96:	6978      	ldr	r0, [r7, #20]
 8009b98:	f7ff fefa 	bl	8009990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba6:	2b40      	cmp	r3, #64	@ 0x40
 8009ba8:	d109      	bne.n	8009bbe <UART_DMAError+0x60>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b22      	cmp	r3, #34	@ 0x22
 8009bae:	d106      	bne.n	8009bbe <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009bb8:	6978      	ldr	r0, [r7, #20]
 8009bba:	f7ff ff0f 	bl	80099dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bc4:	f043 0210 	orr.w	r2, r3, #16
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bd4:	6978      	ldr	r0, [r7, #20]
 8009bd6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bd8:	bf00      	nop
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c08:	bf00      	nop
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	61bb      	str	r3, [r7, #24]
 8009c38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6979      	ldr	r1, [r7, #20]
 8009c3c:	69ba      	ldr	r2, [r7, #24]
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	613b      	str	r3, [r7, #16]
   return(result);
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e6      	bne.n	8009c18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c60:	bf00      	nop
 8009c62:	3720      	adds	r7, #32
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b096      	sub	sp, #88	@ 0x58
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c76:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c80:	2b22      	cmp	r3, #34	@ 0x22
 8009c82:	f040 809c 	bne.w	8009dbe <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c90:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009c94:	b2d9      	uxtb	r1, r3
 8009c96:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca0:	400a      	ands	r2, r1
 8009ca2:	b2d2      	uxtb	r2, r2
 8009ca4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d17f      	bne.n	8009dce <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e6      	bne.n	8009cce <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3308      	adds	r3, #8
 8009d06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	623b      	str	r3, [r7, #32]
   return(result);
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	f023 0301 	bic.w	r3, r3, #1
 8009d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d20:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e5      	bne.n	8009d00 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d130      	bne.n	8009db2 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f023 0310 	bic.w	r3, r3, #16
 8009d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d74:	61fb      	str	r3, [r7, #28]
 8009d76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	69b9      	ldr	r1, [r7, #24]
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	e841 2300 	strex	r3, r2, [r1]
 8009d80:	617b      	str	r3, [r7, #20]
   return(result);
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e6      	bne.n	8009d56 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	f003 0310 	and.w	r3, r3, #16
 8009d92:	2b10      	cmp	r3, #16
 8009d94:	d103      	bne.n	8009d9e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2210      	movs	r2, #16
 8009d9c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
 8009daa:	4611      	mov	r1, r2
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009db0:	e00d      	b.n	8009dce <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	4798      	blx	r3
}
 8009dbc:	e007      	b.n	8009dce <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	699a      	ldr	r2, [r3, #24]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f042 0208 	orr.w	r2, r2, #8
 8009dcc:	619a      	str	r2, [r3, #24]
}
 8009dce:	bf00      	nop
 8009dd0:	3758      	adds	r7, #88	@ 0x58
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b096      	sub	sp, #88	@ 0x58
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009de4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dee:	2b22      	cmp	r3, #34	@ 0x22
 8009df0:	f040 809c 	bne.w	8009f2c <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfa:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e02:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009e04:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009e08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e12:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e18:	1c9a      	adds	r2, r3, #2
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	3b01      	subs	r3, #1
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d17f      	bne.n	8009f3c <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e6      	bne.n	8009e3c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	f023 0301 	bic.w	r3, r3, #1
 8009e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e5      	bne.n	8009e6e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d130      	bne.n	8009f20 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f023 0310 	bic.w	r3, r3, #16
 8009ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ee2:	61bb      	str	r3, [r7, #24]
 8009ee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee6:	6979      	ldr	r1, [r7, #20]
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	e841 2300 	strex	r3, r2, [r1]
 8009eee:	613b      	str	r3, [r7, #16]
   return(result);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e6      	bne.n	8009ec4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	f003 0310 	and.w	r3, r3, #16
 8009f00:	2b10      	cmp	r3, #16
 8009f02:	d103      	bne.n	8009f0c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2210      	movs	r2, #16
 8009f0a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
 8009f18:	4611      	mov	r1, r2
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f1e:	e00d      	b.n	8009f3c <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	4798      	blx	r3
}
 8009f2a:	e007      	b.n	8009f3c <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	699a      	ldr	r2, [r3, #24]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f042 0208 	orr.w	r2, r2, #8
 8009f3a:	619a      	str	r2, [r3, #24]
}
 8009f3c:	bf00      	nop
 8009f3e:	3758      	adds	r7, #88	@ 0x58
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <__cvt>:
 8009f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f48:	ec57 6b10 	vmov	r6, r7, d0
 8009f4c:	2f00      	cmp	r7, #0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	4619      	mov	r1, r3
 8009f52:	463b      	mov	r3, r7
 8009f54:	bfbb      	ittet	lt
 8009f56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f5a:	461f      	movlt	r7, r3
 8009f5c:	2300      	movge	r3, #0
 8009f5e:	232d      	movlt	r3, #45	@ 0x2d
 8009f60:	700b      	strb	r3, [r1, #0]
 8009f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f68:	4691      	mov	r9, r2
 8009f6a:	f023 0820 	bic.w	r8, r3, #32
 8009f6e:	bfbc      	itt	lt
 8009f70:	4632      	movlt	r2, r6
 8009f72:	4616      	movlt	r6, r2
 8009f74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f78:	d005      	beq.n	8009f86 <__cvt+0x42>
 8009f7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f7e:	d100      	bne.n	8009f82 <__cvt+0x3e>
 8009f80:	3401      	adds	r4, #1
 8009f82:	2102      	movs	r1, #2
 8009f84:	e000      	b.n	8009f88 <__cvt+0x44>
 8009f86:	2103      	movs	r1, #3
 8009f88:	ab03      	add	r3, sp, #12
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	ab02      	add	r3, sp, #8
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	ec47 6b10 	vmov	d0, r6, r7
 8009f94:	4653      	mov	r3, sl
 8009f96:	4622      	mov	r2, r4
 8009f98:	f000 fe5a 	bl	800ac50 <_dtoa_r>
 8009f9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	d119      	bne.n	8009fd8 <__cvt+0x94>
 8009fa4:	f019 0f01 	tst.w	r9, #1
 8009fa8:	d00e      	beq.n	8009fc8 <__cvt+0x84>
 8009faa:	eb00 0904 	add.w	r9, r0, r4
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	f7f6 fda7 	bl	8000b08 <__aeabi_dcmpeq>
 8009fba:	b108      	cbz	r0, 8009fc0 <__cvt+0x7c>
 8009fbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fc0:	2230      	movs	r2, #48	@ 0x30
 8009fc2:	9b03      	ldr	r3, [sp, #12]
 8009fc4:	454b      	cmp	r3, r9
 8009fc6:	d31e      	bcc.n	800a006 <__cvt+0xc2>
 8009fc8:	9b03      	ldr	r3, [sp, #12]
 8009fca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fcc:	1b5b      	subs	r3, r3, r5
 8009fce:	4628      	mov	r0, r5
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	b004      	add	sp, #16
 8009fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fdc:	eb00 0904 	add.w	r9, r0, r4
 8009fe0:	d1e5      	bne.n	8009fae <__cvt+0x6a>
 8009fe2:	7803      	ldrb	r3, [r0, #0]
 8009fe4:	2b30      	cmp	r3, #48	@ 0x30
 8009fe6:	d10a      	bne.n	8009ffe <__cvt+0xba>
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2300      	movs	r3, #0
 8009fec:	4630      	mov	r0, r6
 8009fee:	4639      	mov	r1, r7
 8009ff0:	f7f6 fd8a 	bl	8000b08 <__aeabi_dcmpeq>
 8009ff4:	b918      	cbnz	r0, 8009ffe <__cvt+0xba>
 8009ff6:	f1c4 0401 	rsb	r4, r4, #1
 8009ffa:	f8ca 4000 	str.w	r4, [sl]
 8009ffe:	f8da 3000 	ldr.w	r3, [sl]
 800a002:	4499      	add	r9, r3
 800a004:	e7d3      	b.n	8009fae <__cvt+0x6a>
 800a006:	1c59      	adds	r1, r3, #1
 800a008:	9103      	str	r1, [sp, #12]
 800a00a:	701a      	strb	r2, [r3, #0]
 800a00c:	e7d9      	b.n	8009fc2 <__cvt+0x7e>

0800a00e <__exponent>:
 800a00e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a010:	2900      	cmp	r1, #0
 800a012:	bfba      	itte	lt
 800a014:	4249      	neglt	r1, r1
 800a016:	232d      	movlt	r3, #45	@ 0x2d
 800a018:	232b      	movge	r3, #43	@ 0x2b
 800a01a:	2909      	cmp	r1, #9
 800a01c:	7002      	strb	r2, [r0, #0]
 800a01e:	7043      	strb	r3, [r0, #1]
 800a020:	dd29      	ble.n	800a076 <__exponent+0x68>
 800a022:	f10d 0307 	add.w	r3, sp, #7
 800a026:	461d      	mov	r5, r3
 800a028:	270a      	movs	r7, #10
 800a02a:	461a      	mov	r2, r3
 800a02c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a030:	fb07 1416 	mls	r4, r7, r6, r1
 800a034:	3430      	adds	r4, #48	@ 0x30
 800a036:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a03a:	460c      	mov	r4, r1
 800a03c:	2c63      	cmp	r4, #99	@ 0x63
 800a03e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a042:	4631      	mov	r1, r6
 800a044:	dcf1      	bgt.n	800a02a <__exponent+0x1c>
 800a046:	3130      	adds	r1, #48	@ 0x30
 800a048:	1e94      	subs	r4, r2, #2
 800a04a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a04e:	1c41      	adds	r1, r0, #1
 800a050:	4623      	mov	r3, r4
 800a052:	42ab      	cmp	r3, r5
 800a054:	d30a      	bcc.n	800a06c <__exponent+0x5e>
 800a056:	f10d 0309 	add.w	r3, sp, #9
 800a05a:	1a9b      	subs	r3, r3, r2
 800a05c:	42ac      	cmp	r4, r5
 800a05e:	bf88      	it	hi
 800a060:	2300      	movhi	r3, #0
 800a062:	3302      	adds	r3, #2
 800a064:	4403      	add	r3, r0
 800a066:	1a18      	subs	r0, r3, r0
 800a068:	b003      	add	sp, #12
 800a06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a06c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a070:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a074:	e7ed      	b.n	800a052 <__exponent+0x44>
 800a076:	2330      	movs	r3, #48	@ 0x30
 800a078:	3130      	adds	r1, #48	@ 0x30
 800a07a:	7083      	strb	r3, [r0, #2]
 800a07c:	70c1      	strb	r1, [r0, #3]
 800a07e:	1d03      	adds	r3, r0, #4
 800a080:	e7f1      	b.n	800a066 <__exponent+0x58>
	...

0800a084 <_printf_float>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	b08d      	sub	sp, #52	@ 0x34
 800a08a:	460c      	mov	r4, r1
 800a08c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a090:	4616      	mov	r6, r2
 800a092:	461f      	mov	r7, r3
 800a094:	4605      	mov	r5, r0
 800a096:	f000 fcdb 	bl	800aa50 <_localeconv_r>
 800a09a:	6803      	ldr	r3, [r0, #0]
 800a09c:	9304      	str	r3, [sp, #16]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f6 f906 	bl	80002b0 <strlen>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ac:	9005      	str	r0, [sp, #20]
 800a0ae:	3307      	adds	r3, #7
 800a0b0:	f023 0307 	bic.w	r3, r3, #7
 800a0b4:	f103 0208 	add.w	r2, r3, #8
 800a0b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0bc:	f8d4 b000 	ldr.w	fp, [r4]
 800a0c0:	f8c8 2000 	str.w	r2, [r8]
 800a0c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0cc:	9307      	str	r3, [sp, #28]
 800a0ce:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0da:	4b9c      	ldr	r3, [pc, #624]	@ (800a34c <_printf_float+0x2c8>)
 800a0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e0:	f7f6 fd44 	bl	8000b6c <__aeabi_dcmpun>
 800a0e4:	bb70      	cbnz	r0, 800a144 <_printf_float+0xc0>
 800a0e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ea:	4b98      	ldr	r3, [pc, #608]	@ (800a34c <_printf_float+0x2c8>)
 800a0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f0:	f7f6 fd1e 	bl	8000b30 <__aeabi_dcmple>
 800a0f4:	bb30      	cbnz	r0, 800a144 <_printf_float+0xc0>
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	f7f6 fd0d 	bl	8000b1c <__aeabi_dcmplt>
 800a102:	b110      	cbz	r0, 800a10a <_printf_float+0x86>
 800a104:	232d      	movs	r3, #45	@ 0x2d
 800a106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a10a:	4a91      	ldr	r2, [pc, #580]	@ (800a350 <_printf_float+0x2cc>)
 800a10c:	4b91      	ldr	r3, [pc, #580]	@ (800a354 <_printf_float+0x2d0>)
 800a10e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a112:	bf8c      	ite	hi
 800a114:	4690      	movhi	r8, r2
 800a116:	4698      	movls	r8, r3
 800a118:	2303      	movs	r3, #3
 800a11a:	6123      	str	r3, [r4, #16]
 800a11c:	f02b 0304 	bic.w	r3, fp, #4
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	f04f 0900 	mov.w	r9, #0
 800a126:	9700      	str	r7, [sp, #0]
 800a128:	4633      	mov	r3, r6
 800a12a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a12c:	4621      	mov	r1, r4
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 f9d2 	bl	800a4d8 <_printf_common>
 800a134:	3001      	adds	r0, #1
 800a136:	f040 808d 	bne.w	800a254 <_printf_float+0x1d0>
 800a13a:	f04f 30ff 	mov.w	r0, #4294967295
 800a13e:	b00d      	add	sp, #52	@ 0x34
 800a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	4642      	mov	r2, r8
 800a146:	464b      	mov	r3, r9
 800a148:	4640      	mov	r0, r8
 800a14a:	4649      	mov	r1, r9
 800a14c:	f7f6 fd0e 	bl	8000b6c <__aeabi_dcmpun>
 800a150:	b140      	cbz	r0, 800a164 <_printf_float+0xe0>
 800a152:	464b      	mov	r3, r9
 800a154:	2b00      	cmp	r3, #0
 800a156:	bfbc      	itt	lt
 800a158:	232d      	movlt	r3, #45	@ 0x2d
 800a15a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a15e:	4a7e      	ldr	r2, [pc, #504]	@ (800a358 <_printf_float+0x2d4>)
 800a160:	4b7e      	ldr	r3, [pc, #504]	@ (800a35c <_printf_float+0x2d8>)
 800a162:	e7d4      	b.n	800a10e <_printf_float+0x8a>
 800a164:	6863      	ldr	r3, [r4, #4]
 800a166:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a16a:	9206      	str	r2, [sp, #24]
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	d13b      	bne.n	800a1e8 <_printf_float+0x164>
 800a170:	2306      	movs	r3, #6
 800a172:	6063      	str	r3, [r4, #4]
 800a174:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a178:	2300      	movs	r3, #0
 800a17a:	6022      	str	r2, [r4, #0]
 800a17c:	9303      	str	r3, [sp, #12]
 800a17e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a180:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a184:	ab09      	add	r3, sp, #36	@ 0x24
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	6861      	ldr	r1, [r4, #4]
 800a18a:	ec49 8b10 	vmov	d0, r8, r9
 800a18e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a192:	4628      	mov	r0, r5
 800a194:	f7ff fed6 	bl	8009f44 <__cvt>
 800a198:	9b06      	ldr	r3, [sp, #24]
 800a19a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a19c:	2b47      	cmp	r3, #71	@ 0x47
 800a19e:	4680      	mov	r8, r0
 800a1a0:	d129      	bne.n	800a1f6 <_printf_float+0x172>
 800a1a2:	1cc8      	adds	r0, r1, #3
 800a1a4:	db02      	blt.n	800a1ac <_printf_float+0x128>
 800a1a6:	6863      	ldr	r3, [r4, #4]
 800a1a8:	4299      	cmp	r1, r3
 800a1aa:	dd41      	ble.n	800a230 <_printf_float+0x1ac>
 800a1ac:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1b0:	fa5f fa8a 	uxtb.w	sl, sl
 800a1b4:	3901      	subs	r1, #1
 800a1b6:	4652      	mov	r2, sl
 800a1b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1bc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1be:	f7ff ff26 	bl	800a00e <__exponent>
 800a1c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1c4:	1813      	adds	r3, r2, r0
 800a1c6:	2a01      	cmp	r2, #1
 800a1c8:	4681      	mov	r9, r0
 800a1ca:	6123      	str	r3, [r4, #16]
 800a1cc:	dc02      	bgt.n	800a1d4 <_printf_float+0x150>
 800a1ce:	6822      	ldr	r2, [r4, #0]
 800a1d0:	07d2      	lsls	r2, r2, #31
 800a1d2:	d501      	bpl.n	800a1d8 <_printf_float+0x154>
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	6123      	str	r3, [r4, #16]
 800a1d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d0a2      	beq.n	800a126 <_printf_float+0xa2>
 800a1e0:	232d      	movs	r3, #45	@ 0x2d
 800a1e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1e6:	e79e      	b.n	800a126 <_printf_float+0xa2>
 800a1e8:	9a06      	ldr	r2, [sp, #24]
 800a1ea:	2a47      	cmp	r2, #71	@ 0x47
 800a1ec:	d1c2      	bne.n	800a174 <_printf_float+0xf0>
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1c0      	bne.n	800a174 <_printf_float+0xf0>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e7bd      	b.n	800a172 <_printf_float+0xee>
 800a1f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1fa:	d9db      	bls.n	800a1b4 <_printf_float+0x130>
 800a1fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a200:	d118      	bne.n	800a234 <_printf_float+0x1b0>
 800a202:	2900      	cmp	r1, #0
 800a204:	6863      	ldr	r3, [r4, #4]
 800a206:	dd0b      	ble.n	800a220 <_printf_float+0x19c>
 800a208:	6121      	str	r1, [r4, #16]
 800a20a:	b913      	cbnz	r3, 800a212 <_printf_float+0x18e>
 800a20c:	6822      	ldr	r2, [r4, #0]
 800a20e:	07d0      	lsls	r0, r2, #31
 800a210:	d502      	bpl.n	800a218 <_printf_float+0x194>
 800a212:	3301      	adds	r3, #1
 800a214:	440b      	add	r3, r1
 800a216:	6123      	str	r3, [r4, #16]
 800a218:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a21a:	f04f 0900 	mov.w	r9, #0
 800a21e:	e7db      	b.n	800a1d8 <_printf_float+0x154>
 800a220:	b913      	cbnz	r3, 800a228 <_printf_float+0x1a4>
 800a222:	6822      	ldr	r2, [r4, #0]
 800a224:	07d2      	lsls	r2, r2, #31
 800a226:	d501      	bpl.n	800a22c <_printf_float+0x1a8>
 800a228:	3302      	adds	r3, #2
 800a22a:	e7f4      	b.n	800a216 <_printf_float+0x192>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e7f2      	b.n	800a216 <_printf_float+0x192>
 800a230:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a236:	4299      	cmp	r1, r3
 800a238:	db05      	blt.n	800a246 <_printf_float+0x1c2>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	6121      	str	r1, [r4, #16]
 800a23e:	07d8      	lsls	r0, r3, #31
 800a240:	d5ea      	bpl.n	800a218 <_printf_float+0x194>
 800a242:	1c4b      	adds	r3, r1, #1
 800a244:	e7e7      	b.n	800a216 <_printf_float+0x192>
 800a246:	2900      	cmp	r1, #0
 800a248:	bfd4      	ite	le
 800a24a:	f1c1 0202 	rsble	r2, r1, #2
 800a24e:	2201      	movgt	r2, #1
 800a250:	4413      	add	r3, r2
 800a252:	e7e0      	b.n	800a216 <_printf_float+0x192>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	055a      	lsls	r2, r3, #21
 800a258:	d407      	bmi.n	800a26a <_printf_float+0x1e6>
 800a25a:	6923      	ldr	r3, [r4, #16]
 800a25c:	4642      	mov	r2, r8
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	d12b      	bne.n	800a2c0 <_printf_float+0x23c>
 800a268:	e767      	b.n	800a13a <_printf_float+0xb6>
 800a26a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a26e:	f240 80dd 	bls.w	800a42c <_printf_float+0x3a8>
 800a272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a276:	2200      	movs	r2, #0
 800a278:	2300      	movs	r3, #0
 800a27a:	f7f6 fc45 	bl	8000b08 <__aeabi_dcmpeq>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d033      	beq.n	800a2ea <_printf_float+0x266>
 800a282:	4a37      	ldr	r2, [pc, #220]	@ (800a360 <_printf_float+0x2dc>)
 800a284:	2301      	movs	r3, #1
 800a286:	4631      	mov	r1, r6
 800a288:	4628      	mov	r0, r5
 800a28a:	47b8      	blx	r7
 800a28c:	3001      	adds	r0, #1
 800a28e:	f43f af54 	beq.w	800a13a <_printf_float+0xb6>
 800a292:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a296:	4543      	cmp	r3, r8
 800a298:	db02      	blt.n	800a2a0 <_printf_float+0x21c>
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	07d8      	lsls	r0, r3, #31
 800a29e:	d50f      	bpl.n	800a2c0 <_printf_float+0x23c>
 800a2a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b8      	blx	r7
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	f43f af45 	beq.w	800a13a <_printf_float+0xb6>
 800a2b0:	f04f 0900 	mov.w	r9, #0
 800a2b4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2b8:	f104 0a1a 	add.w	sl, r4, #26
 800a2bc:	45c8      	cmp	r8, r9
 800a2be:	dc09      	bgt.n	800a2d4 <_printf_float+0x250>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	079b      	lsls	r3, r3, #30
 800a2c4:	f100 8103 	bmi.w	800a4ce <_printf_float+0x44a>
 800a2c8:	68e0      	ldr	r0, [r4, #12]
 800a2ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2cc:	4298      	cmp	r0, r3
 800a2ce:	bfb8      	it	lt
 800a2d0:	4618      	movlt	r0, r3
 800a2d2:	e734      	b.n	800a13e <_printf_float+0xba>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	4652      	mov	r2, sl
 800a2d8:	4631      	mov	r1, r6
 800a2da:	4628      	mov	r0, r5
 800a2dc:	47b8      	blx	r7
 800a2de:	3001      	adds	r0, #1
 800a2e0:	f43f af2b 	beq.w	800a13a <_printf_float+0xb6>
 800a2e4:	f109 0901 	add.w	r9, r9, #1
 800a2e8:	e7e8      	b.n	800a2bc <_printf_float+0x238>
 800a2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	dc39      	bgt.n	800a364 <_printf_float+0x2e0>
 800a2f0:	4a1b      	ldr	r2, [pc, #108]	@ (800a360 <_printf_float+0x2dc>)
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	47b8      	blx	r7
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	f43f af1d 	beq.w	800a13a <_printf_float+0xb6>
 800a300:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a304:	ea59 0303 	orrs.w	r3, r9, r3
 800a308:	d102      	bne.n	800a310 <_printf_float+0x28c>
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	07d9      	lsls	r1, r3, #31
 800a30e:	d5d7      	bpl.n	800a2c0 <_printf_float+0x23c>
 800a310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	f43f af0d 	beq.w	800a13a <_printf_float+0xb6>
 800a320:	f04f 0a00 	mov.w	sl, #0
 800a324:	f104 0b1a 	add.w	fp, r4, #26
 800a328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32a:	425b      	negs	r3, r3
 800a32c:	4553      	cmp	r3, sl
 800a32e:	dc01      	bgt.n	800a334 <_printf_float+0x2b0>
 800a330:	464b      	mov	r3, r9
 800a332:	e793      	b.n	800a25c <_printf_float+0x1d8>
 800a334:	2301      	movs	r3, #1
 800a336:	465a      	mov	r2, fp
 800a338:	4631      	mov	r1, r6
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	3001      	adds	r0, #1
 800a340:	f43f aefb 	beq.w	800a13a <_printf_float+0xb6>
 800a344:	f10a 0a01 	add.w	sl, sl, #1
 800a348:	e7ee      	b.n	800a328 <_printf_float+0x2a4>
 800a34a:	bf00      	nop
 800a34c:	7fefffff 	.word	0x7fefffff
 800a350:	0800dcf4 	.word	0x0800dcf4
 800a354:	0800dcf0 	.word	0x0800dcf0
 800a358:	0800dcfc 	.word	0x0800dcfc
 800a35c:	0800dcf8 	.word	0x0800dcf8
 800a360:	0800dd00 	.word	0x0800dd00
 800a364:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a366:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a36a:	4553      	cmp	r3, sl
 800a36c:	bfa8      	it	ge
 800a36e:	4653      	movge	r3, sl
 800a370:	2b00      	cmp	r3, #0
 800a372:	4699      	mov	r9, r3
 800a374:	dc36      	bgt.n	800a3e4 <_printf_float+0x360>
 800a376:	f04f 0b00 	mov.w	fp, #0
 800a37a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a37e:	f104 021a 	add.w	r2, r4, #26
 800a382:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a384:	9306      	str	r3, [sp, #24]
 800a386:	eba3 0309 	sub.w	r3, r3, r9
 800a38a:	455b      	cmp	r3, fp
 800a38c:	dc31      	bgt.n	800a3f2 <_printf_float+0x36e>
 800a38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a390:	459a      	cmp	sl, r3
 800a392:	dc3a      	bgt.n	800a40a <_printf_float+0x386>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	07da      	lsls	r2, r3, #31
 800a398:	d437      	bmi.n	800a40a <_printf_float+0x386>
 800a39a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a39c:	ebaa 0903 	sub.w	r9, sl, r3
 800a3a0:	9b06      	ldr	r3, [sp, #24]
 800a3a2:	ebaa 0303 	sub.w	r3, sl, r3
 800a3a6:	4599      	cmp	r9, r3
 800a3a8:	bfa8      	it	ge
 800a3aa:	4699      	movge	r9, r3
 800a3ac:	f1b9 0f00 	cmp.w	r9, #0
 800a3b0:	dc33      	bgt.n	800a41a <_printf_float+0x396>
 800a3b2:	f04f 0800 	mov.w	r8, #0
 800a3b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ba:	f104 0b1a 	add.w	fp, r4, #26
 800a3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c0:	ebaa 0303 	sub.w	r3, sl, r3
 800a3c4:	eba3 0309 	sub.w	r3, r3, r9
 800a3c8:	4543      	cmp	r3, r8
 800a3ca:	f77f af79 	ble.w	800a2c0 <_printf_float+0x23c>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	465a      	mov	r2, fp
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	47b8      	blx	r7
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f43f aeae 	beq.w	800a13a <_printf_float+0xb6>
 800a3de:	f108 0801 	add.w	r8, r8, #1
 800a3e2:	e7ec      	b.n	800a3be <_printf_float+0x33a>
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d1c2      	bne.n	800a376 <_printf_float+0x2f2>
 800a3f0:	e6a3      	b.n	800a13a <_printf_float+0xb6>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	9206      	str	r2, [sp, #24]
 800a3fa:	47b8      	blx	r7
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	f43f ae9c 	beq.w	800a13a <_printf_float+0xb6>
 800a402:	9a06      	ldr	r2, [sp, #24]
 800a404:	f10b 0b01 	add.w	fp, fp, #1
 800a408:	e7bb      	b.n	800a382 <_printf_float+0x2fe>
 800a40a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a40e:	4631      	mov	r1, r6
 800a410:	4628      	mov	r0, r5
 800a412:	47b8      	blx	r7
 800a414:	3001      	adds	r0, #1
 800a416:	d1c0      	bne.n	800a39a <_printf_float+0x316>
 800a418:	e68f      	b.n	800a13a <_printf_float+0xb6>
 800a41a:	9a06      	ldr	r2, [sp, #24]
 800a41c:	464b      	mov	r3, r9
 800a41e:	4442      	add	r2, r8
 800a420:	4631      	mov	r1, r6
 800a422:	4628      	mov	r0, r5
 800a424:	47b8      	blx	r7
 800a426:	3001      	adds	r0, #1
 800a428:	d1c3      	bne.n	800a3b2 <_printf_float+0x32e>
 800a42a:	e686      	b.n	800a13a <_printf_float+0xb6>
 800a42c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a430:	f1ba 0f01 	cmp.w	sl, #1
 800a434:	dc01      	bgt.n	800a43a <_printf_float+0x3b6>
 800a436:	07db      	lsls	r3, r3, #31
 800a438:	d536      	bpl.n	800a4a8 <_printf_float+0x424>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4642      	mov	r2, r8
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	f43f ae78 	beq.w	800a13a <_printf_float+0xb6>
 800a44a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a44e:	4631      	mov	r1, r6
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	f43f ae70 	beq.w	800a13a <_printf_float+0xb6>
 800a45a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a45e:	2200      	movs	r2, #0
 800a460:	2300      	movs	r3, #0
 800a462:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a466:	f7f6 fb4f 	bl	8000b08 <__aeabi_dcmpeq>
 800a46a:	b9c0      	cbnz	r0, 800a49e <_printf_float+0x41a>
 800a46c:	4653      	mov	r3, sl
 800a46e:	f108 0201 	add.w	r2, r8, #1
 800a472:	4631      	mov	r1, r6
 800a474:	4628      	mov	r0, r5
 800a476:	47b8      	blx	r7
 800a478:	3001      	adds	r0, #1
 800a47a:	d10c      	bne.n	800a496 <_printf_float+0x412>
 800a47c:	e65d      	b.n	800a13a <_printf_float+0xb6>
 800a47e:	2301      	movs	r3, #1
 800a480:	465a      	mov	r2, fp
 800a482:	4631      	mov	r1, r6
 800a484:	4628      	mov	r0, r5
 800a486:	47b8      	blx	r7
 800a488:	3001      	adds	r0, #1
 800a48a:	f43f ae56 	beq.w	800a13a <_printf_float+0xb6>
 800a48e:	f108 0801 	add.w	r8, r8, #1
 800a492:	45d0      	cmp	r8, sl
 800a494:	dbf3      	blt.n	800a47e <_printf_float+0x3fa>
 800a496:	464b      	mov	r3, r9
 800a498:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a49c:	e6df      	b.n	800a25e <_printf_float+0x1da>
 800a49e:	f04f 0800 	mov.w	r8, #0
 800a4a2:	f104 0b1a 	add.w	fp, r4, #26
 800a4a6:	e7f4      	b.n	800a492 <_printf_float+0x40e>
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	4642      	mov	r2, r8
 800a4ac:	e7e1      	b.n	800a472 <_printf_float+0x3ee>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	464a      	mov	r2, r9
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	47b8      	blx	r7
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	f43f ae3e 	beq.w	800a13a <_printf_float+0xb6>
 800a4be:	f108 0801 	add.w	r8, r8, #1
 800a4c2:	68e3      	ldr	r3, [r4, #12]
 800a4c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4c6:	1a5b      	subs	r3, r3, r1
 800a4c8:	4543      	cmp	r3, r8
 800a4ca:	dcf0      	bgt.n	800a4ae <_printf_float+0x42a>
 800a4cc:	e6fc      	b.n	800a2c8 <_printf_float+0x244>
 800a4ce:	f04f 0800 	mov.w	r8, #0
 800a4d2:	f104 0919 	add.w	r9, r4, #25
 800a4d6:	e7f4      	b.n	800a4c2 <_printf_float+0x43e>

0800a4d8 <_printf_common>:
 800a4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4dc:	4616      	mov	r6, r2
 800a4de:	4698      	mov	r8, r3
 800a4e0:	688a      	ldr	r2, [r1, #8]
 800a4e2:	690b      	ldr	r3, [r1, #16]
 800a4e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	bfb8      	it	lt
 800a4ec:	4613      	movlt	r3, r2
 800a4ee:	6033      	str	r3, [r6, #0]
 800a4f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	b10a      	cbz	r2, 800a4fe <_printf_common+0x26>
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	6033      	str	r3, [r6, #0]
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	0699      	lsls	r1, r3, #26
 800a502:	bf42      	ittt	mi
 800a504:	6833      	ldrmi	r3, [r6, #0]
 800a506:	3302      	addmi	r3, #2
 800a508:	6033      	strmi	r3, [r6, #0]
 800a50a:	6825      	ldr	r5, [r4, #0]
 800a50c:	f015 0506 	ands.w	r5, r5, #6
 800a510:	d106      	bne.n	800a520 <_printf_common+0x48>
 800a512:	f104 0a19 	add.w	sl, r4, #25
 800a516:	68e3      	ldr	r3, [r4, #12]
 800a518:	6832      	ldr	r2, [r6, #0]
 800a51a:	1a9b      	subs	r3, r3, r2
 800a51c:	42ab      	cmp	r3, r5
 800a51e:	dc26      	bgt.n	800a56e <_printf_common+0x96>
 800a520:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a524:	6822      	ldr	r2, [r4, #0]
 800a526:	3b00      	subs	r3, #0
 800a528:	bf18      	it	ne
 800a52a:	2301      	movne	r3, #1
 800a52c:	0692      	lsls	r2, r2, #26
 800a52e:	d42b      	bmi.n	800a588 <_printf_common+0xb0>
 800a530:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a534:	4641      	mov	r1, r8
 800a536:	4638      	mov	r0, r7
 800a538:	47c8      	blx	r9
 800a53a:	3001      	adds	r0, #1
 800a53c:	d01e      	beq.n	800a57c <_printf_common+0xa4>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	6922      	ldr	r2, [r4, #16]
 800a542:	f003 0306 	and.w	r3, r3, #6
 800a546:	2b04      	cmp	r3, #4
 800a548:	bf02      	ittt	eq
 800a54a:	68e5      	ldreq	r5, [r4, #12]
 800a54c:	6833      	ldreq	r3, [r6, #0]
 800a54e:	1aed      	subeq	r5, r5, r3
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	bf0c      	ite	eq
 800a554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a558:	2500      	movne	r5, #0
 800a55a:	4293      	cmp	r3, r2
 800a55c:	bfc4      	itt	gt
 800a55e:	1a9b      	subgt	r3, r3, r2
 800a560:	18ed      	addgt	r5, r5, r3
 800a562:	2600      	movs	r6, #0
 800a564:	341a      	adds	r4, #26
 800a566:	42b5      	cmp	r5, r6
 800a568:	d11a      	bne.n	800a5a0 <_printf_common+0xc8>
 800a56a:	2000      	movs	r0, #0
 800a56c:	e008      	b.n	800a580 <_printf_common+0xa8>
 800a56e:	2301      	movs	r3, #1
 800a570:	4652      	mov	r2, sl
 800a572:	4641      	mov	r1, r8
 800a574:	4638      	mov	r0, r7
 800a576:	47c8      	blx	r9
 800a578:	3001      	adds	r0, #1
 800a57a:	d103      	bne.n	800a584 <_printf_common+0xac>
 800a57c:	f04f 30ff 	mov.w	r0, #4294967295
 800a580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a584:	3501      	adds	r5, #1
 800a586:	e7c6      	b.n	800a516 <_printf_common+0x3e>
 800a588:	18e1      	adds	r1, r4, r3
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	2030      	movs	r0, #48	@ 0x30
 800a58e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a592:	4422      	add	r2, r4
 800a594:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a598:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a59c:	3302      	adds	r3, #2
 800a59e:	e7c7      	b.n	800a530 <_printf_common+0x58>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	4622      	mov	r2, r4
 800a5a4:	4641      	mov	r1, r8
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	47c8      	blx	r9
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	d0e6      	beq.n	800a57c <_printf_common+0xa4>
 800a5ae:	3601      	adds	r6, #1
 800a5b0:	e7d9      	b.n	800a566 <_printf_common+0x8e>
	...

0800a5b4 <_printf_i>:
 800a5b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b8:	7e0f      	ldrb	r7, [r1, #24]
 800a5ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5bc:	2f78      	cmp	r7, #120	@ 0x78
 800a5be:	4691      	mov	r9, r2
 800a5c0:	4680      	mov	r8, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	469a      	mov	sl, r3
 800a5c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5ca:	d807      	bhi.n	800a5dc <_printf_i+0x28>
 800a5cc:	2f62      	cmp	r7, #98	@ 0x62
 800a5ce:	d80a      	bhi.n	800a5e6 <_printf_i+0x32>
 800a5d0:	2f00      	cmp	r7, #0
 800a5d2:	f000 80d1 	beq.w	800a778 <_printf_i+0x1c4>
 800a5d6:	2f58      	cmp	r7, #88	@ 0x58
 800a5d8:	f000 80b8 	beq.w	800a74c <_printf_i+0x198>
 800a5dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5e4:	e03a      	b.n	800a65c <_printf_i+0xa8>
 800a5e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5ea:	2b15      	cmp	r3, #21
 800a5ec:	d8f6      	bhi.n	800a5dc <_printf_i+0x28>
 800a5ee:	a101      	add	r1, pc, #4	@ (adr r1, 800a5f4 <_printf_i+0x40>)
 800a5f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5f4:	0800a64d 	.word	0x0800a64d
 800a5f8:	0800a661 	.word	0x0800a661
 800a5fc:	0800a5dd 	.word	0x0800a5dd
 800a600:	0800a5dd 	.word	0x0800a5dd
 800a604:	0800a5dd 	.word	0x0800a5dd
 800a608:	0800a5dd 	.word	0x0800a5dd
 800a60c:	0800a661 	.word	0x0800a661
 800a610:	0800a5dd 	.word	0x0800a5dd
 800a614:	0800a5dd 	.word	0x0800a5dd
 800a618:	0800a5dd 	.word	0x0800a5dd
 800a61c:	0800a5dd 	.word	0x0800a5dd
 800a620:	0800a75f 	.word	0x0800a75f
 800a624:	0800a68b 	.word	0x0800a68b
 800a628:	0800a719 	.word	0x0800a719
 800a62c:	0800a5dd 	.word	0x0800a5dd
 800a630:	0800a5dd 	.word	0x0800a5dd
 800a634:	0800a781 	.word	0x0800a781
 800a638:	0800a5dd 	.word	0x0800a5dd
 800a63c:	0800a68b 	.word	0x0800a68b
 800a640:	0800a5dd 	.word	0x0800a5dd
 800a644:	0800a5dd 	.word	0x0800a5dd
 800a648:	0800a721 	.word	0x0800a721
 800a64c:	6833      	ldr	r3, [r6, #0]
 800a64e:	1d1a      	adds	r2, r3, #4
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6032      	str	r2, [r6, #0]
 800a654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a65c:	2301      	movs	r3, #1
 800a65e:	e09c      	b.n	800a79a <_printf_i+0x1e6>
 800a660:	6833      	ldr	r3, [r6, #0]
 800a662:	6820      	ldr	r0, [r4, #0]
 800a664:	1d19      	adds	r1, r3, #4
 800a666:	6031      	str	r1, [r6, #0]
 800a668:	0606      	lsls	r6, r0, #24
 800a66a:	d501      	bpl.n	800a670 <_printf_i+0xbc>
 800a66c:	681d      	ldr	r5, [r3, #0]
 800a66e:	e003      	b.n	800a678 <_printf_i+0xc4>
 800a670:	0645      	lsls	r5, r0, #25
 800a672:	d5fb      	bpl.n	800a66c <_printf_i+0xb8>
 800a674:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a678:	2d00      	cmp	r5, #0
 800a67a:	da03      	bge.n	800a684 <_printf_i+0xd0>
 800a67c:	232d      	movs	r3, #45	@ 0x2d
 800a67e:	426d      	negs	r5, r5
 800a680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a684:	4858      	ldr	r0, [pc, #352]	@ (800a7e8 <_printf_i+0x234>)
 800a686:	230a      	movs	r3, #10
 800a688:	e011      	b.n	800a6ae <_printf_i+0xfa>
 800a68a:	6821      	ldr	r1, [r4, #0]
 800a68c:	6833      	ldr	r3, [r6, #0]
 800a68e:	0608      	lsls	r0, r1, #24
 800a690:	f853 5b04 	ldr.w	r5, [r3], #4
 800a694:	d402      	bmi.n	800a69c <_printf_i+0xe8>
 800a696:	0649      	lsls	r1, r1, #25
 800a698:	bf48      	it	mi
 800a69a:	b2ad      	uxthmi	r5, r5
 800a69c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a69e:	4852      	ldr	r0, [pc, #328]	@ (800a7e8 <_printf_i+0x234>)
 800a6a0:	6033      	str	r3, [r6, #0]
 800a6a2:	bf14      	ite	ne
 800a6a4:	230a      	movne	r3, #10
 800a6a6:	2308      	moveq	r3, #8
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6ae:	6866      	ldr	r6, [r4, #4]
 800a6b0:	60a6      	str	r6, [r4, #8]
 800a6b2:	2e00      	cmp	r6, #0
 800a6b4:	db05      	blt.n	800a6c2 <_printf_i+0x10e>
 800a6b6:	6821      	ldr	r1, [r4, #0]
 800a6b8:	432e      	orrs	r6, r5
 800a6ba:	f021 0104 	bic.w	r1, r1, #4
 800a6be:	6021      	str	r1, [r4, #0]
 800a6c0:	d04b      	beq.n	800a75a <_printf_i+0x1a6>
 800a6c2:	4616      	mov	r6, r2
 800a6c4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6c8:	fb03 5711 	mls	r7, r3, r1, r5
 800a6cc:	5dc7      	ldrb	r7, [r0, r7]
 800a6ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6d2:	462f      	mov	r7, r5
 800a6d4:	42bb      	cmp	r3, r7
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	d9f4      	bls.n	800a6c4 <_printf_i+0x110>
 800a6da:	2b08      	cmp	r3, #8
 800a6dc:	d10b      	bne.n	800a6f6 <_printf_i+0x142>
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	07df      	lsls	r7, r3, #31
 800a6e2:	d508      	bpl.n	800a6f6 <_printf_i+0x142>
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	6861      	ldr	r1, [r4, #4]
 800a6e8:	4299      	cmp	r1, r3
 800a6ea:	bfde      	ittt	le
 800a6ec:	2330      	movle	r3, #48	@ 0x30
 800a6ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6f6:	1b92      	subs	r2, r2, r6
 800a6f8:	6122      	str	r2, [r4, #16]
 800a6fa:	f8cd a000 	str.w	sl, [sp]
 800a6fe:	464b      	mov	r3, r9
 800a700:	aa03      	add	r2, sp, #12
 800a702:	4621      	mov	r1, r4
 800a704:	4640      	mov	r0, r8
 800a706:	f7ff fee7 	bl	800a4d8 <_printf_common>
 800a70a:	3001      	adds	r0, #1
 800a70c:	d14a      	bne.n	800a7a4 <_printf_i+0x1f0>
 800a70e:	f04f 30ff 	mov.w	r0, #4294967295
 800a712:	b004      	add	sp, #16
 800a714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	f043 0320 	orr.w	r3, r3, #32
 800a71e:	6023      	str	r3, [r4, #0]
 800a720:	4832      	ldr	r0, [pc, #200]	@ (800a7ec <_printf_i+0x238>)
 800a722:	2778      	movs	r7, #120	@ 0x78
 800a724:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	6831      	ldr	r1, [r6, #0]
 800a72c:	061f      	lsls	r7, r3, #24
 800a72e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a732:	d402      	bmi.n	800a73a <_printf_i+0x186>
 800a734:	065f      	lsls	r7, r3, #25
 800a736:	bf48      	it	mi
 800a738:	b2ad      	uxthmi	r5, r5
 800a73a:	6031      	str	r1, [r6, #0]
 800a73c:	07d9      	lsls	r1, r3, #31
 800a73e:	bf44      	itt	mi
 800a740:	f043 0320 	orrmi.w	r3, r3, #32
 800a744:	6023      	strmi	r3, [r4, #0]
 800a746:	b11d      	cbz	r5, 800a750 <_printf_i+0x19c>
 800a748:	2310      	movs	r3, #16
 800a74a:	e7ad      	b.n	800a6a8 <_printf_i+0xf4>
 800a74c:	4826      	ldr	r0, [pc, #152]	@ (800a7e8 <_printf_i+0x234>)
 800a74e:	e7e9      	b.n	800a724 <_printf_i+0x170>
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	f023 0320 	bic.w	r3, r3, #32
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	e7f6      	b.n	800a748 <_printf_i+0x194>
 800a75a:	4616      	mov	r6, r2
 800a75c:	e7bd      	b.n	800a6da <_printf_i+0x126>
 800a75e:	6833      	ldr	r3, [r6, #0]
 800a760:	6825      	ldr	r5, [r4, #0]
 800a762:	6961      	ldr	r1, [r4, #20]
 800a764:	1d18      	adds	r0, r3, #4
 800a766:	6030      	str	r0, [r6, #0]
 800a768:	062e      	lsls	r6, r5, #24
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	d501      	bpl.n	800a772 <_printf_i+0x1be>
 800a76e:	6019      	str	r1, [r3, #0]
 800a770:	e002      	b.n	800a778 <_printf_i+0x1c4>
 800a772:	0668      	lsls	r0, r5, #25
 800a774:	d5fb      	bpl.n	800a76e <_printf_i+0x1ba>
 800a776:	8019      	strh	r1, [r3, #0]
 800a778:	2300      	movs	r3, #0
 800a77a:	6123      	str	r3, [r4, #16]
 800a77c:	4616      	mov	r6, r2
 800a77e:	e7bc      	b.n	800a6fa <_printf_i+0x146>
 800a780:	6833      	ldr	r3, [r6, #0]
 800a782:	1d1a      	adds	r2, r3, #4
 800a784:	6032      	str	r2, [r6, #0]
 800a786:	681e      	ldr	r6, [r3, #0]
 800a788:	6862      	ldr	r2, [r4, #4]
 800a78a:	2100      	movs	r1, #0
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7f5 fd3f 	bl	8000210 <memchr>
 800a792:	b108      	cbz	r0, 800a798 <_printf_i+0x1e4>
 800a794:	1b80      	subs	r0, r0, r6
 800a796:	6060      	str	r0, [r4, #4]
 800a798:	6863      	ldr	r3, [r4, #4]
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	2300      	movs	r3, #0
 800a79e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7a2:	e7aa      	b.n	800a6fa <_printf_i+0x146>
 800a7a4:	6923      	ldr	r3, [r4, #16]
 800a7a6:	4632      	mov	r2, r6
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	47d0      	blx	sl
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d0ad      	beq.n	800a70e <_printf_i+0x15a>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	079b      	lsls	r3, r3, #30
 800a7b6:	d413      	bmi.n	800a7e0 <_printf_i+0x22c>
 800a7b8:	68e0      	ldr	r0, [r4, #12]
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	4298      	cmp	r0, r3
 800a7be:	bfb8      	it	lt
 800a7c0:	4618      	movlt	r0, r3
 800a7c2:	e7a6      	b.n	800a712 <_printf_i+0x15e>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	47d0      	blx	sl
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	d09d      	beq.n	800a70e <_printf_i+0x15a>
 800a7d2:	3501      	adds	r5, #1
 800a7d4:	68e3      	ldr	r3, [r4, #12]
 800a7d6:	9903      	ldr	r1, [sp, #12]
 800a7d8:	1a5b      	subs	r3, r3, r1
 800a7da:	42ab      	cmp	r3, r5
 800a7dc:	dcf2      	bgt.n	800a7c4 <_printf_i+0x210>
 800a7de:	e7eb      	b.n	800a7b8 <_printf_i+0x204>
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	f104 0619 	add.w	r6, r4, #25
 800a7e6:	e7f5      	b.n	800a7d4 <_printf_i+0x220>
 800a7e8:	0800dd02 	.word	0x0800dd02
 800a7ec:	0800dd13 	.word	0x0800dd13

0800a7f0 <std>:
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	b510      	push	{r4, lr}
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a7fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7fe:	6083      	str	r3, [r0, #8]
 800a800:	8181      	strh	r1, [r0, #12]
 800a802:	6643      	str	r3, [r0, #100]	@ 0x64
 800a804:	81c2      	strh	r2, [r0, #14]
 800a806:	6183      	str	r3, [r0, #24]
 800a808:	4619      	mov	r1, r3
 800a80a:	2208      	movs	r2, #8
 800a80c:	305c      	adds	r0, #92	@ 0x5c
 800a80e:	f000 f916 	bl	800aa3e <memset>
 800a812:	4b0d      	ldr	r3, [pc, #52]	@ (800a848 <std+0x58>)
 800a814:	6263      	str	r3, [r4, #36]	@ 0x24
 800a816:	4b0d      	ldr	r3, [pc, #52]	@ (800a84c <std+0x5c>)
 800a818:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a81a:	4b0d      	ldr	r3, [pc, #52]	@ (800a850 <std+0x60>)
 800a81c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a81e:	4b0d      	ldr	r3, [pc, #52]	@ (800a854 <std+0x64>)
 800a820:	6323      	str	r3, [r4, #48]	@ 0x30
 800a822:	4b0d      	ldr	r3, [pc, #52]	@ (800a858 <std+0x68>)
 800a824:	6224      	str	r4, [r4, #32]
 800a826:	429c      	cmp	r4, r3
 800a828:	d006      	beq.n	800a838 <std+0x48>
 800a82a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a82e:	4294      	cmp	r4, r2
 800a830:	d002      	beq.n	800a838 <std+0x48>
 800a832:	33d0      	adds	r3, #208	@ 0xd0
 800a834:	429c      	cmp	r4, r3
 800a836:	d105      	bne.n	800a844 <std+0x54>
 800a838:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a840:	f000 b97a 	b.w	800ab38 <__retarget_lock_init_recursive>
 800a844:	bd10      	pop	{r4, pc}
 800a846:	bf00      	nop
 800a848:	0800a9b9 	.word	0x0800a9b9
 800a84c:	0800a9db 	.word	0x0800a9db
 800a850:	0800aa13 	.word	0x0800aa13
 800a854:	0800aa37 	.word	0x0800aa37
 800a858:	200144bc 	.word	0x200144bc

0800a85c <stdio_exit_handler>:
 800a85c:	4a02      	ldr	r2, [pc, #8]	@ (800a868 <stdio_exit_handler+0xc>)
 800a85e:	4903      	ldr	r1, [pc, #12]	@ (800a86c <stdio_exit_handler+0x10>)
 800a860:	4803      	ldr	r0, [pc, #12]	@ (800a870 <stdio_exit_handler+0x14>)
 800a862:	f000 b869 	b.w	800a938 <_fwalk_sglue>
 800a866:	bf00      	nop
 800a868:	2000000c 	.word	0x2000000c
 800a86c:	0800c49d 	.word	0x0800c49d
 800a870:	2000001c 	.word	0x2000001c

0800a874 <cleanup_stdio>:
 800a874:	6841      	ldr	r1, [r0, #4]
 800a876:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a8 <cleanup_stdio+0x34>)
 800a878:	4299      	cmp	r1, r3
 800a87a:	b510      	push	{r4, lr}
 800a87c:	4604      	mov	r4, r0
 800a87e:	d001      	beq.n	800a884 <cleanup_stdio+0x10>
 800a880:	f001 fe0c 	bl	800c49c <_fflush_r>
 800a884:	68a1      	ldr	r1, [r4, #8]
 800a886:	4b09      	ldr	r3, [pc, #36]	@ (800a8ac <cleanup_stdio+0x38>)
 800a888:	4299      	cmp	r1, r3
 800a88a:	d002      	beq.n	800a892 <cleanup_stdio+0x1e>
 800a88c:	4620      	mov	r0, r4
 800a88e:	f001 fe05 	bl	800c49c <_fflush_r>
 800a892:	68e1      	ldr	r1, [r4, #12]
 800a894:	4b06      	ldr	r3, [pc, #24]	@ (800a8b0 <cleanup_stdio+0x3c>)
 800a896:	4299      	cmp	r1, r3
 800a898:	d004      	beq.n	800a8a4 <cleanup_stdio+0x30>
 800a89a:	4620      	mov	r0, r4
 800a89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8a0:	f001 bdfc 	b.w	800c49c <_fflush_r>
 800a8a4:	bd10      	pop	{r4, pc}
 800a8a6:	bf00      	nop
 800a8a8:	200144bc 	.word	0x200144bc
 800a8ac:	20014524 	.word	0x20014524
 800a8b0:	2001458c 	.word	0x2001458c

0800a8b4 <global_stdio_init.part.0>:
 800a8b4:	b510      	push	{r4, lr}
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e4 <global_stdio_init.part.0+0x30>)
 800a8b8:	4c0b      	ldr	r4, [pc, #44]	@ (800a8e8 <global_stdio_init.part.0+0x34>)
 800a8ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a8ec <global_stdio_init.part.0+0x38>)
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2104      	movs	r1, #4
 800a8c4:	f7ff ff94 	bl	800a7f0 <std>
 800a8c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	2109      	movs	r1, #9
 800a8d0:	f7ff ff8e 	bl	800a7f0 <std>
 800a8d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a8d8:	2202      	movs	r2, #2
 800a8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8de:	2112      	movs	r1, #18
 800a8e0:	f7ff bf86 	b.w	800a7f0 <std>
 800a8e4:	200145f4 	.word	0x200145f4
 800a8e8:	200144bc 	.word	0x200144bc
 800a8ec:	0800a85d 	.word	0x0800a85d

0800a8f0 <__sfp_lock_acquire>:
 800a8f0:	4801      	ldr	r0, [pc, #4]	@ (800a8f8 <__sfp_lock_acquire+0x8>)
 800a8f2:	f000 b922 	b.w	800ab3a <__retarget_lock_acquire_recursive>
 800a8f6:	bf00      	nop
 800a8f8:	200145fd 	.word	0x200145fd

0800a8fc <__sfp_lock_release>:
 800a8fc:	4801      	ldr	r0, [pc, #4]	@ (800a904 <__sfp_lock_release+0x8>)
 800a8fe:	f000 b91d 	b.w	800ab3c <__retarget_lock_release_recursive>
 800a902:	bf00      	nop
 800a904:	200145fd 	.word	0x200145fd

0800a908 <__sinit>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	4604      	mov	r4, r0
 800a90c:	f7ff fff0 	bl	800a8f0 <__sfp_lock_acquire>
 800a910:	6a23      	ldr	r3, [r4, #32]
 800a912:	b11b      	cbz	r3, 800a91c <__sinit+0x14>
 800a914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a918:	f7ff bff0 	b.w	800a8fc <__sfp_lock_release>
 800a91c:	4b04      	ldr	r3, [pc, #16]	@ (800a930 <__sinit+0x28>)
 800a91e:	6223      	str	r3, [r4, #32]
 800a920:	4b04      	ldr	r3, [pc, #16]	@ (800a934 <__sinit+0x2c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1f5      	bne.n	800a914 <__sinit+0xc>
 800a928:	f7ff ffc4 	bl	800a8b4 <global_stdio_init.part.0>
 800a92c:	e7f2      	b.n	800a914 <__sinit+0xc>
 800a92e:	bf00      	nop
 800a930:	0800a875 	.word	0x0800a875
 800a934:	200145f4 	.word	0x200145f4

0800a938 <_fwalk_sglue>:
 800a938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a93c:	4607      	mov	r7, r0
 800a93e:	4688      	mov	r8, r1
 800a940:	4614      	mov	r4, r2
 800a942:	2600      	movs	r6, #0
 800a944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a948:	f1b9 0901 	subs.w	r9, r9, #1
 800a94c:	d505      	bpl.n	800a95a <_fwalk_sglue+0x22>
 800a94e:	6824      	ldr	r4, [r4, #0]
 800a950:	2c00      	cmp	r4, #0
 800a952:	d1f7      	bne.n	800a944 <_fwalk_sglue+0xc>
 800a954:	4630      	mov	r0, r6
 800a956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a95a:	89ab      	ldrh	r3, [r5, #12]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d907      	bls.n	800a970 <_fwalk_sglue+0x38>
 800a960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a964:	3301      	adds	r3, #1
 800a966:	d003      	beq.n	800a970 <_fwalk_sglue+0x38>
 800a968:	4629      	mov	r1, r5
 800a96a:	4638      	mov	r0, r7
 800a96c:	47c0      	blx	r8
 800a96e:	4306      	orrs	r6, r0
 800a970:	3568      	adds	r5, #104	@ 0x68
 800a972:	e7e9      	b.n	800a948 <_fwalk_sglue+0x10>

0800a974 <siprintf>:
 800a974:	b40e      	push	{r1, r2, r3}
 800a976:	b510      	push	{r4, lr}
 800a978:	b09d      	sub	sp, #116	@ 0x74
 800a97a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a97c:	9002      	str	r0, [sp, #8]
 800a97e:	9006      	str	r0, [sp, #24]
 800a980:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a984:	480a      	ldr	r0, [pc, #40]	@ (800a9b0 <siprintf+0x3c>)
 800a986:	9107      	str	r1, [sp, #28]
 800a988:	9104      	str	r1, [sp, #16]
 800a98a:	490a      	ldr	r1, [pc, #40]	@ (800a9b4 <siprintf+0x40>)
 800a98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a990:	9105      	str	r1, [sp, #20]
 800a992:	2400      	movs	r4, #0
 800a994:	a902      	add	r1, sp, #8
 800a996:	6800      	ldr	r0, [r0, #0]
 800a998:	9301      	str	r3, [sp, #4]
 800a99a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a99c:	f001 fbfe 	bl	800c19c <_svfiprintf_r>
 800a9a0:	9b02      	ldr	r3, [sp, #8]
 800a9a2:	701c      	strb	r4, [r3, #0]
 800a9a4:	b01d      	add	sp, #116	@ 0x74
 800a9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9aa:	b003      	add	sp, #12
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	20000018 	.word	0x20000018
 800a9b4:	ffff0208 	.word	0xffff0208

0800a9b8 <__sread>:
 800a9b8:	b510      	push	{r4, lr}
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c0:	f000 f86c 	bl	800aa9c <_read_r>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	bfab      	itete	ge
 800a9c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a9cc:	181b      	addge	r3, r3, r0
 800a9ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a9d2:	bfac      	ite	ge
 800a9d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a9d6:	81a3      	strhlt	r3, [r4, #12]
 800a9d8:	bd10      	pop	{r4, pc}

0800a9da <__swrite>:
 800a9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9de:	461f      	mov	r7, r3
 800a9e0:	898b      	ldrh	r3, [r1, #12]
 800a9e2:	05db      	lsls	r3, r3, #23
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	4616      	mov	r6, r2
 800a9ea:	d505      	bpl.n	800a9f8 <__swrite+0x1e>
 800a9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f000 f840 	bl	800aa78 <_lseek_r>
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa02:	81a3      	strh	r3, [r4, #12]
 800aa04:	4632      	mov	r2, r6
 800aa06:	463b      	mov	r3, r7
 800aa08:	4628      	mov	r0, r5
 800aa0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0e:	f000 b857 	b.w	800aac0 <_write_r>

0800aa12 <__sseek>:
 800aa12:	b510      	push	{r4, lr}
 800aa14:	460c      	mov	r4, r1
 800aa16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa1a:	f000 f82d 	bl	800aa78 <_lseek_r>
 800aa1e:	1c43      	adds	r3, r0, #1
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	bf15      	itete	ne
 800aa24:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa2e:	81a3      	strheq	r3, [r4, #12]
 800aa30:	bf18      	it	ne
 800aa32:	81a3      	strhne	r3, [r4, #12]
 800aa34:	bd10      	pop	{r4, pc}

0800aa36 <__sclose>:
 800aa36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa3a:	f000 b80d 	b.w	800aa58 <_close_r>

0800aa3e <memset>:
 800aa3e:	4402      	add	r2, r0
 800aa40:	4603      	mov	r3, r0
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d100      	bne.n	800aa48 <memset+0xa>
 800aa46:	4770      	bx	lr
 800aa48:	f803 1b01 	strb.w	r1, [r3], #1
 800aa4c:	e7f9      	b.n	800aa42 <memset+0x4>
	...

0800aa50 <_localeconv_r>:
 800aa50:	4800      	ldr	r0, [pc, #0]	@ (800aa54 <_localeconv_r+0x4>)
 800aa52:	4770      	bx	lr
 800aa54:	20000158 	.word	0x20000158

0800aa58 <_close_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d06      	ldr	r5, [pc, #24]	@ (800aa74 <_close_r+0x1c>)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4604      	mov	r4, r0
 800aa60:	4608      	mov	r0, r1
 800aa62:	602b      	str	r3, [r5, #0]
 800aa64:	f7f9 fa00 	bl	8003e68 <_close>
 800aa68:	1c43      	adds	r3, r0, #1
 800aa6a:	d102      	bne.n	800aa72 <_close_r+0x1a>
 800aa6c:	682b      	ldr	r3, [r5, #0]
 800aa6e:	b103      	cbz	r3, 800aa72 <_close_r+0x1a>
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	bd38      	pop	{r3, r4, r5, pc}
 800aa74:	200145f8 	.word	0x200145f8

0800aa78 <_lseek_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4d07      	ldr	r5, [pc, #28]	@ (800aa98 <_lseek_r+0x20>)
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	4608      	mov	r0, r1
 800aa80:	4611      	mov	r1, r2
 800aa82:	2200      	movs	r2, #0
 800aa84:	602a      	str	r2, [r5, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	f7f9 fa15 	bl	8003eb6 <_lseek>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d102      	bne.n	800aa96 <_lseek_r+0x1e>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	b103      	cbz	r3, 800aa96 <_lseek_r+0x1e>
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	bd38      	pop	{r3, r4, r5, pc}
 800aa98:	200145f8 	.word	0x200145f8

0800aa9c <_read_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4d07      	ldr	r5, [pc, #28]	@ (800aabc <_read_r+0x20>)
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	4608      	mov	r0, r1
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	602a      	str	r2, [r5, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f7f9 f9a3 	bl	8003df6 <_read>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d102      	bne.n	800aaba <_read_r+0x1e>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	b103      	cbz	r3, 800aaba <_read_r+0x1e>
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	200145f8 	.word	0x200145f8

0800aac0 <_write_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4d07      	ldr	r5, [pc, #28]	@ (800aae0 <_write_r+0x20>)
 800aac4:	4604      	mov	r4, r0
 800aac6:	4608      	mov	r0, r1
 800aac8:	4611      	mov	r1, r2
 800aaca:	2200      	movs	r2, #0
 800aacc:	602a      	str	r2, [r5, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	f7f9 f9ae 	bl	8003e30 <_write>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d102      	bne.n	800aade <_write_r+0x1e>
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	b103      	cbz	r3, 800aade <_write_r+0x1e>
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	200145f8 	.word	0x200145f8

0800aae4 <__errno>:
 800aae4:	4b01      	ldr	r3, [pc, #4]	@ (800aaec <__errno+0x8>)
 800aae6:	6818      	ldr	r0, [r3, #0]
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	20000018 	.word	0x20000018

0800aaf0 <__libc_init_array>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	4d0d      	ldr	r5, [pc, #52]	@ (800ab28 <__libc_init_array+0x38>)
 800aaf4:	4c0d      	ldr	r4, [pc, #52]	@ (800ab2c <__libc_init_array+0x3c>)
 800aaf6:	1b64      	subs	r4, r4, r5
 800aaf8:	10a4      	asrs	r4, r4, #2
 800aafa:	2600      	movs	r6, #0
 800aafc:	42a6      	cmp	r6, r4
 800aafe:	d109      	bne.n	800ab14 <__libc_init_array+0x24>
 800ab00:	4d0b      	ldr	r5, [pc, #44]	@ (800ab30 <__libc_init_array+0x40>)
 800ab02:	4c0c      	ldr	r4, [pc, #48]	@ (800ab34 <__libc_init_array+0x44>)
 800ab04:	f003 f88c 	bl	800dc20 <_init>
 800ab08:	1b64      	subs	r4, r4, r5
 800ab0a:	10a4      	asrs	r4, r4, #2
 800ab0c:	2600      	movs	r6, #0
 800ab0e:	42a6      	cmp	r6, r4
 800ab10:	d105      	bne.n	800ab1e <__libc_init_array+0x2e>
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab18:	4798      	blx	r3
 800ab1a:	3601      	adds	r6, #1
 800ab1c:	e7ee      	b.n	800aafc <__libc_init_array+0xc>
 800ab1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab22:	4798      	blx	r3
 800ab24:	3601      	adds	r6, #1
 800ab26:	e7f2      	b.n	800ab0e <__libc_init_array+0x1e>
 800ab28:	0800e248 	.word	0x0800e248
 800ab2c:	0800e248 	.word	0x0800e248
 800ab30:	0800e248 	.word	0x0800e248
 800ab34:	0800e24c 	.word	0x0800e24c

0800ab38 <__retarget_lock_init_recursive>:
 800ab38:	4770      	bx	lr

0800ab3a <__retarget_lock_acquire_recursive>:
 800ab3a:	4770      	bx	lr

0800ab3c <__retarget_lock_release_recursive>:
 800ab3c:	4770      	bx	lr

0800ab3e <quorem>:
 800ab3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab42:	6903      	ldr	r3, [r0, #16]
 800ab44:	690c      	ldr	r4, [r1, #16]
 800ab46:	42a3      	cmp	r3, r4
 800ab48:	4607      	mov	r7, r0
 800ab4a:	db7e      	blt.n	800ac4a <quorem+0x10c>
 800ab4c:	3c01      	subs	r4, #1
 800ab4e:	f101 0814 	add.w	r8, r1, #20
 800ab52:	00a3      	lsls	r3, r4, #2
 800ab54:	f100 0514 	add.w	r5, r0, #20
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab70:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab74:	d32e      	bcc.n	800abd4 <quorem+0x96>
 800ab76:	f04f 0a00 	mov.w	sl, #0
 800ab7a:	46c4      	mov	ip, r8
 800ab7c:	46ae      	mov	lr, r5
 800ab7e:	46d3      	mov	fp, sl
 800ab80:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ab84:	b298      	uxth	r0, r3
 800ab86:	fb06 a000 	mla	r0, r6, r0, sl
 800ab8a:	0c02      	lsrs	r2, r0, #16
 800ab8c:	0c1b      	lsrs	r3, r3, #16
 800ab8e:	fb06 2303 	mla	r3, r6, r3, r2
 800ab92:	f8de 2000 	ldr.w	r2, [lr]
 800ab96:	b280      	uxth	r0, r0
 800ab98:	b292      	uxth	r2, r2
 800ab9a:	1a12      	subs	r2, r2, r0
 800ab9c:	445a      	add	r2, fp
 800ab9e:	f8de 0000 	ldr.w	r0, [lr]
 800aba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800abac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800abb0:	b292      	uxth	r2, r2
 800abb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800abb6:	45e1      	cmp	r9, ip
 800abb8:	f84e 2b04 	str.w	r2, [lr], #4
 800abbc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800abc0:	d2de      	bcs.n	800ab80 <quorem+0x42>
 800abc2:	9b00      	ldr	r3, [sp, #0]
 800abc4:	58eb      	ldr	r3, [r5, r3]
 800abc6:	b92b      	cbnz	r3, 800abd4 <quorem+0x96>
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	3b04      	subs	r3, #4
 800abcc:	429d      	cmp	r5, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	d32f      	bcc.n	800ac32 <quorem+0xf4>
 800abd2:	613c      	str	r4, [r7, #16]
 800abd4:	4638      	mov	r0, r7
 800abd6:	f001 f97d 	bl	800bed4 <__mcmp>
 800abda:	2800      	cmp	r0, #0
 800abdc:	db25      	blt.n	800ac2a <quorem+0xec>
 800abde:	4629      	mov	r1, r5
 800abe0:	2000      	movs	r0, #0
 800abe2:	f858 2b04 	ldr.w	r2, [r8], #4
 800abe6:	f8d1 c000 	ldr.w	ip, [r1]
 800abea:	fa1f fe82 	uxth.w	lr, r2
 800abee:	fa1f f38c 	uxth.w	r3, ip
 800abf2:	eba3 030e 	sub.w	r3, r3, lr
 800abf6:	4403      	add	r3, r0
 800abf8:	0c12      	lsrs	r2, r2, #16
 800abfa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800abfe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac08:	45c1      	cmp	r9, r8
 800ac0a:	f841 3b04 	str.w	r3, [r1], #4
 800ac0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac12:	d2e6      	bcs.n	800abe2 <quorem+0xa4>
 800ac14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac1c:	b922      	cbnz	r2, 800ac28 <quorem+0xea>
 800ac1e:	3b04      	subs	r3, #4
 800ac20:	429d      	cmp	r5, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	d30b      	bcc.n	800ac3e <quorem+0x100>
 800ac26:	613c      	str	r4, [r7, #16]
 800ac28:	3601      	adds	r6, #1
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	b003      	add	sp, #12
 800ac2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac32:	6812      	ldr	r2, [r2, #0]
 800ac34:	3b04      	subs	r3, #4
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	d1cb      	bne.n	800abd2 <quorem+0x94>
 800ac3a:	3c01      	subs	r4, #1
 800ac3c:	e7c6      	b.n	800abcc <quorem+0x8e>
 800ac3e:	6812      	ldr	r2, [r2, #0]
 800ac40:	3b04      	subs	r3, #4
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	d1ef      	bne.n	800ac26 <quorem+0xe8>
 800ac46:	3c01      	subs	r4, #1
 800ac48:	e7ea      	b.n	800ac20 <quorem+0xe2>
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e7ee      	b.n	800ac2c <quorem+0xee>
	...

0800ac50 <_dtoa_r>:
 800ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	69c7      	ldr	r7, [r0, #28]
 800ac56:	b097      	sub	sp, #92	@ 0x5c
 800ac58:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ac5c:	ec55 4b10 	vmov	r4, r5, d0
 800ac60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ac62:	9107      	str	r1, [sp, #28]
 800ac64:	4681      	mov	r9, r0
 800ac66:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac68:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac6a:	b97f      	cbnz	r7, 800ac8c <_dtoa_r+0x3c>
 800ac6c:	2010      	movs	r0, #16
 800ac6e:	f000 fe09 	bl	800b884 <malloc>
 800ac72:	4602      	mov	r2, r0
 800ac74:	f8c9 001c 	str.w	r0, [r9, #28]
 800ac78:	b920      	cbnz	r0, 800ac84 <_dtoa_r+0x34>
 800ac7a:	4ba9      	ldr	r3, [pc, #676]	@ (800af20 <_dtoa_r+0x2d0>)
 800ac7c:	21ef      	movs	r1, #239	@ 0xef
 800ac7e:	48a9      	ldr	r0, [pc, #676]	@ (800af24 <_dtoa_r+0x2d4>)
 800ac80:	f001 fc6c 	bl	800c55c <__assert_func>
 800ac84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ac88:	6007      	str	r7, [r0, #0]
 800ac8a:	60c7      	str	r7, [r0, #12]
 800ac8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ac90:	6819      	ldr	r1, [r3, #0]
 800ac92:	b159      	cbz	r1, 800acac <_dtoa_r+0x5c>
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	604a      	str	r2, [r1, #4]
 800ac98:	2301      	movs	r3, #1
 800ac9a:	4093      	lsls	r3, r2
 800ac9c:	608b      	str	r3, [r1, #8]
 800ac9e:	4648      	mov	r0, r9
 800aca0:	f000 fee6 	bl	800ba70 <_Bfree>
 800aca4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]
 800acac:	1e2b      	subs	r3, r5, #0
 800acae:	bfb9      	ittee	lt
 800acb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800acb4:	9305      	strlt	r3, [sp, #20]
 800acb6:	2300      	movge	r3, #0
 800acb8:	6033      	strge	r3, [r6, #0]
 800acba:	9f05      	ldr	r7, [sp, #20]
 800acbc:	4b9a      	ldr	r3, [pc, #616]	@ (800af28 <_dtoa_r+0x2d8>)
 800acbe:	bfbc      	itt	lt
 800acc0:	2201      	movlt	r2, #1
 800acc2:	6032      	strlt	r2, [r6, #0]
 800acc4:	43bb      	bics	r3, r7
 800acc6:	d112      	bne.n	800acee <_dtoa_r+0x9e>
 800acc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800acca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acd4:	4323      	orrs	r3, r4
 800acd6:	f000 855a 	beq.w	800b78e <_dtoa_r+0xb3e>
 800acda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800acdc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800af3c <_dtoa_r+0x2ec>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 855c 	beq.w	800b79e <_dtoa_r+0xb4e>
 800ace6:	f10a 0303 	add.w	r3, sl, #3
 800acea:	f000 bd56 	b.w	800b79a <_dtoa_r+0xb4a>
 800acee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800acf2:	2200      	movs	r2, #0
 800acf4:	ec51 0b17 	vmov	r0, r1, d7
 800acf8:	2300      	movs	r3, #0
 800acfa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800acfe:	f7f5 ff03 	bl	8000b08 <__aeabi_dcmpeq>
 800ad02:	4680      	mov	r8, r0
 800ad04:	b158      	cbz	r0, 800ad1e <_dtoa_r+0xce>
 800ad06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad08:	2301      	movs	r3, #1
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad0e:	b113      	cbz	r3, 800ad16 <_dtoa_r+0xc6>
 800ad10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ad12:	4b86      	ldr	r3, [pc, #536]	@ (800af2c <_dtoa_r+0x2dc>)
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800af40 <_dtoa_r+0x2f0>
 800ad1a:	f000 bd40 	b.w	800b79e <_dtoa_r+0xb4e>
 800ad1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ad22:	aa14      	add	r2, sp, #80	@ 0x50
 800ad24:	a915      	add	r1, sp, #84	@ 0x54
 800ad26:	4648      	mov	r0, r9
 800ad28:	f001 f984 	bl	800c034 <__d2b>
 800ad2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad30:	9002      	str	r0, [sp, #8]
 800ad32:	2e00      	cmp	r6, #0
 800ad34:	d078      	beq.n	800ae28 <_dtoa_r+0x1d8>
 800ad36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad38:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ad3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ad48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ad4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ad50:	4619      	mov	r1, r3
 800ad52:	2200      	movs	r2, #0
 800ad54:	4b76      	ldr	r3, [pc, #472]	@ (800af30 <_dtoa_r+0x2e0>)
 800ad56:	f7f5 fab7 	bl	80002c8 <__aeabi_dsub>
 800ad5a:	a36b      	add	r3, pc, #428	@ (adr r3, 800af08 <_dtoa_r+0x2b8>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	f7f5 fc6a 	bl	8000638 <__aeabi_dmul>
 800ad64:	a36a      	add	r3, pc, #424	@ (adr r3, 800af10 <_dtoa_r+0x2c0>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f7f5 faaf 	bl	80002cc <__adddf3>
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4630      	mov	r0, r6
 800ad72:	460d      	mov	r5, r1
 800ad74:	f7f5 fbf6 	bl	8000564 <__aeabi_i2d>
 800ad78:	a367      	add	r3, pc, #412	@ (adr r3, 800af18 <_dtoa_r+0x2c8>)
 800ad7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7e:	f7f5 fc5b 	bl	8000638 <__aeabi_dmul>
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	4620      	mov	r0, r4
 800ad88:	4629      	mov	r1, r5
 800ad8a:	f7f5 fa9f 	bl	80002cc <__adddf3>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	460d      	mov	r5, r1
 800ad92:	f7f5 ff01 	bl	8000b98 <__aeabi_d2iz>
 800ad96:	2200      	movs	r2, #0
 800ad98:	4607      	mov	r7, r0
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	4629      	mov	r1, r5
 800ada0:	f7f5 febc 	bl	8000b1c <__aeabi_dcmplt>
 800ada4:	b140      	cbz	r0, 800adb8 <_dtoa_r+0x168>
 800ada6:	4638      	mov	r0, r7
 800ada8:	f7f5 fbdc 	bl	8000564 <__aeabi_i2d>
 800adac:	4622      	mov	r2, r4
 800adae:	462b      	mov	r3, r5
 800adb0:	f7f5 feaa 	bl	8000b08 <__aeabi_dcmpeq>
 800adb4:	b900      	cbnz	r0, 800adb8 <_dtoa_r+0x168>
 800adb6:	3f01      	subs	r7, #1
 800adb8:	2f16      	cmp	r7, #22
 800adba:	d852      	bhi.n	800ae62 <_dtoa_r+0x212>
 800adbc:	4b5d      	ldr	r3, [pc, #372]	@ (800af34 <_dtoa_r+0x2e4>)
 800adbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800adca:	f7f5 fea7 	bl	8000b1c <__aeabi_dcmplt>
 800adce:	2800      	cmp	r0, #0
 800add0:	d049      	beq.n	800ae66 <_dtoa_r+0x216>
 800add2:	3f01      	subs	r7, #1
 800add4:	2300      	movs	r3, #0
 800add6:	9310      	str	r3, [sp, #64]	@ 0x40
 800add8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800adda:	1b9b      	subs	r3, r3, r6
 800addc:	1e5a      	subs	r2, r3, #1
 800adde:	bf45      	ittet	mi
 800ade0:	f1c3 0301 	rsbmi	r3, r3, #1
 800ade4:	9300      	strmi	r3, [sp, #0]
 800ade6:	2300      	movpl	r3, #0
 800ade8:	2300      	movmi	r3, #0
 800adea:	9206      	str	r2, [sp, #24]
 800adec:	bf54      	ite	pl
 800adee:	9300      	strpl	r3, [sp, #0]
 800adf0:	9306      	strmi	r3, [sp, #24]
 800adf2:	2f00      	cmp	r7, #0
 800adf4:	db39      	blt.n	800ae6a <_dtoa_r+0x21a>
 800adf6:	9b06      	ldr	r3, [sp, #24]
 800adf8:	970d      	str	r7, [sp, #52]	@ 0x34
 800adfa:	443b      	add	r3, r7
 800adfc:	9306      	str	r3, [sp, #24]
 800adfe:	2300      	movs	r3, #0
 800ae00:	9308      	str	r3, [sp, #32]
 800ae02:	9b07      	ldr	r3, [sp, #28]
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	d863      	bhi.n	800aed0 <_dtoa_r+0x280>
 800ae08:	2b05      	cmp	r3, #5
 800ae0a:	bfc4      	itt	gt
 800ae0c:	3b04      	subgt	r3, #4
 800ae0e:	9307      	strgt	r3, [sp, #28]
 800ae10:	9b07      	ldr	r3, [sp, #28]
 800ae12:	f1a3 0302 	sub.w	r3, r3, #2
 800ae16:	bfcc      	ite	gt
 800ae18:	2400      	movgt	r4, #0
 800ae1a:	2401      	movle	r4, #1
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d863      	bhi.n	800aee8 <_dtoa_r+0x298>
 800ae20:	e8df f003 	tbb	[pc, r3]
 800ae24:	2b375452 	.word	0x2b375452
 800ae28:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ae2c:	441e      	add	r6, r3
 800ae2e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	bfc1      	itttt	gt
 800ae36:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ae3a:	409f      	lslgt	r7, r3
 800ae3c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ae40:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ae44:	bfd6      	itet	le
 800ae46:	f1c3 0320 	rsble	r3, r3, #32
 800ae4a:	ea47 0003 	orrgt.w	r0, r7, r3
 800ae4e:	fa04 f003 	lslle.w	r0, r4, r3
 800ae52:	f7f5 fb77 	bl	8000544 <__aeabi_ui2d>
 800ae56:	2201      	movs	r2, #1
 800ae58:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ae5c:	3e01      	subs	r6, #1
 800ae5e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ae60:	e776      	b.n	800ad50 <_dtoa_r+0x100>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e7b7      	b.n	800add6 <_dtoa_r+0x186>
 800ae66:	9010      	str	r0, [sp, #64]	@ 0x40
 800ae68:	e7b6      	b.n	800add8 <_dtoa_r+0x188>
 800ae6a:	9b00      	ldr	r3, [sp, #0]
 800ae6c:	1bdb      	subs	r3, r3, r7
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	427b      	negs	r3, r7
 800ae72:	9308      	str	r3, [sp, #32]
 800ae74:	2300      	movs	r3, #0
 800ae76:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae78:	e7c3      	b.n	800ae02 <_dtoa_r+0x1b2>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae80:	eb07 0b03 	add.w	fp, r7, r3
 800ae84:	f10b 0301 	add.w	r3, fp, #1
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	9303      	str	r3, [sp, #12]
 800ae8c:	bfb8      	it	lt
 800ae8e:	2301      	movlt	r3, #1
 800ae90:	e006      	b.n	800aea0 <_dtoa_r+0x250>
 800ae92:	2301      	movs	r3, #1
 800ae94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dd28      	ble.n	800aeee <_dtoa_r+0x29e>
 800ae9c:	469b      	mov	fp, r3
 800ae9e:	9303      	str	r3, [sp, #12]
 800aea0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800aea4:	2100      	movs	r1, #0
 800aea6:	2204      	movs	r2, #4
 800aea8:	f102 0514 	add.w	r5, r2, #20
 800aeac:	429d      	cmp	r5, r3
 800aeae:	d926      	bls.n	800aefe <_dtoa_r+0x2ae>
 800aeb0:	6041      	str	r1, [r0, #4]
 800aeb2:	4648      	mov	r0, r9
 800aeb4:	f000 fd9c 	bl	800b9f0 <_Balloc>
 800aeb8:	4682      	mov	sl, r0
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d142      	bne.n	800af44 <_dtoa_r+0x2f4>
 800aebe:	4b1e      	ldr	r3, [pc, #120]	@ (800af38 <_dtoa_r+0x2e8>)
 800aec0:	4602      	mov	r2, r0
 800aec2:	f240 11af 	movw	r1, #431	@ 0x1af
 800aec6:	e6da      	b.n	800ac7e <_dtoa_r+0x2e>
 800aec8:	2300      	movs	r3, #0
 800aeca:	e7e3      	b.n	800ae94 <_dtoa_r+0x244>
 800aecc:	2300      	movs	r3, #0
 800aece:	e7d5      	b.n	800ae7c <_dtoa_r+0x22c>
 800aed0:	2401      	movs	r4, #1
 800aed2:	2300      	movs	r3, #0
 800aed4:	9307      	str	r3, [sp, #28]
 800aed6:	9409      	str	r4, [sp, #36]	@ 0x24
 800aed8:	f04f 3bff 	mov.w	fp, #4294967295
 800aedc:	2200      	movs	r2, #0
 800aede:	f8cd b00c 	str.w	fp, [sp, #12]
 800aee2:	2312      	movs	r3, #18
 800aee4:	920c      	str	r2, [sp, #48]	@ 0x30
 800aee6:	e7db      	b.n	800aea0 <_dtoa_r+0x250>
 800aee8:	2301      	movs	r3, #1
 800aeea:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeec:	e7f4      	b.n	800aed8 <_dtoa_r+0x288>
 800aeee:	f04f 0b01 	mov.w	fp, #1
 800aef2:	f8cd b00c 	str.w	fp, [sp, #12]
 800aef6:	465b      	mov	r3, fp
 800aef8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800aefc:	e7d0      	b.n	800aea0 <_dtoa_r+0x250>
 800aefe:	3101      	adds	r1, #1
 800af00:	0052      	lsls	r2, r2, #1
 800af02:	e7d1      	b.n	800aea8 <_dtoa_r+0x258>
 800af04:	f3af 8000 	nop.w
 800af08:	636f4361 	.word	0x636f4361
 800af0c:	3fd287a7 	.word	0x3fd287a7
 800af10:	8b60c8b3 	.word	0x8b60c8b3
 800af14:	3fc68a28 	.word	0x3fc68a28
 800af18:	509f79fb 	.word	0x509f79fb
 800af1c:	3fd34413 	.word	0x3fd34413
 800af20:	0800dd31 	.word	0x0800dd31
 800af24:	0800dd48 	.word	0x0800dd48
 800af28:	7ff00000 	.word	0x7ff00000
 800af2c:	0800dd01 	.word	0x0800dd01
 800af30:	3ff80000 	.word	0x3ff80000
 800af34:	0800de98 	.word	0x0800de98
 800af38:	0800dda0 	.word	0x0800dda0
 800af3c:	0800dd2d 	.word	0x0800dd2d
 800af40:	0800dd00 	.word	0x0800dd00
 800af44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800af48:	6018      	str	r0, [r3, #0]
 800af4a:	9b03      	ldr	r3, [sp, #12]
 800af4c:	2b0e      	cmp	r3, #14
 800af4e:	f200 80a1 	bhi.w	800b094 <_dtoa_r+0x444>
 800af52:	2c00      	cmp	r4, #0
 800af54:	f000 809e 	beq.w	800b094 <_dtoa_r+0x444>
 800af58:	2f00      	cmp	r7, #0
 800af5a:	dd33      	ble.n	800afc4 <_dtoa_r+0x374>
 800af5c:	4b9c      	ldr	r3, [pc, #624]	@ (800b1d0 <_dtoa_r+0x580>)
 800af5e:	f007 020f 	and.w	r2, r7, #15
 800af62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af66:	ed93 7b00 	vldr	d7, [r3]
 800af6a:	05f8      	lsls	r0, r7, #23
 800af6c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800af70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800af74:	d516      	bpl.n	800afa4 <_dtoa_r+0x354>
 800af76:	4b97      	ldr	r3, [pc, #604]	@ (800b1d4 <_dtoa_r+0x584>)
 800af78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af80:	f7f5 fc84 	bl	800088c <__aeabi_ddiv>
 800af84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af88:	f004 040f 	and.w	r4, r4, #15
 800af8c:	2603      	movs	r6, #3
 800af8e:	4d91      	ldr	r5, [pc, #580]	@ (800b1d4 <_dtoa_r+0x584>)
 800af90:	b954      	cbnz	r4, 800afa8 <_dtoa_r+0x358>
 800af92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af9a:	f7f5 fc77 	bl	800088c <__aeabi_ddiv>
 800af9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afa2:	e028      	b.n	800aff6 <_dtoa_r+0x3a6>
 800afa4:	2602      	movs	r6, #2
 800afa6:	e7f2      	b.n	800af8e <_dtoa_r+0x33e>
 800afa8:	07e1      	lsls	r1, r4, #31
 800afaa:	d508      	bpl.n	800afbe <_dtoa_r+0x36e>
 800afac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800afb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afb4:	f7f5 fb40 	bl	8000638 <__aeabi_dmul>
 800afb8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afbc:	3601      	adds	r6, #1
 800afbe:	1064      	asrs	r4, r4, #1
 800afc0:	3508      	adds	r5, #8
 800afc2:	e7e5      	b.n	800af90 <_dtoa_r+0x340>
 800afc4:	f000 80af 	beq.w	800b126 <_dtoa_r+0x4d6>
 800afc8:	427c      	negs	r4, r7
 800afca:	4b81      	ldr	r3, [pc, #516]	@ (800b1d0 <_dtoa_r+0x580>)
 800afcc:	4d81      	ldr	r5, [pc, #516]	@ (800b1d4 <_dtoa_r+0x584>)
 800afce:	f004 020f 	and.w	r2, r4, #15
 800afd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800afde:	f7f5 fb2b 	bl	8000638 <__aeabi_dmul>
 800afe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afe6:	1124      	asrs	r4, r4, #4
 800afe8:	2300      	movs	r3, #0
 800afea:	2602      	movs	r6, #2
 800afec:	2c00      	cmp	r4, #0
 800afee:	f040 808f 	bne.w	800b110 <_dtoa_r+0x4c0>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1d3      	bne.n	800af9e <_dtoa_r+0x34e>
 800aff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aff8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 8094 	beq.w	800b12a <_dtoa_r+0x4da>
 800b002:	4b75      	ldr	r3, [pc, #468]	@ (800b1d8 <_dtoa_r+0x588>)
 800b004:	2200      	movs	r2, #0
 800b006:	4620      	mov	r0, r4
 800b008:	4629      	mov	r1, r5
 800b00a:	f7f5 fd87 	bl	8000b1c <__aeabi_dcmplt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f000 808b 	beq.w	800b12a <_dtoa_r+0x4da>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 8087 	beq.w	800b12a <_dtoa_r+0x4da>
 800b01c:	f1bb 0f00 	cmp.w	fp, #0
 800b020:	dd34      	ble.n	800b08c <_dtoa_r+0x43c>
 800b022:	4620      	mov	r0, r4
 800b024:	4b6d      	ldr	r3, [pc, #436]	@ (800b1dc <_dtoa_r+0x58c>)
 800b026:	2200      	movs	r2, #0
 800b028:	4629      	mov	r1, r5
 800b02a:	f7f5 fb05 	bl	8000638 <__aeabi_dmul>
 800b02e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b032:	f107 38ff 	add.w	r8, r7, #4294967295
 800b036:	3601      	adds	r6, #1
 800b038:	465c      	mov	r4, fp
 800b03a:	4630      	mov	r0, r6
 800b03c:	f7f5 fa92 	bl	8000564 <__aeabi_i2d>
 800b040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b044:	f7f5 faf8 	bl	8000638 <__aeabi_dmul>
 800b048:	4b65      	ldr	r3, [pc, #404]	@ (800b1e0 <_dtoa_r+0x590>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	f7f5 f93e 	bl	80002cc <__adddf3>
 800b050:	4605      	mov	r5, r0
 800b052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b056:	2c00      	cmp	r4, #0
 800b058:	d16a      	bne.n	800b130 <_dtoa_r+0x4e0>
 800b05a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b05e:	4b61      	ldr	r3, [pc, #388]	@ (800b1e4 <_dtoa_r+0x594>)
 800b060:	2200      	movs	r2, #0
 800b062:	f7f5 f931 	bl	80002c8 <__aeabi_dsub>
 800b066:	4602      	mov	r2, r0
 800b068:	460b      	mov	r3, r1
 800b06a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b06e:	462a      	mov	r2, r5
 800b070:	4633      	mov	r3, r6
 800b072:	f7f5 fd71 	bl	8000b58 <__aeabi_dcmpgt>
 800b076:	2800      	cmp	r0, #0
 800b078:	f040 8298 	bne.w	800b5ac <_dtoa_r+0x95c>
 800b07c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b080:	462a      	mov	r2, r5
 800b082:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b086:	f7f5 fd49 	bl	8000b1c <__aeabi_dcmplt>
 800b08a:	bb38      	cbnz	r0, 800b0dc <_dtoa_r+0x48c>
 800b08c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b090:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b094:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b096:	2b00      	cmp	r3, #0
 800b098:	f2c0 8157 	blt.w	800b34a <_dtoa_r+0x6fa>
 800b09c:	2f0e      	cmp	r7, #14
 800b09e:	f300 8154 	bgt.w	800b34a <_dtoa_r+0x6fa>
 800b0a2:	4b4b      	ldr	r3, [pc, #300]	@ (800b1d0 <_dtoa_r+0x580>)
 800b0a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0a8:	ed93 7b00 	vldr	d7, [r3]
 800b0ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	ed8d 7b00 	vstr	d7, [sp]
 800b0b4:	f280 80e5 	bge.w	800b282 <_dtoa_r+0x632>
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f300 80e1 	bgt.w	800b282 <_dtoa_r+0x632>
 800b0c0:	d10c      	bne.n	800b0dc <_dtoa_r+0x48c>
 800b0c2:	4b48      	ldr	r3, [pc, #288]	@ (800b1e4 <_dtoa_r+0x594>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	ec51 0b17 	vmov	r0, r1, d7
 800b0ca:	f7f5 fab5 	bl	8000638 <__aeabi_dmul>
 800b0ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0d2:	f7f5 fd37 	bl	8000b44 <__aeabi_dcmpge>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f000 8266 	beq.w	800b5a8 <_dtoa_r+0x958>
 800b0dc:	2400      	movs	r4, #0
 800b0de:	4625      	mov	r5, r4
 800b0e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0e2:	4656      	mov	r6, sl
 800b0e4:	ea6f 0803 	mvn.w	r8, r3
 800b0e8:	2700      	movs	r7, #0
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4648      	mov	r0, r9
 800b0ee:	f000 fcbf 	bl	800ba70 <_Bfree>
 800b0f2:	2d00      	cmp	r5, #0
 800b0f4:	f000 80bd 	beq.w	800b272 <_dtoa_r+0x622>
 800b0f8:	b12f      	cbz	r7, 800b106 <_dtoa_r+0x4b6>
 800b0fa:	42af      	cmp	r7, r5
 800b0fc:	d003      	beq.n	800b106 <_dtoa_r+0x4b6>
 800b0fe:	4639      	mov	r1, r7
 800b100:	4648      	mov	r0, r9
 800b102:	f000 fcb5 	bl	800ba70 <_Bfree>
 800b106:	4629      	mov	r1, r5
 800b108:	4648      	mov	r0, r9
 800b10a:	f000 fcb1 	bl	800ba70 <_Bfree>
 800b10e:	e0b0      	b.n	800b272 <_dtoa_r+0x622>
 800b110:	07e2      	lsls	r2, r4, #31
 800b112:	d505      	bpl.n	800b120 <_dtoa_r+0x4d0>
 800b114:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b118:	f7f5 fa8e 	bl	8000638 <__aeabi_dmul>
 800b11c:	3601      	adds	r6, #1
 800b11e:	2301      	movs	r3, #1
 800b120:	1064      	asrs	r4, r4, #1
 800b122:	3508      	adds	r5, #8
 800b124:	e762      	b.n	800afec <_dtoa_r+0x39c>
 800b126:	2602      	movs	r6, #2
 800b128:	e765      	b.n	800aff6 <_dtoa_r+0x3a6>
 800b12a:	9c03      	ldr	r4, [sp, #12]
 800b12c:	46b8      	mov	r8, r7
 800b12e:	e784      	b.n	800b03a <_dtoa_r+0x3ea>
 800b130:	4b27      	ldr	r3, [pc, #156]	@ (800b1d0 <_dtoa_r+0x580>)
 800b132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b134:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b138:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b13c:	4454      	add	r4, sl
 800b13e:	2900      	cmp	r1, #0
 800b140:	d054      	beq.n	800b1ec <_dtoa_r+0x59c>
 800b142:	4929      	ldr	r1, [pc, #164]	@ (800b1e8 <_dtoa_r+0x598>)
 800b144:	2000      	movs	r0, #0
 800b146:	f7f5 fba1 	bl	800088c <__aeabi_ddiv>
 800b14a:	4633      	mov	r3, r6
 800b14c:	462a      	mov	r2, r5
 800b14e:	f7f5 f8bb 	bl	80002c8 <__aeabi_dsub>
 800b152:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b156:	4656      	mov	r6, sl
 800b158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b15c:	f7f5 fd1c 	bl	8000b98 <__aeabi_d2iz>
 800b160:	4605      	mov	r5, r0
 800b162:	f7f5 f9ff 	bl	8000564 <__aeabi_i2d>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b16e:	f7f5 f8ab 	bl	80002c8 <__aeabi_dsub>
 800b172:	3530      	adds	r5, #48	@ 0x30
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b17c:	f806 5b01 	strb.w	r5, [r6], #1
 800b180:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b184:	f7f5 fcca 	bl	8000b1c <__aeabi_dcmplt>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d172      	bne.n	800b272 <_dtoa_r+0x622>
 800b18c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b190:	4911      	ldr	r1, [pc, #68]	@ (800b1d8 <_dtoa_r+0x588>)
 800b192:	2000      	movs	r0, #0
 800b194:	f7f5 f898 	bl	80002c8 <__aeabi_dsub>
 800b198:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b19c:	f7f5 fcbe 	bl	8000b1c <__aeabi_dcmplt>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	f040 80b4 	bne.w	800b30e <_dtoa_r+0x6be>
 800b1a6:	42a6      	cmp	r6, r4
 800b1a8:	f43f af70 	beq.w	800b08c <_dtoa_r+0x43c>
 800b1ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b1b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b1dc <_dtoa_r+0x58c>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f7f5 fa40 	bl	8000638 <__aeabi_dmul>
 800b1b8:	4b08      	ldr	r3, [pc, #32]	@ (800b1dc <_dtoa_r+0x58c>)
 800b1ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b1be:	2200      	movs	r2, #0
 800b1c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1c4:	f7f5 fa38 	bl	8000638 <__aeabi_dmul>
 800b1c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1cc:	e7c4      	b.n	800b158 <_dtoa_r+0x508>
 800b1ce:	bf00      	nop
 800b1d0:	0800de98 	.word	0x0800de98
 800b1d4:	0800de70 	.word	0x0800de70
 800b1d8:	3ff00000 	.word	0x3ff00000
 800b1dc:	40240000 	.word	0x40240000
 800b1e0:	401c0000 	.word	0x401c0000
 800b1e4:	40140000 	.word	0x40140000
 800b1e8:	3fe00000 	.word	0x3fe00000
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f7f5 fa22 	bl	8000638 <__aeabi_dmul>
 800b1f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b1f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b1fa:	4656      	mov	r6, sl
 800b1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b200:	f7f5 fcca 	bl	8000b98 <__aeabi_d2iz>
 800b204:	4605      	mov	r5, r0
 800b206:	f7f5 f9ad 	bl	8000564 <__aeabi_i2d>
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b212:	f7f5 f859 	bl	80002c8 <__aeabi_dsub>
 800b216:	3530      	adds	r5, #48	@ 0x30
 800b218:	f806 5b01 	strb.w	r5, [r6], #1
 800b21c:	4602      	mov	r2, r0
 800b21e:	460b      	mov	r3, r1
 800b220:	42a6      	cmp	r6, r4
 800b222:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b226:	f04f 0200 	mov.w	r2, #0
 800b22a:	d124      	bne.n	800b276 <_dtoa_r+0x626>
 800b22c:	4baf      	ldr	r3, [pc, #700]	@ (800b4ec <_dtoa_r+0x89c>)
 800b22e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b232:	f7f5 f84b 	bl	80002cc <__adddf3>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b23e:	f7f5 fc8b 	bl	8000b58 <__aeabi_dcmpgt>
 800b242:	2800      	cmp	r0, #0
 800b244:	d163      	bne.n	800b30e <_dtoa_r+0x6be>
 800b246:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b24a:	49a8      	ldr	r1, [pc, #672]	@ (800b4ec <_dtoa_r+0x89c>)
 800b24c:	2000      	movs	r0, #0
 800b24e:	f7f5 f83b 	bl	80002c8 <__aeabi_dsub>
 800b252:	4602      	mov	r2, r0
 800b254:	460b      	mov	r3, r1
 800b256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b25a:	f7f5 fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800b25e:	2800      	cmp	r0, #0
 800b260:	f43f af14 	beq.w	800b08c <_dtoa_r+0x43c>
 800b264:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b266:	1e73      	subs	r3, r6, #1
 800b268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b26a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b26e:	2b30      	cmp	r3, #48	@ 0x30
 800b270:	d0f8      	beq.n	800b264 <_dtoa_r+0x614>
 800b272:	4647      	mov	r7, r8
 800b274:	e03b      	b.n	800b2ee <_dtoa_r+0x69e>
 800b276:	4b9e      	ldr	r3, [pc, #632]	@ (800b4f0 <_dtoa_r+0x8a0>)
 800b278:	f7f5 f9de 	bl	8000638 <__aeabi_dmul>
 800b27c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b280:	e7bc      	b.n	800b1fc <_dtoa_r+0x5ac>
 800b282:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b286:	4656      	mov	r6, sl
 800b288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 fafc 	bl	800088c <__aeabi_ddiv>
 800b294:	f7f5 fc80 	bl	8000b98 <__aeabi_d2iz>
 800b298:	4680      	mov	r8, r0
 800b29a:	f7f5 f963 	bl	8000564 <__aeabi_i2d>
 800b29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2a2:	f7f5 f9c9 	bl	8000638 <__aeabi_dmul>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b2b2:	f7f5 f809 	bl	80002c8 <__aeabi_dsub>
 800b2b6:	f806 4b01 	strb.w	r4, [r6], #1
 800b2ba:	9d03      	ldr	r5, [sp, #12]
 800b2bc:	eba6 040a 	sub.w	r4, r6, sl
 800b2c0:	42a5      	cmp	r5, r4
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	d133      	bne.n	800b330 <_dtoa_r+0x6e0>
 800b2c8:	f7f5 f800 	bl	80002cc <__adddf3>
 800b2cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	460d      	mov	r5, r1
 800b2d4:	f7f5 fc40 	bl	8000b58 <__aeabi_dcmpgt>
 800b2d8:	b9c0      	cbnz	r0, 800b30c <_dtoa_r+0x6bc>
 800b2da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	f7f5 fc11 	bl	8000b08 <__aeabi_dcmpeq>
 800b2e6:	b110      	cbz	r0, 800b2ee <_dtoa_r+0x69e>
 800b2e8:	f018 0f01 	tst.w	r8, #1
 800b2ec:	d10e      	bne.n	800b30c <_dtoa_r+0x6bc>
 800b2ee:	9902      	ldr	r1, [sp, #8]
 800b2f0:	4648      	mov	r0, r9
 800b2f2:	f000 fbbd 	bl	800ba70 <_Bfree>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	7033      	strb	r3, [r6, #0]
 800b2fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b2fc:	3701      	adds	r7, #1
 800b2fe:	601f      	str	r7, [r3, #0]
 800b300:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b302:	2b00      	cmp	r3, #0
 800b304:	f000 824b 	beq.w	800b79e <_dtoa_r+0xb4e>
 800b308:	601e      	str	r6, [r3, #0]
 800b30a:	e248      	b.n	800b79e <_dtoa_r+0xb4e>
 800b30c:	46b8      	mov	r8, r7
 800b30e:	4633      	mov	r3, r6
 800b310:	461e      	mov	r6, r3
 800b312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b316:	2a39      	cmp	r2, #57	@ 0x39
 800b318:	d106      	bne.n	800b328 <_dtoa_r+0x6d8>
 800b31a:	459a      	cmp	sl, r3
 800b31c:	d1f8      	bne.n	800b310 <_dtoa_r+0x6c0>
 800b31e:	2230      	movs	r2, #48	@ 0x30
 800b320:	f108 0801 	add.w	r8, r8, #1
 800b324:	f88a 2000 	strb.w	r2, [sl]
 800b328:	781a      	ldrb	r2, [r3, #0]
 800b32a:	3201      	adds	r2, #1
 800b32c:	701a      	strb	r2, [r3, #0]
 800b32e:	e7a0      	b.n	800b272 <_dtoa_r+0x622>
 800b330:	4b6f      	ldr	r3, [pc, #444]	@ (800b4f0 <_dtoa_r+0x8a0>)
 800b332:	2200      	movs	r2, #0
 800b334:	f7f5 f980 	bl	8000638 <__aeabi_dmul>
 800b338:	2200      	movs	r2, #0
 800b33a:	2300      	movs	r3, #0
 800b33c:	4604      	mov	r4, r0
 800b33e:	460d      	mov	r5, r1
 800b340:	f7f5 fbe2 	bl	8000b08 <__aeabi_dcmpeq>
 800b344:	2800      	cmp	r0, #0
 800b346:	d09f      	beq.n	800b288 <_dtoa_r+0x638>
 800b348:	e7d1      	b.n	800b2ee <_dtoa_r+0x69e>
 800b34a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b34c:	2a00      	cmp	r2, #0
 800b34e:	f000 80ea 	beq.w	800b526 <_dtoa_r+0x8d6>
 800b352:	9a07      	ldr	r2, [sp, #28]
 800b354:	2a01      	cmp	r2, #1
 800b356:	f300 80cd 	bgt.w	800b4f4 <_dtoa_r+0x8a4>
 800b35a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b35c:	2a00      	cmp	r2, #0
 800b35e:	f000 80c1 	beq.w	800b4e4 <_dtoa_r+0x894>
 800b362:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b366:	9c08      	ldr	r4, [sp, #32]
 800b368:	9e00      	ldr	r6, [sp, #0]
 800b36a:	9a00      	ldr	r2, [sp, #0]
 800b36c:	441a      	add	r2, r3
 800b36e:	9200      	str	r2, [sp, #0]
 800b370:	9a06      	ldr	r2, [sp, #24]
 800b372:	2101      	movs	r1, #1
 800b374:	441a      	add	r2, r3
 800b376:	4648      	mov	r0, r9
 800b378:	9206      	str	r2, [sp, #24]
 800b37a:	f000 fc2d 	bl	800bbd8 <__i2b>
 800b37e:	4605      	mov	r5, r0
 800b380:	b166      	cbz	r6, 800b39c <_dtoa_r+0x74c>
 800b382:	9b06      	ldr	r3, [sp, #24]
 800b384:	2b00      	cmp	r3, #0
 800b386:	dd09      	ble.n	800b39c <_dtoa_r+0x74c>
 800b388:	42b3      	cmp	r3, r6
 800b38a:	9a00      	ldr	r2, [sp, #0]
 800b38c:	bfa8      	it	ge
 800b38e:	4633      	movge	r3, r6
 800b390:	1ad2      	subs	r2, r2, r3
 800b392:	9200      	str	r2, [sp, #0]
 800b394:	9a06      	ldr	r2, [sp, #24]
 800b396:	1af6      	subs	r6, r6, r3
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	9306      	str	r3, [sp, #24]
 800b39c:	9b08      	ldr	r3, [sp, #32]
 800b39e:	b30b      	cbz	r3, 800b3e4 <_dtoa_r+0x794>
 800b3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 80c6 	beq.w	800b534 <_dtoa_r+0x8e4>
 800b3a8:	2c00      	cmp	r4, #0
 800b3aa:	f000 80c0 	beq.w	800b52e <_dtoa_r+0x8de>
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	4622      	mov	r2, r4
 800b3b2:	4648      	mov	r0, r9
 800b3b4:	f000 fcc8 	bl	800bd48 <__pow5mult>
 800b3b8:	9a02      	ldr	r2, [sp, #8]
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	4605      	mov	r5, r0
 800b3be:	4648      	mov	r0, r9
 800b3c0:	f000 fc20 	bl	800bc04 <__multiply>
 800b3c4:	9902      	ldr	r1, [sp, #8]
 800b3c6:	4680      	mov	r8, r0
 800b3c8:	4648      	mov	r0, r9
 800b3ca:	f000 fb51 	bl	800ba70 <_Bfree>
 800b3ce:	9b08      	ldr	r3, [sp, #32]
 800b3d0:	1b1b      	subs	r3, r3, r4
 800b3d2:	9308      	str	r3, [sp, #32]
 800b3d4:	f000 80b1 	beq.w	800b53a <_dtoa_r+0x8ea>
 800b3d8:	9a08      	ldr	r2, [sp, #32]
 800b3da:	4641      	mov	r1, r8
 800b3dc:	4648      	mov	r0, r9
 800b3de:	f000 fcb3 	bl	800bd48 <__pow5mult>
 800b3e2:	9002      	str	r0, [sp, #8]
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	4648      	mov	r0, r9
 800b3e8:	f000 fbf6 	bl	800bbd8 <__i2b>
 800b3ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 81d8 	beq.w	800b7a6 <_dtoa_r+0xb56>
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	4601      	mov	r1, r0
 800b3fa:	4648      	mov	r0, r9
 800b3fc:	f000 fca4 	bl	800bd48 <__pow5mult>
 800b400:	9b07      	ldr	r3, [sp, #28]
 800b402:	2b01      	cmp	r3, #1
 800b404:	4604      	mov	r4, r0
 800b406:	f300 809f 	bgt.w	800b548 <_dtoa_r+0x8f8>
 800b40a:	9b04      	ldr	r3, [sp, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f040 8097 	bne.w	800b540 <_dtoa_r+0x8f0>
 800b412:	9b05      	ldr	r3, [sp, #20]
 800b414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f040 8093 	bne.w	800b544 <_dtoa_r+0x8f4>
 800b41e:	9b05      	ldr	r3, [sp, #20]
 800b420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b424:	0d1b      	lsrs	r3, r3, #20
 800b426:	051b      	lsls	r3, r3, #20
 800b428:	b133      	cbz	r3, 800b438 <_dtoa_r+0x7e8>
 800b42a:	9b00      	ldr	r3, [sp, #0]
 800b42c:	3301      	adds	r3, #1
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	9b06      	ldr	r3, [sp, #24]
 800b432:	3301      	adds	r3, #1
 800b434:	9306      	str	r3, [sp, #24]
 800b436:	2301      	movs	r3, #1
 800b438:	9308      	str	r3, [sp, #32]
 800b43a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 81b8 	beq.w	800b7b2 <_dtoa_r+0xb62>
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b448:	6918      	ldr	r0, [r3, #16]
 800b44a:	f000 fb79 	bl	800bb40 <__hi0bits>
 800b44e:	f1c0 0020 	rsb	r0, r0, #32
 800b452:	9b06      	ldr	r3, [sp, #24]
 800b454:	4418      	add	r0, r3
 800b456:	f010 001f 	ands.w	r0, r0, #31
 800b45a:	f000 8082 	beq.w	800b562 <_dtoa_r+0x912>
 800b45e:	f1c0 0320 	rsb	r3, r0, #32
 800b462:	2b04      	cmp	r3, #4
 800b464:	dd73      	ble.n	800b54e <_dtoa_r+0x8fe>
 800b466:	9b00      	ldr	r3, [sp, #0]
 800b468:	f1c0 001c 	rsb	r0, r0, #28
 800b46c:	4403      	add	r3, r0
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	9b06      	ldr	r3, [sp, #24]
 800b472:	4403      	add	r3, r0
 800b474:	4406      	add	r6, r0
 800b476:	9306      	str	r3, [sp, #24]
 800b478:	9b00      	ldr	r3, [sp, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	dd05      	ble.n	800b48a <_dtoa_r+0x83a>
 800b47e:	9902      	ldr	r1, [sp, #8]
 800b480:	461a      	mov	r2, r3
 800b482:	4648      	mov	r0, r9
 800b484:	f000 fcba 	bl	800bdfc <__lshift>
 800b488:	9002      	str	r0, [sp, #8]
 800b48a:	9b06      	ldr	r3, [sp, #24]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	dd05      	ble.n	800b49c <_dtoa_r+0x84c>
 800b490:	4621      	mov	r1, r4
 800b492:	461a      	mov	r2, r3
 800b494:	4648      	mov	r0, r9
 800b496:	f000 fcb1 	bl	800bdfc <__lshift>
 800b49a:	4604      	mov	r4, r0
 800b49c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d061      	beq.n	800b566 <_dtoa_r+0x916>
 800b4a2:	9802      	ldr	r0, [sp, #8]
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	f000 fd15 	bl	800bed4 <__mcmp>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	da5b      	bge.n	800b566 <_dtoa_r+0x916>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	9902      	ldr	r1, [sp, #8]
 800b4b2:	220a      	movs	r2, #10
 800b4b4:	4648      	mov	r0, r9
 800b4b6:	f000 fafd 	bl	800bab4 <__multadd>
 800b4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4bc:	9002      	str	r0, [sp, #8]
 800b4be:	f107 38ff 	add.w	r8, r7, #4294967295
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 8177 	beq.w	800b7b6 <_dtoa_r+0xb66>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	220a      	movs	r2, #10
 800b4ce:	4648      	mov	r0, r9
 800b4d0:	f000 faf0 	bl	800bab4 <__multadd>
 800b4d4:	f1bb 0f00 	cmp.w	fp, #0
 800b4d8:	4605      	mov	r5, r0
 800b4da:	dc6f      	bgt.n	800b5bc <_dtoa_r+0x96c>
 800b4dc:	9b07      	ldr	r3, [sp, #28]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	dc49      	bgt.n	800b576 <_dtoa_r+0x926>
 800b4e2:	e06b      	b.n	800b5bc <_dtoa_r+0x96c>
 800b4e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b4e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b4ea:	e73c      	b.n	800b366 <_dtoa_r+0x716>
 800b4ec:	3fe00000 	.word	0x3fe00000
 800b4f0:	40240000 	.word	0x40240000
 800b4f4:	9b03      	ldr	r3, [sp, #12]
 800b4f6:	1e5c      	subs	r4, r3, #1
 800b4f8:	9b08      	ldr	r3, [sp, #32]
 800b4fa:	42a3      	cmp	r3, r4
 800b4fc:	db09      	blt.n	800b512 <_dtoa_r+0x8c2>
 800b4fe:	1b1c      	subs	r4, r3, r4
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	f6bf af30 	bge.w	800b368 <_dtoa_r+0x718>
 800b508:	9b00      	ldr	r3, [sp, #0]
 800b50a:	9a03      	ldr	r2, [sp, #12]
 800b50c:	1a9e      	subs	r6, r3, r2
 800b50e:	2300      	movs	r3, #0
 800b510:	e72b      	b.n	800b36a <_dtoa_r+0x71a>
 800b512:	9b08      	ldr	r3, [sp, #32]
 800b514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b516:	9408      	str	r4, [sp, #32]
 800b518:	1ae3      	subs	r3, r4, r3
 800b51a:	441a      	add	r2, r3
 800b51c:	9e00      	ldr	r6, [sp, #0]
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	920d      	str	r2, [sp, #52]	@ 0x34
 800b522:	2400      	movs	r4, #0
 800b524:	e721      	b.n	800b36a <_dtoa_r+0x71a>
 800b526:	9c08      	ldr	r4, [sp, #32]
 800b528:	9e00      	ldr	r6, [sp, #0]
 800b52a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b52c:	e728      	b.n	800b380 <_dtoa_r+0x730>
 800b52e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b532:	e751      	b.n	800b3d8 <_dtoa_r+0x788>
 800b534:	9a08      	ldr	r2, [sp, #32]
 800b536:	9902      	ldr	r1, [sp, #8]
 800b538:	e750      	b.n	800b3dc <_dtoa_r+0x78c>
 800b53a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b53e:	e751      	b.n	800b3e4 <_dtoa_r+0x794>
 800b540:	2300      	movs	r3, #0
 800b542:	e779      	b.n	800b438 <_dtoa_r+0x7e8>
 800b544:	9b04      	ldr	r3, [sp, #16]
 800b546:	e777      	b.n	800b438 <_dtoa_r+0x7e8>
 800b548:	2300      	movs	r3, #0
 800b54a:	9308      	str	r3, [sp, #32]
 800b54c:	e779      	b.n	800b442 <_dtoa_r+0x7f2>
 800b54e:	d093      	beq.n	800b478 <_dtoa_r+0x828>
 800b550:	9a00      	ldr	r2, [sp, #0]
 800b552:	331c      	adds	r3, #28
 800b554:	441a      	add	r2, r3
 800b556:	9200      	str	r2, [sp, #0]
 800b558:	9a06      	ldr	r2, [sp, #24]
 800b55a:	441a      	add	r2, r3
 800b55c:	441e      	add	r6, r3
 800b55e:	9206      	str	r2, [sp, #24]
 800b560:	e78a      	b.n	800b478 <_dtoa_r+0x828>
 800b562:	4603      	mov	r3, r0
 800b564:	e7f4      	b.n	800b550 <_dtoa_r+0x900>
 800b566:	9b03      	ldr	r3, [sp, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	46b8      	mov	r8, r7
 800b56c:	dc20      	bgt.n	800b5b0 <_dtoa_r+0x960>
 800b56e:	469b      	mov	fp, r3
 800b570:	9b07      	ldr	r3, [sp, #28]
 800b572:	2b02      	cmp	r3, #2
 800b574:	dd1e      	ble.n	800b5b4 <_dtoa_r+0x964>
 800b576:	f1bb 0f00 	cmp.w	fp, #0
 800b57a:	f47f adb1 	bne.w	800b0e0 <_dtoa_r+0x490>
 800b57e:	4621      	mov	r1, r4
 800b580:	465b      	mov	r3, fp
 800b582:	2205      	movs	r2, #5
 800b584:	4648      	mov	r0, r9
 800b586:	f000 fa95 	bl	800bab4 <__multadd>
 800b58a:	4601      	mov	r1, r0
 800b58c:	4604      	mov	r4, r0
 800b58e:	9802      	ldr	r0, [sp, #8]
 800b590:	f000 fca0 	bl	800bed4 <__mcmp>
 800b594:	2800      	cmp	r0, #0
 800b596:	f77f ada3 	ble.w	800b0e0 <_dtoa_r+0x490>
 800b59a:	4656      	mov	r6, sl
 800b59c:	2331      	movs	r3, #49	@ 0x31
 800b59e:	f806 3b01 	strb.w	r3, [r6], #1
 800b5a2:	f108 0801 	add.w	r8, r8, #1
 800b5a6:	e59f      	b.n	800b0e8 <_dtoa_r+0x498>
 800b5a8:	9c03      	ldr	r4, [sp, #12]
 800b5aa:	46b8      	mov	r8, r7
 800b5ac:	4625      	mov	r5, r4
 800b5ae:	e7f4      	b.n	800b59a <_dtoa_r+0x94a>
 800b5b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 8101 	beq.w	800b7be <_dtoa_r+0xb6e>
 800b5bc:	2e00      	cmp	r6, #0
 800b5be:	dd05      	ble.n	800b5cc <_dtoa_r+0x97c>
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4632      	mov	r2, r6
 800b5c4:	4648      	mov	r0, r9
 800b5c6:	f000 fc19 	bl	800bdfc <__lshift>
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	9b08      	ldr	r3, [sp, #32]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d05c      	beq.n	800b68c <_dtoa_r+0xa3c>
 800b5d2:	6869      	ldr	r1, [r5, #4]
 800b5d4:	4648      	mov	r0, r9
 800b5d6:	f000 fa0b 	bl	800b9f0 <_Balloc>
 800b5da:	4606      	mov	r6, r0
 800b5dc:	b928      	cbnz	r0, 800b5ea <_dtoa_r+0x99a>
 800b5de:	4b82      	ldr	r3, [pc, #520]	@ (800b7e8 <_dtoa_r+0xb98>)
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b5e6:	f7ff bb4a 	b.w	800ac7e <_dtoa_r+0x2e>
 800b5ea:	692a      	ldr	r2, [r5, #16]
 800b5ec:	3202      	adds	r2, #2
 800b5ee:	0092      	lsls	r2, r2, #2
 800b5f0:	f105 010c 	add.w	r1, r5, #12
 800b5f4:	300c      	adds	r0, #12
 800b5f6:	f000 ffa3 	bl	800c540 <memcpy>
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4648      	mov	r0, r9
 800b600:	f000 fbfc 	bl	800bdfc <__lshift>
 800b604:	f10a 0301 	add.w	r3, sl, #1
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	eb0a 030b 	add.w	r3, sl, fp
 800b60e:	9308      	str	r3, [sp, #32]
 800b610:	9b04      	ldr	r3, [sp, #16]
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	462f      	mov	r7, r5
 800b618:	9306      	str	r3, [sp, #24]
 800b61a:	4605      	mov	r5, r0
 800b61c:	9b00      	ldr	r3, [sp, #0]
 800b61e:	9802      	ldr	r0, [sp, #8]
 800b620:	4621      	mov	r1, r4
 800b622:	f103 3bff 	add.w	fp, r3, #4294967295
 800b626:	f7ff fa8a 	bl	800ab3e <quorem>
 800b62a:	4603      	mov	r3, r0
 800b62c:	3330      	adds	r3, #48	@ 0x30
 800b62e:	9003      	str	r0, [sp, #12]
 800b630:	4639      	mov	r1, r7
 800b632:	9802      	ldr	r0, [sp, #8]
 800b634:	9309      	str	r3, [sp, #36]	@ 0x24
 800b636:	f000 fc4d 	bl	800bed4 <__mcmp>
 800b63a:	462a      	mov	r2, r5
 800b63c:	9004      	str	r0, [sp, #16]
 800b63e:	4621      	mov	r1, r4
 800b640:	4648      	mov	r0, r9
 800b642:	f000 fc63 	bl	800bf0c <__mdiff>
 800b646:	68c2      	ldr	r2, [r0, #12]
 800b648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b64a:	4606      	mov	r6, r0
 800b64c:	bb02      	cbnz	r2, 800b690 <_dtoa_r+0xa40>
 800b64e:	4601      	mov	r1, r0
 800b650:	9802      	ldr	r0, [sp, #8]
 800b652:	f000 fc3f 	bl	800bed4 <__mcmp>
 800b656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b658:	4602      	mov	r2, r0
 800b65a:	4631      	mov	r1, r6
 800b65c:	4648      	mov	r0, r9
 800b65e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b660:	9309      	str	r3, [sp, #36]	@ 0x24
 800b662:	f000 fa05 	bl	800ba70 <_Bfree>
 800b666:	9b07      	ldr	r3, [sp, #28]
 800b668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b66a:	9e00      	ldr	r6, [sp, #0]
 800b66c:	ea42 0103 	orr.w	r1, r2, r3
 800b670:	9b06      	ldr	r3, [sp, #24]
 800b672:	4319      	orrs	r1, r3
 800b674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b676:	d10d      	bne.n	800b694 <_dtoa_r+0xa44>
 800b678:	2b39      	cmp	r3, #57	@ 0x39
 800b67a:	d027      	beq.n	800b6cc <_dtoa_r+0xa7c>
 800b67c:	9a04      	ldr	r2, [sp, #16]
 800b67e:	2a00      	cmp	r2, #0
 800b680:	dd01      	ble.n	800b686 <_dtoa_r+0xa36>
 800b682:	9b03      	ldr	r3, [sp, #12]
 800b684:	3331      	adds	r3, #49	@ 0x31
 800b686:	f88b 3000 	strb.w	r3, [fp]
 800b68a:	e52e      	b.n	800b0ea <_dtoa_r+0x49a>
 800b68c:	4628      	mov	r0, r5
 800b68e:	e7b9      	b.n	800b604 <_dtoa_r+0x9b4>
 800b690:	2201      	movs	r2, #1
 800b692:	e7e2      	b.n	800b65a <_dtoa_r+0xa0a>
 800b694:	9904      	ldr	r1, [sp, #16]
 800b696:	2900      	cmp	r1, #0
 800b698:	db04      	blt.n	800b6a4 <_dtoa_r+0xa54>
 800b69a:	9807      	ldr	r0, [sp, #28]
 800b69c:	4301      	orrs	r1, r0
 800b69e:	9806      	ldr	r0, [sp, #24]
 800b6a0:	4301      	orrs	r1, r0
 800b6a2:	d120      	bne.n	800b6e6 <_dtoa_r+0xa96>
 800b6a4:	2a00      	cmp	r2, #0
 800b6a6:	ddee      	ble.n	800b686 <_dtoa_r+0xa36>
 800b6a8:	9902      	ldr	r1, [sp, #8]
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	4648      	mov	r0, r9
 800b6b0:	f000 fba4 	bl	800bdfc <__lshift>
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	9002      	str	r0, [sp, #8]
 800b6b8:	f000 fc0c 	bl	800bed4 <__mcmp>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	9b00      	ldr	r3, [sp, #0]
 800b6c0:	dc02      	bgt.n	800b6c8 <_dtoa_r+0xa78>
 800b6c2:	d1e0      	bne.n	800b686 <_dtoa_r+0xa36>
 800b6c4:	07da      	lsls	r2, r3, #31
 800b6c6:	d5de      	bpl.n	800b686 <_dtoa_r+0xa36>
 800b6c8:	2b39      	cmp	r3, #57	@ 0x39
 800b6ca:	d1da      	bne.n	800b682 <_dtoa_r+0xa32>
 800b6cc:	2339      	movs	r3, #57	@ 0x39
 800b6ce:	f88b 3000 	strb.w	r3, [fp]
 800b6d2:	4633      	mov	r3, r6
 800b6d4:	461e      	mov	r6, r3
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b6dc:	2a39      	cmp	r2, #57	@ 0x39
 800b6de:	d04e      	beq.n	800b77e <_dtoa_r+0xb2e>
 800b6e0:	3201      	adds	r2, #1
 800b6e2:	701a      	strb	r2, [r3, #0]
 800b6e4:	e501      	b.n	800b0ea <_dtoa_r+0x49a>
 800b6e6:	2a00      	cmp	r2, #0
 800b6e8:	dd03      	ble.n	800b6f2 <_dtoa_r+0xaa2>
 800b6ea:	2b39      	cmp	r3, #57	@ 0x39
 800b6ec:	d0ee      	beq.n	800b6cc <_dtoa_r+0xa7c>
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	e7c9      	b.n	800b686 <_dtoa_r+0xa36>
 800b6f2:	9a00      	ldr	r2, [sp, #0]
 800b6f4:	9908      	ldr	r1, [sp, #32]
 800b6f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b6fa:	428a      	cmp	r2, r1
 800b6fc:	d028      	beq.n	800b750 <_dtoa_r+0xb00>
 800b6fe:	9902      	ldr	r1, [sp, #8]
 800b700:	2300      	movs	r3, #0
 800b702:	220a      	movs	r2, #10
 800b704:	4648      	mov	r0, r9
 800b706:	f000 f9d5 	bl	800bab4 <__multadd>
 800b70a:	42af      	cmp	r7, r5
 800b70c:	9002      	str	r0, [sp, #8]
 800b70e:	f04f 0300 	mov.w	r3, #0
 800b712:	f04f 020a 	mov.w	r2, #10
 800b716:	4639      	mov	r1, r7
 800b718:	4648      	mov	r0, r9
 800b71a:	d107      	bne.n	800b72c <_dtoa_r+0xadc>
 800b71c:	f000 f9ca 	bl	800bab4 <__multadd>
 800b720:	4607      	mov	r7, r0
 800b722:	4605      	mov	r5, r0
 800b724:	9b00      	ldr	r3, [sp, #0]
 800b726:	3301      	adds	r3, #1
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	e777      	b.n	800b61c <_dtoa_r+0x9cc>
 800b72c:	f000 f9c2 	bl	800bab4 <__multadd>
 800b730:	4629      	mov	r1, r5
 800b732:	4607      	mov	r7, r0
 800b734:	2300      	movs	r3, #0
 800b736:	220a      	movs	r2, #10
 800b738:	4648      	mov	r0, r9
 800b73a:	f000 f9bb 	bl	800bab4 <__multadd>
 800b73e:	4605      	mov	r5, r0
 800b740:	e7f0      	b.n	800b724 <_dtoa_r+0xad4>
 800b742:	f1bb 0f00 	cmp.w	fp, #0
 800b746:	bfcc      	ite	gt
 800b748:	465e      	movgt	r6, fp
 800b74a:	2601      	movle	r6, #1
 800b74c:	4456      	add	r6, sl
 800b74e:	2700      	movs	r7, #0
 800b750:	9902      	ldr	r1, [sp, #8]
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	2201      	movs	r2, #1
 800b756:	4648      	mov	r0, r9
 800b758:	f000 fb50 	bl	800bdfc <__lshift>
 800b75c:	4621      	mov	r1, r4
 800b75e:	9002      	str	r0, [sp, #8]
 800b760:	f000 fbb8 	bl	800bed4 <__mcmp>
 800b764:	2800      	cmp	r0, #0
 800b766:	dcb4      	bgt.n	800b6d2 <_dtoa_r+0xa82>
 800b768:	d102      	bne.n	800b770 <_dtoa_r+0xb20>
 800b76a:	9b00      	ldr	r3, [sp, #0]
 800b76c:	07db      	lsls	r3, r3, #31
 800b76e:	d4b0      	bmi.n	800b6d2 <_dtoa_r+0xa82>
 800b770:	4633      	mov	r3, r6
 800b772:	461e      	mov	r6, r3
 800b774:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b778:	2a30      	cmp	r2, #48	@ 0x30
 800b77a:	d0fa      	beq.n	800b772 <_dtoa_r+0xb22>
 800b77c:	e4b5      	b.n	800b0ea <_dtoa_r+0x49a>
 800b77e:	459a      	cmp	sl, r3
 800b780:	d1a8      	bne.n	800b6d4 <_dtoa_r+0xa84>
 800b782:	2331      	movs	r3, #49	@ 0x31
 800b784:	f108 0801 	add.w	r8, r8, #1
 800b788:	f88a 3000 	strb.w	r3, [sl]
 800b78c:	e4ad      	b.n	800b0ea <_dtoa_r+0x49a>
 800b78e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b790:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b7ec <_dtoa_r+0xb9c>
 800b794:	b11b      	cbz	r3, 800b79e <_dtoa_r+0xb4e>
 800b796:	f10a 0308 	add.w	r3, sl, #8
 800b79a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	4650      	mov	r0, sl
 800b7a0:	b017      	add	sp, #92	@ 0x5c
 800b7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a6:	9b07      	ldr	r3, [sp, #28]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	f77f ae2e 	ble.w	800b40a <_dtoa_r+0x7ba>
 800b7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7b0:	9308      	str	r3, [sp, #32]
 800b7b2:	2001      	movs	r0, #1
 800b7b4:	e64d      	b.n	800b452 <_dtoa_r+0x802>
 800b7b6:	f1bb 0f00 	cmp.w	fp, #0
 800b7ba:	f77f aed9 	ble.w	800b570 <_dtoa_r+0x920>
 800b7be:	4656      	mov	r6, sl
 800b7c0:	9802      	ldr	r0, [sp, #8]
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	f7ff f9bb 	bl	800ab3e <quorem>
 800b7c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b7cc:	f806 3b01 	strb.w	r3, [r6], #1
 800b7d0:	eba6 020a 	sub.w	r2, r6, sl
 800b7d4:	4593      	cmp	fp, r2
 800b7d6:	ddb4      	ble.n	800b742 <_dtoa_r+0xaf2>
 800b7d8:	9902      	ldr	r1, [sp, #8]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	220a      	movs	r2, #10
 800b7de:	4648      	mov	r0, r9
 800b7e0:	f000 f968 	bl	800bab4 <__multadd>
 800b7e4:	9002      	str	r0, [sp, #8]
 800b7e6:	e7eb      	b.n	800b7c0 <_dtoa_r+0xb70>
 800b7e8:	0800dda0 	.word	0x0800dda0
 800b7ec:	0800dd24 	.word	0x0800dd24

0800b7f0 <_free_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	d041      	beq.n	800b87c <_free_r+0x8c>
 800b7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7fc:	1f0c      	subs	r4, r1, #4
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	bfb8      	it	lt
 800b802:	18e4      	addlt	r4, r4, r3
 800b804:	f000 f8e8 	bl	800b9d8 <__malloc_lock>
 800b808:	4a1d      	ldr	r2, [pc, #116]	@ (800b880 <_free_r+0x90>)
 800b80a:	6813      	ldr	r3, [r2, #0]
 800b80c:	b933      	cbnz	r3, 800b81c <_free_r+0x2c>
 800b80e:	6063      	str	r3, [r4, #4]
 800b810:	6014      	str	r4, [r2, #0]
 800b812:	4628      	mov	r0, r5
 800b814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b818:	f000 b8e4 	b.w	800b9e4 <__malloc_unlock>
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	d908      	bls.n	800b832 <_free_r+0x42>
 800b820:	6820      	ldr	r0, [r4, #0]
 800b822:	1821      	adds	r1, r4, r0
 800b824:	428b      	cmp	r3, r1
 800b826:	bf01      	itttt	eq
 800b828:	6819      	ldreq	r1, [r3, #0]
 800b82a:	685b      	ldreq	r3, [r3, #4]
 800b82c:	1809      	addeq	r1, r1, r0
 800b82e:	6021      	streq	r1, [r4, #0]
 800b830:	e7ed      	b.n	800b80e <_free_r+0x1e>
 800b832:	461a      	mov	r2, r3
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	b10b      	cbz	r3, 800b83c <_free_r+0x4c>
 800b838:	42a3      	cmp	r3, r4
 800b83a:	d9fa      	bls.n	800b832 <_free_r+0x42>
 800b83c:	6811      	ldr	r1, [r2, #0]
 800b83e:	1850      	adds	r0, r2, r1
 800b840:	42a0      	cmp	r0, r4
 800b842:	d10b      	bne.n	800b85c <_free_r+0x6c>
 800b844:	6820      	ldr	r0, [r4, #0]
 800b846:	4401      	add	r1, r0
 800b848:	1850      	adds	r0, r2, r1
 800b84a:	4283      	cmp	r3, r0
 800b84c:	6011      	str	r1, [r2, #0]
 800b84e:	d1e0      	bne.n	800b812 <_free_r+0x22>
 800b850:	6818      	ldr	r0, [r3, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	6053      	str	r3, [r2, #4]
 800b856:	4408      	add	r0, r1
 800b858:	6010      	str	r0, [r2, #0]
 800b85a:	e7da      	b.n	800b812 <_free_r+0x22>
 800b85c:	d902      	bls.n	800b864 <_free_r+0x74>
 800b85e:	230c      	movs	r3, #12
 800b860:	602b      	str	r3, [r5, #0]
 800b862:	e7d6      	b.n	800b812 <_free_r+0x22>
 800b864:	6820      	ldr	r0, [r4, #0]
 800b866:	1821      	adds	r1, r4, r0
 800b868:	428b      	cmp	r3, r1
 800b86a:	bf04      	itt	eq
 800b86c:	6819      	ldreq	r1, [r3, #0]
 800b86e:	685b      	ldreq	r3, [r3, #4]
 800b870:	6063      	str	r3, [r4, #4]
 800b872:	bf04      	itt	eq
 800b874:	1809      	addeq	r1, r1, r0
 800b876:	6021      	streq	r1, [r4, #0]
 800b878:	6054      	str	r4, [r2, #4]
 800b87a:	e7ca      	b.n	800b812 <_free_r+0x22>
 800b87c:	bd38      	pop	{r3, r4, r5, pc}
 800b87e:	bf00      	nop
 800b880:	20014604 	.word	0x20014604

0800b884 <malloc>:
 800b884:	4b02      	ldr	r3, [pc, #8]	@ (800b890 <malloc+0xc>)
 800b886:	4601      	mov	r1, r0
 800b888:	6818      	ldr	r0, [r3, #0]
 800b88a:	f000 b825 	b.w	800b8d8 <_malloc_r>
 800b88e:	bf00      	nop
 800b890:	20000018 	.word	0x20000018

0800b894 <sbrk_aligned>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	4e0f      	ldr	r6, [pc, #60]	@ (800b8d4 <sbrk_aligned+0x40>)
 800b898:	460c      	mov	r4, r1
 800b89a:	6831      	ldr	r1, [r6, #0]
 800b89c:	4605      	mov	r5, r0
 800b89e:	b911      	cbnz	r1, 800b8a6 <sbrk_aligned+0x12>
 800b8a0:	f000 fe3e 	bl	800c520 <_sbrk_r>
 800b8a4:	6030      	str	r0, [r6, #0]
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	f000 fe39 	bl	800c520 <_sbrk_r>
 800b8ae:	1c43      	adds	r3, r0, #1
 800b8b0:	d103      	bne.n	800b8ba <sbrk_aligned+0x26>
 800b8b2:	f04f 34ff 	mov.w	r4, #4294967295
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ba:	1cc4      	adds	r4, r0, #3
 800b8bc:	f024 0403 	bic.w	r4, r4, #3
 800b8c0:	42a0      	cmp	r0, r4
 800b8c2:	d0f8      	beq.n	800b8b6 <sbrk_aligned+0x22>
 800b8c4:	1a21      	subs	r1, r4, r0
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f000 fe2a 	bl	800c520 <_sbrk_r>
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	d1f2      	bne.n	800b8b6 <sbrk_aligned+0x22>
 800b8d0:	e7ef      	b.n	800b8b2 <sbrk_aligned+0x1e>
 800b8d2:	bf00      	nop
 800b8d4:	20014600 	.word	0x20014600

0800b8d8 <_malloc_r>:
 800b8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	1ccd      	adds	r5, r1, #3
 800b8de:	f025 0503 	bic.w	r5, r5, #3
 800b8e2:	3508      	adds	r5, #8
 800b8e4:	2d0c      	cmp	r5, #12
 800b8e6:	bf38      	it	cc
 800b8e8:	250c      	movcc	r5, #12
 800b8ea:	2d00      	cmp	r5, #0
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	db01      	blt.n	800b8f4 <_malloc_r+0x1c>
 800b8f0:	42a9      	cmp	r1, r5
 800b8f2:	d904      	bls.n	800b8fe <_malloc_r+0x26>
 800b8f4:	230c      	movs	r3, #12
 800b8f6:	6033      	str	r3, [r6, #0]
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9d4 <_malloc_r+0xfc>
 800b902:	f000 f869 	bl	800b9d8 <__malloc_lock>
 800b906:	f8d8 3000 	ldr.w	r3, [r8]
 800b90a:	461c      	mov	r4, r3
 800b90c:	bb44      	cbnz	r4, 800b960 <_malloc_r+0x88>
 800b90e:	4629      	mov	r1, r5
 800b910:	4630      	mov	r0, r6
 800b912:	f7ff ffbf 	bl	800b894 <sbrk_aligned>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	4604      	mov	r4, r0
 800b91a:	d158      	bne.n	800b9ce <_malloc_r+0xf6>
 800b91c:	f8d8 4000 	ldr.w	r4, [r8]
 800b920:	4627      	mov	r7, r4
 800b922:	2f00      	cmp	r7, #0
 800b924:	d143      	bne.n	800b9ae <_malloc_r+0xd6>
 800b926:	2c00      	cmp	r4, #0
 800b928:	d04b      	beq.n	800b9c2 <_malloc_r+0xea>
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	4639      	mov	r1, r7
 800b92e:	4630      	mov	r0, r6
 800b930:	eb04 0903 	add.w	r9, r4, r3
 800b934:	f000 fdf4 	bl	800c520 <_sbrk_r>
 800b938:	4581      	cmp	r9, r0
 800b93a:	d142      	bne.n	800b9c2 <_malloc_r+0xea>
 800b93c:	6821      	ldr	r1, [r4, #0]
 800b93e:	1a6d      	subs	r5, r5, r1
 800b940:	4629      	mov	r1, r5
 800b942:	4630      	mov	r0, r6
 800b944:	f7ff ffa6 	bl	800b894 <sbrk_aligned>
 800b948:	3001      	adds	r0, #1
 800b94a:	d03a      	beq.n	800b9c2 <_malloc_r+0xea>
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	442b      	add	r3, r5
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	f8d8 3000 	ldr.w	r3, [r8]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	bb62      	cbnz	r2, 800b9b4 <_malloc_r+0xdc>
 800b95a:	f8c8 7000 	str.w	r7, [r8]
 800b95e:	e00f      	b.n	800b980 <_malloc_r+0xa8>
 800b960:	6822      	ldr	r2, [r4, #0]
 800b962:	1b52      	subs	r2, r2, r5
 800b964:	d420      	bmi.n	800b9a8 <_malloc_r+0xd0>
 800b966:	2a0b      	cmp	r2, #11
 800b968:	d917      	bls.n	800b99a <_malloc_r+0xc2>
 800b96a:	1961      	adds	r1, r4, r5
 800b96c:	42a3      	cmp	r3, r4
 800b96e:	6025      	str	r5, [r4, #0]
 800b970:	bf18      	it	ne
 800b972:	6059      	strne	r1, [r3, #4]
 800b974:	6863      	ldr	r3, [r4, #4]
 800b976:	bf08      	it	eq
 800b978:	f8c8 1000 	streq.w	r1, [r8]
 800b97c:	5162      	str	r2, [r4, r5]
 800b97e:	604b      	str	r3, [r1, #4]
 800b980:	4630      	mov	r0, r6
 800b982:	f000 f82f 	bl	800b9e4 <__malloc_unlock>
 800b986:	f104 000b 	add.w	r0, r4, #11
 800b98a:	1d23      	adds	r3, r4, #4
 800b98c:	f020 0007 	bic.w	r0, r0, #7
 800b990:	1ac2      	subs	r2, r0, r3
 800b992:	bf1c      	itt	ne
 800b994:	1a1b      	subne	r3, r3, r0
 800b996:	50a3      	strne	r3, [r4, r2]
 800b998:	e7af      	b.n	800b8fa <_malloc_r+0x22>
 800b99a:	6862      	ldr	r2, [r4, #4]
 800b99c:	42a3      	cmp	r3, r4
 800b99e:	bf0c      	ite	eq
 800b9a0:	f8c8 2000 	streq.w	r2, [r8]
 800b9a4:	605a      	strne	r2, [r3, #4]
 800b9a6:	e7eb      	b.n	800b980 <_malloc_r+0xa8>
 800b9a8:	4623      	mov	r3, r4
 800b9aa:	6864      	ldr	r4, [r4, #4]
 800b9ac:	e7ae      	b.n	800b90c <_malloc_r+0x34>
 800b9ae:	463c      	mov	r4, r7
 800b9b0:	687f      	ldr	r7, [r7, #4]
 800b9b2:	e7b6      	b.n	800b922 <_malloc_r+0x4a>
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	42a3      	cmp	r3, r4
 800b9ba:	d1fb      	bne.n	800b9b4 <_malloc_r+0xdc>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	6053      	str	r3, [r2, #4]
 800b9c0:	e7de      	b.n	800b980 <_malloc_r+0xa8>
 800b9c2:	230c      	movs	r3, #12
 800b9c4:	6033      	str	r3, [r6, #0]
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	f000 f80c 	bl	800b9e4 <__malloc_unlock>
 800b9cc:	e794      	b.n	800b8f8 <_malloc_r+0x20>
 800b9ce:	6005      	str	r5, [r0, #0]
 800b9d0:	e7d6      	b.n	800b980 <_malloc_r+0xa8>
 800b9d2:	bf00      	nop
 800b9d4:	20014604 	.word	0x20014604

0800b9d8 <__malloc_lock>:
 800b9d8:	4801      	ldr	r0, [pc, #4]	@ (800b9e0 <__malloc_lock+0x8>)
 800b9da:	f7ff b8ae 	b.w	800ab3a <__retarget_lock_acquire_recursive>
 800b9de:	bf00      	nop
 800b9e0:	200145fc 	.word	0x200145fc

0800b9e4 <__malloc_unlock>:
 800b9e4:	4801      	ldr	r0, [pc, #4]	@ (800b9ec <__malloc_unlock+0x8>)
 800b9e6:	f7ff b8a9 	b.w	800ab3c <__retarget_lock_release_recursive>
 800b9ea:	bf00      	nop
 800b9ec:	200145fc 	.word	0x200145fc

0800b9f0 <_Balloc>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	69c6      	ldr	r6, [r0, #28]
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	460d      	mov	r5, r1
 800b9f8:	b976      	cbnz	r6, 800ba18 <_Balloc+0x28>
 800b9fa:	2010      	movs	r0, #16
 800b9fc:	f7ff ff42 	bl	800b884 <malloc>
 800ba00:	4602      	mov	r2, r0
 800ba02:	61e0      	str	r0, [r4, #28]
 800ba04:	b920      	cbnz	r0, 800ba10 <_Balloc+0x20>
 800ba06:	4b18      	ldr	r3, [pc, #96]	@ (800ba68 <_Balloc+0x78>)
 800ba08:	4818      	ldr	r0, [pc, #96]	@ (800ba6c <_Balloc+0x7c>)
 800ba0a:	216b      	movs	r1, #107	@ 0x6b
 800ba0c:	f000 fda6 	bl	800c55c <__assert_func>
 800ba10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba14:	6006      	str	r6, [r0, #0]
 800ba16:	60c6      	str	r6, [r0, #12]
 800ba18:	69e6      	ldr	r6, [r4, #28]
 800ba1a:	68f3      	ldr	r3, [r6, #12]
 800ba1c:	b183      	cbz	r3, 800ba40 <_Balloc+0x50>
 800ba1e:	69e3      	ldr	r3, [r4, #28]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba26:	b9b8      	cbnz	r0, 800ba58 <_Balloc+0x68>
 800ba28:	2101      	movs	r1, #1
 800ba2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ba2e:	1d72      	adds	r2, r6, #5
 800ba30:	0092      	lsls	r2, r2, #2
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 fdb0 	bl	800c598 <_calloc_r>
 800ba38:	b160      	cbz	r0, 800ba54 <_Balloc+0x64>
 800ba3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba3e:	e00e      	b.n	800ba5e <_Balloc+0x6e>
 800ba40:	2221      	movs	r2, #33	@ 0x21
 800ba42:	2104      	movs	r1, #4
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 fda7 	bl	800c598 <_calloc_r>
 800ba4a:	69e3      	ldr	r3, [r4, #28]
 800ba4c:	60f0      	str	r0, [r6, #12]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1e4      	bne.n	800ba1e <_Balloc+0x2e>
 800ba54:	2000      	movs	r0, #0
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	6802      	ldr	r2, [r0, #0]
 800ba5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba64:	e7f7      	b.n	800ba56 <_Balloc+0x66>
 800ba66:	bf00      	nop
 800ba68:	0800dd31 	.word	0x0800dd31
 800ba6c:	0800ddb1 	.word	0x0800ddb1

0800ba70 <_Bfree>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	69c6      	ldr	r6, [r0, #28]
 800ba74:	4605      	mov	r5, r0
 800ba76:	460c      	mov	r4, r1
 800ba78:	b976      	cbnz	r6, 800ba98 <_Bfree+0x28>
 800ba7a:	2010      	movs	r0, #16
 800ba7c:	f7ff ff02 	bl	800b884 <malloc>
 800ba80:	4602      	mov	r2, r0
 800ba82:	61e8      	str	r0, [r5, #28]
 800ba84:	b920      	cbnz	r0, 800ba90 <_Bfree+0x20>
 800ba86:	4b09      	ldr	r3, [pc, #36]	@ (800baac <_Bfree+0x3c>)
 800ba88:	4809      	ldr	r0, [pc, #36]	@ (800bab0 <_Bfree+0x40>)
 800ba8a:	218f      	movs	r1, #143	@ 0x8f
 800ba8c:	f000 fd66 	bl	800c55c <__assert_func>
 800ba90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba94:	6006      	str	r6, [r0, #0]
 800ba96:	60c6      	str	r6, [r0, #12]
 800ba98:	b13c      	cbz	r4, 800baaa <_Bfree+0x3a>
 800ba9a:	69eb      	ldr	r3, [r5, #28]
 800ba9c:	6862      	ldr	r2, [r4, #4]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baa4:	6021      	str	r1, [r4, #0]
 800baa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800baaa:	bd70      	pop	{r4, r5, r6, pc}
 800baac:	0800dd31 	.word	0x0800dd31
 800bab0:	0800ddb1 	.word	0x0800ddb1

0800bab4 <__multadd>:
 800bab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab8:	690d      	ldr	r5, [r1, #16]
 800baba:	4607      	mov	r7, r0
 800babc:	460c      	mov	r4, r1
 800babe:	461e      	mov	r6, r3
 800bac0:	f101 0c14 	add.w	ip, r1, #20
 800bac4:	2000      	movs	r0, #0
 800bac6:	f8dc 3000 	ldr.w	r3, [ip]
 800baca:	b299      	uxth	r1, r3
 800bacc:	fb02 6101 	mla	r1, r2, r1, r6
 800bad0:	0c1e      	lsrs	r6, r3, #16
 800bad2:	0c0b      	lsrs	r3, r1, #16
 800bad4:	fb02 3306 	mla	r3, r2, r6, r3
 800bad8:	b289      	uxth	r1, r1
 800bada:	3001      	adds	r0, #1
 800badc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bae0:	4285      	cmp	r5, r0
 800bae2:	f84c 1b04 	str.w	r1, [ip], #4
 800bae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800baea:	dcec      	bgt.n	800bac6 <__multadd+0x12>
 800baec:	b30e      	cbz	r6, 800bb32 <__multadd+0x7e>
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	42ab      	cmp	r3, r5
 800baf2:	dc19      	bgt.n	800bb28 <__multadd+0x74>
 800baf4:	6861      	ldr	r1, [r4, #4]
 800baf6:	4638      	mov	r0, r7
 800baf8:	3101      	adds	r1, #1
 800bafa:	f7ff ff79 	bl	800b9f0 <_Balloc>
 800bafe:	4680      	mov	r8, r0
 800bb00:	b928      	cbnz	r0, 800bb0e <__multadd+0x5a>
 800bb02:	4602      	mov	r2, r0
 800bb04:	4b0c      	ldr	r3, [pc, #48]	@ (800bb38 <__multadd+0x84>)
 800bb06:	480d      	ldr	r0, [pc, #52]	@ (800bb3c <__multadd+0x88>)
 800bb08:	21ba      	movs	r1, #186	@ 0xba
 800bb0a:	f000 fd27 	bl	800c55c <__assert_func>
 800bb0e:	6922      	ldr	r2, [r4, #16]
 800bb10:	3202      	adds	r2, #2
 800bb12:	f104 010c 	add.w	r1, r4, #12
 800bb16:	0092      	lsls	r2, r2, #2
 800bb18:	300c      	adds	r0, #12
 800bb1a:	f000 fd11 	bl	800c540 <memcpy>
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4638      	mov	r0, r7
 800bb22:	f7ff ffa5 	bl	800ba70 <_Bfree>
 800bb26:	4644      	mov	r4, r8
 800bb28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	615e      	str	r6, [r3, #20]
 800bb30:	6125      	str	r5, [r4, #16]
 800bb32:	4620      	mov	r0, r4
 800bb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb38:	0800dda0 	.word	0x0800dda0
 800bb3c:	0800ddb1 	.word	0x0800ddb1

0800bb40 <__hi0bits>:
 800bb40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb44:	4603      	mov	r3, r0
 800bb46:	bf36      	itet	cc
 800bb48:	0403      	lslcc	r3, r0, #16
 800bb4a:	2000      	movcs	r0, #0
 800bb4c:	2010      	movcc	r0, #16
 800bb4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb52:	bf3c      	itt	cc
 800bb54:	021b      	lslcc	r3, r3, #8
 800bb56:	3008      	addcc	r0, #8
 800bb58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb5c:	bf3c      	itt	cc
 800bb5e:	011b      	lslcc	r3, r3, #4
 800bb60:	3004      	addcc	r0, #4
 800bb62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb66:	bf3c      	itt	cc
 800bb68:	009b      	lslcc	r3, r3, #2
 800bb6a:	3002      	addcc	r0, #2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	db05      	blt.n	800bb7c <__hi0bits+0x3c>
 800bb70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bb74:	f100 0001 	add.w	r0, r0, #1
 800bb78:	bf08      	it	eq
 800bb7a:	2020      	moveq	r0, #32
 800bb7c:	4770      	bx	lr

0800bb7e <__lo0bits>:
 800bb7e:	6803      	ldr	r3, [r0, #0]
 800bb80:	4602      	mov	r2, r0
 800bb82:	f013 0007 	ands.w	r0, r3, #7
 800bb86:	d00b      	beq.n	800bba0 <__lo0bits+0x22>
 800bb88:	07d9      	lsls	r1, r3, #31
 800bb8a:	d421      	bmi.n	800bbd0 <__lo0bits+0x52>
 800bb8c:	0798      	lsls	r0, r3, #30
 800bb8e:	bf49      	itett	mi
 800bb90:	085b      	lsrmi	r3, r3, #1
 800bb92:	089b      	lsrpl	r3, r3, #2
 800bb94:	2001      	movmi	r0, #1
 800bb96:	6013      	strmi	r3, [r2, #0]
 800bb98:	bf5c      	itt	pl
 800bb9a:	6013      	strpl	r3, [r2, #0]
 800bb9c:	2002      	movpl	r0, #2
 800bb9e:	4770      	bx	lr
 800bba0:	b299      	uxth	r1, r3
 800bba2:	b909      	cbnz	r1, 800bba8 <__lo0bits+0x2a>
 800bba4:	0c1b      	lsrs	r3, r3, #16
 800bba6:	2010      	movs	r0, #16
 800bba8:	b2d9      	uxtb	r1, r3
 800bbaa:	b909      	cbnz	r1, 800bbb0 <__lo0bits+0x32>
 800bbac:	3008      	adds	r0, #8
 800bbae:	0a1b      	lsrs	r3, r3, #8
 800bbb0:	0719      	lsls	r1, r3, #28
 800bbb2:	bf04      	itt	eq
 800bbb4:	091b      	lsreq	r3, r3, #4
 800bbb6:	3004      	addeq	r0, #4
 800bbb8:	0799      	lsls	r1, r3, #30
 800bbba:	bf04      	itt	eq
 800bbbc:	089b      	lsreq	r3, r3, #2
 800bbbe:	3002      	addeq	r0, #2
 800bbc0:	07d9      	lsls	r1, r3, #31
 800bbc2:	d403      	bmi.n	800bbcc <__lo0bits+0x4e>
 800bbc4:	085b      	lsrs	r3, r3, #1
 800bbc6:	f100 0001 	add.w	r0, r0, #1
 800bbca:	d003      	beq.n	800bbd4 <__lo0bits+0x56>
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	4770      	bx	lr
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	4770      	bx	lr
 800bbd4:	2020      	movs	r0, #32
 800bbd6:	4770      	bx	lr

0800bbd8 <__i2b>:
 800bbd8:	b510      	push	{r4, lr}
 800bbda:	460c      	mov	r4, r1
 800bbdc:	2101      	movs	r1, #1
 800bbde:	f7ff ff07 	bl	800b9f0 <_Balloc>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	b928      	cbnz	r0, 800bbf2 <__i2b+0x1a>
 800bbe6:	4b05      	ldr	r3, [pc, #20]	@ (800bbfc <__i2b+0x24>)
 800bbe8:	4805      	ldr	r0, [pc, #20]	@ (800bc00 <__i2b+0x28>)
 800bbea:	f240 1145 	movw	r1, #325	@ 0x145
 800bbee:	f000 fcb5 	bl	800c55c <__assert_func>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	6144      	str	r4, [r0, #20]
 800bbf6:	6103      	str	r3, [r0, #16]
 800bbf8:	bd10      	pop	{r4, pc}
 800bbfa:	bf00      	nop
 800bbfc:	0800dda0 	.word	0x0800dda0
 800bc00:	0800ddb1 	.word	0x0800ddb1

0800bc04 <__multiply>:
 800bc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc08:	4617      	mov	r7, r2
 800bc0a:	690a      	ldr	r2, [r1, #16]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	bfa8      	it	ge
 800bc12:	463b      	movge	r3, r7
 800bc14:	4689      	mov	r9, r1
 800bc16:	bfa4      	itt	ge
 800bc18:	460f      	movge	r7, r1
 800bc1a:	4699      	movge	r9, r3
 800bc1c:	693d      	ldr	r5, [r7, #16]
 800bc1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	6879      	ldr	r1, [r7, #4]
 800bc26:	eb05 060a 	add.w	r6, r5, sl
 800bc2a:	42b3      	cmp	r3, r6
 800bc2c:	b085      	sub	sp, #20
 800bc2e:	bfb8      	it	lt
 800bc30:	3101      	addlt	r1, #1
 800bc32:	f7ff fedd 	bl	800b9f0 <_Balloc>
 800bc36:	b930      	cbnz	r0, 800bc46 <__multiply+0x42>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	4b41      	ldr	r3, [pc, #260]	@ (800bd40 <__multiply+0x13c>)
 800bc3c:	4841      	ldr	r0, [pc, #260]	@ (800bd44 <__multiply+0x140>)
 800bc3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc42:	f000 fc8b 	bl	800c55c <__assert_func>
 800bc46:	f100 0414 	add.w	r4, r0, #20
 800bc4a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bc4e:	4623      	mov	r3, r4
 800bc50:	2200      	movs	r2, #0
 800bc52:	4573      	cmp	r3, lr
 800bc54:	d320      	bcc.n	800bc98 <__multiply+0x94>
 800bc56:	f107 0814 	add.w	r8, r7, #20
 800bc5a:	f109 0114 	add.w	r1, r9, #20
 800bc5e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bc62:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bc66:	9302      	str	r3, [sp, #8]
 800bc68:	1beb      	subs	r3, r5, r7
 800bc6a:	3b15      	subs	r3, #21
 800bc6c:	f023 0303 	bic.w	r3, r3, #3
 800bc70:	3304      	adds	r3, #4
 800bc72:	3715      	adds	r7, #21
 800bc74:	42bd      	cmp	r5, r7
 800bc76:	bf38      	it	cc
 800bc78:	2304      	movcc	r3, #4
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	9b02      	ldr	r3, [sp, #8]
 800bc7e:	9103      	str	r1, [sp, #12]
 800bc80:	428b      	cmp	r3, r1
 800bc82:	d80c      	bhi.n	800bc9e <__multiply+0x9a>
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	dd03      	ble.n	800bc90 <__multiply+0x8c>
 800bc88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d055      	beq.n	800bd3c <__multiply+0x138>
 800bc90:	6106      	str	r6, [r0, #16]
 800bc92:	b005      	add	sp, #20
 800bc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc98:	f843 2b04 	str.w	r2, [r3], #4
 800bc9c:	e7d9      	b.n	800bc52 <__multiply+0x4e>
 800bc9e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bca2:	f1ba 0f00 	cmp.w	sl, #0
 800bca6:	d01f      	beq.n	800bce8 <__multiply+0xe4>
 800bca8:	46c4      	mov	ip, r8
 800bcaa:	46a1      	mov	r9, r4
 800bcac:	2700      	movs	r7, #0
 800bcae:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bcb2:	f8d9 3000 	ldr.w	r3, [r9]
 800bcb6:	fa1f fb82 	uxth.w	fp, r2
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bcc0:	443b      	add	r3, r7
 800bcc2:	f8d9 7000 	ldr.w	r7, [r9]
 800bcc6:	0c12      	lsrs	r2, r2, #16
 800bcc8:	0c3f      	lsrs	r7, r7, #16
 800bcca:	fb0a 7202 	mla	r2, sl, r2, r7
 800bcce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcd8:	4565      	cmp	r5, ip
 800bcda:	f849 3b04 	str.w	r3, [r9], #4
 800bcde:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bce2:	d8e4      	bhi.n	800bcae <__multiply+0xaa>
 800bce4:	9b01      	ldr	r3, [sp, #4]
 800bce6:	50e7      	str	r7, [r4, r3]
 800bce8:	9b03      	ldr	r3, [sp, #12]
 800bcea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bcee:	3104      	adds	r1, #4
 800bcf0:	f1b9 0f00 	cmp.w	r9, #0
 800bcf4:	d020      	beq.n	800bd38 <__multiply+0x134>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	4647      	mov	r7, r8
 800bcfa:	46a4      	mov	ip, r4
 800bcfc:	f04f 0a00 	mov.w	sl, #0
 800bd00:	f8b7 b000 	ldrh.w	fp, [r7]
 800bd04:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bd08:	fb09 220b 	mla	r2, r9, fp, r2
 800bd0c:	4452      	add	r2, sl
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd14:	f84c 3b04 	str.w	r3, [ip], #4
 800bd18:	f857 3b04 	ldr.w	r3, [r7], #4
 800bd1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd20:	f8bc 3000 	ldrh.w	r3, [ip]
 800bd24:	fb09 330a 	mla	r3, r9, sl, r3
 800bd28:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bd2c:	42bd      	cmp	r5, r7
 800bd2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd32:	d8e5      	bhi.n	800bd00 <__multiply+0xfc>
 800bd34:	9a01      	ldr	r2, [sp, #4]
 800bd36:	50a3      	str	r3, [r4, r2]
 800bd38:	3404      	adds	r4, #4
 800bd3a:	e79f      	b.n	800bc7c <__multiply+0x78>
 800bd3c:	3e01      	subs	r6, #1
 800bd3e:	e7a1      	b.n	800bc84 <__multiply+0x80>
 800bd40:	0800dda0 	.word	0x0800dda0
 800bd44:	0800ddb1 	.word	0x0800ddb1

0800bd48 <__pow5mult>:
 800bd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd4c:	4615      	mov	r5, r2
 800bd4e:	f012 0203 	ands.w	r2, r2, #3
 800bd52:	4607      	mov	r7, r0
 800bd54:	460e      	mov	r6, r1
 800bd56:	d007      	beq.n	800bd68 <__pow5mult+0x20>
 800bd58:	4c25      	ldr	r4, [pc, #148]	@ (800bdf0 <__pow5mult+0xa8>)
 800bd5a:	3a01      	subs	r2, #1
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd62:	f7ff fea7 	bl	800bab4 <__multadd>
 800bd66:	4606      	mov	r6, r0
 800bd68:	10ad      	asrs	r5, r5, #2
 800bd6a:	d03d      	beq.n	800bde8 <__pow5mult+0xa0>
 800bd6c:	69fc      	ldr	r4, [r7, #28]
 800bd6e:	b97c      	cbnz	r4, 800bd90 <__pow5mult+0x48>
 800bd70:	2010      	movs	r0, #16
 800bd72:	f7ff fd87 	bl	800b884 <malloc>
 800bd76:	4602      	mov	r2, r0
 800bd78:	61f8      	str	r0, [r7, #28]
 800bd7a:	b928      	cbnz	r0, 800bd88 <__pow5mult+0x40>
 800bd7c:	4b1d      	ldr	r3, [pc, #116]	@ (800bdf4 <__pow5mult+0xac>)
 800bd7e:	481e      	ldr	r0, [pc, #120]	@ (800bdf8 <__pow5mult+0xb0>)
 800bd80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bd84:	f000 fbea 	bl	800c55c <__assert_func>
 800bd88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd8c:	6004      	str	r4, [r0, #0]
 800bd8e:	60c4      	str	r4, [r0, #12]
 800bd90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bd94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd98:	b94c      	cbnz	r4, 800bdae <__pow5mult+0x66>
 800bd9a:	f240 2171 	movw	r1, #625	@ 0x271
 800bd9e:	4638      	mov	r0, r7
 800bda0:	f7ff ff1a 	bl	800bbd8 <__i2b>
 800bda4:	2300      	movs	r3, #0
 800bda6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdaa:	4604      	mov	r4, r0
 800bdac:	6003      	str	r3, [r0, #0]
 800bdae:	f04f 0900 	mov.w	r9, #0
 800bdb2:	07eb      	lsls	r3, r5, #31
 800bdb4:	d50a      	bpl.n	800bdcc <__pow5mult+0x84>
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4622      	mov	r2, r4
 800bdba:	4638      	mov	r0, r7
 800bdbc:	f7ff ff22 	bl	800bc04 <__multiply>
 800bdc0:	4631      	mov	r1, r6
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	f7ff fe53 	bl	800ba70 <_Bfree>
 800bdca:	4646      	mov	r6, r8
 800bdcc:	106d      	asrs	r5, r5, #1
 800bdce:	d00b      	beq.n	800bde8 <__pow5mult+0xa0>
 800bdd0:	6820      	ldr	r0, [r4, #0]
 800bdd2:	b938      	cbnz	r0, 800bde4 <__pow5mult+0x9c>
 800bdd4:	4622      	mov	r2, r4
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	4638      	mov	r0, r7
 800bdda:	f7ff ff13 	bl	800bc04 <__multiply>
 800bdde:	6020      	str	r0, [r4, #0]
 800bde0:	f8c0 9000 	str.w	r9, [r0]
 800bde4:	4604      	mov	r4, r0
 800bde6:	e7e4      	b.n	800bdb2 <__pow5mult+0x6a>
 800bde8:	4630      	mov	r0, r6
 800bdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdee:	bf00      	nop
 800bdf0:	0800de64 	.word	0x0800de64
 800bdf4:	0800dd31 	.word	0x0800dd31
 800bdf8:	0800ddb1 	.word	0x0800ddb1

0800bdfc <__lshift>:
 800bdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be00:	460c      	mov	r4, r1
 800be02:	6849      	ldr	r1, [r1, #4]
 800be04:	6923      	ldr	r3, [r4, #16]
 800be06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be0a:	68a3      	ldr	r3, [r4, #8]
 800be0c:	4607      	mov	r7, r0
 800be0e:	4691      	mov	r9, r2
 800be10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be14:	f108 0601 	add.w	r6, r8, #1
 800be18:	42b3      	cmp	r3, r6
 800be1a:	db0b      	blt.n	800be34 <__lshift+0x38>
 800be1c:	4638      	mov	r0, r7
 800be1e:	f7ff fde7 	bl	800b9f0 <_Balloc>
 800be22:	4605      	mov	r5, r0
 800be24:	b948      	cbnz	r0, 800be3a <__lshift+0x3e>
 800be26:	4602      	mov	r2, r0
 800be28:	4b28      	ldr	r3, [pc, #160]	@ (800becc <__lshift+0xd0>)
 800be2a:	4829      	ldr	r0, [pc, #164]	@ (800bed0 <__lshift+0xd4>)
 800be2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be30:	f000 fb94 	bl	800c55c <__assert_func>
 800be34:	3101      	adds	r1, #1
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	e7ee      	b.n	800be18 <__lshift+0x1c>
 800be3a:	2300      	movs	r3, #0
 800be3c:	f100 0114 	add.w	r1, r0, #20
 800be40:	f100 0210 	add.w	r2, r0, #16
 800be44:	4618      	mov	r0, r3
 800be46:	4553      	cmp	r3, sl
 800be48:	db33      	blt.n	800beb2 <__lshift+0xb6>
 800be4a:	6920      	ldr	r0, [r4, #16]
 800be4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be50:	f104 0314 	add.w	r3, r4, #20
 800be54:	f019 091f 	ands.w	r9, r9, #31
 800be58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be60:	d02b      	beq.n	800beba <__lshift+0xbe>
 800be62:	f1c9 0e20 	rsb	lr, r9, #32
 800be66:	468a      	mov	sl, r1
 800be68:	2200      	movs	r2, #0
 800be6a:	6818      	ldr	r0, [r3, #0]
 800be6c:	fa00 f009 	lsl.w	r0, r0, r9
 800be70:	4310      	orrs	r0, r2
 800be72:	f84a 0b04 	str.w	r0, [sl], #4
 800be76:	f853 2b04 	ldr.w	r2, [r3], #4
 800be7a:	459c      	cmp	ip, r3
 800be7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800be80:	d8f3      	bhi.n	800be6a <__lshift+0x6e>
 800be82:	ebac 0304 	sub.w	r3, ip, r4
 800be86:	3b15      	subs	r3, #21
 800be88:	f023 0303 	bic.w	r3, r3, #3
 800be8c:	3304      	adds	r3, #4
 800be8e:	f104 0015 	add.w	r0, r4, #21
 800be92:	4560      	cmp	r0, ip
 800be94:	bf88      	it	hi
 800be96:	2304      	movhi	r3, #4
 800be98:	50ca      	str	r2, [r1, r3]
 800be9a:	b10a      	cbz	r2, 800bea0 <__lshift+0xa4>
 800be9c:	f108 0602 	add.w	r6, r8, #2
 800bea0:	3e01      	subs	r6, #1
 800bea2:	4638      	mov	r0, r7
 800bea4:	612e      	str	r6, [r5, #16]
 800bea6:	4621      	mov	r1, r4
 800bea8:	f7ff fde2 	bl	800ba70 <_Bfree>
 800beac:	4628      	mov	r0, r5
 800beae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800beb6:	3301      	adds	r3, #1
 800beb8:	e7c5      	b.n	800be46 <__lshift+0x4a>
 800beba:	3904      	subs	r1, #4
 800bebc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bec0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bec4:	459c      	cmp	ip, r3
 800bec6:	d8f9      	bhi.n	800bebc <__lshift+0xc0>
 800bec8:	e7ea      	b.n	800bea0 <__lshift+0xa4>
 800beca:	bf00      	nop
 800becc:	0800dda0 	.word	0x0800dda0
 800bed0:	0800ddb1 	.word	0x0800ddb1

0800bed4 <__mcmp>:
 800bed4:	690a      	ldr	r2, [r1, #16]
 800bed6:	4603      	mov	r3, r0
 800bed8:	6900      	ldr	r0, [r0, #16]
 800beda:	1a80      	subs	r0, r0, r2
 800bedc:	b530      	push	{r4, r5, lr}
 800bede:	d10e      	bne.n	800befe <__mcmp+0x2a>
 800bee0:	3314      	adds	r3, #20
 800bee2:	3114      	adds	r1, #20
 800bee4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800beec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bef0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bef4:	4295      	cmp	r5, r2
 800bef6:	d003      	beq.n	800bf00 <__mcmp+0x2c>
 800bef8:	d205      	bcs.n	800bf06 <__mcmp+0x32>
 800befa:	f04f 30ff 	mov.w	r0, #4294967295
 800befe:	bd30      	pop	{r4, r5, pc}
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	d3f3      	bcc.n	800beec <__mcmp+0x18>
 800bf04:	e7fb      	b.n	800befe <__mcmp+0x2a>
 800bf06:	2001      	movs	r0, #1
 800bf08:	e7f9      	b.n	800befe <__mcmp+0x2a>
	...

0800bf0c <__mdiff>:
 800bf0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf10:	4689      	mov	r9, r1
 800bf12:	4606      	mov	r6, r0
 800bf14:	4611      	mov	r1, r2
 800bf16:	4648      	mov	r0, r9
 800bf18:	4614      	mov	r4, r2
 800bf1a:	f7ff ffdb 	bl	800bed4 <__mcmp>
 800bf1e:	1e05      	subs	r5, r0, #0
 800bf20:	d112      	bne.n	800bf48 <__mdiff+0x3c>
 800bf22:	4629      	mov	r1, r5
 800bf24:	4630      	mov	r0, r6
 800bf26:	f7ff fd63 	bl	800b9f0 <_Balloc>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	b928      	cbnz	r0, 800bf3a <__mdiff+0x2e>
 800bf2e:	4b3f      	ldr	r3, [pc, #252]	@ (800c02c <__mdiff+0x120>)
 800bf30:	f240 2137 	movw	r1, #567	@ 0x237
 800bf34:	483e      	ldr	r0, [pc, #248]	@ (800c030 <__mdiff+0x124>)
 800bf36:	f000 fb11 	bl	800c55c <__assert_func>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf40:	4610      	mov	r0, r2
 800bf42:	b003      	add	sp, #12
 800bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf48:	bfbc      	itt	lt
 800bf4a:	464b      	movlt	r3, r9
 800bf4c:	46a1      	movlt	r9, r4
 800bf4e:	4630      	mov	r0, r6
 800bf50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf54:	bfba      	itte	lt
 800bf56:	461c      	movlt	r4, r3
 800bf58:	2501      	movlt	r5, #1
 800bf5a:	2500      	movge	r5, #0
 800bf5c:	f7ff fd48 	bl	800b9f0 <_Balloc>
 800bf60:	4602      	mov	r2, r0
 800bf62:	b918      	cbnz	r0, 800bf6c <__mdiff+0x60>
 800bf64:	4b31      	ldr	r3, [pc, #196]	@ (800c02c <__mdiff+0x120>)
 800bf66:	f240 2145 	movw	r1, #581	@ 0x245
 800bf6a:	e7e3      	b.n	800bf34 <__mdiff+0x28>
 800bf6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bf70:	6926      	ldr	r6, [r4, #16]
 800bf72:	60c5      	str	r5, [r0, #12]
 800bf74:	f109 0310 	add.w	r3, r9, #16
 800bf78:	f109 0514 	add.w	r5, r9, #20
 800bf7c:	f104 0e14 	add.w	lr, r4, #20
 800bf80:	f100 0b14 	add.w	fp, r0, #20
 800bf84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bf88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bf8c:	9301      	str	r3, [sp, #4]
 800bf8e:	46d9      	mov	r9, fp
 800bf90:	f04f 0c00 	mov.w	ip, #0
 800bf94:	9b01      	ldr	r3, [sp, #4]
 800bf96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bf9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	fa1f f38a 	uxth.w	r3, sl
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	b283      	uxth	r3, r0
 800bfa8:	1acb      	subs	r3, r1, r3
 800bfaa:	0c00      	lsrs	r0, r0, #16
 800bfac:	4463      	add	r3, ip
 800bfae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bfb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bfbc:	4576      	cmp	r6, lr
 800bfbe:	f849 3b04 	str.w	r3, [r9], #4
 800bfc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfc6:	d8e5      	bhi.n	800bf94 <__mdiff+0x88>
 800bfc8:	1b33      	subs	r3, r6, r4
 800bfca:	3b15      	subs	r3, #21
 800bfcc:	f023 0303 	bic.w	r3, r3, #3
 800bfd0:	3415      	adds	r4, #21
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	42a6      	cmp	r6, r4
 800bfd6:	bf38      	it	cc
 800bfd8:	2304      	movcc	r3, #4
 800bfda:	441d      	add	r5, r3
 800bfdc:	445b      	add	r3, fp
 800bfde:	461e      	mov	r6, r3
 800bfe0:	462c      	mov	r4, r5
 800bfe2:	4544      	cmp	r4, r8
 800bfe4:	d30e      	bcc.n	800c004 <__mdiff+0xf8>
 800bfe6:	f108 0103 	add.w	r1, r8, #3
 800bfea:	1b49      	subs	r1, r1, r5
 800bfec:	f021 0103 	bic.w	r1, r1, #3
 800bff0:	3d03      	subs	r5, #3
 800bff2:	45a8      	cmp	r8, r5
 800bff4:	bf38      	it	cc
 800bff6:	2100      	movcc	r1, #0
 800bff8:	440b      	add	r3, r1
 800bffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bffe:	b191      	cbz	r1, 800c026 <__mdiff+0x11a>
 800c000:	6117      	str	r7, [r2, #16]
 800c002:	e79d      	b.n	800bf40 <__mdiff+0x34>
 800c004:	f854 1b04 	ldr.w	r1, [r4], #4
 800c008:	46e6      	mov	lr, ip
 800c00a:	0c08      	lsrs	r0, r1, #16
 800c00c:	fa1c fc81 	uxtah	ip, ip, r1
 800c010:	4471      	add	r1, lr
 800c012:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c016:	b289      	uxth	r1, r1
 800c018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c01c:	f846 1b04 	str.w	r1, [r6], #4
 800c020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c024:	e7dd      	b.n	800bfe2 <__mdiff+0xd6>
 800c026:	3f01      	subs	r7, #1
 800c028:	e7e7      	b.n	800bffa <__mdiff+0xee>
 800c02a:	bf00      	nop
 800c02c:	0800dda0 	.word	0x0800dda0
 800c030:	0800ddb1 	.word	0x0800ddb1

0800c034 <__d2b>:
 800c034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c038:	460f      	mov	r7, r1
 800c03a:	2101      	movs	r1, #1
 800c03c:	ec59 8b10 	vmov	r8, r9, d0
 800c040:	4616      	mov	r6, r2
 800c042:	f7ff fcd5 	bl	800b9f0 <_Balloc>
 800c046:	4604      	mov	r4, r0
 800c048:	b930      	cbnz	r0, 800c058 <__d2b+0x24>
 800c04a:	4602      	mov	r2, r0
 800c04c:	4b23      	ldr	r3, [pc, #140]	@ (800c0dc <__d2b+0xa8>)
 800c04e:	4824      	ldr	r0, [pc, #144]	@ (800c0e0 <__d2b+0xac>)
 800c050:	f240 310f 	movw	r1, #783	@ 0x30f
 800c054:	f000 fa82 	bl	800c55c <__assert_func>
 800c058:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c05c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c060:	b10d      	cbz	r5, 800c066 <__d2b+0x32>
 800c062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c066:	9301      	str	r3, [sp, #4]
 800c068:	f1b8 0300 	subs.w	r3, r8, #0
 800c06c:	d023      	beq.n	800c0b6 <__d2b+0x82>
 800c06e:	4668      	mov	r0, sp
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	f7ff fd84 	bl	800bb7e <__lo0bits>
 800c076:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c07a:	b1d0      	cbz	r0, 800c0b2 <__d2b+0x7e>
 800c07c:	f1c0 0320 	rsb	r3, r0, #32
 800c080:	fa02 f303 	lsl.w	r3, r2, r3
 800c084:	430b      	orrs	r3, r1
 800c086:	40c2      	lsrs	r2, r0
 800c088:	6163      	str	r3, [r4, #20]
 800c08a:	9201      	str	r2, [sp, #4]
 800c08c:	9b01      	ldr	r3, [sp, #4]
 800c08e:	61a3      	str	r3, [r4, #24]
 800c090:	2b00      	cmp	r3, #0
 800c092:	bf0c      	ite	eq
 800c094:	2201      	moveq	r2, #1
 800c096:	2202      	movne	r2, #2
 800c098:	6122      	str	r2, [r4, #16]
 800c09a:	b1a5      	cbz	r5, 800c0c6 <__d2b+0x92>
 800c09c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0a0:	4405      	add	r5, r0
 800c0a2:	603d      	str	r5, [r7, #0]
 800c0a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0a8:	6030      	str	r0, [r6, #0]
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	b003      	add	sp, #12
 800c0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0b2:	6161      	str	r1, [r4, #20]
 800c0b4:	e7ea      	b.n	800c08c <__d2b+0x58>
 800c0b6:	a801      	add	r0, sp, #4
 800c0b8:	f7ff fd61 	bl	800bb7e <__lo0bits>
 800c0bc:	9b01      	ldr	r3, [sp, #4]
 800c0be:	6163      	str	r3, [r4, #20]
 800c0c0:	3020      	adds	r0, #32
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	e7e8      	b.n	800c098 <__d2b+0x64>
 800c0c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0ce:	6038      	str	r0, [r7, #0]
 800c0d0:	6918      	ldr	r0, [r3, #16]
 800c0d2:	f7ff fd35 	bl	800bb40 <__hi0bits>
 800c0d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0da:	e7e5      	b.n	800c0a8 <__d2b+0x74>
 800c0dc:	0800dda0 	.word	0x0800dda0
 800c0e0:	0800ddb1 	.word	0x0800ddb1

0800c0e4 <__ssputs_r>:
 800c0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e8:	688e      	ldr	r6, [r1, #8]
 800c0ea:	461f      	mov	r7, r3
 800c0ec:	42be      	cmp	r6, r7
 800c0ee:	680b      	ldr	r3, [r1, #0]
 800c0f0:	4682      	mov	sl, r0
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	4690      	mov	r8, r2
 800c0f6:	d82d      	bhi.n	800c154 <__ssputs_r+0x70>
 800c0f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c100:	d026      	beq.n	800c150 <__ssputs_r+0x6c>
 800c102:	6965      	ldr	r5, [r4, #20]
 800c104:	6909      	ldr	r1, [r1, #16]
 800c106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c10a:	eba3 0901 	sub.w	r9, r3, r1
 800c10e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c112:	1c7b      	adds	r3, r7, #1
 800c114:	444b      	add	r3, r9
 800c116:	106d      	asrs	r5, r5, #1
 800c118:	429d      	cmp	r5, r3
 800c11a:	bf38      	it	cc
 800c11c:	461d      	movcc	r5, r3
 800c11e:	0553      	lsls	r3, r2, #21
 800c120:	d527      	bpl.n	800c172 <__ssputs_r+0x8e>
 800c122:	4629      	mov	r1, r5
 800c124:	f7ff fbd8 	bl	800b8d8 <_malloc_r>
 800c128:	4606      	mov	r6, r0
 800c12a:	b360      	cbz	r0, 800c186 <__ssputs_r+0xa2>
 800c12c:	6921      	ldr	r1, [r4, #16]
 800c12e:	464a      	mov	r2, r9
 800c130:	f000 fa06 	bl	800c540 <memcpy>
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c13a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c13e:	81a3      	strh	r3, [r4, #12]
 800c140:	6126      	str	r6, [r4, #16]
 800c142:	6165      	str	r5, [r4, #20]
 800c144:	444e      	add	r6, r9
 800c146:	eba5 0509 	sub.w	r5, r5, r9
 800c14a:	6026      	str	r6, [r4, #0]
 800c14c:	60a5      	str	r5, [r4, #8]
 800c14e:	463e      	mov	r6, r7
 800c150:	42be      	cmp	r6, r7
 800c152:	d900      	bls.n	800c156 <__ssputs_r+0x72>
 800c154:	463e      	mov	r6, r7
 800c156:	6820      	ldr	r0, [r4, #0]
 800c158:	4632      	mov	r2, r6
 800c15a:	4641      	mov	r1, r8
 800c15c:	f000 f9c6 	bl	800c4ec <memmove>
 800c160:	68a3      	ldr	r3, [r4, #8]
 800c162:	1b9b      	subs	r3, r3, r6
 800c164:	60a3      	str	r3, [r4, #8]
 800c166:	6823      	ldr	r3, [r4, #0]
 800c168:	4433      	add	r3, r6
 800c16a:	6023      	str	r3, [r4, #0]
 800c16c:	2000      	movs	r0, #0
 800c16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c172:	462a      	mov	r2, r5
 800c174:	f000 fa36 	bl	800c5e4 <_realloc_r>
 800c178:	4606      	mov	r6, r0
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d1e0      	bne.n	800c140 <__ssputs_r+0x5c>
 800c17e:	6921      	ldr	r1, [r4, #16]
 800c180:	4650      	mov	r0, sl
 800c182:	f7ff fb35 	bl	800b7f0 <_free_r>
 800c186:	230c      	movs	r3, #12
 800c188:	f8ca 3000 	str.w	r3, [sl]
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c192:	81a3      	strh	r3, [r4, #12]
 800c194:	f04f 30ff 	mov.w	r0, #4294967295
 800c198:	e7e9      	b.n	800c16e <__ssputs_r+0x8a>
	...

0800c19c <_svfiprintf_r>:
 800c19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a0:	4698      	mov	r8, r3
 800c1a2:	898b      	ldrh	r3, [r1, #12]
 800c1a4:	061b      	lsls	r3, r3, #24
 800c1a6:	b09d      	sub	sp, #116	@ 0x74
 800c1a8:	4607      	mov	r7, r0
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	4614      	mov	r4, r2
 800c1ae:	d510      	bpl.n	800c1d2 <_svfiprintf_r+0x36>
 800c1b0:	690b      	ldr	r3, [r1, #16]
 800c1b2:	b973      	cbnz	r3, 800c1d2 <_svfiprintf_r+0x36>
 800c1b4:	2140      	movs	r1, #64	@ 0x40
 800c1b6:	f7ff fb8f 	bl	800b8d8 <_malloc_r>
 800c1ba:	6028      	str	r0, [r5, #0]
 800c1bc:	6128      	str	r0, [r5, #16]
 800c1be:	b930      	cbnz	r0, 800c1ce <_svfiprintf_r+0x32>
 800c1c0:	230c      	movs	r3, #12
 800c1c2:	603b      	str	r3, [r7, #0]
 800c1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c8:	b01d      	add	sp, #116	@ 0x74
 800c1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ce:	2340      	movs	r3, #64	@ 0x40
 800c1d0:	616b      	str	r3, [r5, #20]
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1d6:	2320      	movs	r3, #32
 800c1d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1e0:	2330      	movs	r3, #48	@ 0x30
 800c1e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c380 <_svfiprintf_r+0x1e4>
 800c1e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1ea:	f04f 0901 	mov.w	r9, #1
 800c1ee:	4623      	mov	r3, r4
 800c1f0:	469a      	mov	sl, r3
 800c1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1f6:	b10a      	cbz	r2, 800c1fc <_svfiprintf_r+0x60>
 800c1f8:	2a25      	cmp	r2, #37	@ 0x25
 800c1fa:	d1f9      	bne.n	800c1f0 <_svfiprintf_r+0x54>
 800c1fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c200:	d00b      	beq.n	800c21a <_svfiprintf_r+0x7e>
 800c202:	465b      	mov	r3, fp
 800c204:	4622      	mov	r2, r4
 800c206:	4629      	mov	r1, r5
 800c208:	4638      	mov	r0, r7
 800c20a:	f7ff ff6b 	bl	800c0e4 <__ssputs_r>
 800c20e:	3001      	adds	r0, #1
 800c210:	f000 80a7 	beq.w	800c362 <_svfiprintf_r+0x1c6>
 800c214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c216:	445a      	add	r2, fp
 800c218:	9209      	str	r2, [sp, #36]	@ 0x24
 800c21a:	f89a 3000 	ldrb.w	r3, [sl]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f000 809f 	beq.w	800c362 <_svfiprintf_r+0x1c6>
 800c224:	2300      	movs	r3, #0
 800c226:	f04f 32ff 	mov.w	r2, #4294967295
 800c22a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c22e:	f10a 0a01 	add.w	sl, sl, #1
 800c232:	9304      	str	r3, [sp, #16]
 800c234:	9307      	str	r3, [sp, #28]
 800c236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c23a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c23c:	4654      	mov	r4, sl
 800c23e:	2205      	movs	r2, #5
 800c240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c244:	484e      	ldr	r0, [pc, #312]	@ (800c380 <_svfiprintf_r+0x1e4>)
 800c246:	f7f3 ffe3 	bl	8000210 <memchr>
 800c24a:	9a04      	ldr	r2, [sp, #16]
 800c24c:	b9d8      	cbnz	r0, 800c286 <_svfiprintf_r+0xea>
 800c24e:	06d0      	lsls	r0, r2, #27
 800c250:	bf44      	itt	mi
 800c252:	2320      	movmi	r3, #32
 800c254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c258:	0711      	lsls	r1, r2, #28
 800c25a:	bf44      	itt	mi
 800c25c:	232b      	movmi	r3, #43	@ 0x2b
 800c25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c262:	f89a 3000 	ldrb.w	r3, [sl]
 800c266:	2b2a      	cmp	r3, #42	@ 0x2a
 800c268:	d015      	beq.n	800c296 <_svfiprintf_r+0xfa>
 800c26a:	9a07      	ldr	r2, [sp, #28]
 800c26c:	4654      	mov	r4, sl
 800c26e:	2000      	movs	r0, #0
 800c270:	f04f 0c0a 	mov.w	ip, #10
 800c274:	4621      	mov	r1, r4
 800c276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c27a:	3b30      	subs	r3, #48	@ 0x30
 800c27c:	2b09      	cmp	r3, #9
 800c27e:	d94b      	bls.n	800c318 <_svfiprintf_r+0x17c>
 800c280:	b1b0      	cbz	r0, 800c2b0 <_svfiprintf_r+0x114>
 800c282:	9207      	str	r2, [sp, #28]
 800c284:	e014      	b.n	800c2b0 <_svfiprintf_r+0x114>
 800c286:	eba0 0308 	sub.w	r3, r0, r8
 800c28a:	fa09 f303 	lsl.w	r3, r9, r3
 800c28e:	4313      	orrs	r3, r2
 800c290:	9304      	str	r3, [sp, #16]
 800c292:	46a2      	mov	sl, r4
 800c294:	e7d2      	b.n	800c23c <_svfiprintf_r+0xa0>
 800c296:	9b03      	ldr	r3, [sp, #12]
 800c298:	1d19      	adds	r1, r3, #4
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	9103      	str	r1, [sp, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	bfbb      	ittet	lt
 800c2a2:	425b      	neglt	r3, r3
 800c2a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2a8:	9307      	strge	r3, [sp, #28]
 800c2aa:	9307      	strlt	r3, [sp, #28]
 800c2ac:	bfb8      	it	lt
 800c2ae:	9204      	strlt	r2, [sp, #16]
 800c2b0:	7823      	ldrb	r3, [r4, #0]
 800c2b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2b4:	d10a      	bne.n	800c2cc <_svfiprintf_r+0x130>
 800c2b6:	7863      	ldrb	r3, [r4, #1]
 800c2b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2ba:	d132      	bne.n	800c322 <_svfiprintf_r+0x186>
 800c2bc:	9b03      	ldr	r3, [sp, #12]
 800c2be:	1d1a      	adds	r2, r3, #4
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	9203      	str	r2, [sp, #12]
 800c2c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2c8:	3402      	adds	r4, #2
 800c2ca:	9305      	str	r3, [sp, #20]
 800c2cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c390 <_svfiprintf_r+0x1f4>
 800c2d0:	7821      	ldrb	r1, [r4, #0]
 800c2d2:	2203      	movs	r2, #3
 800c2d4:	4650      	mov	r0, sl
 800c2d6:	f7f3 ff9b 	bl	8000210 <memchr>
 800c2da:	b138      	cbz	r0, 800c2ec <_svfiprintf_r+0x150>
 800c2dc:	9b04      	ldr	r3, [sp, #16]
 800c2de:	eba0 000a 	sub.w	r0, r0, sl
 800c2e2:	2240      	movs	r2, #64	@ 0x40
 800c2e4:	4082      	lsls	r2, r0
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	3401      	adds	r4, #1
 800c2ea:	9304      	str	r3, [sp, #16]
 800c2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f0:	4824      	ldr	r0, [pc, #144]	@ (800c384 <_svfiprintf_r+0x1e8>)
 800c2f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2f6:	2206      	movs	r2, #6
 800c2f8:	f7f3 ff8a 	bl	8000210 <memchr>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d036      	beq.n	800c36e <_svfiprintf_r+0x1d2>
 800c300:	4b21      	ldr	r3, [pc, #132]	@ (800c388 <_svfiprintf_r+0x1ec>)
 800c302:	bb1b      	cbnz	r3, 800c34c <_svfiprintf_r+0x1b0>
 800c304:	9b03      	ldr	r3, [sp, #12]
 800c306:	3307      	adds	r3, #7
 800c308:	f023 0307 	bic.w	r3, r3, #7
 800c30c:	3308      	adds	r3, #8
 800c30e:	9303      	str	r3, [sp, #12]
 800c310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c312:	4433      	add	r3, r6
 800c314:	9309      	str	r3, [sp, #36]	@ 0x24
 800c316:	e76a      	b.n	800c1ee <_svfiprintf_r+0x52>
 800c318:	fb0c 3202 	mla	r2, ip, r2, r3
 800c31c:	460c      	mov	r4, r1
 800c31e:	2001      	movs	r0, #1
 800c320:	e7a8      	b.n	800c274 <_svfiprintf_r+0xd8>
 800c322:	2300      	movs	r3, #0
 800c324:	3401      	adds	r4, #1
 800c326:	9305      	str	r3, [sp, #20]
 800c328:	4619      	mov	r1, r3
 800c32a:	f04f 0c0a 	mov.w	ip, #10
 800c32e:	4620      	mov	r0, r4
 800c330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c334:	3a30      	subs	r2, #48	@ 0x30
 800c336:	2a09      	cmp	r2, #9
 800c338:	d903      	bls.n	800c342 <_svfiprintf_r+0x1a6>
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d0c6      	beq.n	800c2cc <_svfiprintf_r+0x130>
 800c33e:	9105      	str	r1, [sp, #20]
 800c340:	e7c4      	b.n	800c2cc <_svfiprintf_r+0x130>
 800c342:	fb0c 2101 	mla	r1, ip, r1, r2
 800c346:	4604      	mov	r4, r0
 800c348:	2301      	movs	r3, #1
 800c34a:	e7f0      	b.n	800c32e <_svfiprintf_r+0x192>
 800c34c:	ab03      	add	r3, sp, #12
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	462a      	mov	r2, r5
 800c352:	4b0e      	ldr	r3, [pc, #56]	@ (800c38c <_svfiprintf_r+0x1f0>)
 800c354:	a904      	add	r1, sp, #16
 800c356:	4638      	mov	r0, r7
 800c358:	f7fd fe94 	bl	800a084 <_printf_float>
 800c35c:	1c42      	adds	r2, r0, #1
 800c35e:	4606      	mov	r6, r0
 800c360:	d1d6      	bne.n	800c310 <_svfiprintf_r+0x174>
 800c362:	89ab      	ldrh	r3, [r5, #12]
 800c364:	065b      	lsls	r3, r3, #25
 800c366:	f53f af2d 	bmi.w	800c1c4 <_svfiprintf_r+0x28>
 800c36a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c36c:	e72c      	b.n	800c1c8 <_svfiprintf_r+0x2c>
 800c36e:	ab03      	add	r3, sp, #12
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	462a      	mov	r2, r5
 800c374:	4b05      	ldr	r3, [pc, #20]	@ (800c38c <_svfiprintf_r+0x1f0>)
 800c376:	a904      	add	r1, sp, #16
 800c378:	4638      	mov	r0, r7
 800c37a:	f7fe f91b 	bl	800a5b4 <_printf_i>
 800c37e:	e7ed      	b.n	800c35c <_svfiprintf_r+0x1c0>
 800c380:	0800de0a 	.word	0x0800de0a
 800c384:	0800de14 	.word	0x0800de14
 800c388:	0800a085 	.word	0x0800a085
 800c38c:	0800c0e5 	.word	0x0800c0e5
 800c390:	0800de10 	.word	0x0800de10

0800c394 <__sflush_r>:
 800c394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c39c:	0716      	lsls	r6, r2, #28
 800c39e:	4605      	mov	r5, r0
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	d454      	bmi.n	800c44e <__sflush_r+0xba>
 800c3a4:	684b      	ldr	r3, [r1, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	dc02      	bgt.n	800c3b0 <__sflush_r+0x1c>
 800c3aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	dd48      	ble.n	800c442 <__sflush_r+0xae>
 800c3b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3b2:	2e00      	cmp	r6, #0
 800c3b4:	d045      	beq.n	800c442 <__sflush_r+0xae>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3bc:	682f      	ldr	r7, [r5, #0]
 800c3be:	6a21      	ldr	r1, [r4, #32]
 800c3c0:	602b      	str	r3, [r5, #0]
 800c3c2:	d030      	beq.n	800c426 <__sflush_r+0x92>
 800c3c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	0759      	lsls	r1, r3, #29
 800c3ca:	d505      	bpl.n	800c3d8 <__sflush_r+0x44>
 800c3cc:	6863      	ldr	r3, [r4, #4]
 800c3ce:	1ad2      	subs	r2, r2, r3
 800c3d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3d2:	b10b      	cbz	r3, 800c3d8 <__sflush_r+0x44>
 800c3d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3d6:	1ad2      	subs	r2, r2, r3
 800c3d8:	2300      	movs	r3, #0
 800c3da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3dc:	6a21      	ldr	r1, [r4, #32]
 800c3de:	4628      	mov	r0, r5
 800c3e0:	47b0      	blx	r6
 800c3e2:	1c43      	adds	r3, r0, #1
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	d106      	bne.n	800c3f6 <__sflush_r+0x62>
 800c3e8:	6829      	ldr	r1, [r5, #0]
 800c3ea:	291d      	cmp	r1, #29
 800c3ec:	d82b      	bhi.n	800c446 <__sflush_r+0xb2>
 800c3ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c498 <__sflush_r+0x104>)
 800c3f0:	40ca      	lsrs	r2, r1
 800c3f2:	07d6      	lsls	r6, r2, #31
 800c3f4:	d527      	bpl.n	800c446 <__sflush_r+0xb2>
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	6062      	str	r2, [r4, #4]
 800c3fa:	04d9      	lsls	r1, r3, #19
 800c3fc:	6922      	ldr	r2, [r4, #16]
 800c3fe:	6022      	str	r2, [r4, #0]
 800c400:	d504      	bpl.n	800c40c <__sflush_r+0x78>
 800c402:	1c42      	adds	r2, r0, #1
 800c404:	d101      	bne.n	800c40a <__sflush_r+0x76>
 800c406:	682b      	ldr	r3, [r5, #0]
 800c408:	b903      	cbnz	r3, 800c40c <__sflush_r+0x78>
 800c40a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c40c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c40e:	602f      	str	r7, [r5, #0]
 800c410:	b1b9      	cbz	r1, 800c442 <__sflush_r+0xae>
 800c412:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c416:	4299      	cmp	r1, r3
 800c418:	d002      	beq.n	800c420 <__sflush_r+0x8c>
 800c41a:	4628      	mov	r0, r5
 800c41c:	f7ff f9e8 	bl	800b7f0 <_free_r>
 800c420:	2300      	movs	r3, #0
 800c422:	6363      	str	r3, [r4, #52]	@ 0x34
 800c424:	e00d      	b.n	800c442 <__sflush_r+0xae>
 800c426:	2301      	movs	r3, #1
 800c428:	4628      	mov	r0, r5
 800c42a:	47b0      	blx	r6
 800c42c:	4602      	mov	r2, r0
 800c42e:	1c50      	adds	r0, r2, #1
 800c430:	d1c9      	bne.n	800c3c6 <__sflush_r+0x32>
 800c432:	682b      	ldr	r3, [r5, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d0c6      	beq.n	800c3c6 <__sflush_r+0x32>
 800c438:	2b1d      	cmp	r3, #29
 800c43a:	d001      	beq.n	800c440 <__sflush_r+0xac>
 800c43c:	2b16      	cmp	r3, #22
 800c43e:	d11e      	bne.n	800c47e <__sflush_r+0xea>
 800c440:	602f      	str	r7, [r5, #0]
 800c442:	2000      	movs	r0, #0
 800c444:	e022      	b.n	800c48c <__sflush_r+0xf8>
 800c446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c44a:	b21b      	sxth	r3, r3
 800c44c:	e01b      	b.n	800c486 <__sflush_r+0xf2>
 800c44e:	690f      	ldr	r7, [r1, #16]
 800c450:	2f00      	cmp	r7, #0
 800c452:	d0f6      	beq.n	800c442 <__sflush_r+0xae>
 800c454:	0793      	lsls	r3, r2, #30
 800c456:	680e      	ldr	r6, [r1, #0]
 800c458:	bf08      	it	eq
 800c45a:	694b      	ldreq	r3, [r1, #20]
 800c45c:	600f      	str	r7, [r1, #0]
 800c45e:	bf18      	it	ne
 800c460:	2300      	movne	r3, #0
 800c462:	eba6 0807 	sub.w	r8, r6, r7
 800c466:	608b      	str	r3, [r1, #8]
 800c468:	f1b8 0f00 	cmp.w	r8, #0
 800c46c:	dde9      	ble.n	800c442 <__sflush_r+0xae>
 800c46e:	6a21      	ldr	r1, [r4, #32]
 800c470:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c472:	4643      	mov	r3, r8
 800c474:	463a      	mov	r2, r7
 800c476:	4628      	mov	r0, r5
 800c478:	47b0      	blx	r6
 800c47a:	2800      	cmp	r0, #0
 800c47c:	dc08      	bgt.n	800c490 <__sflush_r+0xfc>
 800c47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c486:	81a3      	strh	r3, [r4, #12]
 800c488:	f04f 30ff 	mov.w	r0, #4294967295
 800c48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c490:	4407      	add	r7, r0
 800c492:	eba8 0800 	sub.w	r8, r8, r0
 800c496:	e7e7      	b.n	800c468 <__sflush_r+0xd4>
 800c498:	20400001 	.word	0x20400001

0800c49c <_fflush_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	690b      	ldr	r3, [r1, #16]
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	b913      	cbnz	r3, 800c4ac <_fflush_r+0x10>
 800c4a6:	2500      	movs	r5, #0
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
 800c4ac:	b118      	cbz	r0, 800c4b6 <_fflush_r+0x1a>
 800c4ae:	6a03      	ldr	r3, [r0, #32]
 800c4b0:	b90b      	cbnz	r3, 800c4b6 <_fflush_r+0x1a>
 800c4b2:	f7fe fa29 	bl	800a908 <__sinit>
 800c4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d0f3      	beq.n	800c4a6 <_fflush_r+0xa>
 800c4be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4c0:	07d0      	lsls	r0, r2, #31
 800c4c2:	d404      	bmi.n	800c4ce <_fflush_r+0x32>
 800c4c4:	0599      	lsls	r1, r3, #22
 800c4c6:	d402      	bmi.n	800c4ce <_fflush_r+0x32>
 800c4c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4ca:	f7fe fb36 	bl	800ab3a <__retarget_lock_acquire_recursive>
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	f7ff ff5f 	bl	800c394 <__sflush_r>
 800c4d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4d8:	07da      	lsls	r2, r3, #31
 800c4da:	4605      	mov	r5, r0
 800c4dc:	d4e4      	bmi.n	800c4a8 <_fflush_r+0xc>
 800c4de:	89a3      	ldrh	r3, [r4, #12]
 800c4e0:	059b      	lsls	r3, r3, #22
 800c4e2:	d4e1      	bmi.n	800c4a8 <_fflush_r+0xc>
 800c4e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4e6:	f7fe fb29 	bl	800ab3c <__retarget_lock_release_recursive>
 800c4ea:	e7dd      	b.n	800c4a8 <_fflush_r+0xc>

0800c4ec <memmove>:
 800c4ec:	4288      	cmp	r0, r1
 800c4ee:	b510      	push	{r4, lr}
 800c4f0:	eb01 0402 	add.w	r4, r1, r2
 800c4f4:	d902      	bls.n	800c4fc <memmove+0x10>
 800c4f6:	4284      	cmp	r4, r0
 800c4f8:	4623      	mov	r3, r4
 800c4fa:	d807      	bhi.n	800c50c <memmove+0x20>
 800c4fc:	1e43      	subs	r3, r0, #1
 800c4fe:	42a1      	cmp	r1, r4
 800c500:	d008      	beq.n	800c514 <memmove+0x28>
 800c502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c50a:	e7f8      	b.n	800c4fe <memmove+0x12>
 800c50c:	4402      	add	r2, r0
 800c50e:	4601      	mov	r1, r0
 800c510:	428a      	cmp	r2, r1
 800c512:	d100      	bne.n	800c516 <memmove+0x2a>
 800c514:	bd10      	pop	{r4, pc}
 800c516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c51e:	e7f7      	b.n	800c510 <memmove+0x24>

0800c520 <_sbrk_r>:
 800c520:	b538      	push	{r3, r4, r5, lr}
 800c522:	4d06      	ldr	r5, [pc, #24]	@ (800c53c <_sbrk_r+0x1c>)
 800c524:	2300      	movs	r3, #0
 800c526:	4604      	mov	r4, r0
 800c528:	4608      	mov	r0, r1
 800c52a:	602b      	str	r3, [r5, #0]
 800c52c:	f7f7 fcd0 	bl	8003ed0 <_sbrk>
 800c530:	1c43      	adds	r3, r0, #1
 800c532:	d102      	bne.n	800c53a <_sbrk_r+0x1a>
 800c534:	682b      	ldr	r3, [r5, #0]
 800c536:	b103      	cbz	r3, 800c53a <_sbrk_r+0x1a>
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	bd38      	pop	{r3, r4, r5, pc}
 800c53c:	200145f8 	.word	0x200145f8

0800c540 <memcpy>:
 800c540:	440a      	add	r2, r1
 800c542:	4291      	cmp	r1, r2
 800c544:	f100 33ff 	add.w	r3, r0, #4294967295
 800c548:	d100      	bne.n	800c54c <memcpy+0xc>
 800c54a:	4770      	bx	lr
 800c54c:	b510      	push	{r4, lr}
 800c54e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c552:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c556:	4291      	cmp	r1, r2
 800c558:	d1f9      	bne.n	800c54e <memcpy+0xe>
 800c55a:	bd10      	pop	{r4, pc}

0800c55c <__assert_func>:
 800c55c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c55e:	4614      	mov	r4, r2
 800c560:	461a      	mov	r2, r3
 800c562:	4b09      	ldr	r3, [pc, #36]	@ (800c588 <__assert_func+0x2c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4605      	mov	r5, r0
 800c568:	68d8      	ldr	r0, [r3, #12]
 800c56a:	b14c      	cbz	r4, 800c580 <__assert_func+0x24>
 800c56c:	4b07      	ldr	r3, [pc, #28]	@ (800c58c <__assert_func+0x30>)
 800c56e:	9100      	str	r1, [sp, #0]
 800c570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c574:	4906      	ldr	r1, [pc, #24]	@ (800c590 <__assert_func+0x34>)
 800c576:	462b      	mov	r3, r5
 800c578:	f000 f870 	bl	800c65c <fiprintf>
 800c57c:	f000 f880 	bl	800c680 <abort>
 800c580:	4b04      	ldr	r3, [pc, #16]	@ (800c594 <__assert_func+0x38>)
 800c582:	461c      	mov	r4, r3
 800c584:	e7f3      	b.n	800c56e <__assert_func+0x12>
 800c586:	bf00      	nop
 800c588:	20000018 	.word	0x20000018
 800c58c:	0800de25 	.word	0x0800de25
 800c590:	0800de32 	.word	0x0800de32
 800c594:	0800de60 	.word	0x0800de60

0800c598 <_calloc_r>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	fba1 5402 	umull	r5, r4, r1, r2
 800c59e:	b934      	cbnz	r4, 800c5ae <_calloc_r+0x16>
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	f7ff f999 	bl	800b8d8 <_malloc_r>
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	b928      	cbnz	r0, 800c5b6 <_calloc_r+0x1e>
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	bd70      	pop	{r4, r5, r6, pc}
 800c5ae:	220c      	movs	r2, #12
 800c5b0:	6002      	str	r2, [r0, #0]
 800c5b2:	2600      	movs	r6, #0
 800c5b4:	e7f9      	b.n	800c5aa <_calloc_r+0x12>
 800c5b6:	462a      	mov	r2, r5
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	f7fe fa40 	bl	800aa3e <memset>
 800c5be:	e7f4      	b.n	800c5aa <_calloc_r+0x12>

0800c5c0 <__ascii_mbtowc>:
 800c5c0:	b082      	sub	sp, #8
 800c5c2:	b901      	cbnz	r1, 800c5c6 <__ascii_mbtowc+0x6>
 800c5c4:	a901      	add	r1, sp, #4
 800c5c6:	b142      	cbz	r2, 800c5da <__ascii_mbtowc+0x1a>
 800c5c8:	b14b      	cbz	r3, 800c5de <__ascii_mbtowc+0x1e>
 800c5ca:	7813      	ldrb	r3, [r2, #0]
 800c5cc:	600b      	str	r3, [r1, #0]
 800c5ce:	7812      	ldrb	r2, [r2, #0]
 800c5d0:	1e10      	subs	r0, r2, #0
 800c5d2:	bf18      	it	ne
 800c5d4:	2001      	movne	r0, #1
 800c5d6:	b002      	add	sp, #8
 800c5d8:	4770      	bx	lr
 800c5da:	4610      	mov	r0, r2
 800c5dc:	e7fb      	b.n	800c5d6 <__ascii_mbtowc+0x16>
 800c5de:	f06f 0001 	mvn.w	r0, #1
 800c5e2:	e7f8      	b.n	800c5d6 <__ascii_mbtowc+0x16>

0800c5e4 <_realloc_r>:
 800c5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e8:	4607      	mov	r7, r0
 800c5ea:	4614      	mov	r4, r2
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	b921      	cbnz	r1, 800c5fa <_realloc_r+0x16>
 800c5f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	f7ff b96f 	b.w	800b8d8 <_malloc_r>
 800c5fa:	b92a      	cbnz	r2, 800c608 <_realloc_r+0x24>
 800c5fc:	f7ff f8f8 	bl	800b7f0 <_free_r>
 800c600:	4625      	mov	r5, r4
 800c602:	4628      	mov	r0, r5
 800c604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c608:	f000 f841 	bl	800c68e <_malloc_usable_size_r>
 800c60c:	4284      	cmp	r4, r0
 800c60e:	4606      	mov	r6, r0
 800c610:	d802      	bhi.n	800c618 <_realloc_r+0x34>
 800c612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c616:	d8f4      	bhi.n	800c602 <_realloc_r+0x1e>
 800c618:	4621      	mov	r1, r4
 800c61a:	4638      	mov	r0, r7
 800c61c:	f7ff f95c 	bl	800b8d8 <_malloc_r>
 800c620:	4680      	mov	r8, r0
 800c622:	b908      	cbnz	r0, 800c628 <_realloc_r+0x44>
 800c624:	4645      	mov	r5, r8
 800c626:	e7ec      	b.n	800c602 <_realloc_r+0x1e>
 800c628:	42b4      	cmp	r4, r6
 800c62a:	4622      	mov	r2, r4
 800c62c:	4629      	mov	r1, r5
 800c62e:	bf28      	it	cs
 800c630:	4632      	movcs	r2, r6
 800c632:	f7ff ff85 	bl	800c540 <memcpy>
 800c636:	4629      	mov	r1, r5
 800c638:	4638      	mov	r0, r7
 800c63a:	f7ff f8d9 	bl	800b7f0 <_free_r>
 800c63e:	e7f1      	b.n	800c624 <_realloc_r+0x40>

0800c640 <__ascii_wctomb>:
 800c640:	4603      	mov	r3, r0
 800c642:	4608      	mov	r0, r1
 800c644:	b141      	cbz	r1, 800c658 <__ascii_wctomb+0x18>
 800c646:	2aff      	cmp	r2, #255	@ 0xff
 800c648:	d904      	bls.n	800c654 <__ascii_wctomb+0x14>
 800c64a:	228a      	movs	r2, #138	@ 0x8a
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	f04f 30ff 	mov.w	r0, #4294967295
 800c652:	4770      	bx	lr
 800c654:	700a      	strb	r2, [r1, #0]
 800c656:	2001      	movs	r0, #1
 800c658:	4770      	bx	lr
	...

0800c65c <fiprintf>:
 800c65c:	b40e      	push	{r1, r2, r3}
 800c65e:	b503      	push	{r0, r1, lr}
 800c660:	4601      	mov	r1, r0
 800c662:	ab03      	add	r3, sp, #12
 800c664:	4805      	ldr	r0, [pc, #20]	@ (800c67c <fiprintf+0x20>)
 800c666:	f853 2b04 	ldr.w	r2, [r3], #4
 800c66a:	6800      	ldr	r0, [r0, #0]
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	f000 f83f 	bl	800c6f0 <_vfiprintf_r>
 800c672:	b002      	add	sp, #8
 800c674:	f85d eb04 	ldr.w	lr, [sp], #4
 800c678:	b003      	add	sp, #12
 800c67a:	4770      	bx	lr
 800c67c:	20000018 	.word	0x20000018

0800c680 <abort>:
 800c680:	b508      	push	{r3, lr}
 800c682:	2006      	movs	r0, #6
 800c684:	f000 fa08 	bl	800ca98 <raise>
 800c688:	2001      	movs	r0, #1
 800c68a:	f7f7 fba9 	bl	8003de0 <_exit>

0800c68e <_malloc_usable_size_r>:
 800c68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c692:	1f18      	subs	r0, r3, #4
 800c694:	2b00      	cmp	r3, #0
 800c696:	bfbc      	itt	lt
 800c698:	580b      	ldrlt	r3, [r1, r0]
 800c69a:	18c0      	addlt	r0, r0, r3
 800c69c:	4770      	bx	lr

0800c69e <__sfputc_r>:
 800c69e:	6893      	ldr	r3, [r2, #8]
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	b410      	push	{r4}
 800c6a6:	6093      	str	r3, [r2, #8]
 800c6a8:	da08      	bge.n	800c6bc <__sfputc_r+0x1e>
 800c6aa:	6994      	ldr	r4, [r2, #24]
 800c6ac:	42a3      	cmp	r3, r4
 800c6ae:	db01      	blt.n	800c6b4 <__sfputc_r+0x16>
 800c6b0:	290a      	cmp	r1, #10
 800c6b2:	d103      	bne.n	800c6bc <__sfputc_r+0x1e>
 800c6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b8:	f000 b932 	b.w	800c920 <__swbuf_r>
 800c6bc:	6813      	ldr	r3, [r2, #0]
 800c6be:	1c58      	adds	r0, r3, #1
 800c6c0:	6010      	str	r0, [r2, #0]
 800c6c2:	7019      	strb	r1, [r3, #0]
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <__sfputs_r>:
 800c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	4614      	mov	r4, r2
 800c6d4:	18d5      	adds	r5, r2, r3
 800c6d6:	42ac      	cmp	r4, r5
 800c6d8:	d101      	bne.n	800c6de <__sfputs_r+0x12>
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e007      	b.n	800c6ee <__sfputs_r+0x22>
 800c6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e2:	463a      	mov	r2, r7
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f7ff ffda 	bl	800c69e <__sfputc_r>
 800c6ea:	1c43      	adds	r3, r0, #1
 800c6ec:	d1f3      	bne.n	800c6d6 <__sfputs_r+0xa>
 800c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6f0 <_vfiprintf_r>:
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	460d      	mov	r5, r1
 800c6f6:	b09d      	sub	sp, #116	@ 0x74
 800c6f8:	4614      	mov	r4, r2
 800c6fa:	4698      	mov	r8, r3
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	b118      	cbz	r0, 800c708 <_vfiprintf_r+0x18>
 800c700:	6a03      	ldr	r3, [r0, #32]
 800c702:	b90b      	cbnz	r3, 800c708 <_vfiprintf_r+0x18>
 800c704:	f7fe f900 	bl	800a908 <__sinit>
 800c708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c70a:	07d9      	lsls	r1, r3, #31
 800c70c:	d405      	bmi.n	800c71a <_vfiprintf_r+0x2a>
 800c70e:	89ab      	ldrh	r3, [r5, #12]
 800c710:	059a      	lsls	r2, r3, #22
 800c712:	d402      	bmi.n	800c71a <_vfiprintf_r+0x2a>
 800c714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c716:	f7fe fa10 	bl	800ab3a <__retarget_lock_acquire_recursive>
 800c71a:	89ab      	ldrh	r3, [r5, #12]
 800c71c:	071b      	lsls	r3, r3, #28
 800c71e:	d501      	bpl.n	800c724 <_vfiprintf_r+0x34>
 800c720:	692b      	ldr	r3, [r5, #16]
 800c722:	b99b      	cbnz	r3, 800c74c <_vfiprintf_r+0x5c>
 800c724:	4629      	mov	r1, r5
 800c726:	4630      	mov	r0, r6
 800c728:	f000 f938 	bl	800c99c <__swsetup_r>
 800c72c:	b170      	cbz	r0, 800c74c <_vfiprintf_r+0x5c>
 800c72e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c730:	07dc      	lsls	r4, r3, #31
 800c732:	d504      	bpl.n	800c73e <_vfiprintf_r+0x4e>
 800c734:	f04f 30ff 	mov.w	r0, #4294967295
 800c738:	b01d      	add	sp, #116	@ 0x74
 800c73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73e:	89ab      	ldrh	r3, [r5, #12]
 800c740:	0598      	lsls	r0, r3, #22
 800c742:	d4f7      	bmi.n	800c734 <_vfiprintf_r+0x44>
 800c744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c746:	f7fe f9f9 	bl	800ab3c <__retarget_lock_release_recursive>
 800c74a:	e7f3      	b.n	800c734 <_vfiprintf_r+0x44>
 800c74c:	2300      	movs	r3, #0
 800c74e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c750:	2320      	movs	r3, #32
 800c752:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c756:	f8cd 800c 	str.w	r8, [sp, #12]
 800c75a:	2330      	movs	r3, #48	@ 0x30
 800c75c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c90c <_vfiprintf_r+0x21c>
 800c760:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c764:	f04f 0901 	mov.w	r9, #1
 800c768:	4623      	mov	r3, r4
 800c76a:	469a      	mov	sl, r3
 800c76c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c770:	b10a      	cbz	r2, 800c776 <_vfiprintf_r+0x86>
 800c772:	2a25      	cmp	r2, #37	@ 0x25
 800c774:	d1f9      	bne.n	800c76a <_vfiprintf_r+0x7a>
 800c776:	ebba 0b04 	subs.w	fp, sl, r4
 800c77a:	d00b      	beq.n	800c794 <_vfiprintf_r+0xa4>
 800c77c:	465b      	mov	r3, fp
 800c77e:	4622      	mov	r2, r4
 800c780:	4629      	mov	r1, r5
 800c782:	4630      	mov	r0, r6
 800c784:	f7ff ffa2 	bl	800c6cc <__sfputs_r>
 800c788:	3001      	adds	r0, #1
 800c78a:	f000 80a7 	beq.w	800c8dc <_vfiprintf_r+0x1ec>
 800c78e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c790:	445a      	add	r2, fp
 800c792:	9209      	str	r2, [sp, #36]	@ 0x24
 800c794:	f89a 3000 	ldrb.w	r3, [sl]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 809f 	beq.w	800c8dc <_vfiprintf_r+0x1ec>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a8:	f10a 0a01 	add.w	sl, sl, #1
 800c7ac:	9304      	str	r3, [sp, #16]
 800c7ae:	9307      	str	r3, [sp, #28]
 800c7b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7b6:	4654      	mov	r4, sl
 800c7b8:	2205      	movs	r2, #5
 800c7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7be:	4853      	ldr	r0, [pc, #332]	@ (800c90c <_vfiprintf_r+0x21c>)
 800c7c0:	f7f3 fd26 	bl	8000210 <memchr>
 800c7c4:	9a04      	ldr	r2, [sp, #16]
 800c7c6:	b9d8      	cbnz	r0, 800c800 <_vfiprintf_r+0x110>
 800c7c8:	06d1      	lsls	r1, r2, #27
 800c7ca:	bf44      	itt	mi
 800c7cc:	2320      	movmi	r3, #32
 800c7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7d2:	0713      	lsls	r3, r2, #28
 800c7d4:	bf44      	itt	mi
 800c7d6:	232b      	movmi	r3, #43	@ 0x2b
 800c7d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c7e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7e2:	d015      	beq.n	800c810 <_vfiprintf_r+0x120>
 800c7e4:	9a07      	ldr	r2, [sp, #28]
 800c7e6:	4654      	mov	r4, sl
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	f04f 0c0a 	mov.w	ip, #10
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7f4:	3b30      	subs	r3, #48	@ 0x30
 800c7f6:	2b09      	cmp	r3, #9
 800c7f8:	d94b      	bls.n	800c892 <_vfiprintf_r+0x1a2>
 800c7fa:	b1b0      	cbz	r0, 800c82a <_vfiprintf_r+0x13a>
 800c7fc:	9207      	str	r2, [sp, #28]
 800c7fe:	e014      	b.n	800c82a <_vfiprintf_r+0x13a>
 800c800:	eba0 0308 	sub.w	r3, r0, r8
 800c804:	fa09 f303 	lsl.w	r3, r9, r3
 800c808:	4313      	orrs	r3, r2
 800c80a:	9304      	str	r3, [sp, #16]
 800c80c:	46a2      	mov	sl, r4
 800c80e:	e7d2      	b.n	800c7b6 <_vfiprintf_r+0xc6>
 800c810:	9b03      	ldr	r3, [sp, #12]
 800c812:	1d19      	adds	r1, r3, #4
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	9103      	str	r1, [sp, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	bfbb      	ittet	lt
 800c81c:	425b      	neglt	r3, r3
 800c81e:	f042 0202 	orrlt.w	r2, r2, #2
 800c822:	9307      	strge	r3, [sp, #28]
 800c824:	9307      	strlt	r3, [sp, #28]
 800c826:	bfb8      	it	lt
 800c828:	9204      	strlt	r2, [sp, #16]
 800c82a:	7823      	ldrb	r3, [r4, #0]
 800c82c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c82e:	d10a      	bne.n	800c846 <_vfiprintf_r+0x156>
 800c830:	7863      	ldrb	r3, [r4, #1]
 800c832:	2b2a      	cmp	r3, #42	@ 0x2a
 800c834:	d132      	bne.n	800c89c <_vfiprintf_r+0x1ac>
 800c836:	9b03      	ldr	r3, [sp, #12]
 800c838:	1d1a      	adds	r2, r3, #4
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	9203      	str	r2, [sp, #12]
 800c83e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c842:	3402      	adds	r4, #2
 800c844:	9305      	str	r3, [sp, #20]
 800c846:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c91c <_vfiprintf_r+0x22c>
 800c84a:	7821      	ldrb	r1, [r4, #0]
 800c84c:	2203      	movs	r2, #3
 800c84e:	4650      	mov	r0, sl
 800c850:	f7f3 fcde 	bl	8000210 <memchr>
 800c854:	b138      	cbz	r0, 800c866 <_vfiprintf_r+0x176>
 800c856:	9b04      	ldr	r3, [sp, #16]
 800c858:	eba0 000a 	sub.w	r0, r0, sl
 800c85c:	2240      	movs	r2, #64	@ 0x40
 800c85e:	4082      	lsls	r2, r0
 800c860:	4313      	orrs	r3, r2
 800c862:	3401      	adds	r4, #1
 800c864:	9304      	str	r3, [sp, #16]
 800c866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c86a:	4829      	ldr	r0, [pc, #164]	@ (800c910 <_vfiprintf_r+0x220>)
 800c86c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c870:	2206      	movs	r2, #6
 800c872:	f7f3 fccd 	bl	8000210 <memchr>
 800c876:	2800      	cmp	r0, #0
 800c878:	d03f      	beq.n	800c8fa <_vfiprintf_r+0x20a>
 800c87a:	4b26      	ldr	r3, [pc, #152]	@ (800c914 <_vfiprintf_r+0x224>)
 800c87c:	bb1b      	cbnz	r3, 800c8c6 <_vfiprintf_r+0x1d6>
 800c87e:	9b03      	ldr	r3, [sp, #12]
 800c880:	3307      	adds	r3, #7
 800c882:	f023 0307 	bic.w	r3, r3, #7
 800c886:	3308      	adds	r3, #8
 800c888:	9303      	str	r3, [sp, #12]
 800c88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c88c:	443b      	add	r3, r7
 800c88e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c890:	e76a      	b.n	800c768 <_vfiprintf_r+0x78>
 800c892:	fb0c 3202 	mla	r2, ip, r2, r3
 800c896:	460c      	mov	r4, r1
 800c898:	2001      	movs	r0, #1
 800c89a:	e7a8      	b.n	800c7ee <_vfiprintf_r+0xfe>
 800c89c:	2300      	movs	r3, #0
 800c89e:	3401      	adds	r4, #1
 800c8a0:	9305      	str	r3, [sp, #20]
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	f04f 0c0a 	mov.w	ip, #10
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ae:	3a30      	subs	r2, #48	@ 0x30
 800c8b0:	2a09      	cmp	r2, #9
 800c8b2:	d903      	bls.n	800c8bc <_vfiprintf_r+0x1cc>
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d0c6      	beq.n	800c846 <_vfiprintf_r+0x156>
 800c8b8:	9105      	str	r1, [sp, #20]
 800c8ba:	e7c4      	b.n	800c846 <_vfiprintf_r+0x156>
 800c8bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e7f0      	b.n	800c8a8 <_vfiprintf_r+0x1b8>
 800c8c6:	ab03      	add	r3, sp, #12
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	462a      	mov	r2, r5
 800c8cc:	4b12      	ldr	r3, [pc, #72]	@ (800c918 <_vfiprintf_r+0x228>)
 800c8ce:	a904      	add	r1, sp, #16
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f7fd fbd7 	bl	800a084 <_printf_float>
 800c8d6:	4607      	mov	r7, r0
 800c8d8:	1c78      	adds	r0, r7, #1
 800c8da:	d1d6      	bne.n	800c88a <_vfiprintf_r+0x19a>
 800c8dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8de:	07d9      	lsls	r1, r3, #31
 800c8e0:	d405      	bmi.n	800c8ee <_vfiprintf_r+0x1fe>
 800c8e2:	89ab      	ldrh	r3, [r5, #12]
 800c8e4:	059a      	lsls	r2, r3, #22
 800c8e6:	d402      	bmi.n	800c8ee <_vfiprintf_r+0x1fe>
 800c8e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8ea:	f7fe f927 	bl	800ab3c <__retarget_lock_release_recursive>
 800c8ee:	89ab      	ldrh	r3, [r5, #12]
 800c8f0:	065b      	lsls	r3, r3, #25
 800c8f2:	f53f af1f 	bmi.w	800c734 <_vfiprintf_r+0x44>
 800c8f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8f8:	e71e      	b.n	800c738 <_vfiprintf_r+0x48>
 800c8fa:	ab03      	add	r3, sp, #12
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	462a      	mov	r2, r5
 800c900:	4b05      	ldr	r3, [pc, #20]	@ (800c918 <_vfiprintf_r+0x228>)
 800c902:	a904      	add	r1, sp, #16
 800c904:	4630      	mov	r0, r6
 800c906:	f7fd fe55 	bl	800a5b4 <_printf_i>
 800c90a:	e7e4      	b.n	800c8d6 <_vfiprintf_r+0x1e6>
 800c90c:	0800de0a 	.word	0x0800de0a
 800c910:	0800de14 	.word	0x0800de14
 800c914:	0800a085 	.word	0x0800a085
 800c918:	0800c6cd 	.word	0x0800c6cd
 800c91c:	0800de10 	.word	0x0800de10

0800c920 <__swbuf_r>:
 800c920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c922:	460e      	mov	r6, r1
 800c924:	4614      	mov	r4, r2
 800c926:	4605      	mov	r5, r0
 800c928:	b118      	cbz	r0, 800c932 <__swbuf_r+0x12>
 800c92a:	6a03      	ldr	r3, [r0, #32]
 800c92c:	b90b      	cbnz	r3, 800c932 <__swbuf_r+0x12>
 800c92e:	f7fd ffeb 	bl	800a908 <__sinit>
 800c932:	69a3      	ldr	r3, [r4, #24]
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	071a      	lsls	r2, r3, #28
 800c93a:	d501      	bpl.n	800c940 <__swbuf_r+0x20>
 800c93c:	6923      	ldr	r3, [r4, #16]
 800c93e:	b943      	cbnz	r3, 800c952 <__swbuf_r+0x32>
 800c940:	4621      	mov	r1, r4
 800c942:	4628      	mov	r0, r5
 800c944:	f000 f82a 	bl	800c99c <__swsetup_r>
 800c948:	b118      	cbz	r0, 800c952 <__swbuf_r+0x32>
 800c94a:	f04f 37ff 	mov.w	r7, #4294967295
 800c94e:	4638      	mov	r0, r7
 800c950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	6922      	ldr	r2, [r4, #16]
 800c956:	1a98      	subs	r0, r3, r2
 800c958:	6963      	ldr	r3, [r4, #20]
 800c95a:	b2f6      	uxtb	r6, r6
 800c95c:	4283      	cmp	r3, r0
 800c95e:	4637      	mov	r7, r6
 800c960:	dc05      	bgt.n	800c96e <__swbuf_r+0x4e>
 800c962:	4621      	mov	r1, r4
 800c964:	4628      	mov	r0, r5
 800c966:	f7ff fd99 	bl	800c49c <_fflush_r>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d1ed      	bne.n	800c94a <__swbuf_r+0x2a>
 800c96e:	68a3      	ldr	r3, [r4, #8]
 800c970:	3b01      	subs	r3, #1
 800c972:	60a3      	str	r3, [r4, #8]
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	1c5a      	adds	r2, r3, #1
 800c978:	6022      	str	r2, [r4, #0]
 800c97a:	701e      	strb	r6, [r3, #0]
 800c97c:	6962      	ldr	r2, [r4, #20]
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	429a      	cmp	r2, r3
 800c982:	d004      	beq.n	800c98e <__swbuf_r+0x6e>
 800c984:	89a3      	ldrh	r3, [r4, #12]
 800c986:	07db      	lsls	r3, r3, #31
 800c988:	d5e1      	bpl.n	800c94e <__swbuf_r+0x2e>
 800c98a:	2e0a      	cmp	r6, #10
 800c98c:	d1df      	bne.n	800c94e <__swbuf_r+0x2e>
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	f7ff fd83 	bl	800c49c <_fflush_r>
 800c996:	2800      	cmp	r0, #0
 800c998:	d0d9      	beq.n	800c94e <__swbuf_r+0x2e>
 800c99a:	e7d6      	b.n	800c94a <__swbuf_r+0x2a>

0800c99c <__swsetup_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4b29      	ldr	r3, [pc, #164]	@ (800ca44 <__swsetup_r+0xa8>)
 800c9a0:	4605      	mov	r5, r0
 800c9a2:	6818      	ldr	r0, [r3, #0]
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	b118      	cbz	r0, 800c9b0 <__swsetup_r+0x14>
 800c9a8:	6a03      	ldr	r3, [r0, #32]
 800c9aa:	b90b      	cbnz	r3, 800c9b0 <__swsetup_r+0x14>
 800c9ac:	f7fd ffac 	bl	800a908 <__sinit>
 800c9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b4:	0719      	lsls	r1, r3, #28
 800c9b6:	d422      	bmi.n	800c9fe <__swsetup_r+0x62>
 800c9b8:	06da      	lsls	r2, r3, #27
 800c9ba:	d407      	bmi.n	800c9cc <__swsetup_r+0x30>
 800c9bc:	2209      	movs	r2, #9
 800c9be:	602a      	str	r2, [r5, #0]
 800c9c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ca:	e033      	b.n	800ca34 <__swsetup_r+0x98>
 800c9cc:	0758      	lsls	r0, r3, #29
 800c9ce:	d512      	bpl.n	800c9f6 <__swsetup_r+0x5a>
 800c9d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9d2:	b141      	cbz	r1, 800c9e6 <__swsetup_r+0x4a>
 800c9d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9d8:	4299      	cmp	r1, r3
 800c9da:	d002      	beq.n	800c9e2 <__swsetup_r+0x46>
 800c9dc:	4628      	mov	r0, r5
 800c9de:	f7fe ff07 	bl	800b7f0 <_free_r>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9e6:	89a3      	ldrh	r3, [r4, #12]
 800c9e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9ec:	81a3      	strh	r3, [r4, #12]
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	6063      	str	r3, [r4, #4]
 800c9f2:	6923      	ldr	r3, [r4, #16]
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	f043 0308 	orr.w	r3, r3, #8
 800c9fc:	81a3      	strh	r3, [r4, #12]
 800c9fe:	6923      	ldr	r3, [r4, #16]
 800ca00:	b94b      	cbnz	r3, 800ca16 <__swsetup_r+0x7a>
 800ca02:	89a3      	ldrh	r3, [r4, #12]
 800ca04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca0c:	d003      	beq.n	800ca16 <__swsetup_r+0x7a>
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4628      	mov	r0, r5
 800ca12:	f000 f883 	bl	800cb1c <__smakebuf_r>
 800ca16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca1a:	f013 0201 	ands.w	r2, r3, #1
 800ca1e:	d00a      	beq.n	800ca36 <__swsetup_r+0x9a>
 800ca20:	2200      	movs	r2, #0
 800ca22:	60a2      	str	r2, [r4, #8]
 800ca24:	6962      	ldr	r2, [r4, #20]
 800ca26:	4252      	negs	r2, r2
 800ca28:	61a2      	str	r2, [r4, #24]
 800ca2a:	6922      	ldr	r2, [r4, #16]
 800ca2c:	b942      	cbnz	r2, 800ca40 <__swsetup_r+0xa4>
 800ca2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca32:	d1c5      	bne.n	800c9c0 <__swsetup_r+0x24>
 800ca34:	bd38      	pop	{r3, r4, r5, pc}
 800ca36:	0799      	lsls	r1, r3, #30
 800ca38:	bf58      	it	pl
 800ca3a:	6962      	ldrpl	r2, [r4, #20]
 800ca3c:	60a2      	str	r2, [r4, #8]
 800ca3e:	e7f4      	b.n	800ca2a <__swsetup_r+0x8e>
 800ca40:	2000      	movs	r0, #0
 800ca42:	e7f7      	b.n	800ca34 <__swsetup_r+0x98>
 800ca44:	20000018 	.word	0x20000018

0800ca48 <_raise_r>:
 800ca48:	291f      	cmp	r1, #31
 800ca4a:	b538      	push	{r3, r4, r5, lr}
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	460c      	mov	r4, r1
 800ca50:	d904      	bls.n	800ca5c <_raise_r+0x14>
 800ca52:	2316      	movs	r3, #22
 800ca54:	6003      	str	r3, [r0, #0]
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca5e:	b112      	cbz	r2, 800ca66 <_raise_r+0x1e>
 800ca60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca64:	b94b      	cbnz	r3, 800ca7a <_raise_r+0x32>
 800ca66:	4628      	mov	r0, r5
 800ca68:	f000 f830 	bl	800cacc <_getpid_r>
 800ca6c:	4622      	mov	r2, r4
 800ca6e:	4601      	mov	r1, r0
 800ca70:	4628      	mov	r0, r5
 800ca72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca76:	f000 b817 	b.w	800caa8 <_kill_r>
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d00a      	beq.n	800ca94 <_raise_r+0x4c>
 800ca7e:	1c59      	adds	r1, r3, #1
 800ca80:	d103      	bne.n	800ca8a <_raise_r+0x42>
 800ca82:	2316      	movs	r3, #22
 800ca84:	6003      	str	r3, [r0, #0]
 800ca86:	2001      	movs	r0, #1
 800ca88:	e7e7      	b.n	800ca5a <_raise_r+0x12>
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca90:	4620      	mov	r0, r4
 800ca92:	4798      	blx	r3
 800ca94:	2000      	movs	r0, #0
 800ca96:	e7e0      	b.n	800ca5a <_raise_r+0x12>

0800ca98 <raise>:
 800ca98:	4b02      	ldr	r3, [pc, #8]	@ (800caa4 <raise+0xc>)
 800ca9a:	4601      	mov	r1, r0
 800ca9c:	6818      	ldr	r0, [r3, #0]
 800ca9e:	f7ff bfd3 	b.w	800ca48 <_raise_r>
 800caa2:	bf00      	nop
 800caa4:	20000018 	.word	0x20000018

0800caa8 <_kill_r>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4d07      	ldr	r5, [pc, #28]	@ (800cac8 <_kill_r+0x20>)
 800caac:	2300      	movs	r3, #0
 800caae:	4604      	mov	r4, r0
 800cab0:	4608      	mov	r0, r1
 800cab2:	4611      	mov	r1, r2
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	f7f7 f983 	bl	8003dc0 <_kill>
 800caba:	1c43      	adds	r3, r0, #1
 800cabc:	d102      	bne.n	800cac4 <_kill_r+0x1c>
 800cabe:	682b      	ldr	r3, [r5, #0]
 800cac0:	b103      	cbz	r3, 800cac4 <_kill_r+0x1c>
 800cac2:	6023      	str	r3, [r4, #0]
 800cac4:	bd38      	pop	{r3, r4, r5, pc}
 800cac6:	bf00      	nop
 800cac8:	200145f8 	.word	0x200145f8

0800cacc <_getpid_r>:
 800cacc:	f7f7 b970 	b.w	8003db0 <_getpid>

0800cad0 <__swhatbuf_r>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	460c      	mov	r4, r1
 800cad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad8:	2900      	cmp	r1, #0
 800cada:	b096      	sub	sp, #88	@ 0x58
 800cadc:	4615      	mov	r5, r2
 800cade:	461e      	mov	r6, r3
 800cae0:	da0d      	bge.n	800cafe <__swhatbuf_r+0x2e>
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cae8:	f04f 0100 	mov.w	r1, #0
 800caec:	bf14      	ite	ne
 800caee:	2340      	movne	r3, #64	@ 0x40
 800caf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800caf4:	2000      	movs	r0, #0
 800caf6:	6031      	str	r1, [r6, #0]
 800caf8:	602b      	str	r3, [r5, #0]
 800cafa:	b016      	add	sp, #88	@ 0x58
 800cafc:	bd70      	pop	{r4, r5, r6, pc}
 800cafe:	466a      	mov	r2, sp
 800cb00:	f000 f848 	bl	800cb94 <_fstat_r>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	dbec      	blt.n	800cae2 <__swhatbuf_r+0x12>
 800cb08:	9901      	ldr	r1, [sp, #4]
 800cb0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb12:	4259      	negs	r1, r3
 800cb14:	4159      	adcs	r1, r3
 800cb16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb1a:	e7eb      	b.n	800caf4 <__swhatbuf_r+0x24>

0800cb1c <__smakebuf_r>:
 800cb1c:	898b      	ldrh	r3, [r1, #12]
 800cb1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb20:	079d      	lsls	r5, r3, #30
 800cb22:	4606      	mov	r6, r0
 800cb24:	460c      	mov	r4, r1
 800cb26:	d507      	bpl.n	800cb38 <__smakebuf_r+0x1c>
 800cb28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	6123      	str	r3, [r4, #16]
 800cb30:	2301      	movs	r3, #1
 800cb32:	6163      	str	r3, [r4, #20]
 800cb34:	b003      	add	sp, #12
 800cb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb38:	ab01      	add	r3, sp, #4
 800cb3a:	466a      	mov	r2, sp
 800cb3c:	f7ff ffc8 	bl	800cad0 <__swhatbuf_r>
 800cb40:	9f00      	ldr	r7, [sp, #0]
 800cb42:	4605      	mov	r5, r0
 800cb44:	4639      	mov	r1, r7
 800cb46:	4630      	mov	r0, r6
 800cb48:	f7fe fec6 	bl	800b8d8 <_malloc_r>
 800cb4c:	b948      	cbnz	r0, 800cb62 <__smakebuf_r+0x46>
 800cb4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb52:	059a      	lsls	r2, r3, #22
 800cb54:	d4ee      	bmi.n	800cb34 <__smakebuf_r+0x18>
 800cb56:	f023 0303 	bic.w	r3, r3, #3
 800cb5a:	f043 0302 	orr.w	r3, r3, #2
 800cb5e:	81a3      	strh	r3, [r4, #12]
 800cb60:	e7e2      	b.n	800cb28 <__smakebuf_r+0xc>
 800cb62:	89a3      	ldrh	r3, [r4, #12]
 800cb64:	6020      	str	r0, [r4, #0]
 800cb66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb6a:	81a3      	strh	r3, [r4, #12]
 800cb6c:	9b01      	ldr	r3, [sp, #4]
 800cb6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb72:	b15b      	cbz	r3, 800cb8c <__smakebuf_r+0x70>
 800cb74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f000 f81d 	bl	800cbb8 <_isatty_r>
 800cb7e:	b128      	cbz	r0, 800cb8c <__smakebuf_r+0x70>
 800cb80:	89a3      	ldrh	r3, [r4, #12]
 800cb82:	f023 0303 	bic.w	r3, r3, #3
 800cb86:	f043 0301 	orr.w	r3, r3, #1
 800cb8a:	81a3      	strh	r3, [r4, #12]
 800cb8c:	89a3      	ldrh	r3, [r4, #12]
 800cb8e:	431d      	orrs	r5, r3
 800cb90:	81a5      	strh	r5, [r4, #12]
 800cb92:	e7cf      	b.n	800cb34 <__smakebuf_r+0x18>

0800cb94 <_fstat_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4d07      	ldr	r5, [pc, #28]	@ (800cbb4 <_fstat_r+0x20>)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	4611      	mov	r1, r2
 800cba0:	602b      	str	r3, [r5, #0]
 800cba2:	f7f7 f96d 	bl	8003e80 <_fstat>
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	d102      	bne.n	800cbb0 <_fstat_r+0x1c>
 800cbaa:	682b      	ldr	r3, [r5, #0]
 800cbac:	b103      	cbz	r3, 800cbb0 <_fstat_r+0x1c>
 800cbae:	6023      	str	r3, [r4, #0]
 800cbb0:	bd38      	pop	{r3, r4, r5, pc}
 800cbb2:	bf00      	nop
 800cbb4:	200145f8 	.word	0x200145f8

0800cbb8 <_isatty_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	4d06      	ldr	r5, [pc, #24]	@ (800cbd4 <_isatty_r+0x1c>)
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	4608      	mov	r0, r1
 800cbc2:	602b      	str	r3, [r5, #0]
 800cbc4:	f7f7 f96c 	bl	8003ea0 <_isatty>
 800cbc8:	1c43      	adds	r3, r0, #1
 800cbca:	d102      	bne.n	800cbd2 <_isatty_r+0x1a>
 800cbcc:	682b      	ldr	r3, [r5, #0]
 800cbce:	b103      	cbz	r3, 800cbd2 <_isatty_r+0x1a>
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}
 800cbd4:	200145f8 	.word	0x200145f8

0800cbd8 <sin>:
 800cbd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbda:	ec53 2b10 	vmov	r2, r3, d0
 800cbde:	4826      	ldr	r0, [pc, #152]	@ (800cc78 <sin+0xa0>)
 800cbe0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cbe4:	4281      	cmp	r1, r0
 800cbe6:	d807      	bhi.n	800cbf8 <sin+0x20>
 800cbe8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cc70 <sin+0x98>
 800cbec:	2000      	movs	r0, #0
 800cbee:	b005      	add	sp, #20
 800cbf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbf4:	f000 b90c 	b.w	800ce10 <__kernel_sin>
 800cbf8:	4820      	ldr	r0, [pc, #128]	@ (800cc7c <sin+0xa4>)
 800cbfa:	4281      	cmp	r1, r0
 800cbfc:	d908      	bls.n	800cc10 <sin+0x38>
 800cbfe:	4610      	mov	r0, r2
 800cc00:	4619      	mov	r1, r3
 800cc02:	f7f3 fb61 	bl	80002c8 <__aeabi_dsub>
 800cc06:	ec41 0b10 	vmov	d0, r0, r1
 800cc0a:	b005      	add	sp, #20
 800cc0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc10:	4668      	mov	r0, sp
 800cc12:	f000 f9b9 	bl	800cf88 <__ieee754_rem_pio2>
 800cc16:	f000 0003 	and.w	r0, r0, #3
 800cc1a:	2801      	cmp	r0, #1
 800cc1c:	d00c      	beq.n	800cc38 <sin+0x60>
 800cc1e:	2802      	cmp	r0, #2
 800cc20:	d011      	beq.n	800cc46 <sin+0x6e>
 800cc22:	b9e8      	cbnz	r0, 800cc60 <sin+0x88>
 800cc24:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc28:	ed9d 0b00 	vldr	d0, [sp]
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	f000 f8ef 	bl	800ce10 <__kernel_sin>
 800cc32:	ec51 0b10 	vmov	r0, r1, d0
 800cc36:	e7e6      	b.n	800cc06 <sin+0x2e>
 800cc38:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc3c:	ed9d 0b00 	vldr	d0, [sp]
 800cc40:	f000 f81e 	bl	800cc80 <__kernel_cos>
 800cc44:	e7f5      	b.n	800cc32 <sin+0x5a>
 800cc46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc4a:	ed9d 0b00 	vldr	d0, [sp]
 800cc4e:	2001      	movs	r0, #1
 800cc50:	f000 f8de 	bl	800ce10 <__kernel_sin>
 800cc54:	ec53 2b10 	vmov	r2, r3, d0
 800cc58:	4610      	mov	r0, r2
 800cc5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cc5e:	e7d2      	b.n	800cc06 <sin+0x2e>
 800cc60:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc64:	ed9d 0b00 	vldr	d0, [sp]
 800cc68:	f000 f80a 	bl	800cc80 <__kernel_cos>
 800cc6c:	e7f2      	b.n	800cc54 <sin+0x7c>
 800cc6e:	bf00      	nop
	...
 800cc78:	3fe921fb 	.word	0x3fe921fb
 800cc7c:	7fefffff 	.word	0x7fefffff

0800cc80 <__kernel_cos>:
 800cc80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	ec57 6b10 	vmov	r6, r7, d0
 800cc88:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cc8c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800cc90:	ed8d 1b00 	vstr	d1, [sp]
 800cc94:	d206      	bcs.n	800cca4 <__kernel_cos+0x24>
 800cc96:	4630      	mov	r0, r6
 800cc98:	4639      	mov	r1, r7
 800cc9a:	f7f3 ff7d 	bl	8000b98 <__aeabi_d2iz>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	f000 8088 	beq.w	800cdb4 <__kernel_cos+0x134>
 800cca4:	4632      	mov	r2, r6
 800cca6:	463b      	mov	r3, r7
 800cca8:	4630      	mov	r0, r6
 800ccaa:	4639      	mov	r1, r7
 800ccac:	f7f3 fcc4 	bl	8000638 <__aeabi_dmul>
 800ccb0:	4b51      	ldr	r3, [pc, #324]	@ (800cdf8 <__kernel_cos+0x178>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	f7f3 fcbe 	bl	8000638 <__aeabi_dmul>
 800ccbc:	a340      	add	r3, pc, #256	@ (adr r3, 800cdc0 <__kernel_cos+0x140>)
 800ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc2:	4682      	mov	sl, r0
 800ccc4:	468b      	mov	fp, r1
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	4629      	mov	r1, r5
 800ccca:	f7f3 fcb5 	bl	8000638 <__aeabi_dmul>
 800ccce:	a33e      	add	r3, pc, #248	@ (adr r3, 800cdc8 <__kernel_cos+0x148>)
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	f7f3 fafa 	bl	80002cc <__adddf3>
 800ccd8:	4622      	mov	r2, r4
 800ccda:	462b      	mov	r3, r5
 800ccdc:	f7f3 fcac 	bl	8000638 <__aeabi_dmul>
 800cce0:	a33b      	add	r3, pc, #236	@ (adr r3, 800cdd0 <__kernel_cos+0x150>)
 800cce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce6:	f7f3 faef 	bl	80002c8 <__aeabi_dsub>
 800ccea:	4622      	mov	r2, r4
 800ccec:	462b      	mov	r3, r5
 800ccee:	f7f3 fca3 	bl	8000638 <__aeabi_dmul>
 800ccf2:	a339      	add	r3, pc, #228	@ (adr r3, 800cdd8 <__kernel_cos+0x158>)
 800ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf8:	f7f3 fae8 	bl	80002cc <__adddf3>
 800ccfc:	4622      	mov	r2, r4
 800ccfe:	462b      	mov	r3, r5
 800cd00:	f7f3 fc9a 	bl	8000638 <__aeabi_dmul>
 800cd04:	a336      	add	r3, pc, #216	@ (adr r3, 800cde0 <__kernel_cos+0x160>)
 800cd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0a:	f7f3 fadd 	bl	80002c8 <__aeabi_dsub>
 800cd0e:	4622      	mov	r2, r4
 800cd10:	462b      	mov	r3, r5
 800cd12:	f7f3 fc91 	bl	8000638 <__aeabi_dmul>
 800cd16:	a334      	add	r3, pc, #208	@ (adr r3, 800cde8 <__kernel_cos+0x168>)
 800cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1c:	f7f3 fad6 	bl	80002cc <__adddf3>
 800cd20:	4622      	mov	r2, r4
 800cd22:	462b      	mov	r3, r5
 800cd24:	f7f3 fc88 	bl	8000638 <__aeabi_dmul>
 800cd28:	4622      	mov	r2, r4
 800cd2a:	462b      	mov	r3, r5
 800cd2c:	f7f3 fc84 	bl	8000638 <__aeabi_dmul>
 800cd30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd34:	4604      	mov	r4, r0
 800cd36:	460d      	mov	r5, r1
 800cd38:	4630      	mov	r0, r6
 800cd3a:	4639      	mov	r1, r7
 800cd3c:	f7f3 fc7c 	bl	8000638 <__aeabi_dmul>
 800cd40:	460b      	mov	r3, r1
 800cd42:	4602      	mov	r2, r0
 800cd44:	4629      	mov	r1, r5
 800cd46:	4620      	mov	r0, r4
 800cd48:	f7f3 fabe 	bl	80002c8 <__aeabi_dsub>
 800cd4c:	4b2b      	ldr	r3, [pc, #172]	@ (800cdfc <__kernel_cos+0x17c>)
 800cd4e:	4598      	cmp	r8, r3
 800cd50:	4606      	mov	r6, r0
 800cd52:	460f      	mov	r7, r1
 800cd54:	d810      	bhi.n	800cd78 <__kernel_cos+0xf8>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	4650      	mov	r0, sl
 800cd5c:	4659      	mov	r1, fp
 800cd5e:	f7f3 fab3 	bl	80002c8 <__aeabi_dsub>
 800cd62:	460b      	mov	r3, r1
 800cd64:	4926      	ldr	r1, [pc, #152]	@ (800ce00 <__kernel_cos+0x180>)
 800cd66:	4602      	mov	r2, r0
 800cd68:	2000      	movs	r0, #0
 800cd6a:	f7f3 faad 	bl	80002c8 <__aeabi_dsub>
 800cd6e:	ec41 0b10 	vmov	d0, r0, r1
 800cd72:	b003      	add	sp, #12
 800cd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd78:	4b22      	ldr	r3, [pc, #136]	@ (800ce04 <__kernel_cos+0x184>)
 800cd7a:	4921      	ldr	r1, [pc, #132]	@ (800ce00 <__kernel_cos+0x180>)
 800cd7c:	4598      	cmp	r8, r3
 800cd7e:	bf8c      	ite	hi
 800cd80:	4d21      	ldrhi	r5, [pc, #132]	@ (800ce08 <__kernel_cos+0x188>)
 800cd82:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800cd86:	2400      	movs	r4, #0
 800cd88:	4622      	mov	r2, r4
 800cd8a:	462b      	mov	r3, r5
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	f7f3 fa9b 	bl	80002c8 <__aeabi_dsub>
 800cd92:	4622      	mov	r2, r4
 800cd94:	4680      	mov	r8, r0
 800cd96:	4689      	mov	r9, r1
 800cd98:	462b      	mov	r3, r5
 800cd9a:	4650      	mov	r0, sl
 800cd9c:	4659      	mov	r1, fp
 800cd9e:	f7f3 fa93 	bl	80002c8 <__aeabi_dsub>
 800cda2:	4632      	mov	r2, r6
 800cda4:	463b      	mov	r3, r7
 800cda6:	f7f3 fa8f 	bl	80002c8 <__aeabi_dsub>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	460b      	mov	r3, r1
 800cdae:	4640      	mov	r0, r8
 800cdb0:	4649      	mov	r1, r9
 800cdb2:	e7da      	b.n	800cd6a <__kernel_cos+0xea>
 800cdb4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800cdf0 <__kernel_cos+0x170>
 800cdb8:	e7db      	b.n	800cd72 <__kernel_cos+0xf2>
 800cdba:	bf00      	nop
 800cdbc:	f3af 8000 	nop.w
 800cdc0:	be8838d4 	.word	0xbe8838d4
 800cdc4:	bda8fae9 	.word	0xbda8fae9
 800cdc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800cdcc:	3e21ee9e 	.word	0x3e21ee9e
 800cdd0:	809c52ad 	.word	0x809c52ad
 800cdd4:	3e927e4f 	.word	0x3e927e4f
 800cdd8:	19cb1590 	.word	0x19cb1590
 800cddc:	3efa01a0 	.word	0x3efa01a0
 800cde0:	16c15177 	.word	0x16c15177
 800cde4:	3f56c16c 	.word	0x3f56c16c
 800cde8:	5555554c 	.word	0x5555554c
 800cdec:	3fa55555 	.word	0x3fa55555
 800cdf0:	00000000 	.word	0x00000000
 800cdf4:	3ff00000 	.word	0x3ff00000
 800cdf8:	3fe00000 	.word	0x3fe00000
 800cdfc:	3fd33332 	.word	0x3fd33332
 800ce00:	3ff00000 	.word	0x3ff00000
 800ce04:	3fe90000 	.word	0x3fe90000
 800ce08:	3fd20000 	.word	0x3fd20000
 800ce0c:	00000000 	.word	0x00000000

0800ce10 <__kernel_sin>:
 800ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	ec55 4b10 	vmov	r4, r5, d0
 800ce18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ce1c:	b085      	sub	sp, #20
 800ce1e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800ce22:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ce26:	4680      	mov	r8, r0
 800ce28:	d205      	bcs.n	800ce36 <__kernel_sin+0x26>
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	f7f3 feb3 	bl	8000b98 <__aeabi_d2iz>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d052      	beq.n	800cedc <__kernel_sin+0xcc>
 800ce36:	4622      	mov	r2, r4
 800ce38:	462b      	mov	r3, r5
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	f7f3 fbfb 	bl	8000638 <__aeabi_dmul>
 800ce42:	4682      	mov	sl, r0
 800ce44:	468b      	mov	fp, r1
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	f7f3 fbf3 	bl	8000638 <__aeabi_dmul>
 800ce52:	a342      	add	r3, pc, #264	@ (adr r3, 800cf5c <__kernel_sin+0x14c>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	e9cd 0100 	strd	r0, r1, [sp]
 800ce5c:	4650      	mov	r0, sl
 800ce5e:	4659      	mov	r1, fp
 800ce60:	f7f3 fbea 	bl	8000638 <__aeabi_dmul>
 800ce64:	a33f      	add	r3, pc, #252	@ (adr r3, 800cf64 <__kernel_sin+0x154>)
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	f7f3 fa2d 	bl	80002c8 <__aeabi_dsub>
 800ce6e:	4652      	mov	r2, sl
 800ce70:	465b      	mov	r3, fp
 800ce72:	f7f3 fbe1 	bl	8000638 <__aeabi_dmul>
 800ce76:	a33d      	add	r3, pc, #244	@ (adr r3, 800cf6c <__kernel_sin+0x15c>)
 800ce78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7c:	f7f3 fa26 	bl	80002cc <__adddf3>
 800ce80:	4652      	mov	r2, sl
 800ce82:	465b      	mov	r3, fp
 800ce84:	f7f3 fbd8 	bl	8000638 <__aeabi_dmul>
 800ce88:	a33a      	add	r3, pc, #232	@ (adr r3, 800cf74 <__kernel_sin+0x164>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f7f3 fa1b 	bl	80002c8 <__aeabi_dsub>
 800ce92:	4652      	mov	r2, sl
 800ce94:	465b      	mov	r3, fp
 800ce96:	f7f3 fbcf 	bl	8000638 <__aeabi_dmul>
 800ce9a:	a338      	add	r3, pc, #224	@ (adr r3, 800cf7c <__kernel_sin+0x16c>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	f7f3 fa14 	bl	80002cc <__adddf3>
 800cea4:	4606      	mov	r6, r0
 800cea6:	460f      	mov	r7, r1
 800cea8:	f1b8 0f00 	cmp.w	r8, #0
 800ceac:	d11b      	bne.n	800cee6 <__kernel_sin+0xd6>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	4650      	mov	r0, sl
 800ceb4:	4659      	mov	r1, fp
 800ceb6:	f7f3 fbbf 	bl	8000638 <__aeabi_dmul>
 800ceba:	a325      	add	r3, pc, #148	@ (adr r3, 800cf50 <__kernel_sin+0x140>)
 800cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec0:	f7f3 fa02 	bl	80002c8 <__aeabi_dsub>
 800cec4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cec8:	f7f3 fbb6 	bl	8000638 <__aeabi_dmul>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	4620      	mov	r0, r4
 800ced2:	4629      	mov	r1, r5
 800ced4:	f7f3 f9fa 	bl	80002cc <__adddf3>
 800ced8:	4604      	mov	r4, r0
 800ceda:	460d      	mov	r5, r1
 800cedc:	ec45 4b10 	vmov	d0, r4, r5
 800cee0:	b005      	add	sp, #20
 800cee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceea:	4b1b      	ldr	r3, [pc, #108]	@ (800cf58 <__kernel_sin+0x148>)
 800ceec:	2200      	movs	r2, #0
 800ceee:	f7f3 fba3 	bl	8000638 <__aeabi_dmul>
 800cef2:	4632      	mov	r2, r6
 800cef4:	4680      	mov	r8, r0
 800cef6:	4689      	mov	r9, r1
 800cef8:	463b      	mov	r3, r7
 800cefa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cefe:	f7f3 fb9b 	bl	8000638 <__aeabi_dmul>
 800cf02:	4602      	mov	r2, r0
 800cf04:	460b      	mov	r3, r1
 800cf06:	4640      	mov	r0, r8
 800cf08:	4649      	mov	r1, r9
 800cf0a:	f7f3 f9dd 	bl	80002c8 <__aeabi_dsub>
 800cf0e:	4652      	mov	r2, sl
 800cf10:	465b      	mov	r3, fp
 800cf12:	f7f3 fb91 	bl	8000638 <__aeabi_dmul>
 800cf16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf1a:	f7f3 f9d5 	bl	80002c8 <__aeabi_dsub>
 800cf1e:	a30c      	add	r3, pc, #48	@ (adr r3, 800cf50 <__kernel_sin+0x140>)
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	4606      	mov	r6, r0
 800cf26:	460f      	mov	r7, r1
 800cf28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf2c:	f7f3 fb84 	bl	8000638 <__aeabi_dmul>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4630      	mov	r0, r6
 800cf36:	4639      	mov	r1, r7
 800cf38:	f7f3 f9c8 	bl	80002cc <__adddf3>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	460b      	mov	r3, r1
 800cf40:	4620      	mov	r0, r4
 800cf42:	4629      	mov	r1, r5
 800cf44:	f7f3 f9c0 	bl	80002c8 <__aeabi_dsub>
 800cf48:	e7c6      	b.n	800ced8 <__kernel_sin+0xc8>
 800cf4a:	bf00      	nop
 800cf4c:	f3af 8000 	nop.w
 800cf50:	55555549 	.word	0x55555549
 800cf54:	3fc55555 	.word	0x3fc55555
 800cf58:	3fe00000 	.word	0x3fe00000
 800cf5c:	5acfd57c 	.word	0x5acfd57c
 800cf60:	3de5d93a 	.word	0x3de5d93a
 800cf64:	8a2b9ceb 	.word	0x8a2b9ceb
 800cf68:	3e5ae5e6 	.word	0x3e5ae5e6
 800cf6c:	57b1fe7d 	.word	0x57b1fe7d
 800cf70:	3ec71de3 	.word	0x3ec71de3
 800cf74:	19c161d5 	.word	0x19c161d5
 800cf78:	3f2a01a0 	.word	0x3f2a01a0
 800cf7c:	1110f8a6 	.word	0x1110f8a6
 800cf80:	3f811111 	.word	0x3f811111
 800cf84:	00000000 	.word	0x00000000

0800cf88 <__ieee754_rem_pio2>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	ec57 6b10 	vmov	r6, r7, d0
 800cf90:	4bc5      	ldr	r3, [pc, #788]	@ (800d2a8 <__ieee754_rem_pio2+0x320>)
 800cf92:	b08d      	sub	sp, #52	@ 0x34
 800cf94:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cf98:	4598      	cmp	r8, r3
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	9704      	str	r7, [sp, #16]
 800cf9e:	d807      	bhi.n	800cfb0 <__ieee754_rem_pio2+0x28>
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	ed80 0b00 	vstr	d0, [r0]
 800cfa8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cfac:	2500      	movs	r5, #0
 800cfae:	e028      	b.n	800d002 <__ieee754_rem_pio2+0x7a>
 800cfb0:	4bbe      	ldr	r3, [pc, #760]	@ (800d2ac <__ieee754_rem_pio2+0x324>)
 800cfb2:	4598      	cmp	r8, r3
 800cfb4:	d878      	bhi.n	800d0a8 <__ieee754_rem_pio2+0x120>
 800cfb6:	9b04      	ldr	r3, [sp, #16]
 800cfb8:	4dbd      	ldr	r5, [pc, #756]	@ (800d2b0 <__ieee754_rem_pio2+0x328>)
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d270 <__ieee754_rem_pio2+0x2e8>)
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	dd38      	ble.n	800d03a <__ieee754_rem_pio2+0xb2>
 800cfc8:	f7f3 f97e 	bl	80002c8 <__aeabi_dsub>
 800cfcc:	45a8      	cmp	r8, r5
 800cfce:	4606      	mov	r6, r0
 800cfd0:	460f      	mov	r7, r1
 800cfd2:	d01a      	beq.n	800d00a <__ieee754_rem_pio2+0x82>
 800cfd4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d278 <__ieee754_rem_pio2+0x2f0>)
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	f7f3 f975 	bl	80002c8 <__aeabi_dsub>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	4680      	mov	r8, r0
 800cfe4:	4689      	mov	r9, r1
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	4639      	mov	r1, r7
 800cfea:	f7f3 f96d 	bl	80002c8 <__aeabi_dsub>
 800cfee:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d278 <__ieee754_rem_pio2+0x2f0>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	f7f3 f968 	bl	80002c8 <__aeabi_dsub>
 800cff8:	e9c4 8900 	strd	r8, r9, [r4]
 800cffc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d000:	2501      	movs	r5, #1
 800d002:	4628      	mov	r0, r5
 800d004:	b00d      	add	sp, #52	@ 0x34
 800d006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00a:	a39d      	add	r3, pc, #628	@ (adr r3, 800d280 <__ieee754_rem_pio2+0x2f8>)
 800d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d010:	f7f3 f95a 	bl	80002c8 <__aeabi_dsub>
 800d014:	a39c      	add	r3, pc, #624	@ (adr r3, 800d288 <__ieee754_rem_pio2+0x300>)
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	4606      	mov	r6, r0
 800d01c:	460f      	mov	r7, r1
 800d01e:	f7f3 f953 	bl	80002c8 <__aeabi_dsub>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	4680      	mov	r8, r0
 800d028:	4689      	mov	r9, r1
 800d02a:	4630      	mov	r0, r6
 800d02c:	4639      	mov	r1, r7
 800d02e:	f7f3 f94b 	bl	80002c8 <__aeabi_dsub>
 800d032:	a395      	add	r3, pc, #596	@ (adr r3, 800d288 <__ieee754_rem_pio2+0x300>)
 800d034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d038:	e7dc      	b.n	800cff4 <__ieee754_rem_pio2+0x6c>
 800d03a:	f7f3 f947 	bl	80002cc <__adddf3>
 800d03e:	45a8      	cmp	r8, r5
 800d040:	4606      	mov	r6, r0
 800d042:	460f      	mov	r7, r1
 800d044:	d018      	beq.n	800d078 <__ieee754_rem_pio2+0xf0>
 800d046:	a38c      	add	r3, pc, #560	@ (adr r3, 800d278 <__ieee754_rem_pio2+0x2f0>)
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	f7f3 f93e 	bl	80002cc <__adddf3>
 800d050:	4602      	mov	r2, r0
 800d052:	460b      	mov	r3, r1
 800d054:	4680      	mov	r8, r0
 800d056:	4689      	mov	r9, r1
 800d058:	4630      	mov	r0, r6
 800d05a:	4639      	mov	r1, r7
 800d05c:	f7f3 f934 	bl	80002c8 <__aeabi_dsub>
 800d060:	a385      	add	r3, pc, #532	@ (adr r3, 800d278 <__ieee754_rem_pio2+0x2f0>)
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	f7f3 f931 	bl	80002cc <__adddf3>
 800d06a:	f04f 35ff 	mov.w	r5, #4294967295
 800d06e:	e9c4 8900 	strd	r8, r9, [r4]
 800d072:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d076:	e7c4      	b.n	800d002 <__ieee754_rem_pio2+0x7a>
 800d078:	a381      	add	r3, pc, #516	@ (adr r3, 800d280 <__ieee754_rem_pio2+0x2f8>)
 800d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07e:	f7f3 f925 	bl	80002cc <__adddf3>
 800d082:	a381      	add	r3, pc, #516	@ (adr r3, 800d288 <__ieee754_rem_pio2+0x300>)
 800d084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d088:	4606      	mov	r6, r0
 800d08a:	460f      	mov	r7, r1
 800d08c:	f7f3 f91e 	bl	80002cc <__adddf3>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4680      	mov	r8, r0
 800d096:	4689      	mov	r9, r1
 800d098:	4630      	mov	r0, r6
 800d09a:	4639      	mov	r1, r7
 800d09c:	f7f3 f914 	bl	80002c8 <__aeabi_dsub>
 800d0a0:	a379      	add	r3, pc, #484	@ (adr r3, 800d288 <__ieee754_rem_pio2+0x300>)
 800d0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a6:	e7de      	b.n	800d066 <__ieee754_rem_pio2+0xde>
 800d0a8:	4b82      	ldr	r3, [pc, #520]	@ (800d2b4 <__ieee754_rem_pio2+0x32c>)
 800d0aa:	4598      	cmp	r8, r3
 800d0ac:	f200 80d1 	bhi.w	800d252 <__ieee754_rem_pio2+0x2ca>
 800d0b0:	f000 f966 	bl	800d380 <fabs>
 800d0b4:	ec57 6b10 	vmov	r6, r7, d0
 800d0b8:	a375      	add	r3, pc, #468	@ (adr r3, 800d290 <__ieee754_rem_pio2+0x308>)
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	4630      	mov	r0, r6
 800d0c0:	4639      	mov	r1, r7
 800d0c2:	f7f3 fab9 	bl	8000638 <__aeabi_dmul>
 800d0c6:	4b7c      	ldr	r3, [pc, #496]	@ (800d2b8 <__ieee754_rem_pio2+0x330>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f7f3 f8ff 	bl	80002cc <__adddf3>
 800d0ce:	f7f3 fd63 	bl	8000b98 <__aeabi_d2iz>
 800d0d2:	4605      	mov	r5, r0
 800d0d4:	f7f3 fa46 	bl	8000564 <__aeabi_i2d>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0e0:	a363      	add	r3, pc, #396	@ (adr r3, 800d270 <__ieee754_rem_pio2+0x2e8>)
 800d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e6:	f7f3 faa7 	bl	8000638 <__aeabi_dmul>
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	f7f3 f8e9 	bl	80002c8 <__aeabi_dsub>
 800d0f6:	a360      	add	r3, pc, #384	@ (adr r3, 800d278 <__ieee754_rem_pio2+0x2f0>)
 800d0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fc:	4682      	mov	sl, r0
 800d0fe:	468b      	mov	fp, r1
 800d100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d104:	f7f3 fa98 	bl	8000638 <__aeabi_dmul>
 800d108:	2d1f      	cmp	r5, #31
 800d10a:	4606      	mov	r6, r0
 800d10c:	460f      	mov	r7, r1
 800d10e:	dc0c      	bgt.n	800d12a <__ieee754_rem_pio2+0x1a2>
 800d110:	4b6a      	ldr	r3, [pc, #424]	@ (800d2bc <__ieee754_rem_pio2+0x334>)
 800d112:	1e6a      	subs	r2, r5, #1
 800d114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d118:	4543      	cmp	r3, r8
 800d11a:	d006      	beq.n	800d12a <__ieee754_rem_pio2+0x1a2>
 800d11c:	4632      	mov	r2, r6
 800d11e:	463b      	mov	r3, r7
 800d120:	4650      	mov	r0, sl
 800d122:	4659      	mov	r1, fp
 800d124:	f7f3 f8d0 	bl	80002c8 <__aeabi_dsub>
 800d128:	e00e      	b.n	800d148 <__ieee754_rem_pio2+0x1c0>
 800d12a:	463b      	mov	r3, r7
 800d12c:	4632      	mov	r2, r6
 800d12e:	4650      	mov	r0, sl
 800d130:	4659      	mov	r1, fp
 800d132:	f7f3 f8c9 	bl	80002c8 <__aeabi_dsub>
 800d136:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d13a:	9305      	str	r3, [sp, #20]
 800d13c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d140:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d144:	2b10      	cmp	r3, #16
 800d146:	dc02      	bgt.n	800d14e <__ieee754_rem_pio2+0x1c6>
 800d148:	e9c4 0100 	strd	r0, r1, [r4]
 800d14c:	e039      	b.n	800d1c2 <__ieee754_rem_pio2+0x23a>
 800d14e:	a34c      	add	r3, pc, #304	@ (adr r3, 800d280 <__ieee754_rem_pio2+0x2f8>)
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d158:	f7f3 fa6e 	bl	8000638 <__aeabi_dmul>
 800d15c:	4606      	mov	r6, r0
 800d15e:	460f      	mov	r7, r1
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4650      	mov	r0, sl
 800d166:	4659      	mov	r1, fp
 800d168:	f7f3 f8ae 	bl	80002c8 <__aeabi_dsub>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4680      	mov	r8, r0
 800d172:	4689      	mov	r9, r1
 800d174:	4650      	mov	r0, sl
 800d176:	4659      	mov	r1, fp
 800d178:	f7f3 f8a6 	bl	80002c8 <__aeabi_dsub>
 800d17c:	4632      	mov	r2, r6
 800d17e:	463b      	mov	r3, r7
 800d180:	f7f3 f8a2 	bl	80002c8 <__aeabi_dsub>
 800d184:	a340      	add	r3, pc, #256	@ (adr r3, 800d288 <__ieee754_rem_pio2+0x300>)
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	4606      	mov	r6, r0
 800d18c:	460f      	mov	r7, r1
 800d18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d192:	f7f3 fa51 	bl	8000638 <__aeabi_dmul>
 800d196:	4632      	mov	r2, r6
 800d198:	463b      	mov	r3, r7
 800d19a:	f7f3 f895 	bl	80002c8 <__aeabi_dsub>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460f      	mov	r7, r1
 800d1a6:	4640      	mov	r0, r8
 800d1a8:	4649      	mov	r1, r9
 800d1aa:	f7f3 f88d 	bl	80002c8 <__aeabi_dsub>
 800d1ae:	9a05      	ldr	r2, [sp, #20]
 800d1b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d1b4:	1ad3      	subs	r3, r2, r3
 800d1b6:	2b31      	cmp	r3, #49	@ 0x31
 800d1b8:	dc20      	bgt.n	800d1fc <__ieee754_rem_pio2+0x274>
 800d1ba:	e9c4 0100 	strd	r0, r1, [r4]
 800d1be:	46c2      	mov	sl, r8
 800d1c0:	46cb      	mov	fp, r9
 800d1c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d1c6:	4650      	mov	r0, sl
 800d1c8:	4642      	mov	r2, r8
 800d1ca:	464b      	mov	r3, r9
 800d1cc:	4659      	mov	r1, fp
 800d1ce:	f7f3 f87b 	bl	80002c8 <__aeabi_dsub>
 800d1d2:	463b      	mov	r3, r7
 800d1d4:	4632      	mov	r2, r6
 800d1d6:	f7f3 f877 	bl	80002c8 <__aeabi_dsub>
 800d1da:	9b04      	ldr	r3, [sp, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d1e2:	f6bf af0e 	bge.w	800d002 <__ieee754_rem_pio2+0x7a>
 800d1e6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d1ea:	6063      	str	r3, [r4, #4]
 800d1ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1f0:	f8c4 8000 	str.w	r8, [r4]
 800d1f4:	60a0      	str	r0, [r4, #8]
 800d1f6:	60e3      	str	r3, [r4, #12]
 800d1f8:	426d      	negs	r5, r5
 800d1fa:	e702      	b.n	800d002 <__ieee754_rem_pio2+0x7a>
 800d1fc:	a326      	add	r3, pc, #152	@ (adr r3, 800d298 <__ieee754_rem_pio2+0x310>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d206:	f7f3 fa17 	bl	8000638 <__aeabi_dmul>
 800d20a:	4606      	mov	r6, r0
 800d20c:	460f      	mov	r7, r1
 800d20e:	4602      	mov	r2, r0
 800d210:	460b      	mov	r3, r1
 800d212:	4640      	mov	r0, r8
 800d214:	4649      	mov	r1, r9
 800d216:	f7f3 f857 	bl	80002c8 <__aeabi_dsub>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	4682      	mov	sl, r0
 800d220:	468b      	mov	fp, r1
 800d222:	4640      	mov	r0, r8
 800d224:	4649      	mov	r1, r9
 800d226:	f7f3 f84f 	bl	80002c8 <__aeabi_dsub>
 800d22a:	4632      	mov	r2, r6
 800d22c:	463b      	mov	r3, r7
 800d22e:	f7f3 f84b 	bl	80002c8 <__aeabi_dsub>
 800d232:	a31b      	add	r3, pc, #108	@ (adr r3, 800d2a0 <__ieee754_rem_pio2+0x318>)
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	4606      	mov	r6, r0
 800d23a:	460f      	mov	r7, r1
 800d23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d240:	f7f3 f9fa 	bl	8000638 <__aeabi_dmul>
 800d244:	4632      	mov	r2, r6
 800d246:	463b      	mov	r3, r7
 800d248:	f7f3 f83e 	bl	80002c8 <__aeabi_dsub>
 800d24c:	4606      	mov	r6, r0
 800d24e:	460f      	mov	r7, r1
 800d250:	e764      	b.n	800d11c <__ieee754_rem_pio2+0x194>
 800d252:	4b1b      	ldr	r3, [pc, #108]	@ (800d2c0 <__ieee754_rem_pio2+0x338>)
 800d254:	4598      	cmp	r8, r3
 800d256:	d935      	bls.n	800d2c4 <__ieee754_rem_pio2+0x33c>
 800d258:	4632      	mov	r2, r6
 800d25a:	463b      	mov	r3, r7
 800d25c:	4630      	mov	r0, r6
 800d25e:	4639      	mov	r1, r7
 800d260:	f7f3 f832 	bl	80002c8 <__aeabi_dsub>
 800d264:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d268:	e9c4 0100 	strd	r0, r1, [r4]
 800d26c:	e69e      	b.n	800cfac <__ieee754_rem_pio2+0x24>
 800d26e:	bf00      	nop
 800d270:	54400000 	.word	0x54400000
 800d274:	3ff921fb 	.word	0x3ff921fb
 800d278:	1a626331 	.word	0x1a626331
 800d27c:	3dd0b461 	.word	0x3dd0b461
 800d280:	1a600000 	.word	0x1a600000
 800d284:	3dd0b461 	.word	0x3dd0b461
 800d288:	2e037073 	.word	0x2e037073
 800d28c:	3ba3198a 	.word	0x3ba3198a
 800d290:	6dc9c883 	.word	0x6dc9c883
 800d294:	3fe45f30 	.word	0x3fe45f30
 800d298:	2e000000 	.word	0x2e000000
 800d29c:	3ba3198a 	.word	0x3ba3198a
 800d2a0:	252049c1 	.word	0x252049c1
 800d2a4:	397b839a 	.word	0x397b839a
 800d2a8:	3fe921fb 	.word	0x3fe921fb
 800d2ac:	4002d97b 	.word	0x4002d97b
 800d2b0:	3ff921fb 	.word	0x3ff921fb
 800d2b4:	413921fb 	.word	0x413921fb
 800d2b8:	3fe00000 	.word	0x3fe00000
 800d2bc:	0800e064 	.word	0x0800e064
 800d2c0:	7fefffff 	.word	0x7fefffff
 800d2c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d2c8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d2cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	460f      	mov	r7, r1
 800d2d4:	f7f3 fc60 	bl	8000b98 <__aeabi_d2iz>
 800d2d8:	f7f3 f944 	bl	8000564 <__aeabi_i2d>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2e8:	f7f2 ffee 	bl	80002c8 <__aeabi_dsub>
 800d2ec:	4b22      	ldr	r3, [pc, #136]	@ (800d378 <__ieee754_rem_pio2+0x3f0>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f7f3 f9a2 	bl	8000638 <__aeabi_dmul>
 800d2f4:	460f      	mov	r7, r1
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	f7f3 fc4e 	bl	8000b98 <__aeabi_d2iz>
 800d2fc:	f7f3 f932 	bl	8000564 <__aeabi_i2d>
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4630      	mov	r0, r6
 800d306:	4639      	mov	r1, r7
 800d308:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d30c:	f7f2 ffdc 	bl	80002c8 <__aeabi_dsub>
 800d310:	4b19      	ldr	r3, [pc, #100]	@ (800d378 <__ieee754_rem_pio2+0x3f0>)
 800d312:	2200      	movs	r2, #0
 800d314:	f7f3 f990 	bl	8000638 <__aeabi_dmul>
 800d318:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d31c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d320:	f04f 0803 	mov.w	r8, #3
 800d324:	2600      	movs	r6, #0
 800d326:	2700      	movs	r7, #0
 800d328:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d32c:	4632      	mov	r2, r6
 800d32e:	463b      	mov	r3, r7
 800d330:	46c2      	mov	sl, r8
 800d332:	f108 38ff 	add.w	r8, r8, #4294967295
 800d336:	f7f3 fbe7 	bl	8000b08 <__aeabi_dcmpeq>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d1f4      	bne.n	800d328 <__ieee754_rem_pio2+0x3a0>
 800d33e:	4b0f      	ldr	r3, [pc, #60]	@ (800d37c <__ieee754_rem_pio2+0x3f4>)
 800d340:	9301      	str	r3, [sp, #4]
 800d342:	2302      	movs	r3, #2
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	462a      	mov	r2, r5
 800d348:	4653      	mov	r3, sl
 800d34a:	4621      	mov	r1, r4
 800d34c:	a806      	add	r0, sp, #24
 800d34e:	f000 f81f 	bl	800d390 <__kernel_rem_pio2>
 800d352:	9b04      	ldr	r3, [sp, #16]
 800d354:	2b00      	cmp	r3, #0
 800d356:	4605      	mov	r5, r0
 800d358:	f6bf ae53 	bge.w	800d002 <__ieee754_rem_pio2+0x7a>
 800d35c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d360:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d364:	e9c4 2300 	strd	r2, r3, [r4]
 800d368:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d36c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d370:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d374:	e740      	b.n	800d1f8 <__ieee754_rem_pio2+0x270>
 800d376:	bf00      	nop
 800d378:	41700000 	.word	0x41700000
 800d37c:	0800e0e4 	.word	0x0800e0e4

0800d380 <fabs>:
 800d380:	ec51 0b10 	vmov	r0, r1, d0
 800d384:	4602      	mov	r2, r0
 800d386:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d38a:	ec43 2b10 	vmov	d0, r2, r3
 800d38e:	4770      	bx	lr

0800d390 <__kernel_rem_pio2>:
 800d390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	ed2d 8b02 	vpush	{d8}
 800d398:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d39c:	f112 0f14 	cmn.w	r2, #20
 800d3a0:	9306      	str	r3, [sp, #24]
 800d3a2:	9104      	str	r1, [sp, #16]
 800d3a4:	4bc2      	ldr	r3, [pc, #776]	@ (800d6b0 <__kernel_rem_pio2+0x320>)
 800d3a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d3a8:	9008      	str	r0, [sp, #32]
 800d3aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	9b06      	ldr	r3, [sp, #24]
 800d3b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d3b6:	bfa8      	it	ge
 800d3b8:	1ed4      	subge	r4, r2, #3
 800d3ba:	9305      	str	r3, [sp, #20]
 800d3bc:	bfb2      	itee	lt
 800d3be:	2400      	movlt	r4, #0
 800d3c0:	2318      	movge	r3, #24
 800d3c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800d3c6:	f06f 0317 	mvn.w	r3, #23
 800d3ca:	fb04 3303 	mla	r3, r4, r3, r3
 800d3ce:	eb03 0b02 	add.w	fp, r3, r2
 800d3d2:	9b00      	ldr	r3, [sp, #0]
 800d3d4:	9a05      	ldr	r2, [sp, #20]
 800d3d6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800d6a0 <__kernel_rem_pio2+0x310>
 800d3da:	eb03 0802 	add.w	r8, r3, r2
 800d3de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d3e0:	1aa7      	subs	r7, r4, r2
 800d3e2:	ae20      	add	r6, sp, #128	@ 0x80
 800d3e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d3e8:	2500      	movs	r5, #0
 800d3ea:	4545      	cmp	r5, r8
 800d3ec:	dd12      	ble.n	800d414 <__kernel_rem_pio2+0x84>
 800d3ee:	9b06      	ldr	r3, [sp, #24]
 800d3f0:	aa20      	add	r2, sp, #128	@ 0x80
 800d3f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d3f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d3fa:	2700      	movs	r7, #0
 800d3fc:	9b00      	ldr	r3, [sp, #0]
 800d3fe:	429f      	cmp	r7, r3
 800d400:	dc2e      	bgt.n	800d460 <__kernel_rem_pio2+0xd0>
 800d402:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800d6a0 <__kernel_rem_pio2+0x310>
 800d406:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d40a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d40e:	46a8      	mov	r8, r5
 800d410:	2600      	movs	r6, #0
 800d412:	e01b      	b.n	800d44c <__kernel_rem_pio2+0xbc>
 800d414:	42ef      	cmn	r7, r5
 800d416:	d407      	bmi.n	800d428 <__kernel_rem_pio2+0x98>
 800d418:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d41c:	f7f3 f8a2 	bl	8000564 <__aeabi_i2d>
 800d420:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d424:	3501      	adds	r5, #1
 800d426:	e7e0      	b.n	800d3ea <__kernel_rem_pio2+0x5a>
 800d428:	ec51 0b18 	vmov	r0, r1, d8
 800d42c:	e7f8      	b.n	800d420 <__kernel_rem_pio2+0x90>
 800d42e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800d432:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d436:	f7f3 f8ff 	bl	8000638 <__aeabi_dmul>
 800d43a:	4602      	mov	r2, r0
 800d43c:	460b      	mov	r3, r1
 800d43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d442:	f7f2 ff43 	bl	80002cc <__adddf3>
 800d446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d44a:	3601      	adds	r6, #1
 800d44c:	9b05      	ldr	r3, [sp, #20]
 800d44e:	429e      	cmp	r6, r3
 800d450:	dded      	ble.n	800d42e <__kernel_rem_pio2+0x9e>
 800d452:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d456:	3701      	adds	r7, #1
 800d458:	ecaa 7b02 	vstmia	sl!, {d7}
 800d45c:	3508      	adds	r5, #8
 800d45e:	e7cd      	b.n	800d3fc <__kernel_rem_pio2+0x6c>
 800d460:	9b00      	ldr	r3, [sp, #0]
 800d462:	f8dd 8000 	ldr.w	r8, [sp]
 800d466:	aa0c      	add	r2, sp, #48	@ 0x30
 800d468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d46c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d46e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d470:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d474:	9309      	str	r3, [sp, #36]	@ 0x24
 800d476:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d47a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d47c:	ab98      	add	r3, sp, #608	@ 0x260
 800d47e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d482:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d486:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d48a:	ac0c      	add	r4, sp, #48	@ 0x30
 800d48c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d48e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d492:	46a1      	mov	r9, r4
 800d494:	46c2      	mov	sl, r8
 800d496:	f1ba 0f00 	cmp.w	sl, #0
 800d49a:	dc77      	bgt.n	800d58c <__kernel_rem_pio2+0x1fc>
 800d49c:	4658      	mov	r0, fp
 800d49e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d4a2:	f000 fac5 	bl	800da30 <scalbn>
 800d4a6:	ec57 6b10 	vmov	r6, r7, d0
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f7f3 f8c0 	bl	8000638 <__aeabi_dmul>
 800d4b8:	ec41 0b10 	vmov	d0, r0, r1
 800d4bc:	f000 fb34 	bl	800db28 <floor>
 800d4c0:	4b7c      	ldr	r3, [pc, #496]	@ (800d6b4 <__kernel_rem_pio2+0x324>)
 800d4c2:	ec51 0b10 	vmov	r0, r1, d0
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f7f3 f8b6 	bl	8000638 <__aeabi_dmul>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	f7f2 fef8 	bl	80002c8 <__aeabi_dsub>
 800d4d8:	460f      	mov	r7, r1
 800d4da:	4606      	mov	r6, r0
 800d4dc:	f7f3 fb5c 	bl	8000b98 <__aeabi_d2iz>
 800d4e0:	9002      	str	r0, [sp, #8]
 800d4e2:	f7f3 f83f 	bl	8000564 <__aeabi_i2d>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	f7f2 feeb 	bl	80002c8 <__aeabi_dsub>
 800d4f2:	f1bb 0f00 	cmp.w	fp, #0
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	460f      	mov	r7, r1
 800d4fa:	dd6c      	ble.n	800d5d6 <__kernel_rem_pio2+0x246>
 800d4fc:	f108 31ff 	add.w	r1, r8, #4294967295
 800d500:	ab0c      	add	r3, sp, #48	@ 0x30
 800d502:	9d02      	ldr	r5, [sp, #8]
 800d504:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d508:	f1cb 0018 	rsb	r0, fp, #24
 800d50c:	fa43 f200 	asr.w	r2, r3, r0
 800d510:	4415      	add	r5, r2
 800d512:	4082      	lsls	r2, r0
 800d514:	1a9b      	subs	r3, r3, r2
 800d516:	aa0c      	add	r2, sp, #48	@ 0x30
 800d518:	9502      	str	r5, [sp, #8]
 800d51a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d51e:	f1cb 0217 	rsb	r2, fp, #23
 800d522:	fa43 f902 	asr.w	r9, r3, r2
 800d526:	f1b9 0f00 	cmp.w	r9, #0
 800d52a:	dd64      	ble.n	800d5f6 <__kernel_rem_pio2+0x266>
 800d52c:	9b02      	ldr	r3, [sp, #8]
 800d52e:	2200      	movs	r2, #0
 800d530:	3301      	adds	r3, #1
 800d532:	9302      	str	r3, [sp, #8]
 800d534:	4615      	mov	r5, r2
 800d536:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d53a:	4590      	cmp	r8, r2
 800d53c:	f300 80a1 	bgt.w	800d682 <__kernel_rem_pio2+0x2f2>
 800d540:	f1bb 0f00 	cmp.w	fp, #0
 800d544:	dd07      	ble.n	800d556 <__kernel_rem_pio2+0x1c6>
 800d546:	f1bb 0f01 	cmp.w	fp, #1
 800d54a:	f000 80c1 	beq.w	800d6d0 <__kernel_rem_pio2+0x340>
 800d54e:	f1bb 0f02 	cmp.w	fp, #2
 800d552:	f000 80c8 	beq.w	800d6e6 <__kernel_rem_pio2+0x356>
 800d556:	f1b9 0f02 	cmp.w	r9, #2
 800d55a:	d14c      	bne.n	800d5f6 <__kernel_rem_pio2+0x266>
 800d55c:	4632      	mov	r2, r6
 800d55e:	463b      	mov	r3, r7
 800d560:	4955      	ldr	r1, [pc, #340]	@ (800d6b8 <__kernel_rem_pio2+0x328>)
 800d562:	2000      	movs	r0, #0
 800d564:	f7f2 feb0 	bl	80002c8 <__aeabi_dsub>
 800d568:	4606      	mov	r6, r0
 800d56a:	460f      	mov	r7, r1
 800d56c:	2d00      	cmp	r5, #0
 800d56e:	d042      	beq.n	800d5f6 <__kernel_rem_pio2+0x266>
 800d570:	4658      	mov	r0, fp
 800d572:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800d6a8 <__kernel_rem_pio2+0x318>
 800d576:	f000 fa5b 	bl	800da30 <scalbn>
 800d57a:	4630      	mov	r0, r6
 800d57c:	4639      	mov	r1, r7
 800d57e:	ec53 2b10 	vmov	r2, r3, d0
 800d582:	f7f2 fea1 	bl	80002c8 <__aeabi_dsub>
 800d586:	4606      	mov	r6, r0
 800d588:	460f      	mov	r7, r1
 800d58a:	e034      	b.n	800d5f6 <__kernel_rem_pio2+0x266>
 800d58c:	4b4b      	ldr	r3, [pc, #300]	@ (800d6bc <__kernel_rem_pio2+0x32c>)
 800d58e:	2200      	movs	r2, #0
 800d590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d594:	f7f3 f850 	bl	8000638 <__aeabi_dmul>
 800d598:	f7f3 fafe 	bl	8000b98 <__aeabi_d2iz>
 800d59c:	f7f2 ffe2 	bl	8000564 <__aeabi_i2d>
 800d5a0:	4b47      	ldr	r3, [pc, #284]	@ (800d6c0 <__kernel_rem_pio2+0x330>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	4606      	mov	r6, r0
 800d5a6:	460f      	mov	r7, r1
 800d5a8:	f7f3 f846 	bl	8000638 <__aeabi_dmul>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5b4:	f7f2 fe88 	bl	80002c8 <__aeabi_dsub>
 800d5b8:	f7f3 faee 	bl	8000b98 <__aeabi_d2iz>
 800d5bc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d5c0:	f849 0b04 	str.w	r0, [r9], #4
 800d5c4:	4639      	mov	r1, r7
 800d5c6:	4630      	mov	r0, r6
 800d5c8:	f7f2 fe80 	bl	80002cc <__adddf3>
 800d5cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5d4:	e75f      	b.n	800d496 <__kernel_rem_pio2+0x106>
 800d5d6:	d107      	bne.n	800d5e8 <__kernel_rem_pio2+0x258>
 800d5d8:	f108 33ff 	add.w	r3, r8, #4294967295
 800d5dc:	aa0c      	add	r2, sp, #48	@ 0x30
 800d5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5e2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800d5e6:	e79e      	b.n	800d526 <__kernel_rem_pio2+0x196>
 800d5e8:	4b36      	ldr	r3, [pc, #216]	@ (800d6c4 <__kernel_rem_pio2+0x334>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f7f3 faaa 	bl	8000b44 <__aeabi_dcmpge>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	d143      	bne.n	800d67c <__kernel_rem_pio2+0x2ec>
 800d5f4:	4681      	mov	r9, r0
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	4639      	mov	r1, r7
 800d5fe:	f7f3 fa83 	bl	8000b08 <__aeabi_dcmpeq>
 800d602:	2800      	cmp	r0, #0
 800d604:	f000 80c1 	beq.w	800d78a <__kernel_rem_pio2+0x3fa>
 800d608:	f108 33ff 	add.w	r3, r8, #4294967295
 800d60c:	2200      	movs	r2, #0
 800d60e:	9900      	ldr	r1, [sp, #0]
 800d610:	428b      	cmp	r3, r1
 800d612:	da70      	bge.n	800d6f6 <__kernel_rem_pio2+0x366>
 800d614:	2a00      	cmp	r2, #0
 800d616:	f000 808b 	beq.w	800d730 <__kernel_rem_pio2+0x3a0>
 800d61a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d61e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d620:	f1ab 0b18 	sub.w	fp, fp, #24
 800d624:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d0f6      	beq.n	800d61a <__kernel_rem_pio2+0x28a>
 800d62c:	4658      	mov	r0, fp
 800d62e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800d6a8 <__kernel_rem_pio2+0x318>
 800d632:	f000 f9fd 	bl	800da30 <scalbn>
 800d636:	f108 0301 	add.w	r3, r8, #1
 800d63a:	00da      	lsls	r2, r3, #3
 800d63c:	9205      	str	r2, [sp, #20]
 800d63e:	ec55 4b10 	vmov	r4, r5, d0
 800d642:	aa70      	add	r2, sp, #448	@ 0x1c0
 800d644:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800d6bc <__kernel_rem_pio2+0x32c>
 800d648:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800d64c:	4646      	mov	r6, r8
 800d64e:	f04f 0a00 	mov.w	sl, #0
 800d652:	2e00      	cmp	r6, #0
 800d654:	f280 80d1 	bge.w	800d7fa <__kernel_rem_pio2+0x46a>
 800d658:	4644      	mov	r4, r8
 800d65a:	2c00      	cmp	r4, #0
 800d65c:	f2c0 80ff 	blt.w	800d85e <__kernel_rem_pio2+0x4ce>
 800d660:	4b19      	ldr	r3, [pc, #100]	@ (800d6c8 <__kernel_rem_pio2+0x338>)
 800d662:	461f      	mov	r7, r3
 800d664:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d666:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d66a:	9306      	str	r3, [sp, #24]
 800d66c:	f04f 0a00 	mov.w	sl, #0
 800d670:	f04f 0b00 	mov.w	fp, #0
 800d674:	2600      	movs	r6, #0
 800d676:	eba8 0504 	sub.w	r5, r8, r4
 800d67a:	e0e4      	b.n	800d846 <__kernel_rem_pio2+0x4b6>
 800d67c:	f04f 0902 	mov.w	r9, #2
 800d680:	e754      	b.n	800d52c <__kernel_rem_pio2+0x19c>
 800d682:	f854 3b04 	ldr.w	r3, [r4], #4
 800d686:	bb0d      	cbnz	r5, 800d6cc <__kernel_rem_pio2+0x33c>
 800d688:	b123      	cbz	r3, 800d694 <__kernel_rem_pio2+0x304>
 800d68a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d68e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d692:	2301      	movs	r3, #1
 800d694:	3201      	adds	r2, #1
 800d696:	461d      	mov	r5, r3
 800d698:	e74f      	b.n	800d53a <__kernel_rem_pio2+0x1aa>
 800d69a:	bf00      	nop
 800d69c:	f3af 8000 	nop.w
	...
 800d6ac:	3ff00000 	.word	0x3ff00000
 800d6b0:	0800e230 	.word	0x0800e230
 800d6b4:	40200000 	.word	0x40200000
 800d6b8:	3ff00000 	.word	0x3ff00000
 800d6bc:	3e700000 	.word	0x3e700000
 800d6c0:	41700000 	.word	0x41700000
 800d6c4:	3fe00000 	.word	0x3fe00000
 800d6c8:	0800e1f0 	.word	0x0800e1f0
 800d6cc:	1acb      	subs	r3, r1, r3
 800d6ce:	e7de      	b.n	800d68e <__kernel_rem_pio2+0x2fe>
 800d6d0:	f108 32ff 	add.w	r2, r8, #4294967295
 800d6d4:	ab0c      	add	r3, sp, #48	@ 0x30
 800d6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d6de:	a90c      	add	r1, sp, #48	@ 0x30
 800d6e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d6e4:	e737      	b.n	800d556 <__kernel_rem_pio2+0x1c6>
 800d6e6:	f108 32ff 	add.w	r2, r8, #4294967295
 800d6ea:	ab0c      	add	r3, sp, #48	@ 0x30
 800d6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6f4:	e7f3      	b.n	800d6de <__kernel_rem_pio2+0x34e>
 800d6f6:	a90c      	add	r1, sp, #48	@ 0x30
 800d6f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	430a      	orrs	r2, r1
 800d700:	e785      	b.n	800d60e <__kernel_rem_pio2+0x27e>
 800d702:	3401      	adds	r4, #1
 800d704:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d708:	2a00      	cmp	r2, #0
 800d70a:	d0fa      	beq.n	800d702 <__kernel_rem_pio2+0x372>
 800d70c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d70e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d712:	eb0d 0503 	add.w	r5, sp, r3
 800d716:	9b06      	ldr	r3, [sp, #24]
 800d718:	aa20      	add	r2, sp, #128	@ 0x80
 800d71a:	4443      	add	r3, r8
 800d71c:	f108 0701 	add.w	r7, r8, #1
 800d720:	3d98      	subs	r5, #152	@ 0x98
 800d722:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d726:	4444      	add	r4, r8
 800d728:	42bc      	cmp	r4, r7
 800d72a:	da04      	bge.n	800d736 <__kernel_rem_pio2+0x3a6>
 800d72c:	46a0      	mov	r8, r4
 800d72e:	e6a2      	b.n	800d476 <__kernel_rem_pio2+0xe6>
 800d730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d732:	2401      	movs	r4, #1
 800d734:	e7e6      	b.n	800d704 <__kernel_rem_pio2+0x374>
 800d736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d738:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d73c:	f7f2 ff12 	bl	8000564 <__aeabi_i2d>
 800d740:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800da00 <__kernel_rem_pio2+0x670>
 800d744:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d748:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d74c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d750:	46b2      	mov	sl, r6
 800d752:	f04f 0800 	mov.w	r8, #0
 800d756:	9b05      	ldr	r3, [sp, #20]
 800d758:	4598      	cmp	r8, r3
 800d75a:	dd05      	ble.n	800d768 <__kernel_rem_pio2+0x3d8>
 800d75c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d760:	3701      	adds	r7, #1
 800d762:	eca5 7b02 	vstmia	r5!, {d7}
 800d766:	e7df      	b.n	800d728 <__kernel_rem_pio2+0x398>
 800d768:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d76c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d770:	f7f2 ff62 	bl	8000638 <__aeabi_dmul>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d77c:	f7f2 fda6 	bl	80002cc <__adddf3>
 800d780:	f108 0801 	add.w	r8, r8, #1
 800d784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d788:	e7e5      	b.n	800d756 <__kernel_rem_pio2+0x3c6>
 800d78a:	f1cb 0000 	rsb	r0, fp, #0
 800d78e:	ec47 6b10 	vmov	d0, r6, r7
 800d792:	f000 f94d 	bl	800da30 <scalbn>
 800d796:	ec55 4b10 	vmov	r4, r5, d0
 800d79a:	4b9b      	ldr	r3, [pc, #620]	@ (800da08 <__kernel_rem_pio2+0x678>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	4620      	mov	r0, r4
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	f7f3 f9cf 	bl	8000b44 <__aeabi_dcmpge>
 800d7a6:	b300      	cbz	r0, 800d7ea <__kernel_rem_pio2+0x45a>
 800d7a8:	4b98      	ldr	r3, [pc, #608]	@ (800da0c <__kernel_rem_pio2+0x67c>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	4629      	mov	r1, r5
 800d7b0:	f7f2 ff42 	bl	8000638 <__aeabi_dmul>
 800d7b4:	f7f3 f9f0 	bl	8000b98 <__aeabi_d2iz>
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	f7f2 fed3 	bl	8000564 <__aeabi_i2d>
 800d7be:	4b92      	ldr	r3, [pc, #584]	@ (800da08 <__kernel_rem_pio2+0x678>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f7f2 ff39 	bl	8000638 <__aeabi_dmul>
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f7f2 fd7b 	bl	80002c8 <__aeabi_dsub>
 800d7d2:	f7f3 f9e1 	bl	8000b98 <__aeabi_d2iz>
 800d7d6:	ab0c      	add	r3, sp, #48	@ 0x30
 800d7d8:	f10b 0b18 	add.w	fp, fp, #24
 800d7dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d7e0:	f108 0801 	add.w	r8, r8, #1
 800d7e4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d7e8:	e720      	b.n	800d62c <__kernel_rem_pio2+0x29c>
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	f7f3 f9d3 	bl	8000b98 <__aeabi_d2iz>
 800d7f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800d7f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d7f8:	e718      	b.n	800d62c <__kernel_rem_pio2+0x29c>
 800d7fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800d7fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d800:	f7f2 feb0 	bl	8000564 <__aeabi_i2d>
 800d804:	4622      	mov	r2, r4
 800d806:	462b      	mov	r3, r5
 800d808:	f7f2 ff16 	bl	8000638 <__aeabi_dmul>
 800d80c:	4652      	mov	r2, sl
 800d80e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d812:	465b      	mov	r3, fp
 800d814:	4620      	mov	r0, r4
 800d816:	4629      	mov	r1, r5
 800d818:	f7f2 ff0e 	bl	8000638 <__aeabi_dmul>
 800d81c:	3e01      	subs	r6, #1
 800d81e:	4604      	mov	r4, r0
 800d820:	460d      	mov	r5, r1
 800d822:	e716      	b.n	800d652 <__kernel_rem_pio2+0x2c2>
 800d824:	9906      	ldr	r1, [sp, #24]
 800d826:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d82a:	9106      	str	r1, [sp, #24]
 800d82c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d830:	f7f2 ff02 	bl	8000638 <__aeabi_dmul>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	4650      	mov	r0, sl
 800d83a:	4659      	mov	r1, fp
 800d83c:	f7f2 fd46 	bl	80002cc <__adddf3>
 800d840:	3601      	adds	r6, #1
 800d842:	4682      	mov	sl, r0
 800d844:	468b      	mov	fp, r1
 800d846:	9b00      	ldr	r3, [sp, #0]
 800d848:	429e      	cmp	r6, r3
 800d84a:	dc01      	bgt.n	800d850 <__kernel_rem_pio2+0x4c0>
 800d84c:	42ae      	cmp	r6, r5
 800d84e:	dde9      	ble.n	800d824 <__kernel_rem_pio2+0x494>
 800d850:	ab48      	add	r3, sp, #288	@ 0x120
 800d852:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d856:	e9c5 ab00 	strd	sl, fp, [r5]
 800d85a:	3c01      	subs	r4, #1
 800d85c:	e6fd      	b.n	800d65a <__kernel_rem_pio2+0x2ca>
 800d85e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d860:	2b02      	cmp	r3, #2
 800d862:	dc0b      	bgt.n	800d87c <__kernel_rem_pio2+0x4ec>
 800d864:	2b00      	cmp	r3, #0
 800d866:	dc35      	bgt.n	800d8d4 <__kernel_rem_pio2+0x544>
 800d868:	d059      	beq.n	800d91e <__kernel_rem_pio2+0x58e>
 800d86a:	9b02      	ldr	r3, [sp, #8]
 800d86c:	f003 0007 	and.w	r0, r3, #7
 800d870:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d874:	ecbd 8b02 	vpop	{d8}
 800d878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d87e:	2b03      	cmp	r3, #3
 800d880:	d1f3      	bne.n	800d86a <__kernel_rem_pio2+0x4da>
 800d882:	9b05      	ldr	r3, [sp, #20]
 800d884:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d888:	eb0d 0403 	add.w	r4, sp, r3
 800d88c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d890:	4625      	mov	r5, r4
 800d892:	46c2      	mov	sl, r8
 800d894:	f1ba 0f00 	cmp.w	sl, #0
 800d898:	dc69      	bgt.n	800d96e <__kernel_rem_pio2+0x5de>
 800d89a:	4645      	mov	r5, r8
 800d89c:	2d01      	cmp	r5, #1
 800d89e:	f300 8087 	bgt.w	800d9b0 <__kernel_rem_pio2+0x620>
 800d8a2:	9c05      	ldr	r4, [sp, #20]
 800d8a4:	ab48      	add	r3, sp, #288	@ 0x120
 800d8a6:	441c      	add	r4, r3
 800d8a8:	2000      	movs	r0, #0
 800d8aa:	2100      	movs	r1, #0
 800d8ac:	f1b8 0f01 	cmp.w	r8, #1
 800d8b0:	f300 809c 	bgt.w	800d9ec <__kernel_rem_pio2+0x65c>
 800d8b4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800d8b8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800d8bc:	f1b9 0f00 	cmp.w	r9, #0
 800d8c0:	f040 80a6 	bne.w	800da10 <__kernel_rem_pio2+0x680>
 800d8c4:	9b04      	ldr	r3, [sp, #16]
 800d8c6:	e9c3 5600 	strd	r5, r6, [r3]
 800d8ca:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d8ce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d8d2:	e7ca      	b.n	800d86a <__kernel_rem_pio2+0x4da>
 800d8d4:	9d05      	ldr	r5, [sp, #20]
 800d8d6:	ab48      	add	r3, sp, #288	@ 0x120
 800d8d8:	441d      	add	r5, r3
 800d8da:	4644      	mov	r4, r8
 800d8dc:	2000      	movs	r0, #0
 800d8de:	2100      	movs	r1, #0
 800d8e0:	2c00      	cmp	r4, #0
 800d8e2:	da35      	bge.n	800d950 <__kernel_rem_pio2+0x5c0>
 800d8e4:	f1b9 0f00 	cmp.w	r9, #0
 800d8e8:	d038      	beq.n	800d95c <__kernel_rem_pio2+0x5cc>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d8f0:	9c04      	ldr	r4, [sp, #16]
 800d8f2:	e9c4 2300 	strd	r2, r3, [r4]
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d8fe:	f7f2 fce3 	bl	80002c8 <__aeabi_dsub>
 800d902:	ad4a      	add	r5, sp, #296	@ 0x128
 800d904:	2401      	movs	r4, #1
 800d906:	45a0      	cmp	r8, r4
 800d908:	da2b      	bge.n	800d962 <__kernel_rem_pio2+0x5d2>
 800d90a:	f1b9 0f00 	cmp.w	r9, #0
 800d90e:	d002      	beq.n	800d916 <__kernel_rem_pio2+0x586>
 800d910:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d914:	4619      	mov	r1, r3
 800d916:	9b04      	ldr	r3, [sp, #16]
 800d918:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d91c:	e7a5      	b.n	800d86a <__kernel_rem_pio2+0x4da>
 800d91e:	9c05      	ldr	r4, [sp, #20]
 800d920:	ab48      	add	r3, sp, #288	@ 0x120
 800d922:	441c      	add	r4, r3
 800d924:	2000      	movs	r0, #0
 800d926:	2100      	movs	r1, #0
 800d928:	f1b8 0f00 	cmp.w	r8, #0
 800d92c:	da09      	bge.n	800d942 <__kernel_rem_pio2+0x5b2>
 800d92e:	f1b9 0f00 	cmp.w	r9, #0
 800d932:	d002      	beq.n	800d93a <__kernel_rem_pio2+0x5aa>
 800d934:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d938:	4619      	mov	r1, r3
 800d93a:	9b04      	ldr	r3, [sp, #16]
 800d93c:	e9c3 0100 	strd	r0, r1, [r3]
 800d940:	e793      	b.n	800d86a <__kernel_rem_pio2+0x4da>
 800d942:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d946:	f7f2 fcc1 	bl	80002cc <__adddf3>
 800d94a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d94e:	e7eb      	b.n	800d928 <__kernel_rem_pio2+0x598>
 800d950:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d954:	f7f2 fcba 	bl	80002cc <__adddf3>
 800d958:	3c01      	subs	r4, #1
 800d95a:	e7c1      	b.n	800d8e0 <__kernel_rem_pio2+0x550>
 800d95c:	4602      	mov	r2, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	e7c6      	b.n	800d8f0 <__kernel_rem_pio2+0x560>
 800d962:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d966:	f7f2 fcb1 	bl	80002cc <__adddf3>
 800d96a:	3401      	adds	r4, #1
 800d96c:	e7cb      	b.n	800d906 <__kernel_rem_pio2+0x576>
 800d96e:	ed35 7b02 	vldmdb	r5!, {d7}
 800d972:	ed8d 7b00 	vstr	d7, [sp]
 800d976:	ed95 7b02 	vldr	d7, [r5, #8]
 800d97a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d97e:	ec53 2b17 	vmov	r2, r3, d7
 800d982:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d986:	f7f2 fca1 	bl	80002cc <__adddf3>
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	4606      	mov	r6, r0
 800d990:	460f      	mov	r7, r1
 800d992:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d996:	f7f2 fc97 	bl	80002c8 <__aeabi_dsub>
 800d99a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d99e:	f7f2 fc95 	bl	80002cc <__adddf3>
 800d9a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9a6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d9aa:	e9c5 6700 	strd	r6, r7, [r5]
 800d9ae:	e771      	b.n	800d894 <__kernel_rem_pio2+0x504>
 800d9b0:	ed34 7b02 	vldmdb	r4!, {d7}
 800d9b4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d9b8:	ec51 0b17 	vmov	r0, r1, d7
 800d9bc:	4652      	mov	r2, sl
 800d9be:	465b      	mov	r3, fp
 800d9c0:	ed8d 7b00 	vstr	d7, [sp]
 800d9c4:	f7f2 fc82 	bl	80002cc <__adddf3>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4606      	mov	r6, r0
 800d9ce:	460f      	mov	r7, r1
 800d9d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9d4:	f7f2 fc78 	bl	80002c8 <__aeabi_dsub>
 800d9d8:	4652      	mov	r2, sl
 800d9da:	465b      	mov	r3, fp
 800d9dc:	f7f2 fc76 	bl	80002cc <__adddf3>
 800d9e0:	3d01      	subs	r5, #1
 800d9e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d9e6:	e9c4 6700 	strd	r6, r7, [r4]
 800d9ea:	e757      	b.n	800d89c <__kernel_rem_pio2+0x50c>
 800d9ec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d9f0:	f7f2 fc6c 	bl	80002cc <__adddf3>
 800d9f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800d9f8:	e758      	b.n	800d8ac <__kernel_rem_pio2+0x51c>
 800d9fa:	bf00      	nop
 800d9fc:	f3af 8000 	nop.w
	...
 800da08:	41700000 	.word	0x41700000
 800da0c:	3e700000 	.word	0x3e700000
 800da10:	9b04      	ldr	r3, [sp, #16]
 800da12:	9a04      	ldr	r2, [sp, #16]
 800da14:	601d      	str	r5, [r3, #0]
 800da16:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800da1a:	605c      	str	r4, [r3, #4]
 800da1c:	609f      	str	r7, [r3, #8]
 800da1e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800da22:	60d3      	str	r3, [r2, #12]
 800da24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da28:	6110      	str	r0, [r2, #16]
 800da2a:	6153      	str	r3, [r2, #20]
 800da2c:	e71d      	b.n	800d86a <__kernel_rem_pio2+0x4da>
 800da2e:	bf00      	nop

0800da30 <scalbn>:
 800da30:	b570      	push	{r4, r5, r6, lr}
 800da32:	ec55 4b10 	vmov	r4, r5, d0
 800da36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800da3a:	4606      	mov	r6, r0
 800da3c:	462b      	mov	r3, r5
 800da3e:	b991      	cbnz	r1, 800da66 <scalbn+0x36>
 800da40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800da44:	4323      	orrs	r3, r4
 800da46:	d03b      	beq.n	800dac0 <scalbn+0x90>
 800da48:	4b33      	ldr	r3, [pc, #204]	@ (800db18 <scalbn+0xe8>)
 800da4a:	4620      	mov	r0, r4
 800da4c:	4629      	mov	r1, r5
 800da4e:	2200      	movs	r2, #0
 800da50:	f7f2 fdf2 	bl	8000638 <__aeabi_dmul>
 800da54:	4b31      	ldr	r3, [pc, #196]	@ (800db1c <scalbn+0xec>)
 800da56:	429e      	cmp	r6, r3
 800da58:	4604      	mov	r4, r0
 800da5a:	460d      	mov	r5, r1
 800da5c:	da0f      	bge.n	800da7e <scalbn+0x4e>
 800da5e:	a326      	add	r3, pc, #152	@ (adr r3, 800daf8 <scalbn+0xc8>)
 800da60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da64:	e01e      	b.n	800daa4 <scalbn+0x74>
 800da66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800da6a:	4291      	cmp	r1, r2
 800da6c:	d10b      	bne.n	800da86 <scalbn+0x56>
 800da6e:	4622      	mov	r2, r4
 800da70:	4620      	mov	r0, r4
 800da72:	4629      	mov	r1, r5
 800da74:	f7f2 fc2a 	bl	80002cc <__adddf3>
 800da78:	4604      	mov	r4, r0
 800da7a:	460d      	mov	r5, r1
 800da7c:	e020      	b.n	800dac0 <scalbn+0x90>
 800da7e:	460b      	mov	r3, r1
 800da80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800da84:	3936      	subs	r1, #54	@ 0x36
 800da86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800da8a:	4296      	cmp	r6, r2
 800da8c:	dd0d      	ble.n	800daaa <scalbn+0x7a>
 800da8e:	2d00      	cmp	r5, #0
 800da90:	a11b      	add	r1, pc, #108	@ (adr r1, 800db00 <scalbn+0xd0>)
 800da92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da96:	da02      	bge.n	800da9e <scalbn+0x6e>
 800da98:	a11b      	add	r1, pc, #108	@ (adr r1, 800db08 <scalbn+0xd8>)
 800da9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da9e:	a318      	add	r3, pc, #96	@ (adr r3, 800db00 <scalbn+0xd0>)
 800daa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa4:	f7f2 fdc8 	bl	8000638 <__aeabi_dmul>
 800daa8:	e7e6      	b.n	800da78 <scalbn+0x48>
 800daaa:	1872      	adds	r2, r6, r1
 800daac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800dab0:	428a      	cmp	r2, r1
 800dab2:	dcec      	bgt.n	800da8e <scalbn+0x5e>
 800dab4:	2a00      	cmp	r2, #0
 800dab6:	dd06      	ble.n	800dac6 <scalbn+0x96>
 800dab8:	f36f 531e 	bfc	r3, #20, #11
 800dabc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dac0:	ec45 4b10 	vmov	d0, r4, r5
 800dac4:	bd70      	pop	{r4, r5, r6, pc}
 800dac6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800daca:	da08      	bge.n	800dade <scalbn+0xae>
 800dacc:	2d00      	cmp	r5, #0
 800dace:	a10a      	add	r1, pc, #40	@ (adr r1, 800daf8 <scalbn+0xc8>)
 800dad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dad4:	dac3      	bge.n	800da5e <scalbn+0x2e>
 800dad6:	a10e      	add	r1, pc, #56	@ (adr r1, 800db10 <scalbn+0xe0>)
 800dad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dadc:	e7bf      	b.n	800da5e <scalbn+0x2e>
 800dade:	3236      	adds	r2, #54	@ 0x36
 800dae0:	f36f 531e 	bfc	r3, #20, #11
 800dae4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dae8:	4620      	mov	r0, r4
 800daea:	4b0d      	ldr	r3, [pc, #52]	@ (800db20 <scalbn+0xf0>)
 800daec:	4629      	mov	r1, r5
 800daee:	2200      	movs	r2, #0
 800daf0:	e7d8      	b.n	800daa4 <scalbn+0x74>
 800daf2:	bf00      	nop
 800daf4:	f3af 8000 	nop.w
 800daf8:	c2f8f359 	.word	0xc2f8f359
 800dafc:	01a56e1f 	.word	0x01a56e1f
 800db00:	8800759c 	.word	0x8800759c
 800db04:	7e37e43c 	.word	0x7e37e43c
 800db08:	8800759c 	.word	0x8800759c
 800db0c:	fe37e43c 	.word	0xfe37e43c
 800db10:	c2f8f359 	.word	0xc2f8f359
 800db14:	81a56e1f 	.word	0x81a56e1f
 800db18:	43500000 	.word	0x43500000
 800db1c:	ffff3cb0 	.word	0xffff3cb0
 800db20:	3c900000 	.word	0x3c900000
 800db24:	00000000 	.word	0x00000000

0800db28 <floor>:
 800db28:	ec51 0b10 	vmov	r0, r1, d0
 800db2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db34:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800db38:	2e13      	cmp	r6, #19
 800db3a:	460c      	mov	r4, r1
 800db3c:	4605      	mov	r5, r0
 800db3e:	4680      	mov	r8, r0
 800db40:	dc34      	bgt.n	800dbac <floor+0x84>
 800db42:	2e00      	cmp	r6, #0
 800db44:	da17      	bge.n	800db76 <floor+0x4e>
 800db46:	a332      	add	r3, pc, #200	@ (adr r3, 800dc10 <floor+0xe8>)
 800db48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4c:	f7f2 fbbe 	bl	80002cc <__adddf3>
 800db50:	2200      	movs	r2, #0
 800db52:	2300      	movs	r3, #0
 800db54:	f7f3 f800 	bl	8000b58 <__aeabi_dcmpgt>
 800db58:	b150      	cbz	r0, 800db70 <floor+0x48>
 800db5a:	2c00      	cmp	r4, #0
 800db5c:	da55      	bge.n	800dc0a <floor+0xe2>
 800db5e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800db62:	432c      	orrs	r4, r5
 800db64:	2500      	movs	r5, #0
 800db66:	42ac      	cmp	r4, r5
 800db68:	4c2b      	ldr	r4, [pc, #172]	@ (800dc18 <floor+0xf0>)
 800db6a:	bf08      	it	eq
 800db6c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800db70:	4621      	mov	r1, r4
 800db72:	4628      	mov	r0, r5
 800db74:	e023      	b.n	800dbbe <floor+0x96>
 800db76:	4f29      	ldr	r7, [pc, #164]	@ (800dc1c <floor+0xf4>)
 800db78:	4137      	asrs	r7, r6
 800db7a:	ea01 0307 	and.w	r3, r1, r7
 800db7e:	4303      	orrs	r3, r0
 800db80:	d01d      	beq.n	800dbbe <floor+0x96>
 800db82:	a323      	add	r3, pc, #140	@ (adr r3, 800dc10 <floor+0xe8>)
 800db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db88:	f7f2 fba0 	bl	80002cc <__adddf3>
 800db8c:	2200      	movs	r2, #0
 800db8e:	2300      	movs	r3, #0
 800db90:	f7f2 ffe2 	bl	8000b58 <__aeabi_dcmpgt>
 800db94:	2800      	cmp	r0, #0
 800db96:	d0eb      	beq.n	800db70 <floor+0x48>
 800db98:	2c00      	cmp	r4, #0
 800db9a:	bfbe      	ittt	lt
 800db9c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800dba0:	4133      	asrlt	r3, r6
 800dba2:	18e4      	addlt	r4, r4, r3
 800dba4:	ea24 0407 	bic.w	r4, r4, r7
 800dba8:	2500      	movs	r5, #0
 800dbaa:	e7e1      	b.n	800db70 <floor+0x48>
 800dbac:	2e33      	cmp	r6, #51	@ 0x33
 800dbae:	dd0a      	ble.n	800dbc6 <floor+0x9e>
 800dbb0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800dbb4:	d103      	bne.n	800dbbe <floor+0x96>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	f7f2 fb87 	bl	80002cc <__adddf3>
 800dbbe:	ec41 0b10 	vmov	d0, r0, r1
 800dbc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800dbca:	f04f 37ff 	mov.w	r7, #4294967295
 800dbce:	40df      	lsrs	r7, r3
 800dbd0:	4207      	tst	r7, r0
 800dbd2:	d0f4      	beq.n	800dbbe <floor+0x96>
 800dbd4:	a30e      	add	r3, pc, #56	@ (adr r3, 800dc10 <floor+0xe8>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	f7f2 fb77 	bl	80002cc <__adddf3>
 800dbde:	2200      	movs	r2, #0
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	f7f2 ffb9 	bl	8000b58 <__aeabi_dcmpgt>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d0c2      	beq.n	800db70 <floor+0x48>
 800dbea:	2c00      	cmp	r4, #0
 800dbec:	da0a      	bge.n	800dc04 <floor+0xdc>
 800dbee:	2e14      	cmp	r6, #20
 800dbf0:	d101      	bne.n	800dbf6 <floor+0xce>
 800dbf2:	3401      	adds	r4, #1
 800dbf4:	e006      	b.n	800dc04 <floor+0xdc>
 800dbf6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	40b3      	lsls	r3, r6
 800dbfe:	441d      	add	r5, r3
 800dc00:	4545      	cmp	r5, r8
 800dc02:	d3f6      	bcc.n	800dbf2 <floor+0xca>
 800dc04:	ea25 0507 	bic.w	r5, r5, r7
 800dc08:	e7b2      	b.n	800db70 <floor+0x48>
 800dc0a:	2500      	movs	r5, #0
 800dc0c:	462c      	mov	r4, r5
 800dc0e:	e7af      	b.n	800db70 <floor+0x48>
 800dc10:	8800759c 	.word	0x8800759c
 800dc14:	7e37e43c 	.word	0x7e37e43c
 800dc18:	bff00000 	.word	0xbff00000
 800dc1c:	000fffff 	.word	0x000fffff

0800dc20 <_init>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	bf00      	nop
 800dc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc26:	bc08      	pop	{r3}
 800dc28:	469e      	mov	lr, r3
 800dc2a:	4770      	bx	lr

0800dc2c <_fini>:
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2e:	bf00      	nop
 800dc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc32:	bc08      	pop	{r3}
 800dc34:	469e      	mov	lr, r3
 800dc36:	4770      	bx	lr
